(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('crypto'), require('websocket'), require('http'), require('https'), require('os'), require('url'), require('buffer'), require('util'), require('vm'), require('assert'), require('stream'), require('scrypt'), require('fs'), require('constants'), require('path'), require('events'), require('tar'), require('zlib'), require('got'), require('querystring'), require('child_process'), require('assets/close-button.svg'), require('oidc-client')) :
  typeof define === 'function' && define.amd ? define(['exports', 'crypto', 'websocket', 'http', 'https', 'os', 'url', 'buffer', 'util', 'vm', 'assert', 'stream', 'scrypt', 'fs', 'constants', 'path', 'events', 'tar', 'zlib', 'got', 'querystring', 'child_process', 'assets/close-button.svg', 'oidc-client'], factory) :
  (factory((global.bitski = {}),global.crypto,global.websocket,global.http,global.https,global.os,global.url,global.buffer,global.util,global.vm,global.assert,global.require$$0,global.scrypt,global.fs,global.constants,global.path,global.events,global.tar,global.zlib,global.got,global.querystring,global.child_process,global.closeSVG,global.oidcClient));
}(this, (function (exports,crypto,websocket,http,https,os,url,buffer,util,vm,assert,require$$0,scrypt,fs,constants,path,events,tar,zlib,got,querystring,child_process,closeSVG,oidcClient) { 'use strict';

  crypto = crypto && crypto.hasOwnProperty('default') ? crypto['default'] : crypto;
  websocket = websocket && websocket.hasOwnProperty('default') ? websocket['default'] : websocket;
  http = http && http.hasOwnProperty('default') ? http['default'] : http;
  https = https && https.hasOwnProperty('default') ? https['default'] : https;
  os = os && os.hasOwnProperty('default') ? os['default'] : os;
  url = url && url.hasOwnProperty('default') ? url['default'] : url;
  buffer = buffer && buffer.hasOwnProperty('default') ? buffer['default'] : buffer;
  util = util && util.hasOwnProperty('default') ? util['default'] : util;
  vm = vm && vm.hasOwnProperty('default') ? vm['default'] : vm;
  assert = assert && assert.hasOwnProperty('default') ? assert['default'] : assert;
  require$$0 = require$$0 && require$$0.hasOwnProperty('default') ? require$$0['default'] : require$$0;
  scrypt = scrypt && scrypt.hasOwnProperty('default') ? scrypt['default'] : scrypt;
  fs = fs && fs.hasOwnProperty('default') ? fs['default'] : fs;
  constants = constants && constants.hasOwnProperty('default') ? constants['default'] : constants;
  path = path && path.hasOwnProperty('default') ? path['default'] : path;
  events = events && events.hasOwnProperty('default') ? events['default'] : events;
  tar = tar && tar.hasOwnProperty('default') ? tar['default'] : tar;
  zlib = zlib && zlib.hasOwnProperty('default') ? zlib['default'] : zlib;
  got = got && got.hasOwnProperty('default') ? got['default'] : got;
  querystring = querystring && querystring.hasOwnProperty('default') ? querystring['default'] : querystring;
  child_process = child_process && child_process.hasOwnProperty('default') ? child_process['default'] : child_process;
  closeSVG = closeSVG && closeSVG.hasOwnProperty('default') ? closeSVG['default'] : closeSVG;

  var _from = "web3@^1.0.0-beta.33";
  var _id = "web3@1.0.0-beta.33";
  var _inBundle = false;
  var _integrity = "sha1-xgIbV2mSdyY3HBhLhoRFMRsTkpU=";
  var _location = "/web3";
  var _phantomChildren = {};
  var _requested = {"type":"range","registry":true,"raw":"web3@^1.0.0-beta.33","name":"web3","escapedName":"web3","rawSpec":"^1.0.0-beta.33","saveSpec":null,"fetchSpec":"^1.0.0-beta.33"};
  var _requiredBy = ["/"];
  var _resolved = "https://registry.npmjs.org/web3/-/web3-1.0.0-beta.33.tgz";
  var _shasum = "c6021b5769927726371c184b868445311b139295";
  var _spec = "web3@^1.0.0-beta.33";
  var _where = "/Users/ptescher/Development/BitskiCo/bitski-js-sdk";
  var author = {"name":"ethereum.org"};
  var authors = [{"name":"Fabian Vogelsteller","email":"fabian@ethereum.org","homepage":"http://frozeman.de"},{"name":"Marek Kotewicz","email":"marek@parity.io","url":"https://github.com/debris"},{"name":"Marian Oancea","url":"https://github.com/cubedro"},{"name":"Gav Wood","email":"g@parity.io","homepage":"http://gavwood.com"},{"name":"Jeffery Wilcke","email":"jeffrey.wilcke@ethereum.org","url":"https://github.com/obscuren"}];
  var bugs = {"url":"https://github.com/ethereum/web3.js/issues"};
  var bundleDependencies = false;
  var dependencies = {"web3-bzz":"1.0.0-beta.33","web3-core":"1.0.0-beta.33","web3-eth":"1.0.0-beta.33","web3-eth-personal":"1.0.0-beta.33","web3-net":"1.0.0-beta.33","web3-shh":"1.0.0-beta.33","web3-utils":"1.0.0-beta.33"};
  var deprecated = false;
  var description = "Ethereum JavaScript API";
  var keywords = ["Ethereum","JavaScript","API"];
  var license = "LGPL-3.0";
  var main = "src/index.js";
  var name$1 = "web3";
  var namespace = "ethereum";
  var repository = {"type":"git","url":"https://github.com/ethereum/web3.js/tree/master/packages/web3"};
  var types = "index.d.ts";
  var version = "1.0.0-beta.33";
  var _package = {
  	_from: _from,
  	_id: _id,
  	_inBundle: _inBundle,
  	_integrity: _integrity,
  	_location: _location,
  	_phantomChildren: _phantomChildren,
  	_requested: _requested,
  	_requiredBy: _requiredBy,
  	_resolved: _resolved,
  	_shasum: _shasum,
  	_spec: _spec,
  	_where: _where,
  	author: author,
  	authors: authors,
  	bugs: bugs,
  	bundleDependencies: bundleDependencies,
  	dependencies: dependencies,
  	deprecated: deprecated,
  	description: description,
  	keywords: keywords,
  	license: license,
  	main: main,
  	name: name$1,
  	namespace: namespace,
  	repository: repository,
  	types: types,
  	version: version
  };

  var _package$1 = /*#__PURE__*/Object.freeze({
    _from: _from,
    _id: _id,
    _inBundle: _inBundle,
    _integrity: _integrity,
    _location: _location,
    _phantomChildren: _phantomChildren,
    _requested: _requested,
    _requiredBy: _requiredBy,
    _resolved: _resolved,
    _shasum: _shasum,
    _spec: _spec,
    _where: _where,
    author: author,
    authors: authors,
    bugs: bugs,
    bundleDependencies: bundleDependencies,
    dependencies: dependencies,
    deprecated: deprecated,
    description: description,
    keywords: keywords,
    license: license,
    main: main,
    name: name$1,
    namespace: namespace,
    repository: repository,
    types: types,
    version: version,
    default: _package
  });

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var underscore = createCommonjsModule(function (module, exports) {
  //     Underscore.js 1.8.3
  //     http://underscorejs.org
  //     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
  //     Underscore may be freely distributed under the MIT license.

  (function() {

    // Baseline setup
    // --------------

    // Establish the root object, `window` in the browser, or `exports` on the server.
    var root = this;

    // Save the previous value of the `_` variable.
    var previousUnderscore = root._;

    // Save bytes in the minified (but not gzipped) version:
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

    // Create quick reference variables for speed access to core prototypes.
    var
      push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

    // All **ECMAScript 5** native function implementations that we hope to use
    // are declared here.
    var
      nativeIsArray      = Array.isArray,
      nativeKeys         = Object.keys,
      nativeBind         = FuncProto.bind,
      nativeCreate       = Object.create;

    // Naked function reference for surrogate-prototype-swapping.
    var Ctor = function(){};

    // Create a safe reference to the Underscore object for use below.
    var _ = function(obj) {
      if (obj instanceof _) return obj;
      if (!(this instanceof _)) return new _(obj);
      this._wrapped = obj;
    };

    // Export the Underscore object for **Node.js**, with
    // backwards-compatibility for the old `require()` API. If we're in
    // the browser, add `_` as a global object.
    {
      if ('object' !== 'undefined' && module.exports) {
        exports = module.exports = _;
      }
      exports._ = _;
    }

    // Current version.
    _.VERSION = '1.8.3';

    // Internal function that returns an efficient (for current engines) version
    // of the passed-in callback, to be repeatedly applied in other Underscore
    // functions.
    var optimizeCb = function(func, context, argCount) {
      if (context === void 0) return func;
      switch (argCount == null ? 3 : argCount) {
        case 1: return function(value) {
          return func.call(context, value);
        };
        case 2: return function(value, other) {
          return func.call(context, value, other);
        };
        case 3: return function(value, index, collection) {
          return func.call(context, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(context, accumulator, value, index, collection);
        };
      }
      return function() {
        return func.apply(context, arguments);
      };
    };

    // A mostly-internal function to generate callbacks that can be applied
    // to each element in a collection, returning the desired result â€” either
    // identity, an arbitrary callback, a property matcher, or a property accessor.
    var cb = function(value, context, argCount) {
      if (value == null) return _.identity;
      if (_.isFunction(value)) return optimizeCb(value, context, argCount);
      if (_.isObject(value)) return _.matcher(value);
      return _.property(value);
    };
    _.iteratee = function(value, context) {
      return cb(value, context, Infinity);
    };

    // An internal function for creating assigner functions.
    var createAssigner = function(keysFunc, undefinedOnly) {
      return function(obj) {
        var length = arguments.length;
        if (length < 2 || obj == null) return obj;
        for (var index = 1; index < length; index++) {
          var source = arguments[index],
              keys = keysFunc(source),
              l = keys.length;
          for (var i = 0; i < l; i++) {
            var key = keys[i];
            if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
          }
        }
        return obj;
      };
    };

    // An internal function for creating a new object that inherits from another.
    var baseCreate = function(prototype) {
      if (!_.isObject(prototype)) return {};
      if (nativeCreate) return nativeCreate(prototype);
      Ctor.prototype = prototype;
      var result = new Ctor;
      Ctor.prototype = null;
      return result;
    };

    var property = function(key) {
      return function(obj) {
        return obj == null ? void 0 : obj[key];
      };
    };

    // Helper for collection methods to determine whether a collection
    // should be iterated as an array or as an object
    // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
    // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    var getLength = property('length');
    var isArrayLike = function(collection) {
      var length = getLength(collection);
      return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
    };

    // Collection Functions
    // --------------------

    // The cornerstone, an `each` implementation, aka `forEach`.
    // Handles raw objects in addition to array-likes. Treats all
    // sparse array-likes as if they were dense.
    _.each = _.forEach = function(obj, iteratee, context) {
      iteratee = optimizeCb(iteratee, context);
      var i, length;
      if (isArrayLike(obj)) {
        for (i = 0, length = obj.length; i < length; i++) {
          iteratee(obj[i], i, obj);
        }
      } else {
        var keys = _.keys(obj);
        for (i = 0, length = keys.length; i < length; i++) {
          iteratee(obj[keys[i]], keys[i], obj);
        }
      }
      return obj;
    };

    // Return the results of applying the iteratee to each element.
    _.map = _.collect = function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          results = Array(length);
      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        results[index] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
    };

    // Create a reducing function iterating left or right.
    function createReduce(dir) {
      // Optimized iterator function as using arguments.length
      // in the main function will deoptimize the, see #1991.
      function iterator(obj, iteratee, memo, keys, index, length) {
        for (; index >= 0 && index < length; index += dir) {
          var currentKey = keys ? keys[index] : index;
          memo = iteratee(memo, obj[currentKey], currentKey, obj);
        }
        return memo;
      }

      return function(obj, iteratee, memo, context) {
        iteratee = optimizeCb(iteratee, context, 4);
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length,
            index = dir > 0 ? 0 : length - 1;
        // Determine the initial value if none is provided.
        if (arguments.length < 3) {
          memo = obj[keys ? keys[index] : index];
          index += dir;
        }
        return iterator(obj, iteratee, memo, keys, index, length);
      };
    }

    // **Reduce** builds up a single result from a list of values, aka `inject`,
    // or `foldl`.
    _.reduce = _.foldl = _.inject = createReduce(1);

    // The right-associative version of reduce, also known as `foldr`.
    _.reduceRight = _.foldr = createReduce(-1);

    // Return the first value which passes a truth test. Aliased as `detect`.
    _.find = _.detect = function(obj, predicate, context) {
      var key;
      if (isArrayLike(obj)) {
        key = _.findIndex(obj, predicate, context);
      } else {
        key = _.findKey(obj, predicate, context);
      }
      if (key !== void 0 && key !== -1) return obj[key];
    };

    // Return all the elements that pass a truth test.
    // Aliased as `select`.
    _.filter = _.select = function(obj, predicate, context) {
      var results = [];
      predicate = cb(predicate, context);
      _.each(obj, function(value, index, list) {
        if (predicate(value, index, list)) results.push(value);
      });
      return results;
    };

    // Return all the elements for which a truth test fails.
    _.reject = function(obj, predicate, context) {
      return _.filter(obj, _.negate(cb(predicate)), context);
    };

    // Determine whether all of the elements match a truth test.
    // Aliased as `all`.
    _.every = _.all = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (!predicate(obj[currentKey], currentKey, obj)) return false;
      }
      return true;
    };

    // Determine if at least one element in the object matches a truth test.
    // Aliased as `any`.
    _.some = _.any = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (predicate(obj[currentKey], currentKey, obj)) return true;
      }
      return false;
    };

    // Determine if the array or object contains a given item (using `===`).
    // Aliased as `includes` and `include`.
    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      if (typeof fromIndex != 'number' || guard) fromIndex = 0;
      return _.indexOf(obj, item, fromIndex) >= 0;
    };

    // Invoke a method (with arguments) on every item in a collection.
    _.invoke = function(obj, method) {
      var args = slice.call(arguments, 2);
      var isFunc = _.isFunction(method);
      return _.map(obj, function(value) {
        var func = isFunc ? method : value[method];
        return func == null ? func : func.apply(value, args);
      });
    };

    // Convenience version of a common use case of `map`: fetching a property.
    _.pluck = function(obj, key) {
      return _.map(obj, _.property(key));
    };

    // Convenience version of a common use case of `filter`: selecting only objects
    // containing specific `key:value` pairs.
    _.where = function(obj, attrs) {
      return _.filter(obj, _.matcher(attrs));
    };

    // Convenience version of a common use case of `find`: getting the first object
    // containing specific `key:value` pairs.
    _.findWhere = function(obj, attrs) {
      return _.find(obj, _.matcher(attrs));
    };

    // Return the maximum element (or element-based computation).
    _.max = function(obj, iteratee, context) {
      var result = -Infinity, lastComputed = -Infinity,
          value, computed;
      if (iteratee == null && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value > result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);
        _.each(obj, function(value, index, list) {
          computed = iteratee(value, index, list);
          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
            result = value;
            lastComputed = computed;
          }
        });
      }
      return result;
    };

    // Return the minimum element (or element-based computation).
    _.min = function(obj, iteratee, context) {
      var result = Infinity, lastComputed = Infinity,
          value, computed;
      if (iteratee == null && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value < result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);
        _.each(obj, function(value, index, list) {
          computed = iteratee(value, index, list);
          if (computed < lastComputed || computed === Infinity && result === Infinity) {
            result = value;
            lastComputed = computed;
          }
        });
      }
      return result;
    };

    // Shuffle a collection, using the modern version of the
    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisherâ€“Yates_shuffle).
    _.shuffle = function(obj) {
      var set = isArrayLike(obj) ? obj : _.values(obj);
      var length = set.length;
      var shuffled = Array(length);
      for (var index = 0, rand; index < length; index++) {
        rand = _.random(0, index);
        if (rand !== index) shuffled[index] = shuffled[rand];
        shuffled[rand] = set[index];
      }
      return shuffled;
    };

    // Sample **n** random values from a collection.
    // If **n** is not specified, returns a single random element.
    // The internal `guard` argument allows it to work with `map`.
    _.sample = function(obj, n, guard) {
      if (n == null || guard) {
        if (!isArrayLike(obj)) obj = _.values(obj);
        return obj[_.random(obj.length - 1)];
      }
      return _.shuffle(obj).slice(0, Math.max(0, n));
    };

    // Sort the object's values by a criterion produced by an iteratee.
    _.sortBy = function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      return _.pluck(_.map(obj, function(value, index, list) {
        return {
          value: value,
          index: index,
          criteria: iteratee(value, index, list)
        };
      }).sort(function(left, right) {
        var a = left.criteria;
        var b = right.criteria;
        if (a !== b) {
          if (a > b || a === void 0) return 1;
          if (a < b || b === void 0) return -1;
        }
        return left.index - right.index;
      }), 'value');
    };

    // An internal function used for aggregate "group by" operations.
    var group = function(behavior) {
      return function(obj, iteratee, context) {
        var result = {};
        iteratee = cb(iteratee, context);
        _.each(obj, function(value, index) {
          var key = iteratee(value, index, obj);
          behavior(result, value, key);
        });
        return result;
      };
    };

    // Groups the object's values by a criterion. Pass either a string attribute
    // to group by, or a function that returns the criterion.
    _.groupBy = group(function(result, value, key) {
      if (_.has(result, key)) result[key].push(value); else result[key] = [value];
    });

    // Indexes the object's values by a criterion, similar to `groupBy`, but for
    // when you know that your index values will be unique.
    _.indexBy = group(function(result, value, key) {
      result[key] = value;
    });

    // Counts instances of an object that group by a certain criterion. Pass
    // either a string attribute to count by, or a function that returns the
    // criterion.
    _.countBy = group(function(result, value, key) {
      if (_.has(result, key)) result[key]++; else result[key] = 1;
    });

    // Safely create a real, live array from anything iterable.
    _.toArray = function(obj) {
      if (!obj) return [];
      if (_.isArray(obj)) return slice.call(obj);
      if (isArrayLike(obj)) return _.map(obj, _.identity);
      return _.values(obj);
    };

    // Return the number of elements in an object.
    _.size = function(obj) {
      if (obj == null) return 0;
      return isArrayLike(obj) ? obj.length : _.keys(obj).length;
    };

    // Split a collection into two arrays: one whose elements all satisfy the given
    // predicate, and one whose elements all do not satisfy the predicate.
    _.partition = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var pass = [], fail = [];
      _.each(obj, function(value, key, obj) {
        (predicate(value, key, obj) ? pass : fail).push(value);
      });
      return [pass, fail];
    };

    // Array Functions
    // ---------------

    // Get the first element of an array. Passing **n** will return the first N
    // values in the array. Aliased as `head` and `take`. The **guard** check
    // allows it to work with `_.map`.
    _.first = _.head = _.take = function(array, n, guard) {
      if (array == null) return void 0;
      if (n == null || guard) return array[0];
      return _.initial(array, array.length - n);
    };

    // Returns everything but the last entry of the array. Especially useful on
    // the arguments object. Passing **n** will return all the values in
    // the array, excluding the last N.
    _.initial = function(array, n, guard) {
      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    };

    // Get the last element of an array. Passing **n** will return the last N
    // values in the array.
    _.last = function(array, n, guard) {
      if (array == null) return void 0;
      if (n == null || guard) return array[array.length - 1];
      return _.rest(array, Math.max(0, array.length - n));
    };

    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
    // Especially useful on the arguments object. Passing an **n** will return
    // the rest N values in the array.
    _.rest = _.tail = _.drop = function(array, n, guard) {
      return slice.call(array, n == null || guard ? 1 : n);
    };

    // Trim out all falsy values from an array.
    _.compact = function(array) {
      return _.filter(array, _.identity);
    };

    // Internal implementation of a recursive `flatten` function.
    var flatten = function(input, shallow, strict, startIndex) {
      var output = [], idx = 0;
      for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
        var value = input[i];
        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
          //flatten current level of array or arguments object
          if (!shallow) value = flatten(value, shallow, strict);
          var j = 0, len = value.length;
          output.length += len;
          while (j < len) {
            output[idx++] = value[j++];
          }
        } else if (!strict) {
          output[idx++] = value;
        }
      }
      return output;
    };

    // Flatten out an array, either recursively (by default), or just one level.
    _.flatten = function(array, shallow) {
      return flatten(array, shallow, false);
    };

    // Return a version of the array that does not contain the specified value(s).
    _.without = function(array) {
      return _.difference(array, slice.call(arguments, 1));
    };

    // Produce a duplicate-free version of the array. If the array has already
    // been sorted, you have the option of using a faster algorithm.
    // Aliased as `unique`.
    _.uniq = _.unique = function(array, isSorted, iteratee, context) {
      if (!_.isBoolean(isSorted)) {
        context = iteratee;
        iteratee = isSorted;
        isSorted = false;
      }
      if (iteratee != null) iteratee = cb(iteratee, context);
      var result = [];
      var seen = [];
      for (var i = 0, length = getLength(array); i < length; i++) {
        var value = array[i],
            computed = iteratee ? iteratee(value, i, array) : value;
        if (isSorted) {
          if (!i || seen !== computed) result.push(value);
          seen = computed;
        } else if (iteratee) {
          if (!_.contains(seen, computed)) {
            seen.push(computed);
            result.push(value);
          }
        } else if (!_.contains(result, value)) {
          result.push(value);
        }
      }
      return result;
    };

    // Produce an array that contains the union: each distinct element from all of
    // the passed-in arrays.
    _.union = function() {
      return _.uniq(flatten(arguments, true, true));
    };

    // Produce an array that contains every item shared between all the
    // passed-in arrays.
    _.intersection = function(array) {
      var result = [];
      var argsLength = arguments.length;
      for (var i = 0, length = getLength(array); i < length; i++) {
        var item = array[i];
        if (_.contains(result, item)) continue;
        for (var j = 1; j < argsLength; j++) {
          if (!_.contains(arguments[j], item)) break;
        }
        if (j === argsLength) result.push(item);
      }
      return result;
    };

    // Take the difference between one array and a number of other arrays.
    // Only the elements present in just the first array will remain.
    _.difference = function(array) {
      var rest = flatten(arguments, true, true, 1);
      return _.filter(array, function(value){
        return !_.contains(rest, value);
      });
    };

    // Zip together multiple lists into a single array -- elements that share
    // an index go together.
    _.zip = function() {
      return _.unzip(arguments);
    };

    // Complement of _.zip. Unzip accepts an array of arrays and groups
    // each array's elements on shared indices
    _.unzip = function(array) {
      var length = array && _.max(array, getLength).length || 0;
      var result = Array(length);

      for (var index = 0; index < length; index++) {
        result[index] = _.pluck(array, index);
      }
      return result;
    };

    // Converts lists into objects. Pass either a single array of `[key, value]`
    // pairs, or two parallel arrays of the same length -- one of keys, and one of
    // the corresponding values.
    _.object = function(list, values) {
      var result = {};
      for (var i = 0, length = getLength(list); i < length; i++) {
        if (values) {
          result[list[i]] = values[i];
        } else {
          result[list[i][0]] = list[i][1];
        }
      }
      return result;
    };

    // Generator function to create the findIndex and findLastIndex functions
    function createPredicateIndexFinder(dir) {
      return function(array, predicate, context) {
        predicate = cb(predicate, context);
        var length = getLength(array);
        var index = dir > 0 ? 0 : length - 1;
        for (; index >= 0 && index < length; index += dir) {
          if (predicate(array[index], index, array)) return index;
        }
        return -1;
      };
    }

    // Returns the first index on an array-like that passes a predicate test
    _.findIndex = createPredicateIndexFinder(1);
    _.findLastIndex = createPredicateIndexFinder(-1);

    // Use a comparator function to figure out the smallest index at which
    // an object should be inserted so as to maintain order. Uses binary search.
    _.sortedIndex = function(array, obj, iteratee, context) {
      iteratee = cb(iteratee, context, 1);
      var value = iteratee(obj);
      var low = 0, high = getLength(array);
      while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
      }
      return low;
    };

    // Generator function to create the indexOf and lastIndexOf functions
    function createIndexFinder(dir, predicateFind, sortedIndex) {
      return function(array, item, idx) {
        var i = 0, length = getLength(array);
        if (typeof idx == 'number') {
          if (dir > 0) {
              i = idx >= 0 ? idx : Math.max(idx + length, i);
          } else {
              length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
          }
        } else if (sortedIndex && idx && length) {
          idx = sortedIndex(array, item);
          return array[idx] === item ? idx : -1;
        }
        if (item !== item) {
          idx = predicateFind(slice.call(array, i, length), _.isNaN);
          return idx >= 0 ? idx + i : -1;
        }
        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
          if (array[idx] === item) return idx;
        }
        return -1;
      };
    }

    // Return the position of the first occurrence of an item in an array,
    // or -1 if the item is not included in the array.
    // If the array is large and already in sort order, pass `true`
    // for **isSorted** to use binary search.
    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

    // Generate an integer Array containing an arithmetic progression. A port of
    // the native Python `range()` function. See
    // [the Python documentation](http://docs.python.org/library/functions.html#range).
    _.range = function(start, stop, step) {
      if (stop == null) {
        stop = start || 0;
        start = 0;
      }
      step = step || 1;

      var length = Math.max(Math.ceil((stop - start) / step), 0);
      var range = Array(length);

      for (var idx = 0; idx < length; idx++, start += step) {
        range[idx] = start;
      }

      return range;
    };

    // Function (ahem) Functions
    // ------------------

    // Determines whether to execute a function as a constructor
    // or a normal function with the provided arguments
    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
      var self = baseCreate(sourceFunc.prototype);
      var result = sourceFunc.apply(self, args);
      if (_.isObject(result)) return result;
      return self;
    };

    // Create a function bound to a given object (assigning `this`, and arguments,
    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
    // available.
    _.bind = function(func, context) {
      if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
      var args = slice.call(arguments, 2);
      var bound = function() {
        return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
      };
      return bound;
    };

    // Partially apply a function by creating a version that has had some of its
    // arguments pre-filled, without changing its dynamic `this` context. _ acts
    // as a placeholder, allowing any combination of arguments to be pre-filled.
    _.partial = function(func) {
      var boundArgs = slice.call(arguments, 1);
      var bound = function() {
        var position = 0, length = boundArgs.length;
        var args = Array(length);
        for (var i = 0; i < length; i++) {
          args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
        }
        while (position < arguments.length) args.push(arguments[position++]);
        return executeBound(func, bound, this, this, args);
      };
      return bound;
    };

    // Bind a number of an object's methods to that object. Remaining arguments
    // are the method names to be bound. Useful for ensuring that all callbacks
    // defined on an object belong to it.
    _.bindAll = function(obj) {
      var i, length = arguments.length, key;
      if (length <= 1) throw new Error('bindAll must be passed function names');
      for (i = 1; i < length; i++) {
        key = arguments[i];
        obj[key] = _.bind(obj[key], obj);
      }
      return obj;
    };

    // Memoize an expensive function by storing its results.
    _.memoize = function(func, hasher) {
      var memoize = function(key) {
        var cache = memoize.cache;
        var address = '' + (hasher ? hasher.apply(this, arguments) : key);
        if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
        return cache[address];
      };
      memoize.cache = {};
      return memoize;
    };

    // Delays a function for the given number of milliseconds, and then calls
    // it with the arguments supplied.
    _.delay = function(func, wait) {
      var args = slice.call(arguments, 2);
      return setTimeout(function(){
        return func.apply(null, args);
      }, wait);
    };

    // Defers a function, scheduling it to run after the current call stack has
    // cleared.
    _.defer = _.partial(_.delay, _, 1);

    // Returns a function, that, when invoked, will only be triggered at most once
    // during a given window of time. Normally, the throttled function will run
    // as much as it can, without ever going more than once per `wait` duration;
    // but if you'd like to disable the execution on the leading edge, pass
    // `{leading: false}`. To disable execution on the trailing edge, ditto.
    _.throttle = function(func, wait, options) {
      var context, args, result;
      var timeout = null;
      var previous = 0;
      if (!options) options = {};
      var later = function() {
        previous = options.leading === false ? 0 : _.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      };
      return function() {
        var now = _.now();
        if (!previous && options.leading === false) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          previous = now;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }
        return result;
      };
    };

    // Returns a function, that, as long as it continues to be invoked, will not
    // be triggered. The function will be called after it stops being called for
    // N milliseconds. If `immediate` is passed, trigger the function on the
    // leading edge, instead of the trailing.
    _.debounce = function(func, wait, immediate) {
      var timeout, args, context, timestamp, result;

      var later = function() {
        var last = _.now() - timestamp;

        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          }
        }
      };

      return function() {
        context = this;
        args = arguments;
        timestamp = _.now();
        var callNow = immediate && !timeout;
        if (!timeout) timeout = setTimeout(later, wait);
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }

        return result;
      };
    };

    // Returns the first function passed as an argument to the second,
    // allowing you to adjust arguments, run code before and after, and
    // conditionally execute the original function.
    _.wrap = function(func, wrapper) {
      return _.partial(wrapper, func);
    };

    // Returns a negated version of the passed-in predicate.
    _.negate = function(predicate) {
      return function() {
        return !predicate.apply(this, arguments);
      };
    };

    // Returns a function that is the composition of a list of functions, each
    // consuming the return value of the function that follows.
    _.compose = function() {
      var args = arguments;
      var start = args.length - 1;
      return function() {
        var i = start;
        var result = args[start].apply(this, arguments);
        while (i--) result = args[i].call(this, result);
        return result;
      };
    };

    // Returns a function that will only be executed on and after the Nth call.
    _.after = function(times, func) {
      return function() {
        if (--times < 1) {
          return func.apply(this, arguments);
        }
      };
    };

    // Returns a function that will only be executed up to (but not including) the Nth call.
    _.before = function(times, func) {
      var memo;
      return function() {
        if (--times > 0) {
          memo = func.apply(this, arguments);
        }
        if (times <= 1) func = null;
        return memo;
      };
    };

    // Returns a function that will be executed at most one time, no matter how
    // often you call it. Useful for lazy initialization.
    _.once = _.partial(_.before, 2);

    // Object Functions
    // ----------------

    // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
    var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                        'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

    function collectNonEnumProps(obj, keys) {
      var nonEnumIdx = nonEnumerableProps.length;
      var constructor = obj.constructor;
      var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

      // Constructor is a special case.
      var prop = 'constructor';
      if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

      while (nonEnumIdx--) {
        prop = nonEnumerableProps[nonEnumIdx];
        if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
          keys.push(prop);
        }
      }
    }

    // Retrieve the names of an object's own properties.
    // Delegates to **ECMAScript 5**'s native `Object.keys`
    _.keys = function(obj) {
      if (!_.isObject(obj)) return [];
      if (nativeKeys) return nativeKeys(obj);
      var keys = [];
      for (var key in obj) if (_.has(obj, key)) keys.push(key);
      // Ahem, IE < 9.
      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };

    // Retrieve all the property names of an object.
    _.allKeys = function(obj) {
      if (!_.isObject(obj)) return [];
      var keys = [];
      for (var key in obj) keys.push(key);
      // Ahem, IE < 9.
      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };

    // Retrieve the values of an object's properties.
    _.values = function(obj) {
      var keys = _.keys(obj);
      var length = keys.length;
      var values = Array(length);
      for (var i = 0; i < length; i++) {
        values[i] = obj[keys[i]];
      }
      return values;
    };

    // Returns the results of applying the iteratee to each element of the object
    // In contrast to _.map it returns an object
    _.mapObject = function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      var keys =  _.keys(obj),
            length = keys.length,
            results = {},
            currentKey;
        for (var index = 0; index < length; index++) {
          currentKey = keys[index];
          results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };

    // Convert an object into a list of `[key, value]` pairs.
    _.pairs = function(obj) {
      var keys = _.keys(obj);
      var length = keys.length;
      var pairs = Array(length);
      for (var i = 0; i < length; i++) {
        pairs[i] = [keys[i], obj[keys[i]]];
      }
      return pairs;
    };

    // Invert the keys and values of an object. The values must be serializable.
    _.invert = function(obj) {
      var result = {};
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        result[obj[keys[i]]] = keys[i];
      }
      return result;
    };

    // Return a sorted list of the function names available on the object.
    // Aliased as `methods`
    _.functions = _.methods = function(obj) {
      var names = [];
      for (var key in obj) {
        if (_.isFunction(obj[key])) names.push(key);
      }
      return names.sort();
    };

    // Extend a given object with all the properties in passed-in object(s).
    _.extend = createAssigner(_.allKeys);

    // Assigns a given object with all the own properties in the passed-in object(s)
    // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
    _.extendOwn = _.assign = createAssigner(_.keys);

    // Returns the first key on an object that passes a predicate test
    _.findKey = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var keys = _.keys(obj), key;
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (predicate(obj[key], key, obj)) return key;
      }
    };

    // Return a copy of the object only containing the whitelisted properties.
    _.pick = function(object, oiteratee, context) {
      var result = {}, obj = object, iteratee, keys;
      if (obj == null) return result;
      if (_.isFunction(oiteratee)) {
        keys = _.allKeys(obj);
        iteratee = optimizeCb(oiteratee, context);
      } else {
        keys = flatten(arguments, false, false, 1);
        iteratee = function(value, key, obj) { return key in obj; };
        obj = Object(obj);
      }
      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
      return result;
    };

     // Return a copy of the object without the blacklisted properties.
    _.omit = function(obj, iteratee, context) {
      if (_.isFunction(iteratee)) {
        iteratee = _.negate(iteratee);
      } else {
        var keys = _.map(flatten(arguments, false, false, 1), String);
        iteratee = function(value, key) {
          return !_.contains(keys, key);
        };
      }
      return _.pick(obj, iteratee, context);
    };

    // Fill in a given object with default properties.
    _.defaults = createAssigner(_.allKeys, true);

    // Creates an object that inherits from the given prototype object.
    // If additional properties are provided then they will be added to the
    // created object.
    _.create = function(prototype, props) {
      var result = baseCreate(prototype);
      if (props) _.extendOwn(result, props);
      return result;
    };

    // Create a (shallow-cloned) duplicate of an object.
    _.clone = function(obj) {
      if (!_.isObject(obj)) return obj;
      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };

    // Invokes interceptor with the obj, and then returns obj.
    // The primary purpose of this method is to "tap into" a method chain, in
    // order to perform operations on intermediate results within the chain.
    _.tap = function(obj, interceptor) {
      interceptor(obj);
      return obj;
    };

    // Returns whether an object has a given set of `key:value` pairs.
    _.isMatch = function(object, attrs) {
      var keys = _.keys(attrs), length = keys.length;
      if (object == null) return !length;
      var obj = Object(object);
      for (var i = 0; i < length; i++) {
        var key = keys[i];
        if (attrs[key] !== obj[key] || !(key in obj)) return false;
      }
      return true;
    };


    // Internal recursive comparison function for `isEqual`.
    var eq = function(a, b, aStack, bStack) {
      // Identical objects are equal. `0 === -0`, but they aren't identical.
      // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
      if (a === b) return a !== 0 || 1 / a === 1 / b;
      // A strict comparison is necessary because `null == undefined`.
      if (a == null || b == null) return a === b;
      // Unwrap any wrapped objects.
      if (a instanceof _) a = a._wrapped;
      if (b instanceof _) b = b._wrapped;
      // Compare `[[Class]]` names.
      var className = toString.call(a);
      if (className !== toString.call(b)) return false;
      switch (className) {
        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
        case '[object RegExp]':
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
        case '[object String]':
          // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
          // equivalent to `new String("5")`.
          return '' + a === '' + b;
        case '[object Number]':
          // `NaN`s are equivalent, but non-reflexive.
          // Object(NaN) is equivalent to NaN
          if (+a !== +a) return +b !== +b;
          // An `egal` comparison is performed for other numeric values.
          return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case '[object Date]':
        case '[object Boolean]':
          // Coerce dates and booleans to numeric primitive values. Dates are compared by their
          // millisecond representations. Note that invalid dates with millisecond representations
          // of `NaN` are not equivalent.
          return +a === +b;
      }

      var areArrays = className === '[object Array]';
      if (!areArrays) {
        if (typeof a != 'object' || typeof b != 'object') return false;

        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
        // from different frames are.
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                                 _.isFunction(bCtor) && bCtor instanceof bCtor)
                            && ('constructor' in a && 'constructor' in b)) {
          return false;
        }
      }
      // Assume equality for cyclic structures. The algorithm for detecting cyclic
      // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

      // Initializing stack of traversed objects.
      // It's done here since we only need them for objects and arrays comparison.
      aStack = aStack || [];
      bStack = bStack || [];
      var length = aStack.length;
      while (length--) {
        // Linear search. Performance is inversely proportional to the number of
        // unique nested structures.
        if (aStack[length] === a) return bStack[length] === b;
      }

      // Add the first object to the stack of traversed objects.
      aStack.push(a);
      bStack.push(b);

      // Recursively compare objects and arrays.
      if (areArrays) {
        // Compare array lengths to determine if a deep comparison is necessary.
        length = a.length;
        if (length !== b.length) return false;
        // Deep compare the contents, ignoring non-numeric properties.
        while (length--) {
          if (!eq(a[length], b[length], aStack, bStack)) return false;
        }
      } else {
        // Deep compare objects.
        var keys = _.keys(a), key;
        length = keys.length;
        // Ensure that both objects contain the same number of properties before comparing deep equality.
        if (_.keys(b).length !== length) return false;
        while (length--) {
          // Deep compare each member
          key = keys[length];
          if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
        }
      }
      // Remove the first object from the stack of traversed objects.
      aStack.pop();
      bStack.pop();
      return true;
    };

    // Perform a deep comparison to check if two objects are equal.
    _.isEqual = function(a, b) {
      return eq(a, b);
    };

    // Is a given array, string, or object empty?
    // An "empty" object has no enumerable own-properties.
    _.isEmpty = function(obj) {
      if (obj == null) return true;
      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
      return _.keys(obj).length === 0;
    };

    // Is a given value a DOM element?
    _.isElement = function(obj) {
      return !!(obj && obj.nodeType === 1);
    };

    // Is a given value an array?
    // Delegates to ECMA5's native Array.isArray
    _.isArray = nativeIsArray || function(obj) {
      return toString.call(obj) === '[object Array]';
    };

    // Is a given variable an object?
    _.isObject = function(obj) {
      var type = typeof obj;
      return type === 'function' || type === 'object' && !!obj;
    };

    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
      _['is' + name] = function(obj) {
        return toString.call(obj) === '[object ' + name + ']';
      };
    });

    // Define a fallback version of the method in browsers (ahem, IE < 9), where
    // there isn't any inspectable "Arguments" type.
    if (!_.isArguments(arguments)) {
      _.isArguments = function(obj) {
        return _.has(obj, 'callee');
      };
    }

    // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
    // IE 11 (#1621), and in Safari 8 (#1929).
    if (typeof /./ != 'function' && typeof Int8Array != 'object') {
      _.isFunction = function(obj) {
        return typeof obj == 'function' || false;
      };
    }

    // Is a given object a finite number?
    _.isFinite = function(obj) {
      return isFinite(obj) && !isNaN(parseFloat(obj));
    };

    // Is the given value `NaN`? (NaN is the only number which does not equal itself).
    _.isNaN = function(obj) {
      return _.isNumber(obj) && obj !== +obj;
    };

    // Is a given value a boolean?
    _.isBoolean = function(obj) {
      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
    };

    // Is a given value equal to null?
    _.isNull = function(obj) {
      return obj === null;
    };

    // Is a given variable undefined?
    _.isUndefined = function(obj) {
      return obj === void 0;
    };

    // Shortcut function for checking if an object has a given property directly
    // on itself (in other words, not on a prototype).
    _.has = function(obj, key) {
      return obj != null && hasOwnProperty.call(obj, key);
    };

    // Utility Functions
    // -----------------

    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
    // previous owner. Returns a reference to the Underscore object.
    _.noConflict = function() {
      root._ = previousUnderscore;
      return this;
    };

    // Keep the identity function around for default iteratees.
    _.identity = function(value) {
      return value;
    };

    // Predicate-generating functions. Often useful outside of Underscore.
    _.constant = function(value) {
      return function() {
        return value;
      };
    };

    _.noop = function(){};

    _.property = property;

    // Generates a function for a given object that returns a given property.
    _.propertyOf = function(obj) {
      return obj == null ? function(){} : function(key) {
        return obj[key];
      };
    };

    // Returns a predicate for checking whether an object has a given set of
    // `key:value` pairs.
    _.matcher = _.matches = function(attrs) {
      attrs = _.extendOwn({}, attrs);
      return function(obj) {
        return _.isMatch(obj, attrs);
      };
    };

    // Run a function **n** times.
    _.times = function(n, iteratee, context) {
      var accum = Array(Math.max(0, n));
      iteratee = optimizeCb(iteratee, context, 1);
      for (var i = 0; i < n; i++) accum[i] = iteratee(i);
      return accum;
    };

    // Return a random integer between min and max (inclusive).
    _.random = function(min, max) {
      if (max == null) {
        max = min;
        min = 0;
      }
      return min + Math.floor(Math.random() * (max - min + 1));
    };

    // A (possibly faster) way to get the current timestamp as an integer.
    _.now = Date.now || function() {
      return new Date().getTime();
    };

     // List of HTML entities for escaping.
    var escapeMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '`': '&#x60;'
    };
    var unescapeMap = _.invert(escapeMap);

    // Functions for escaping and unescaping strings to/from HTML interpolation.
    var createEscaper = function(map) {
      var escaper = function(match) {
        return map[match];
      };
      // Regexes for identifying a key that needs to be escaped
      var source = '(?:' + _.keys(map).join('|') + ')';
      var testRegexp = RegExp(source);
      var replaceRegexp = RegExp(source, 'g');
      return function(string) {
        string = string == null ? '' : '' + string;
        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
      };
    };
    _.escape = createEscaper(escapeMap);
    _.unescape = createEscaper(unescapeMap);

    // If the value of the named `property` is a function then invoke it with the
    // `object` as context; otherwise, return it.
    _.result = function(object, property, fallback) {
      var value = object == null ? void 0 : object[property];
      if (value === void 0) {
        value = fallback;
      }
      return _.isFunction(value) ? value.call(object) : value;
    };

    // Generate a unique integer id (unique within the entire client session).
    // Useful for temporary DOM ids.
    var idCounter = 0;
    _.uniqueId = function(prefix) {
      var id = ++idCounter + '';
      return prefix ? prefix + id : id;
    };

    // By default, Underscore uses ERB-style template delimiters, change the
    // following template settings to use alternative delimiters.
    _.templateSettings = {
      evaluate    : /<%([\s\S]+?)%>/g,
      interpolate : /<%=([\s\S]+?)%>/g,
      escape      : /<%-([\s\S]+?)%>/g
    };

    // When customizing `templateSettings`, if you don't want to define an
    // interpolation, evaluation or escaping regex, we need one that is
    // guaranteed not to match.
    var noMatch = /(.)^/;

    // Certain characters need to be escaped so that they can be put into a
    // string literal.
    var escapes = {
      "'":      "'",
      '\\':     '\\',
      '\r':     'r',
      '\n':     'n',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

    var escapeChar = function(match) {
      return '\\' + escapes[match];
    };

    // JavaScript micro-templating, similar to John Resig's implementation.
    // Underscore templating handles arbitrary delimiters, preserves whitespace,
    // and correctly escapes quotes within interpolated code.
    // NB: `oldSettings` only exists for backwards compatibility.
    _.template = function(text, settings, oldSettings) {
      if (!settings && oldSettings) settings = oldSettings;
      settings = _.defaults({}, settings, _.templateSettings);

      // Combine delimiters into one regular expression via alternation.
      var matcher = RegExp([
        (settings.escape || noMatch).source,
        (settings.interpolate || noMatch).source,
        (settings.evaluate || noMatch).source
      ].join('|') + '|$', 'g');

      // Compile the template source, escaping string literals appropriately.
      var index = 0;
      var source = "__p+='";
      text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
        source += text.slice(index, offset).replace(escaper, escapeChar);
        index = offset + match.length;

        if (escape) {
          source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
        } else if (interpolate) {
          source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
        } else if (evaluate) {
          source += "';\n" + evaluate + "\n__p+='";
        }

        // Adobe VMs need the match returned to produce the correct offest.
        return match;
      });
      source += "';\n";

      // If a variable is not specified, place data values in local scope.
      if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

      source = "var __t,__p='',__j=Array.prototype.join," +
        "print=function(){__p+=__j.call(arguments,'');};\n" +
        source + 'return __p;\n';

      try {
        var render = new Function(settings.variable || 'obj', '_', source);
      } catch (e) {
        e.source = source;
        throw e;
      }

      var template = function(data) {
        return render.call(this, data, _);
      };

      // Provide the compiled source as a convenience for precompilation.
      var argument = settings.variable || 'obj';
      template.source = 'function(' + argument + '){\n' + source + '}';

      return template;
    };

    // Add a "chain" function. Start chaining a wrapped Underscore object.
    _.chain = function(obj) {
      var instance = _(obj);
      instance._chain = true;
      return instance;
    };

    // OOP
    // ---------------
    // If Underscore is called as a function, it returns a wrapped object that
    // can be used OO-style. This wrapper holds altered versions of all the
    // underscore functions. Wrapped objects may be chained.

    // Helper function to continue chaining intermediate results.
    var result = function(instance, obj) {
      return instance._chain ? _(obj).chain() : obj;
    };

    // Add your own custom functions to the Underscore object.
    _.mixin = function(obj) {
      _.each(_.functions(obj), function(name) {
        var func = _[name] = obj[name];
        _.prototype[name] = function() {
          var args = [this._wrapped];
          push.apply(args, arguments);
          return result(this, func.apply(_, args));
        };
      });
    };

    // Add all of the Underscore functions to the wrapper object.
    _.mixin(_);

    // Add all mutator Array functions to the wrapper.
    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
      var method = ArrayProto[name];
      _.prototype[name] = function() {
        var obj = this._wrapped;
        method.apply(obj, arguments);
        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
        return result(this, obj);
      };
    });

    // Add all accessor Array functions to the wrapper.
    _.each(['concat', 'join', 'slice'], function(name) {
      var method = ArrayProto[name];
      _.prototype[name] = function() {
        return result(this, method.apply(this._wrapped, arguments));
      };
    });

    // Extracts the result from a wrapped and chained object.
    _.prototype.value = function() {
      return this._wrapped;
    };

    // Provide unwrapping proxy for some methods used in engine operations
    // such as arithmetic and JSON stringification.
    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

    _.prototype.toString = function() {
      return '' + this._wrapped;
    };

    // AMD registration happens at the end for compatibility with AMD loaders
    // that may not enforce next-turn semantics on modules. Even though general
    // practice for AMD registration is to be anonymous, underscore registers
    // as a named module because, like jQuery, it is a base library that is
    // popular enough to be bundled in a third party lib, but not be part of
    // an AMD load request. Those cases could generate an error when an
    // anonymous define() is called outside of a loader request.
    if (typeof undefined === 'function' && undefined.amd) {
      undefined('underscore', [], function() {
        return _;
      });
    }
  }.call(commonjsGlobal));
  });
  var underscore_1 = underscore._;

  /*
      This file is part of web3.js.

      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.

      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */

  var errors = {
      ErrorResponse: function (result) {
          var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);
          return new Error('Returned error: ' + message);
      },
      InvalidNumberOfParams: function (got$$1, expected, method) {
          return new Error('Invalid number of parameters for "'+ method +'". Got '+ got$$1 +' expected '+ expected +'!');
      },
      InvalidConnection: function (host){
          return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');
      },
      InvalidProvider: function () {
          return new Error('Provider not set or invalid');
      },
      InvalidResponse: function (result){
          var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
          return new Error(message);
      },
      ConnectionTimeout: function (ms){
          return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
      }
  };

  var bn = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert$$1 (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = commonjsRequire('buf' + 'fer').Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert$$1(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert$$1(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert$$1(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert$$1(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert$$1(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert$$1(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert$$1(byteLength <= reqLength, 'byte array longer than desired length');
      assert$$1(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert$$1(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert$$1(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert$$1(carry === 0);
      assert$$1((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) {
        // No-op, we should not move anything at all
      } else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert$$1(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert$$1(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert$$1(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert$$1(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert$$1(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert$$1(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert$$1(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert$$1(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      assert$$1(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert$$1(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert$$1(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert$$1(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert$$1(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert$$1(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert$$1(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert$$1(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert$$1(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert$$1(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert$$1(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert$$1(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert$$1(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert$$1(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert$$1(a.negative === 0, 'red works only with positives');
      assert$$1(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert$$1((a.negative | b.negative) === 0, 'red works only with positives');
      assert$$1(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert$$1(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert$$1(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert$$1(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })('object' === 'undefined' || module, commonjsGlobal);
  });

  var bn$1 = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert$$1 (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = commonjsRequire('buf' + 'fer').Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert$$1(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert$$1(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert$$1(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert$$1(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert$$1(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert$$1(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert$$1(byteLength <= reqLength, 'byte array longer than desired length');
      assert$$1(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert$$1(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert$$1(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert$$1(carry === 0);
      assert$$1((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) {
        // No-op, we should not move anything at all
      } else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert$$1(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert$$1(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert$$1(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert$$1(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert$$1(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert$$1(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert$$1(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert$$1(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      assert$$1(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert$$1(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert$$1(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert$$1(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert$$1(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert$$1(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert$$1(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert$$1(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert$$1(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert$$1(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert$$1(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert$$1(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert$$1(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert$$1(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert$$1(a.negative === 0, 'red works only with positives');
      assert$$1(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert$$1((a.negative | b.negative) === 0, 'red works only with positives');
      assert$$1(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert$$1(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert$$1(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert$$1(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })('object' === 'undefined' || module, commonjsGlobal);
  });

  /**
   * Returns a `Boolean` on whether or not the a `String` starts with '0x'
   * @param {String} str the string input value
   * @return {Boolean} a boolean if it is or is not hex prefixed
   * @throws if the str input is not a string
   */
  var src = function isHexPrefixed(str) {
    if (typeof str !== 'string') {
      throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
    }

    return str.slice(0, 2) === '0x';
  };

  /**
   * Removes '0x' from a given `String` is present
   * @param {String} str the string value
   * @return {String|Optional} a string by pass if necessary
   */
  var src$1 = function stripHexPrefix(str) {
    if (typeof str !== 'string') {
      return str;
    }

    return src(str) ? str.slice(2) : str;
  };

  /**
   * Returns a BN object, converts a number value to a BN
   * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
   * @return {Object} `output` BN object of the number
   * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
   */
  var src$2 = function numberToBN(arg) {
    if (typeof arg === 'string' || typeof arg === 'number') {
      var multiplier = new bn$1(1); // eslint-disable-line
      var formattedString = String(arg).toLowerCase().trim();
      var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
      var stringArg = src$1(formattedString); // eslint-disable-line
      if (stringArg.substr(0, 1) === '-') {
        stringArg = src$1(stringArg.slice(1));
        multiplier = new bn$1(-1, 10);
      }
      stringArg = stringArg === '' ? '0' : stringArg;

      if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))
        || stringArg.match(/^[a-fA-F]+$/)
        || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {
        return new bn$1(stringArg, 16).mul(multiplier);
      }

      if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
        return new bn$1(stringArg, 10).mul(multiplier);
      }
    } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {
      if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
        return new bn$1(arg.toString(10), 10);
      }
    }

    throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
  };

  var zero = new bn(0);
  var negative1 = new bn(-1);

  // complete ethereum unit map
  var unitMap = {
    'noether': '0', // eslint-disable-line
    'wei': '1', // eslint-disable-line
    'kwei': '1000', // eslint-disable-line
    'Kwei': '1000', // eslint-disable-line
    'babbage': '1000', // eslint-disable-line
    'femtoether': '1000', // eslint-disable-line
    'mwei': '1000000', // eslint-disable-line
    'Mwei': '1000000', // eslint-disable-line
    'lovelace': '1000000', // eslint-disable-line
    'picoether': '1000000', // eslint-disable-line
    'gwei': '1000000000', // eslint-disable-line
    'Gwei': '1000000000', // eslint-disable-line
    'shannon': '1000000000', // eslint-disable-line
    'nanoether': '1000000000', // eslint-disable-line
    'nano': '1000000000', // eslint-disable-line
    'szabo': '1000000000000', // eslint-disable-line
    'microether': '1000000000000', // eslint-disable-line
    'micro': '1000000000000', // eslint-disable-line
    'finney': '1000000000000000', // eslint-disable-line
    'milliether': '1000000000000000', // eslint-disable-line
    'milli': '1000000000000000', // eslint-disable-line
    'ether': '1000000000000000000', // eslint-disable-line
    'kether': '1000000000000000000000', // eslint-disable-line
    'grand': '1000000000000000000000', // eslint-disable-line
    'mether': '1000000000000000000000000', // eslint-disable-line
    'gether': '1000000000000000000000000000', // eslint-disable-line
    'tether': '1000000000000000000000000000000' };

  /**
   * Returns value of unit in Wei
   *
   * @method getValueOfUnit
   * @param {String} unit the unit to convert to, default ether
   * @returns {BigNumber} value of the unit (in Wei)
   * @throws error if the unit is not correct:w
   */
  function getValueOfUnit(unitInput) {
    var unit = unitInput ? unitInput.toLowerCase() : 'ether';
    var unitValue = unitMap[unit]; // eslint-disable-line

    if (typeof unitValue !== 'string') {
      throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));
    }

    return new bn(unitValue, 10);
  }

  function numberToString(arg) {
    if (typeof arg === 'string') {
      if (!arg.match(/^-?[0-9.]+$/)) {
        throw new Error('while converting number to string, invalid number value \'' + arg + '\', should be a number matching (^-?[0-9.]+).');
      }
      return arg;
    } else if (typeof arg === 'number') {
      return String(arg);
    } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
      if (arg.toPrecision) {
        return String(arg.toPrecision());
      } else {
        // eslint-disable-line
        return arg.toString(10);
      }
    }
    throw new Error('while converting number to string, invalid number value \'' + arg + '\' type ' + typeof arg + '.');
  }

  function fromWei(weiInput, unit, optionsInput) {
    var wei = src$2(weiInput); // eslint-disable-line
    var negative = wei.lt(zero); // eslint-disable-line
    var base = getValueOfUnit(unit);
    var baseLength = unitMap[unit].length - 1 || 1;
    var options = optionsInput || {};

    if (negative) {
      wei = wei.mul(negative1);
    }

    var fraction = wei.mod(base).toString(10); // eslint-disable-line

    while (fraction.length < baseLength) {
      fraction = '0' + fraction;
    }

    if (!options.pad) {
      fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    }

    var whole = wei.div(base).toString(10); // eslint-disable-line

    if (options.commify) {
      whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }

    var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line

    if (negative) {
      value = '-' + value;
    }

    return value;
  }

  function toWei(etherInput, unit) {
    var ether = numberToString(etherInput); // eslint-disable-line
    var base = getValueOfUnit(unit);
    var baseLength = unitMap[unit].length - 1 || 1;

    // Is it negative?
    var negative = ether.substring(0, 1) === '-'; // eslint-disable-line
    if (negative) {
      ether = ether.substring(1);
    }

    if (ether === '.') {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');
    }

    // Split it into a whole and fractional part
    var comps = ether.split('.'); // eslint-disable-line
    if (comps.length > 2) {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');
    }

    var whole = comps[0],
        fraction = comps[1]; // eslint-disable-line

    if (!whole) {
      whole = '0';
    }
    if (!fraction) {
      fraction = '0';
    }
    if (fraction.length > baseLength) {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');
    }

    while (fraction.length < baseLength) {
      fraction += '0';
    }

    whole = new bn(whole);
    fraction = new bn(fraction);
    var wei = whole.mul(base).add(fraction); // eslint-disable-line

    if (negative) {
      wei = wei.mul(negative1);
    }

    return new bn(wei.toString(10), 10);
  }

  var lib = {
    unitMap: unitMap,
    numberToString: numberToString,
    getValueOfUnit: getValueOfUnit,
    fromWei: fromWei,
    toWei: toWei
  };

  var bn$2 = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert$$1 (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = commonjsRequire('buf' + 'fer').Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert$$1(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert$$1(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert$$1(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert$$1(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert$$1(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert$$1(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert$$1(byteLength <= reqLength, 'byte array longer than desired length');
      assert$$1(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert$$1(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert$$1(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert$$1(carry === 0);
      assert$$1((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) {
        // No-op, we should not move anything at all
      } else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert$$1(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert$$1(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert$$1(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert$$1(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert$$1(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert$$1(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert$$1(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert$$1(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      assert$$1(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert$$1(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert$$1(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert$$1(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert$$1(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert$$1(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert$$1(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert$$1(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert$$1(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert$$1(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert$$1(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert$$1(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert$$1(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert$$1(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert$$1(a.negative === 0, 'red works only with positives');
      assert$$1(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert$$1((a.negative | b.negative) === 0, 'red works only with positives');
      assert$$1(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert$$1(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert$$1(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert$$1(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })('object' === 'undefined' || module, commonjsGlobal);
  });

  var utf8 = createCommonjsModule(function (module, exports) {
  (function(root) {

  	// Detect free variables `exports`
  	var freeExports = 'object' == 'object' && exports;

  	// Detect free variable `module`
  	var freeModule = 'object' == 'object' && module &&
  		module.exports == freeExports && module;

  	// Detect free variable `global`, from Node.js or Browserified code,
  	// and use it as `root`
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
  	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
  		root = freeGlobal;
  	}

  	/*--------------------------------------------------------------------------*/

  	var stringFromCharCode = String.fromCharCode;

  	// Taken from https://mths.be/punycode
  	function ucs2decode(string) {
  		var output = [];
  		var counter = 0;
  		var length = string.length;
  		var value;
  		var extra;
  		while (counter < length) {
  			value = string.charCodeAt(counter++);
  			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  				// high surrogate, and there is a next character
  				extra = string.charCodeAt(counter++);
  				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  				} else {
  					// unmatched surrogate; only append this code unit, in case the next
  					// code unit is the high surrogate of a surrogate pair
  					output.push(value);
  					counter--;
  				}
  			} else {
  				output.push(value);
  			}
  		}
  		return output;
  	}

  	// Taken from https://mths.be/punycode
  	function ucs2encode(array) {
  		var length = array.length;
  		var index = -1;
  		var value;
  		var output = '';
  		while (++index < length) {
  			value = array[index];
  			if (value > 0xFFFF) {
  				value -= 0x10000;
  				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  				value = 0xDC00 | value & 0x3FF;
  			}
  			output += stringFromCharCode(value);
  		}
  		return output;
  	}

  	function checkScalarValue(codePoint) {
  		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
  			throw Error(
  				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
  				' is not a scalar value'
  			);
  		}
  	}
  	/*--------------------------------------------------------------------------*/

  	function createByte(codePoint, shift) {
  		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
  	}

  	function encodeCodePoint(codePoint) {
  		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
  			return stringFromCharCode(codePoint);
  		}
  		var symbol = '';
  		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
  			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
  		}
  		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
  			checkScalarValue(codePoint);
  			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
  			symbol += createByte(codePoint, 6);
  		}
  		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
  			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
  			symbol += createByte(codePoint, 12);
  			symbol += createByte(codePoint, 6);
  		}
  		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
  		return symbol;
  	}

  	function utf8encode(string) {
  		var codePoints = ucs2decode(string);
  		var length = codePoints.length;
  		var index = -1;
  		var codePoint;
  		var byteString = '';
  		while (++index < length) {
  			codePoint = codePoints[index];
  			byteString += encodeCodePoint(codePoint);
  		}
  		return byteString;
  	}

  	/*--------------------------------------------------------------------------*/

  	function readContinuationByte() {
  		if (byteIndex >= byteCount) {
  			throw Error('Invalid byte index');
  		}

  		var continuationByte = byteArray[byteIndex] & 0xFF;
  		byteIndex++;

  		if ((continuationByte & 0xC0) == 0x80) {
  			return continuationByte & 0x3F;
  		}

  		// If we end up here, itâ€™s not a continuation byte
  		throw Error('Invalid continuation byte');
  	}

  	function decodeSymbol() {
  		var byte1;
  		var byte2;
  		var byte3;
  		var byte4;
  		var codePoint;

  		if (byteIndex > byteCount) {
  			throw Error('Invalid byte index');
  		}

  		if (byteIndex == byteCount) {
  			return false;
  		}

  		// Read first byte
  		byte1 = byteArray[byteIndex] & 0xFF;
  		byteIndex++;

  		// 1-byte sequence (no continuation bytes)
  		if ((byte1 & 0x80) == 0) {
  			return byte1;
  		}

  		// 2-byte sequence
  		if ((byte1 & 0xE0) == 0xC0) {
  			var byte2 = readContinuationByte();
  			codePoint = ((byte1 & 0x1F) << 6) | byte2;
  			if (codePoint >= 0x80) {
  				return codePoint;
  			} else {
  				throw Error('Invalid continuation byte');
  			}
  		}

  		// 3-byte sequence (may include unpaired surrogates)
  		if ((byte1 & 0xF0) == 0xE0) {
  			byte2 = readContinuationByte();
  			byte3 = readContinuationByte();
  			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
  			if (codePoint >= 0x0800) {
  				checkScalarValue(codePoint);
  				return codePoint;
  			} else {
  				throw Error('Invalid continuation byte');
  			}
  		}

  		// 4-byte sequence
  		if ((byte1 & 0xF8) == 0xF0) {
  			byte2 = readContinuationByte();
  			byte3 = readContinuationByte();
  			byte4 = readContinuationByte();
  			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
  				(byte3 << 0x06) | byte4;
  			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
  				return codePoint;
  			}
  		}

  		throw Error('Invalid UTF-8 detected');
  	}

  	var byteArray;
  	var byteCount;
  	var byteIndex;
  	function utf8decode(byteString) {
  		byteArray = ucs2decode(byteString);
  		byteCount = byteArray.length;
  		byteIndex = 0;
  		var codePoints = [];
  		var tmp;
  		while ((tmp = decodeSymbol()) !== false) {
  			codePoints.push(tmp);
  		}
  		return ucs2encode(codePoints);
  	}

  	/*--------------------------------------------------------------------------*/

  	var utf8 = {
  		'version': '2.0.0',
  		'encode': utf8encode,
  		'decode': utf8decode
  	};

  	// Some AMD build optimizers, like r.js, check for specific condition patterns
  	// like the following:
  	if (
  		typeof undefined == 'function' &&
  		typeof undefined.amd == 'object' &&
  		undefined.amd
  	) {
  		undefined(function() {
  			return utf8;
  		});
  	}	else if (freeExports && !freeExports.nodeType) {
  		if (freeModule) { // in Node.js or RingoJS v0.8.0+
  			freeModule.exports = utf8;
  		} else { // in Narwhal or RingoJS v0.7.0-
  			var object = {};
  			var hasOwnProperty = object.hasOwnProperty;
  			for (var key in utf8) {
  				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
  			}
  		}
  	} else { // in Rhino or a web browser
  		root.utf8 = utf8;
  	}

  }(commonjsGlobal));
  });

  // This was ported from https://github.com/emn178/js-sha3, with some minor
  // modifications and pruning. It is licensed under MIT:
  //
  // Copyright 2015-2016 Chen, Yi-Cyuan
  //  
  // Permission is hereby granted, free of charge, to any person obtaining
  // a copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to
  // permit persons to whom the Software is furnished to do so, subject to
  // the following conditions:
  // 
  // The above copyright notice and this permission notice shall be
  // included in all copies or substantial portions of the Software.
  // 
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  var HEX_CHARS = '0123456789abcdef'.split('');
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

  var Keccak = function Keccak(bits) {
    return {
      blocks: [],
      reset: true,
      block: 0,
      start: 0,
      blockCount: 1600 - (bits << 1) >> 5,
      outputBlocks: bits >> 5,
      s: function (s) {
        return [].concat(s, s, s, s, s);
      }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    };
  };

  var update = function update(state, message) {
    var length = message.length,
        blocks = state.blocks,
        byteCount = state.blockCount << 2,
        blockCount = state.blockCount,
        outputBlocks = state.outputBlocks,
        s = state.s,
        index = 0,
        i,
        code;

    // update
    while (index < length) {
      if (state.reset) {
        state.reset = false;
        blocks[0] = state.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (typeof message !== "string") {
        for (i = state.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = state.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          }
        }
      }
      state.lastByteIndex = i;
      if (i >= byteCount) {
        state.start = i - byteCount;
        state.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        state.reset = true;
      } else {
        state.start = i;
      }
    }

    // finalize
    i = state.lastByteIndex;
    blocks[i >> 2] |= KECCAK_PADDING[i & 3];
    if (state.lastByteIndex === byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);

    // toString
    var hex = '',
        i = 0,
        j = 0,
        block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    return "0x" + hex;
  };

  var f = function f(s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ (c2 << 1 | c3 >>> 31);
      l = c9 ^ (c3 << 1 | c2 >>> 31);
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ (c4 << 1 | c5 >>> 31);
      l = c1 ^ (c5 << 1 | c4 >>> 31);
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ (c6 << 1 | c7 >>> 31);
      l = c3 ^ (c7 << 1 | c6 >>> 31);
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ (c8 << 1 | c9 >>> 31);
      l = c5 ^ (c9 << 1 | c8 >>> 31);
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ (c0 << 1 | c1 >>> 31);
      l = c7 ^ (c1 << 1 | c0 >>> 31);
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = s[11] << 4 | s[10] >>> 28;
      b33 = s[10] << 4 | s[11] >>> 28;
      b14 = s[20] << 3 | s[21] >>> 29;
      b15 = s[21] << 3 | s[20] >>> 29;
      b46 = s[31] << 9 | s[30] >>> 23;
      b47 = s[30] << 9 | s[31] >>> 23;
      b28 = s[40] << 18 | s[41] >>> 14;
      b29 = s[41] << 18 | s[40] >>> 14;
      b20 = s[2] << 1 | s[3] >>> 31;
      b21 = s[3] << 1 | s[2] >>> 31;
      b2 = s[13] << 12 | s[12] >>> 20;
      b3 = s[12] << 12 | s[13] >>> 20;
      b34 = s[22] << 10 | s[23] >>> 22;
      b35 = s[23] << 10 | s[22] >>> 22;
      b16 = s[33] << 13 | s[32] >>> 19;
      b17 = s[32] << 13 | s[33] >>> 19;
      b48 = s[42] << 2 | s[43] >>> 30;
      b49 = s[43] << 2 | s[42] >>> 30;
      b40 = s[5] << 30 | s[4] >>> 2;
      b41 = s[4] << 30 | s[5] >>> 2;
      b22 = s[14] << 6 | s[15] >>> 26;
      b23 = s[15] << 6 | s[14] >>> 26;
      b4 = s[25] << 11 | s[24] >>> 21;
      b5 = s[24] << 11 | s[25] >>> 21;
      b36 = s[34] << 15 | s[35] >>> 17;
      b37 = s[35] << 15 | s[34] >>> 17;
      b18 = s[45] << 29 | s[44] >>> 3;
      b19 = s[44] << 29 | s[45] >>> 3;
      b10 = s[6] << 28 | s[7] >>> 4;
      b11 = s[7] << 28 | s[6] >>> 4;
      b42 = s[17] << 23 | s[16] >>> 9;
      b43 = s[16] << 23 | s[17] >>> 9;
      b24 = s[26] << 25 | s[27] >>> 7;
      b25 = s[27] << 25 | s[26] >>> 7;
      b6 = s[36] << 21 | s[37] >>> 11;
      b7 = s[37] << 21 | s[36] >>> 11;
      b38 = s[47] << 24 | s[46] >>> 8;
      b39 = s[46] << 24 | s[47] >>> 8;
      b30 = s[8] << 27 | s[9] >>> 5;
      b31 = s[9] << 27 | s[8] >>> 5;
      b12 = s[18] << 20 | s[19] >>> 12;
      b13 = s[19] << 20 | s[18] >>> 12;
      b44 = s[29] << 7 | s[28] >>> 25;
      b45 = s[28] << 7 | s[29] >>> 25;
      b26 = s[38] << 8 | s[39] >>> 24;
      b27 = s[39] << 8 | s[38] >>> 24;
      b8 = s[48] << 14 | s[49] >>> 18;
      b9 = s[49] << 14 | s[48] >>> 18;

      s[0] = b0 ^ ~b2 & b4;
      s[1] = b1 ^ ~b3 & b5;
      s[10] = b10 ^ ~b12 & b14;
      s[11] = b11 ^ ~b13 & b15;
      s[20] = b20 ^ ~b22 & b24;
      s[21] = b21 ^ ~b23 & b25;
      s[30] = b30 ^ ~b32 & b34;
      s[31] = b31 ^ ~b33 & b35;
      s[40] = b40 ^ ~b42 & b44;
      s[41] = b41 ^ ~b43 & b45;
      s[2] = b2 ^ ~b4 & b6;
      s[3] = b3 ^ ~b5 & b7;
      s[12] = b12 ^ ~b14 & b16;
      s[13] = b13 ^ ~b15 & b17;
      s[22] = b22 ^ ~b24 & b26;
      s[23] = b23 ^ ~b25 & b27;
      s[32] = b32 ^ ~b34 & b36;
      s[33] = b33 ^ ~b35 & b37;
      s[42] = b42 ^ ~b44 & b46;
      s[43] = b43 ^ ~b45 & b47;
      s[4] = b4 ^ ~b6 & b8;
      s[5] = b5 ^ ~b7 & b9;
      s[14] = b14 ^ ~b16 & b18;
      s[15] = b15 ^ ~b17 & b19;
      s[24] = b24 ^ ~b26 & b28;
      s[25] = b25 ^ ~b27 & b29;
      s[34] = b34 ^ ~b36 & b38;
      s[35] = b35 ^ ~b37 & b39;
      s[44] = b44 ^ ~b46 & b48;
      s[45] = b45 ^ ~b47 & b49;
      s[6] = b6 ^ ~b8 & b0;
      s[7] = b7 ^ ~b9 & b1;
      s[16] = b16 ^ ~b18 & b10;
      s[17] = b17 ^ ~b19 & b11;
      s[26] = b26 ^ ~b28 & b20;
      s[27] = b27 ^ ~b29 & b21;
      s[36] = b36 ^ ~b38 & b30;
      s[37] = b37 ^ ~b39 & b31;
      s[46] = b46 ^ ~b48 & b40;
      s[47] = b47 ^ ~b49 & b41;
      s[8] = b8 ^ ~b0 & b2;
      s[9] = b9 ^ ~b1 & b3;
      s[18] = b18 ^ ~b10 & b12;
      s[19] = b19 ^ ~b11 & b13;
      s[28] = b28 ^ ~b20 & b22;
      s[29] = b29 ^ ~b21 & b23;
      s[38] = b38 ^ ~b30 & b32;
      s[39] = b39 ^ ~b31 & b33;
      s[48] = b48 ^ ~b40 & b42;
      s[49] = b49 ^ ~b41 & b43;

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  var keccak = function keccak(bits) {
    return function (str) {
      var msg;
      if (str.slice(0, 2) === "0x") {
        msg = [];
        for (var i = 2, l = str.length; i < l; i += 2) {
          msg.push(parseInt(str.slice(i, i + 2), 16));
        }
      } else {
        msg = str;
      }
      return update(Keccak(bits, bits), msg);
    };
  };

  var hash = {
    keccak256: keccak(256),
    keccak512: keccak(512),
    keccak256s: keccak(256),
    keccak512s: keccak(512)
  };

  /*
   This file is part of web3.js.

   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file utils.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */








  /**
   * Returns true if object is BN, otherwise false
   *
   * @method isBN
   * @param {Object} object
   * @return {Boolean}
   */
  var isBN = function (object) {
      return object instanceof bn$2 ||
          (object && object.constructor && object.constructor.name === 'BN');
  };

  /**
   * Returns true if object is BigNumber, otherwise false
   *
   * @method isBigNumber
   * @param {Object} object
   * @return {Boolean}
   */
  var isBigNumber = function (object) {
      return object && object.constructor && object.constructor.name === 'BigNumber';
  };

  /**
   * Takes an input and transforms it into an BN
   *
   * @method toBN
   * @param {Number|String|BN} number, string, HEX string or BN
   * @return {BN} BN
   */
  var toBN = function(number){
      try {
          return src$2.apply(null, arguments);
      } catch(e) {
          throw new Error(e + ' Given value: "'+ number +'"');
      }
  };


  /**
   * Takes and input transforms it into BN and if it is negative value, into two's complement
   *
   * @method toTwosComplement
   * @param {Number|String|BN} number
   * @return {String}
   */
  var toTwosComplement = function (number) {
      return '0x'+ toBN(number).toTwos(256).toString(16, 64);
  };

  /**
   * Checks if the given string is an address
   *
   * @method isAddress
   * @param {String} address the given HEX address
   * @return {Boolean}
   */
  var isAddress = function (address) {
      // check if it has the basic requirements of an address
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
          return false;
          // If it's ALL lowercase or ALL upppercase
      } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
          return true;
          // Otherwise check each case
      } else {
          return checkAddressChecksum(address);
      }
  };



  /**
   * Checks if the given string is a checksummed address
   *
   * @method checkAddressChecksum
   * @param {String} address the given HEX address
   * @return {Boolean}
   */
  var checkAddressChecksum = function (address) {
      // Check each case
      address = address.replace(/^0x/i,'');
      var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');

      for (var i = 0; i < 40; i++ ) {
          // the nth letter should be uppercase if the nth digit of casemap is 1
          if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
              return false;
          }
      }
      return true;
  };

  /**
   * Should be called to pad string to expected length
   *
   * @method leftPad
   * @param {String} string to be padded
   * @param {Number} chars that result string should have
   * @param {String} sign, by default 0
   * @returns {String} right aligned string
   */
  var leftPad = function (string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
      string = string.toString(16).replace(/^0x/i,'');

      var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;

      return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : "0") + string;
  };

  /**
   * Should be called to pad string to expected length
   *
   * @method rightPad
   * @param {String} string to be padded
   * @param {Number} chars that result string should have
   * @param {String} sign, by default 0
   * @returns {String} right aligned string
   */
  var rightPad = function (string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
      string = string.toString(16).replace(/^0x/i,'');

      var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;

      return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : "0"));
  };


  /**
   * Should be called to get hex representation (prefixed by 0x) of utf8 string
   *
   * @method utf8ToHex
   * @param {String} str
   * @returns {String} hex representation of input string
   */
  var utf8ToHex = function(str) {
      str = utf8.encode(str);
      var hex = "";

      // remove \u0000 padding from either side
      str = str.replace(/^(?:\u0000)*/,'');
      str = str.split("").reverse().join("");
      str = str.replace(/^(?:\u0000)*/,'');
      str = str.split("").reverse().join("");

      for(var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          // if (code !== 0) {
          var n = code.toString(16);
          hex += n.length < 2 ? '0' + n : n;
          // }
      }

      return "0x" + hex;
  };

  /**
   * Should be called to get utf8 from it's hex representation
   *
   * @method hexToUtf8
   * @param {String} hex
   * @returns {String} ascii string representation of hex value
   */
  var hexToUtf8 = function(hex) {
      if (!isHexStrict(hex))
          throw new Error('The parameter "'+ hex +'" must be a valid HEX string.');

      var str = "";
      var code = 0;
      hex = hex.replace(/^0x/i,'');

      // remove 00 padding from either side
      hex = hex.replace(/^(?:00)*/,'');
      hex = hex.split("").reverse().join("");
      hex = hex.replace(/^(?:00)*/,'');
      hex = hex.split("").reverse().join("");

      var l = hex.length;

      for (var i=0; i < l; i+=2) {
          code = parseInt(hex.substr(i, 2), 16);
          // if (code !== 0) {
          str += String.fromCharCode(code);
          // }
      }

      return utf8.decode(str);
  };


  /**
   * Converts value to it's number representation
   *
   * @method hexToNumber
   * @param {String|Number|BN} value
   * @return {String}
   */
  var hexToNumber = function (value) {
      if (!value) {
          return value;
      }

      return toBN(value).toNumber();
  };

  /**
   * Converts value to it's decimal representation in string
   *
   * @method hexToNumberString
   * @param {String|Number|BN} value
   * @return {String}
   */
  var hexToNumberString = function (value) {
      if (!value) return value;

      return toBN(value).toString(10);
  };


  /**
   * Converts value to it's hex representation
   *
   * @method numberToHex
   * @param {String|Number|BN} value
   * @return {String}
   */
  var numberToHex = function (value) {
      if (underscore.isNull(value) || underscore.isUndefined(value)) {
          return value;
      }

      if (!isFinite(value) && !isHexStrict(value)) {
          throw new Error('Given input "'+value+'" is not a number.');
      }

      var number = toBN(value);
      var result = number.toString(16);

      return number.lt(new bn$2(0)) ? '-0x' + result.substr(1) : '0x' + result;
  };


  /**
   * Convert a byte array to a hex string
   *
   * Note: Implementation from crypto-js
   *
   * @method bytesToHex
   * @param {Array} bytes
   * @return {String} the hex string
   */
  var bytesToHex = function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
          /* jshint ignore:start */
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 0xF).toString(16));
          /* jshint ignore:end */
      }
      return '0x'+ hex.join("");
  };

  /**
   * Convert a hex string to a byte array
   *
   * Note: Implementation from crypto-js
   *
   * @method hexToBytes
   * @param {string} hex
   * @return {Array} the byte array
   */
  var hexToBytes = function(hex) {
      hex = hex.toString(16);

      if (!isHexStrict(hex)) {
          throw new Error('Given value "'+ hex +'" is not a valid hex string.');
      }

      hex = hex.replace(/^0x/i,'');

      for (var bytes = [], c = 0; c < hex.length; c += 2)
          bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
  };

  /**
   * Auto converts any given value into it's hex representation.
   *
   * And even stringifys objects before.
   *
   * @method toHex
   * @param {String|Number|BN|Object} value
   * @param {Boolean} returnType
   * @return {String}
   */
  var toHex = function (value, returnType) {
      /*jshint maxcomplexity: false */

      if (isAddress(value)) {
          return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');
      }

      if (underscore.isBoolean(value)) {
          return returnType ? 'bool' : value ? '0x01' : '0x00';
      }


      if (underscore.isObject(value) && !isBigNumber(value) && !isBN(value)) {
          return returnType ? 'string' : utf8ToHex(JSON.stringify(value));
      }

      // if its a negative number, pass it through numberToHex
      if (underscore.isString(value)) {
          if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {
              return returnType ? 'int256' : numberToHex(value);
          } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {
              return returnType ? 'bytes' : value;
          } else if (!isFinite(value)) {
              return returnType ? 'string' : utf8ToHex(value);
          }
      }

      return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);
  };


  /**
   * Check if string is HEX, requires a 0x in front
   *
   * @method isHexStrict
   * @param {String} hex to be checked
   * @returns {Boolean}
   */
  var isHexStrict = function (hex) {
      return ((underscore.isString(hex) || underscore.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));
  };

  /**
   * Check if string is HEX
   *
   * @method isHex
   * @param {String} hex to be checked
   * @returns {Boolean}
   */
  var isHex = function (hex) {
      return ((underscore.isString(hex) || underscore.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));
  };


  /**
   * Returns true if given string is a valid Ethereum block header bloom.
   *
   * TODO UNDOCUMENTED
   *
   * @method isBloom
   * @param {String} hex encoded bloom filter
   * @return {Boolean}
   */
  var isBloom = function (bloom) {
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
          return false;
      } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
          return true;
      }
      return false;
  };

  /**
   * Returns true if given string is a valid log topic.
   *
   * TODO UNDOCUMENTED
   *
   * @method isTopic
   * @param {String} hex encoded topic
   * @return {Boolean}
   */
  var isTopic = function (topic) {
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
          return false;
      } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
          return true;
      }
      return false;
  };


  /**
   * Hashes values to a sha3 hash using keccak 256
   *
   * To hash a HEX string the hex must have 0x in front.
   *
   * @method sha3
   * @return {String} the sha3 string
   */
  var SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';

  var sha3 = function (value) {
      if (isHexStrict(value) && /^0x/i.test((value).toString())) {
          value = hexToBytes(value);
      }

      var returnValue = hash.keccak256(value); // jshint ignore:line

      if(returnValue === SHA3_NULL_S) {
          return null;
      } else {
          return returnValue;
      }
  };
  // expose the under the hood keccak256
  sha3._Hash = hash;


  var utils = {
      BN: bn$2,
      isBN: isBN,
      isBigNumber: isBigNumber,
      toBN: toBN,
      isAddress: isAddress,
      isBloom: isBloom, // TODO UNDOCUMENTED
      isTopic: isTopic, // TODO UNDOCUMENTED
      checkAddressChecksum: checkAddressChecksum,
      utf8ToHex: utf8ToHex,
      hexToUtf8: hexToUtf8,
      hexToNumber: hexToNumber,
      hexToNumberString: hexToNumberString,
      numberToHex: numberToHex,
      toHex: toHex,
      hexToBytes: hexToBytes,
      bytesToHex: bytesToHex,
      isHex: isHex,
      isHexStrict: isHexStrict,
      leftPad: leftPad,
      rightPad: rightPad,
      toTwosComplement: toTwosComplement,
      sha3: sha3
  };

  /*
   This file is part of web3.js.

   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file soliditySha3.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */






  var _elementaryName = function (name) {
      /*jshint maxcomplexity:false */

      if (name.startsWith('int[')) {
          return 'int256' + name.slice(3);
      } else if (name === 'int') {
          return 'int256';
      } else if (name.startsWith('uint[')) {
          return 'uint256' + name.slice(4);
      } else if (name === 'uint') {
          return 'uint256';
      } else if (name.startsWith('fixed[')) {
          return 'fixed128x128' + name.slice(5);
      } else if (name === 'fixed') {
          return 'fixed128x128';
      } else if (name.startsWith('ufixed[')) {
          return 'ufixed128x128' + name.slice(6);
      } else if (name === 'ufixed') {
          return 'ufixed128x128';
      }
      return name;
  };

  // Parse N from type<N>
  var _parseTypeN = function (type) {
      var typesize = /^\D+(\d+).*$/.exec(type);
      return typesize ? parseInt(typesize[1], 10) : null;
  };

  // Parse N from type[<N>]
  var _parseTypeNArray = function (type) {
      var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
      return arraySize ? parseInt(arraySize[1], 10) : null;
  };

  var _parseNumber = function (arg) {
      var type = typeof arg;
      if (type === 'string') {
          if (utils.isHexStrict(arg)) {
              return new bn$2(arg.replace(/0x/i,''), 16);
          } else {
              return new bn$2(arg, 10);
          }
      } else if (type === 'number') {
          return new bn$2(arg);
      } else if (utils.isBigNumber(arg)) {
          return new bn$2(arg.toString(10));
      } else if (utils.isBN(arg)) {
          return arg;
      } else {
          throw new Error(arg +' is not a number');
      }
  };

  var _solidityPack = function (type, value, arraySize) {
      /*jshint maxcomplexity:false */

      var size, num;
      type = _elementaryName(type);


      if (type === 'bytes') {

          if (value.replace(/^0x/i,'').length % 2 !== 0) {
              throw new Error('Invalid bytes characters '+ value.length);
          }

          return value;
      } else if (type === 'string') {
          return utils.utf8ToHex(value);
      } else if (type === 'bool') {
          return value ? '01' : '00';
      } else if (type.startsWith('address')) {
          if(arraySize) {
              size = 64;
          } else {
              size = 40;
          }

          if(!utils.isAddress(value)) {
              throw new Error(value +' is not a valid address, or the checksum is invalid.');
          }

          return utils.leftPad(value.toLowerCase(), size);
      }

      size = _parseTypeN(type);

      if (type.startsWith('bytes')) {

          if(!size) {
              throw new Error('bytes[] not yet supported in solidity');
          }

          // must be 32 byte slices when in an array
          if(arraySize) {
              size = 32;
          }

          if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {
              throw new Error('Invalid bytes' + size +' for '+ value);
          }

          return utils.rightPad(value, size * 2);
      } else if (type.startsWith('uint')) {

          if ((size % 8) || (size < 8) || (size > 256)) {
              throw new Error('Invalid uint'+size+' size');
          }

          num = _parseNumber(value);
          if (num.bitLength() > size) {
              throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
          }

          if(num.lt(new bn$2(0))) {
              throw new Error('Supplied uint '+ num.toString() +' is negative');
          }

          return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;
      } else if (type.startsWith('int')) {

          if ((size % 8) || (size < 8) || (size > 256)) {
              throw new Error('Invalid int'+size+' size');
          }

          num = _parseNumber(value);
          if (num.bitLength() > size) {
              throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
          }

          if(num.lt(new bn$2(0))) {
              return num.toTwos(size).toString('hex');
          } else {
              return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;
          }

      } else {
          // FIXME: support all other types
          throw new Error('Unsupported or invalid type: ' + type);
      }
  };


  var _processSoliditySha3Args = function (arg) {
      /*jshint maxcomplexity:false */

      if(underscore.isArray(arg)) {
          throw new Error('Autodetection of array types is not supported.');
      }

      var type, value = '';
      var hexArg, arraySize;

      // if type is given
      if (underscore.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {
          type = arg.t || arg.type;
          value = arg.v || arg.value;

      // otherwise try to guess the type
      } else {

          type = utils.toHex(arg, true);
          value = utils.toHex(arg);

          if (!type.startsWith('int') && !type.startsWith('uint')) {
              type = 'bytes';
          }
      }

      if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {
          value = new bn$2(value);
      }

      // get the array size
      if(underscore.isArray(value)) {
          arraySize = _parseTypeNArray(type);
          if(arraySize && value.length !== arraySize) {
              throw new Error(type +' is not matching the given array '+ JSON.stringify(value));
          } else {
              arraySize = value.length;
          }
      }


      if (underscore.isArray(value)) {
          hexArg = value.map(function (val) {
              return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');
          });
          return hexArg.join('');
      } else {
          hexArg = _solidityPack(type, value, arraySize);
          return hexArg.toString('hex').replace('0x','');
      }

  };

  /**
   * Hashes solidity values to a sha3 hash using keccak 256
   *
   * @method soliditySha3
   * @return {Object} the sha3
   */
  var soliditySha3 = function () {
      /*jshint maxcomplexity:false */

      var args = Array.prototype.slice.call(arguments);

      var hexArgs = underscore.map(args, _processSoliditySha3Args);

      // console.log(args, hexArgs);
      // console.log('0x'+ hexArgs.join(''));

      return utils.sha3('0x'+ hexArgs.join(''));
  };


  var soliditySha3_1 = soliditySha3;

  var crypto$1 = crypto;

  var randomHex = function(size, callback) {
      var crypto$$1 = crypto$1;
      var isCallback = (typeof callback === 'function');

      
      if (size > 65536) {
          if(isCallback) {
              callback(new Error('Requested too many random bytes.'));
          } else {
              throw new Error('Requested too many random bytes.');
          }
      }

      // is node
      if (typeof crypto$$1 !== 'undefined' && crypto$$1.randomBytes) {

          if(isCallback) {
              crypto$$1.randomBytes(size, function(err, result){
                  if(!err) {
                      callback(null, '0x'+ result.toString('hex'));
                  } else {
                      callback(error);
                  }
              });
          } else {
              return '0x'+ crypto$$1.randomBytes(size).toString('hex');
          }

      // is browser
      } else {
          var cryptoLib;

          if (typeof crypto$$1 !== 'undefined') {
              cryptoLib = crypto$$1;
          } else if(typeof msCrypto !== 'undefined') {
              cryptoLib = msCrypto;
          }

          if (cryptoLib && cryptoLib.getRandomValues) {
              var randomBytes = cryptoLib.getRandomValues(new Uint8Array(size));
              var returnValue = '0x'+ Array.from(randomBytes).map(function(arr){ return arr.toString(16); }).join('');

              if(isCallback) {
                  callback(null, returnValue);
              } else {
                  return returnValue;
              }

          // not crypto object
          } else {
              var error = new Error('No "crypto" object available. This Browser doesn\'t support generating secure random bytes.');

              if(isCallback) {
                  callback(error);
              } else {
                 throw error;
              }
          }
      }
  };


  var src$3 = randomHex;

  /*
   This file is part of web3.js.

   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file utils.js
   * @author Marek Kotewicz <marek@parity.io>
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */










  /**
   * Fires an error in an event emitter and callback and returns the eventemitter
   *
   * @method _fireError
   * @param {Object} error a string, a error, or an object with {message, data}
   * @param {Object} emitter
   * @param {Function} reject
   * @param {Function} callback
   * @return {Object} the emitter
   */
  var _fireError = function (error, emitter, reject, callback) {
      /*jshint maxcomplexity: 10 */

      // add data if given
      if(underscore.isObject(error) && !(error instanceof Error) &&  error.data) {
          if(underscore.isObject(error.data) || underscore.isArray(error.data)) {
              error.data = JSON.stringify(error.data, null, 2);
          }

          error = error.message +"\n"+ error.data;
      }

      if(underscore.isString(error)) {
          error = new Error(error);
      }

      if (underscore.isFunction(callback)) {
          callback(error);
      }
      if (underscore.isFunction(reject)) {
          // suppress uncatched error if an error listener is present
          // OR suppress uncatched error if an callback listener is present
          if (emitter &&
              (underscore.isFunction(emitter.listeners) &&
              emitter.listeners('error').length) || underscore.isFunction(callback)) {
              emitter.catch(function(){});
          }
          // reject later, to be able to return emitter
          setTimeout(function () {
              reject(error);
          }, 1);
      }

      if(emitter && underscore.isFunction(emitter.emit)) {
          // emit later, to be able to return emitter
          setTimeout(function () {
              emitter.emit('error', error);
              emitter.removeAllListeners();
          }, 1);
      }

      return emitter;
  };

  /**
   * Should be used to create full function/event name from json abi
   *
   * @method _jsonInterfaceMethodToString
   * @param {Object} json
   * @return {String} full function/event name
   */
  var _jsonInterfaceMethodToString = function (json) {
      if (underscore.isObject(json) && json.name && json.name.indexOf('(') !== -1) {
          return json.name;
      }

      var typeName = json.inputs.map(function(i){return i.type; }).join(',');
      return json.name + '(' + typeName + ')';
  };



  /**
   * Should be called to get ascii from it's hex representation
   *
   * @method hexToAscii
   * @param {String} hex
   * @returns {String} ascii string representation of hex value
   */
  var hexToAscii = function(hex) {
      if (!utils.isHexStrict(hex))
          throw new Error('The parameter must be a valid HEX string.');

      var str = "";
      var i = 0, l = hex.length;
      if (hex.substring(0, 2) === '0x') {
          i = 2;
      }
      for (; i < l; i+=2) {
          var code = parseInt(hex.substr(i, 2), 16);
          str += String.fromCharCode(code);
      }

      return str;
  };

  /**
   * Should be called to get hex representation (prefixed by 0x) of ascii string
   *
   * @method asciiToHex
   * @param {String} str
   * @returns {String} hex representation of input string
   */
  var asciiToHex = function(str) {
      if(!str)
          return "0x00";
      var hex = "";
      for(var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          var n = code.toString(16);
          hex += n.length < 2 ? '0' + n : n;
      }

      return "0x" + hex;
  };



  /**
   * Returns value of unit in Wei
   *
   * @method getUnitValue
   * @param {String} unit the unit to convert to, default ether
   * @returns {BN} value of the unit (in Wei)
   * @throws error if the unit is not correct:w
   */
  var getUnitValue = function (unit) {
      unit = unit ? unit.toLowerCase() : 'ether';
      if (!lib.unitMap[unit]) {
          throw new Error('This unit "'+ unit +'" doesn\'t exist, please use the one of the following units' + JSON.stringify(lib.unitMap, null, 2));
      }
      return unit;
  };

  /**
   * Takes a number of wei and converts it to any other ether unit.
   *
   * Possible units are:
   *   SI Short   SI Full        Effigy       Other
   * - kwei       femtoether     babbage
   * - mwei       picoether      lovelace
   * - gwei       nanoether      shannon      nano
   * - --         microether     szabo        micro
   * - --         milliether     finney       milli
   * - ether      --             --
   * - kether                    --           grand
   * - mether
   * - gether
   * - tether
   *
   * @method fromWei
   * @param {Number|String} number can be a number, number string or a HEX of a decimal
   * @param {String} unit the unit to convert to, default ether
   * @return {String|Object} When given a BN object it returns one as well, otherwise a number
   */
  var fromWei$1 = function(number, unit) {
      unit = getUnitValue(unit);

      if(!utils.isBN(number) && !underscore.isString(number)) {
          throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
      }

      return utils.isBN(number) ? lib.fromWei(number, unit) : lib.fromWei(number, unit).toString(10);
  };

  /**
   * Takes a number of a unit and converts it to wei.
   *
   * Possible units are:
   *   SI Short   SI Full        Effigy       Other
   * - kwei       femtoether     babbage
   * - mwei       picoether      lovelace
   * - gwei       nanoether      shannon      nano
   * - --         microether     szabo        micro
   * - --         microether     szabo        micro
   * - --         milliether     finney       milli
   * - ether      --             --
   * - kether                    --           grand
   * - mether
   * - gether
   * - tether
   *
   * @method toWei
   * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal
   * @param {String} unit the unit to convert from, default ether
   * @return {String|Object} When given a BN object it returns one as well, otherwise a number
   */
  var toWei$1 = function(number, unit) {
      unit = getUnitValue(unit);

      if(!utils.isBN(number) && !underscore.isString(number)) {
          throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
      }

      return utils.isBN(number) ? lib.toWei(number, unit) : lib.toWei(number, unit).toString(10);
  };




  /**
   * Converts to a checksum address
   *
   * @method toChecksumAddress
   * @param {String} address the given HEX address
   * @return {String}
   */
  var toChecksumAddress = function (address) {
      if (typeof address === 'undefined') return '';

      if(!/^(0x)?[0-9a-f]{40}$/i.test(address))
          throw new Error('Given address "'+ address +'" is not a valid Ethereum address.');



      address = address.toLowerCase().replace(/^0x/i,'');
      var addressHash = utils.sha3(address).replace(/^0x/i,'');
      var checksumAddress = '0x';

      for (var i = 0; i < address.length; i++ ) {
          // If ith character is 9 to f then make it uppercase
          if (parseInt(addressHash[i], 16) > 7) {
              checksumAddress += address[i].toUpperCase();
          } else {
              checksumAddress += address[i];
          }
      }
      return checksumAddress;
  };



  var src$4 = {
      _fireError: _fireError,
      _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,
      // extractDisplayName: extractDisplayName,
      // extractTypeName: extractTypeName,
      randomHex: src$3,
      _: underscore,
      BN: utils.BN,
      isBN: utils.isBN,
      isBigNumber: utils.isBigNumber,
      isHex: utils.isHex,
      isHexStrict: utils.isHexStrict,
      sha3: utils.sha3,
      keccak256: utils.sha3,
      soliditySha3: soliditySha3_1,
      isAddress: utils.isAddress,
      checkAddressChecksum: utils.checkAddressChecksum,
      toChecksumAddress: toChecksumAddress,
      toHex: utils.toHex,
      toBN: utils.toBN,

      bytesToHex: utils.bytesToHex,
      hexToBytes: utils.hexToBytes,

      hexToNumberString: utils.hexToNumberString,

      hexToNumber: utils.hexToNumber,
      toDecimal: utils.hexToNumber, // alias

      numberToHex: utils.numberToHex,
      fromDecimal: utils.numberToHex, // alias

      hexToUtf8: utils.hexToUtf8,
      hexToString: utils.hexToUtf8,
      toUtf8: utils.hexToUtf8,

      utf8ToHex: utils.utf8ToHex,
      stringToHex: utils.utf8ToHex,
      fromUtf8: utils.utf8ToHex,

      hexToAscii: hexToAscii,
      toAscii: hexToAscii,
      asciiToHex: asciiToHex,
      fromAscii: asciiToHex,

      unitMap: lib.unitMap,
      toWei: toWei$1,
      fromWei: fromWei$1,

      padLeft: utils.leftPad,
      leftPad: utils.leftPad,
      padRight: utils.rightPad,
      rightPad: utils.rightPad,
      toTwosComplement: utils.toTwosComplement
  };

  var bn$3 = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert$$1 (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = commonjsRequire('buf' + 'fer').Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert$$1(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert$$1(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert$$1(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert$$1(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert$$1(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert$$1(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert$$1(byteLength <= reqLength, 'byte array longer than desired length');
      assert$$1(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert$$1(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert$$1(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert$$1(carry === 0);
      assert$$1((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) {
        // No-op, we should not move anything at all
      } else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert$$1(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert$$1(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert$$1(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert$$1(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert$$1(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert$$1(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert$$1(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert$$1(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      assert$$1(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert$$1(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert$$1(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert$$1(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert$$1(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert$$1(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert$$1(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert$$1(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert$$1(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert$$1(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert$$1(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert$$1(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert$$1(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert$$1(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert$$1(a.negative === 0, 'red works only with positives');
      assert$$1(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert$$1((a.negative | b.negative) === 0, 'red works only with positives');
      assert$$1(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert$$1(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert$$1(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert$$1(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })('object' === 'undefined' || module, commonjsGlobal);
  });

  var leftPad$1 = function (string, bytes) {
      var result = string;
      while (result.length < bytes * 2) {
          result = '0' + result;
      }
      return result;
  };

  /**
   * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
   * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
   *
   * @method iso13616Prepare
   * @param {String} iban the IBAN
   * @returns {String} the prepared IBAN
   */
  var iso13616Prepare = function (iban) {
      var A = 'A'.charCodeAt(0);
      var Z = 'Z'.charCodeAt(0);

      iban = iban.toUpperCase();
      iban = iban.substr(4) + iban.substr(0,4);

      return iban.split('').map(function(n){
          var code = n.charCodeAt(0);
          if (code >= A && code <= Z){
              // A = 10, B = 11, ... Z = 35
              return code - A + 10;
          } else {
              return n;
          }
      }).join('');
  };

  /**
   * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
   *
   * @method mod9710
   * @param {String} iban
   * @returns {Number}
   */
  var mod9710 = function (iban) {
      var remainder = iban,
          block;

      while (remainder.length > 2){
          block = remainder.slice(0, 9);
          remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
      }

      return parseInt(remainder, 10) % 97;
  };

  /**
   * This prototype should be used to create iban object from iban correct string
   *
   * @param {String} iban
   */
  var Iban = function Iban(iban) {
      this._iban = iban;
  };

  /**
   * This method should be used to create an ethereum address from a direct iban address
   *
   * @method toAddress
   * @param {String} iban address
   * @return {String} the ethereum address
   */
  Iban.toAddress = function (ib) {
      ib = new Iban(ib);

      if(!ib.isDirect()) {
          throw new Error('IBAN is indirect and can\'t be converted');
      }

      return ib.toAddress();
  };

  /**
   * This method should be used to create iban address from an ethereum address
   *
   * @method toIban
   * @param {String} address
   * @return {String} the IBAN address
   */
  Iban.toIban = function (address) {
      return Iban.fromAddress(address).toString();
  };

  /**
   * This method should be used to create iban object from an ethereum address
   *
   * @method fromAddress
   * @param {String} address
   * @return {Iban} the IBAN object
   */
  Iban.fromAddress = function (address) {
      if(!src$4.isAddress(address)){
          throw new Error('Provided address is not a valid address: '+ address);
      }

      address = address.replace('0x','').replace('0X','');

      var asBn = new bn$3(address, 16);
      var base36 = asBn.toString(36);
      var padded = leftPad$1(base36, 15);
      return Iban.fromBban(padded.toUpperCase());
  };

  /**
   * Convert the passed BBAN to an IBAN for this country specification.
   * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
   * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
   *
   * @method fromBban
   * @param {String} bban the BBAN to convert to IBAN
   * @returns {Iban} the IBAN object
   */
  Iban.fromBban = function (bban) {
      var countryCode = 'XE';

      var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
      var checkDigit = ('0' + (98 - remainder)).slice(-2);

      return new Iban(countryCode + checkDigit + bban);
  };

  /**
   * Should be used to create IBAN object for given institution and identifier
   *
   * @method createIndirect
   * @param {Object} options, required options are "institution" and "identifier"
   * @return {Iban} the IBAN object
   */
  Iban.createIndirect = function (options) {
      return Iban.fromBban('ETH' + options.institution + options.identifier);
  };

  /**
   * This method should be used to check if given string is valid iban object
   *
   * @method isValid
   * @param {String} iban string
   * @return {Boolean} true if it is valid IBAN
   */
  Iban.isValid = function (iban) {
      var i = new Iban(iban);
      return i.isValid();
  };

  /**
   * Should be called to check if iban is correct
   *
   * @method isValid
   * @returns {Boolean} true if it is, otherwise false
   */
  Iban.prototype.isValid = function () {
      return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
          mod9710(iso13616Prepare(this._iban)) === 1;
  };

  /**
   * Should be called to check if iban number is direct
   *
   * @method isDirect
   * @returns {Boolean} true if it is, otherwise false
   */
  Iban.prototype.isDirect = function () {
      return this._iban.length === 34 || this._iban.length === 35;
  };

  /**
   * Should be called to check if iban number if indirect
   *
   * @method isIndirect
   * @returns {Boolean} true if it is, otherwise false
   */
  Iban.prototype.isIndirect = function () {
      return this._iban.length === 20;
  };

  /**
   * Should be called to get iban checksum
   * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
   *
   * @method checksum
   * @returns {String} checksum
   */
  Iban.prototype.checksum = function () {
      return this._iban.substr(2, 2);
  };

  /**
   * Should be called to get institution identifier
   * eg. XREG
   *
   * @method institution
   * @returns {String} institution identifier
   */
  Iban.prototype.institution = function () {
      return this.isIndirect() ? this._iban.substr(7, 4) : '';
  };

  /**
   * Should be called to get client identifier within institution
   * eg. GAVOFYORK
   *
   * @method client
   * @returns {String} client identifier
   */
  Iban.prototype.client = function () {
      return this.isIndirect() ? this._iban.substr(11) : '';
  };

  /**
   * Should be called to get client direct address
   *
   * @method toAddress
   * @returns {String} ethereum address
   */
  Iban.prototype.toAddress = function () {
      if (this.isDirect()) {
          var base36 = this._iban.substr(4);
          var asBn = new bn$3(base36, 36);
          return src$4.toChecksumAddress(asBn.toString(16, 20));
      }

      return '';
  };

  Iban.prototype.toString = function () {
      return this._iban;
  };

  var src$5 = Iban;

  /**
   * Should the format output to a big number
   *
   * @method outputBigNumberFormatter
   * @param {String|Number|BigNumber} number
   * @returns {BigNumber} object
   */
  var outputBigNumberFormatter = function (number) {
      return src$4.toBN(number).toString(10);
  };

  var isPredefinedBlockNumber = function (blockNumber) {
      return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
  };

  var inputDefaultBlockNumberFormatter = function (blockNumber) {
      if (this && (blockNumber === undefined || blockNumber === null)) {
          return this.defaultBlock;
      }
      if (blockNumber === 'genesis' || blockNumber === 'earliest') {
          return '0x0';
      }
      return inputBlockNumberFormatter(blockNumber);
  };

  var inputBlockNumberFormatter = function (blockNumber) {
      if (blockNumber === undefined) {
          return undefined;
      } else if (isPredefinedBlockNumber(blockNumber)) {
          return blockNumber;
      }
      return (src$4.isHexStrict(blockNumber)) ? ((underscore.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : src$4.numberToHex(blockNumber);
  };

  /**
   * Formats the input of a transaction and converts all values to HEX
   *
   * @method _txInputFormatter
   * @param {Object} transaction options
   * @returns object
   */
  var _txInputFormatter = function (options){

      if (options.to) { // it might be contract creation
          options.to = inputAddressFormatter(options.to);
      }

      if (options.data && options.input) {
          throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
      }

      if (!options.data && options.input) {
          options.data = options.input;
          delete options.input;
      }

      if(options.data && !src$4.isHex(options.data)) {
          throw new Error('The data field must be HEX encoded data.');
      }

      // allow both
      if (options.gas || options.gasLimit) {
          options.gas = options.gas || options.gasLimit;
      }

      ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
          return options[key] !== undefined;
      }).forEach(function(key){
          options[key] = src$4.numberToHex(options[key]);
      });

      return options;
  };

  /**
   * Formats the input of a transaction and converts all values to HEX
   *
   * @method inputCallFormatter
   * @param {Object} transaction options
   * @returns object
  */
  var inputCallFormatter = function (options){

      options = _txInputFormatter(options);

      var from = options.from || (this ? this.defaultAccount : null);

      if (from) {
          options.from = inputAddressFormatter(from);
      }


      return options;
  };

  /**
   * Formats the input of a transaction and converts all values to HEX
   *
   * @method inputTransactionFormatter
   * @param {Object} options
   * @returns object
  */
  var inputTransactionFormatter = function (options) {

      options = _txInputFormatter(options);

      // check from, only if not number, or object
      if (!underscore.isNumber(options.from) && !underscore.isObject(options.from)) {
          options.from = options.from || (this ? this.defaultAccount : null);

          if (!options.from && !underscore.isNumber(options.from)) {
              throw new Error('The send transactions "from" field must be defined!');
          }

          options.from = inputAddressFormatter(options.from);
      }

      return options;
  };

  /**
   * Hex encodes the data passed to eth_sign and personal_sign
   *
   * @method inputSignFormatter
   * @param {String} data
   * @returns {String}
   */
  var inputSignFormatter = function (data) {
      return (src$4.isHexStrict(data)) ? data : src$4.utf8ToHex(data);
  };

  /**
   * Formats the output of a transaction to its proper values
   *
   * @method outputTransactionFormatter
   * @param {Object} tx
   * @returns {Object}
  */
  var outputTransactionFormatter = function (tx){
      if(tx.blockNumber !== null)
          tx.blockNumber = src$4.hexToNumber(tx.blockNumber);
      if(tx.transactionIndex !== null)
          tx.transactionIndex = src$4.hexToNumber(tx.transactionIndex);
      tx.nonce = src$4.hexToNumber(tx.nonce);
      tx.gas = src$4.hexToNumber(tx.gas);
      tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);
      tx.value = outputBigNumberFormatter(tx.value);

      if(tx.to && src$4.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation
          tx.to = src$4.toChecksumAddress(tx.to);
      } else {
          tx.to = null; // set to `null` if invalid address
      }

      if(tx.from) {
          tx.from = src$4.toChecksumAddress(tx.from);
      }

      return tx;
  };

  /**
   * Formats the output of a transaction receipt to its proper values
   *
   * @method outputTransactionReceiptFormatter
   * @param {Object} receipt
   * @returns {Object}
  */
  var outputTransactionReceiptFormatter = function (receipt){
      if(typeof receipt !== 'object') {
          throw new Error('Received receipt is invalid: '+ receipt);
      }

      if(receipt.blockNumber !== null)
          receipt.blockNumber = src$4.hexToNumber(receipt.blockNumber);
      if(receipt.transactionIndex !== null)
          receipt.transactionIndex = src$4.hexToNumber(receipt.transactionIndex);
      receipt.cumulativeGasUsed = src$4.hexToNumber(receipt.cumulativeGasUsed);
      receipt.gasUsed = src$4.hexToNumber(receipt.gasUsed);

      if(underscore.isArray(receipt.logs)) {
          receipt.logs = receipt.logs.map(outputLogFormatter);
      }

      if(receipt.contractAddress) {
          receipt.contractAddress = src$4.toChecksumAddress(receipt.contractAddress);
      }

      return receipt;
  };

  /**
   * Formats the output of a block to its proper values
   *
   * @method outputBlockFormatter
   * @param {Object} block
   * @returns {Object}
  */
  var outputBlockFormatter = function(block) {

      // transform to number
      block.gasLimit = src$4.hexToNumber(block.gasLimit);
      block.gasUsed = src$4.hexToNumber(block.gasUsed);
      block.size = src$4.hexToNumber(block.size);
      block.timestamp = src$4.hexToNumber(block.timestamp);
      if (block.number !== null)
          block.number = src$4.hexToNumber(block.number);

      if(block.difficulty)
          block.difficulty = outputBigNumberFormatter(block.difficulty);
      if(block.totalDifficulty)
          block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);

      if (underscore.isArray(block.transactions)) {
          block.transactions.forEach(function(item){
              if(!underscore.isString(item))
                  return outputTransactionFormatter(item);
          });
      }

      if (block.miner)
          block.miner = src$4.toChecksumAddress(block.miner);

      return block;
  };

  /**
   * Formats the input of a log
   *
   * @method inputLogFormatter
   * @param {Object} log object
   * @returns {Object} log
  */
  var inputLogFormatter = function(options) {
      var toTopic = function(value){

          if(value === null || typeof value === 'undefined')
              return null;

          value = String(value);

          if(value.indexOf('0x') === 0)
              return value;
          else
              return src$4.fromUtf8(value);
      };

      // make sure topics, get converted to hex
      options.topics = options.topics || [];
      options.topics = options.topics.map(function(topic){
          return (underscore.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
      });

      toTopic = null;

      if (options.address) {
          options.address = (underscore.isArray(options.address)) ? options.address.map(function (addr) {
              return inputAddressFormatter(addr);
          }) : inputAddressFormatter(options.address);
      }

      return options;
  };

  /**
   * Formats the output of a log
   *
   * @method outputLogFormatter
   * @param {Object} log object
   * @returns {Object} log
  */
  var outputLogFormatter = function(log) {

      // generate a custom log id
      if(typeof log.blockHash === 'string' &&
         typeof log.transactionHash === 'string' &&
         typeof log.logIndex === 'string') {
          var shaId = src$4.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));
          log.id = 'log_'+ shaId.replace('0x','').substr(0,8);
      } else if(!log.id) {
          log.id = null;
      }

      if (log.blockNumber !== null)
          log.blockNumber = src$4.hexToNumber(log.blockNumber);
      if (log.transactionIndex !== null)
          log.transactionIndex = src$4.hexToNumber(log.transactionIndex);
      if (log.logIndex !== null)
          log.logIndex = src$4.hexToNumber(log.logIndex);

      if (log.address) {
          log.address = src$4.toChecksumAddress(log.address);
      }

      return log;
  };

  /**
   * Formats the input of a whisper post and converts all values to HEX
   *
   * @method inputPostFormatter
   * @param {Object} transaction object
   * @returns {Object}
  */
  var inputPostFormatter = function(post) {

      // post.payload = utils.toHex(post.payload);

      if (post.ttl)
          post.ttl = src$4.numberToHex(post.ttl);
      if (post.workToProve)
          post.workToProve = src$4.numberToHex(post.workToProve);
      if (post.priority)
          post.priority = src$4.numberToHex(post.priority);

      // fallback
      if (!underscore.isArray(post.topics)) {
          post.topics = post.topics ? [post.topics] : [];
      }

      // format the following options
      post.topics = post.topics.map(function(topic){
          // convert only if not hex
          return (topic.indexOf('0x') === 0) ? topic : src$4.fromUtf8(topic);
      });

      return post;
  };

  /**
   * Formats the output of a received post message
   *
   * @method outputPostFormatter
   * @param {Object}
   * @returns {Object}
   */
  var outputPostFormatter = function(post){

      post.expiry = src$4.hexToNumber(post.expiry);
      post.sent = src$4.hexToNumber(post.sent);
      post.ttl = src$4.hexToNumber(post.ttl);
      post.workProved = src$4.hexToNumber(post.workProved);
      // post.payloadRaw = post.payload;
      // post.payload = utils.hexToAscii(post.payload);

      // if (utils.isJson(post.payload)) {
      //     post.payload = JSON.parse(post.payload);
      // }

      // format the following options
      if (!post.topics) {
          post.topics = [];
      }
      post.topics = post.topics.map(function(topic){
          return src$4.toUtf8(topic);
      });

      return post;
  };

  var inputAddressFormatter = function (address) {
      var iban = new src$5(address);
      if (iban.isValid() && iban.isDirect()) {
          return iban.toAddress().toLowerCase();
      } else if (src$4.isAddress(address)) {
          return '0x' + address.toLowerCase().replace('0x','');
      }
      throw new Error('Provided address "'+ address +'" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\'t be converted.');
  };


  var outputSyncingFormatter = function(result) {

      result.startingBlock = src$4.hexToNumber(result.startingBlock);
      result.currentBlock = src$4.hexToNumber(result.currentBlock);
      result.highestBlock = src$4.hexToNumber(result.highestBlock);
      if (result.knownStates) {
          result.knownStates = src$4.hexToNumber(result.knownStates);
          result.pulledStates = src$4.hexToNumber(result.pulledStates);
      }

      return result;
  };

  var formatters = {
      inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
      inputBlockNumberFormatter: inputBlockNumberFormatter,
      inputCallFormatter: inputCallFormatter,
      inputTransactionFormatter: inputTransactionFormatter,
      inputAddressFormatter: inputAddressFormatter,
      inputPostFormatter: inputPostFormatter,
      inputLogFormatter: inputLogFormatter,
      inputSignFormatter: inputSignFormatter,
      outputBigNumberFormatter: outputBigNumberFormatter,
      outputTransactionFormatter: outputTransactionFormatter,
      outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
      outputBlockFormatter: outputBlockFormatter,
      outputLogFormatter: outputLogFormatter,
      outputPostFormatter: outputPostFormatter,
      outputSyncingFormatter: outputSyncingFormatter
  };

  var src$6 = {
      errors: errors,
      formatters: formatters
  };

  /*
      This file is part of web3.js.

      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.

      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */

  // Initialize Jsonrpc as a simple object with utility functions.
  var Jsonrpc = {
      messageId: 0
  };

  /**
   * Should be called to valid json create payload object
   *
   * @method toPayload
   * @param {Function} method of jsonrpc call, required
   * @param {Array} params, an array of method params, optional
   * @returns {Object} valid jsonrpc payload object
   */
  Jsonrpc.toPayload = function (method, params) {
      if (!method) {
          throw new Error('JSONRPC method should be specified for params: "'+ JSON.stringify(params) +'"!');
      }

      // advance message ID
      Jsonrpc.messageId++;

      return {
          jsonrpc: '2.0',
          id: Jsonrpc.messageId,
          method: method,
          params: params || []
      };
  };

  /**
   * Should be called to check if jsonrpc response is valid
   *
   * @method isValidResponse
   * @param {Object}
   * @returns {Boolean} true if response is valid, otherwise false
   */
  Jsonrpc.isValidResponse = function (response) {
      return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);

      function validateSingleMessage(message){
        return !!message &&
          !message.error &&
          message.jsonrpc === '2.0' &&
          (typeof message.id === 'number' || typeof message.id === 'string') &&
          message.result !== undefined; // only undefined is not valid json object
      }
  };

  /**
   * Should be called to create batch payload object
   *
   * @method toBatchPayload
   * @param {Array} messages, an array of objects with method (required) and params (optional) fields
   * @returns {Array} batch payload
   */
  Jsonrpc.toBatchPayload = function (messages) {
      return messages.map(function (message) {
          return Jsonrpc.toPayload(message.method, message.params);
      });
  };

  var jsonrpc = Jsonrpc;

  var errors$1 = src$6.errors;

  var Batch = function (requestManager) {
      this.requestManager = requestManager;
      this.requests = [];
  };

  /**
   * Should be called to add create new request to batch request
   *
   * @method add
   * @param {Object} jsonrpc requet object
   */
  Batch.prototype.add = function (request) {
      this.requests.push(request);
  };

  /**
   * Should be called to execute batch request
   *
   * @method execute
   */
  Batch.prototype.execute = function () {
      var requests = this.requests;
      this.requestManager.sendBatch(requests, function (err, results) {
          results = results || [];
          requests.map(function (request, index) {
              return results[index] || {};
          }).forEach(function (result, index) {
              if (requests[index].callback) {

                  if (result && result.error) {
                      return requests[index].callback(errors$1.ErrorResponse(result));
                  }

                  if (!jsonrpc.isValidResponse(result)) {
                      return requests[index].callback(errors$1.InvalidResponse(result));
                  }

                  requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
              }
          });
      });
  };

  var batch = Batch;

  /*
   This file is part of web3.js.

   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */

  var givenProvider = null;

  // ADD GIVEN PROVIDER
  /* jshint ignore:start */
  var global$1 = Function('return this')();

  // EthereumProvider
  if(typeof global$1.ethereumProvider !== 'undefined') {
      givenProvider = global$1.ethereumProvider;

  // Legacy web3.currentProvider
  } else if(typeof global$1.web3 !== 'undefined' && global$1.web3.currentProvider) {

      if(global$1.web3.currentProvider.sendAsync) {
          global$1.web3.currentProvider.send = global$1.web3.currentProvider.sendAsync;
          delete global$1.web3.currentProvider.sendAsync;
      }

      // if connection is 'ipcProviderWrapper', add subscription support
      if(!global$1.web3.currentProvider.on &&
          global$1.web3.currentProvider.connection &&
          global$1.web3.currentProvider.connection.constructor.name === 'ipcProviderWrapper') {

          global$1.web3.currentProvider.on = function (type, callback) {

              if(typeof callback !== 'function')
                  throw new Error('The second parameter callback must be a function.');

              switch(type){
                  case 'data':
                      this.connection.on('data', function(data) {
                          var result = '';

                          data = data.toString();

                          try {
                              result = JSON.parse(data);
                          } catch(e) {
                              return callback(new Error('Couldn\'t parse response data'+ data));
                          }

                          // notification
                          if(!result.id && result.method.indexOf('_subscription') !== -1) {
                              callback(null, result);
                          }

                      });
                      break;

                  default:
                      this.connection.on(type, callback);
                      break;
              }
          };
      }

      givenProvider = global$1.web3.currentProvider;
  }
  /* jshint ignore:end */


  var givenProvider_1 = givenProvider;

  var errors$2 = src$6.errors;

  var Ws = null;
  if (typeof window !== 'undefined') {
      Ws = window.WebSocket;
  } else {
      Ws = websocket.w3cwebsocket;
  }
  // Default connection ws://localhost:8546



  var WebsocketProvider = function WebsocketProvider(url$$1)  {
      var _this = this;
      this.responseCallbacks = {};
      this.notificationCallbacks = [];
      this.connection = new Ws(url$$1);


      this.addDefaultEvents();


      // LISTEN FOR CONNECTION RESPONSES
      this.connection.onmessage = function(e) {
          /*jshint maxcomplexity: 6 */
          var data = (typeof e.data === 'string') ? e.data : '';

          _this._parseResponse(data).forEach(function(result){

              var id = null;

              // get the id which matches the returned id
              if(underscore.isArray(result)) {
                  result.forEach(function(load){
                      if(_this.responseCallbacks[load.id])
                          id = load.id;
                  });
              } else {
                  id = result.id;
              }

              // notification
              if(!id && result.method.indexOf('_subscription') !== -1) {
                  _this.notificationCallbacks.forEach(function(callback){
                      if(underscore.isFunction(callback))
                          callback(result);
                  });

                  // fire the callback
              } else if(_this.responseCallbacks[id]) {
                  _this.responseCallbacks[id](null, result);
                  delete _this.responseCallbacks[id];
              }
          });
      };
  };

  /**
   Will add the error and end event to timeout existing calls

   @method addDefaultEvents
   */
  WebsocketProvider.prototype.addDefaultEvents = function(){
      var _this = this;

      this.connection.onerror = function(){
          _this._timeout();
      };

      this.connection.onclose = function(){
          _this._timeout();

          // reset all requests and callbacks
          _this.reset();
      };

      // this.connection.on('timeout', function(){
      //     _this._timeout();
      // });
  };

  /**
   Will parse the response and make an array out of it.

   @method _parseResponse
   @param {String} data
   */
  WebsocketProvider.prototype._parseResponse = function(data) {
      var _this = this,
          returnValues = [];

      // DE-CHUNKER
      var dechunkedData = data
          .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
          .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
          .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
          .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
          .split('|--|');

      dechunkedData.forEach(function(data){

          // prepend the last chunk
          if(_this.lastChunk)
              data = _this.lastChunk + data;

          var result = null;

          try {
              result = JSON.parse(data);

          } catch(e) {

              _this.lastChunk = data;

              // start timeout to cancel all requests
              clearTimeout(_this.lastChunkTimeout);
              _this.lastChunkTimeout = setTimeout(function(){
                  _this._timeout();
                  throw errors$2.InvalidResponse(data);
              }, 1000 * 15);

              return;
          }

          // cancel timeout and set chunk to null
          clearTimeout(_this.lastChunkTimeout);
          _this.lastChunk = null;

          if(result)
              returnValues.push(result);
      });

      return returnValues;
  };


  /**
   Get the adds a callback to the responseCallbacks object,
   which will be called if a response matching the response Id will arrive.

   @method _addResponseCallback
   */
  WebsocketProvider.prototype._addResponseCallback = function(payload, callback) {
      var id = payload.id || payload[0].id;
      var method = payload.method || payload[0].method;

      this.responseCallbacks[id] = callback;
      this.responseCallbacks[id].method = method;
  };

  /**
   Timeout all requests when the end/error event is fired

   @method _timeout
   */
  WebsocketProvider.prototype._timeout = function() {
      for(var key in this.responseCallbacks) {
          if(this.responseCallbacks.hasOwnProperty(key)){
              this.responseCallbacks[key](errors$2.InvalidConnection('on WS'));
              delete this.responseCallbacks[key];
          }
      }
  };


  WebsocketProvider.prototype.send = function (payload, callback) {
      var _this = this;

      if (this.connection.readyState === this.connection.CONNECTING) {
          setTimeout(function () {
              _this.send(payload, callback);
          }, 10);
          return;
      }

      // try reconnect, when connection is gone
      // if(!this.connection.writable)
      //     this.connection.connect({url: this.url});
      if (this.connection.readyState !== this.connection.OPEN) {
          console.error('connection not open on send()');
          if (typeof this.connection.onerror === 'function') {
              this.connection.onerror(new Error('connection not open'));
          } else {
              console.error('no error callback');
          }
          callback(new Error('connection not open'));
          return;
      }

      this.connection.send(JSON.stringify(payload));
      this._addResponseCallback(payload, callback);
  };

  /**
   Subscribes to provider events.provider

   @method on
   @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
   @param {Function} callback   the callback to call
   */
  WebsocketProvider.prototype.on = function (type, callback) {

      if(typeof callback !== 'function')
          throw new Error('The second parameter callback must be a function.');

      switch(type){
          case 'data':
              this.notificationCallbacks.push(callback);
              break;

          case 'connect':
              this.connection.onopen = callback;
              break;

          case 'end':
              this.connection.onclose = callback;
              break;

          case 'error':
              this.connection.onerror = callback;
              break;

          // default:
          //     this.connection.on(type, callback);
          //     break;
      }
  };

  // TODO add once

  /**
   Removes event listener

   @method removeListener
   @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
   @param {Function} callback   the callback to call
   */
  WebsocketProvider.prototype.removeListener = function (type, callback) {
      var _this = this;

      switch(type){
          case 'data':
              this.notificationCallbacks.forEach(function(cb, index){
                  if(cb === callback)
                      _this.notificationCallbacks.splice(index, 1);
              });
              break;

          // TODO remvoving connect missing

          // default:
          //     this.connection.removeListener(type, callback);
          //     break;
      }
  };

  /**
   Removes all event listeners

   @method removeAllListeners
   @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
   */
  WebsocketProvider.prototype.removeAllListeners = function (type) {
      switch(type){
          case 'data':
              this.notificationCallbacks = [];
              break;

          // TODO remvoving connect properly missing

          case 'connect':
              this.connection.onopen = null;
              break;

          case 'end':
              this.connection.onclose = null;
              break;

          case 'error':
              this.connection.onerror = null;
              break;

          default:
              // this.connection.removeAllListeners(type);
              break;
      }
  };

  /**
   Resets the providers, clears all callbacks

   @method reset
   */
  WebsocketProvider.prototype.reset = function () {
      this._timeout();
      this.notificationCallbacks = [];

      // this.connection.removeAllListeners('error');
      // this.connection.removeAllListeners('end');
      // this.connection.removeAllListeners('timeout');

      this.addDefaultEvents();
  };

  var src$7 = WebsocketProvider;

  var xhr2 = createCommonjsModule(function (module) {
  // Generated by CoffeeScript 1.12.2
  (function() {
    var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http$$1, https$$1, os$$1, url$$1,
      extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
      hasProp = {}.hasOwnProperty;

    XMLHttpRequestEventTarget = (function() {
      function XMLHttpRequestEventTarget() {
        this.onloadstart = null;
        this.onprogress = null;
        this.onabort = null;
        this.onerror = null;
        this.onload = null;
        this.ontimeout = null;
        this.onloadend = null;
        this._listeners = {};
      }

      XMLHttpRequestEventTarget.prototype.onloadstart = null;

      XMLHttpRequestEventTarget.prototype.onprogress = null;

      XMLHttpRequestEventTarget.prototype.onabort = null;

      XMLHttpRequestEventTarget.prototype.onerror = null;

      XMLHttpRequestEventTarget.prototype.onload = null;

      XMLHttpRequestEventTarget.prototype.ontimeout = null;

      XMLHttpRequestEventTarget.prototype.onloadend = null;

      XMLHttpRequestEventTarget.prototype.addEventListener = function(eventType, listener) {
        var base;
        eventType = eventType.toLowerCase();
        (base = this._listeners)[eventType] || (base[eventType] = []);
        this._listeners[eventType].push(listener);
        return void 0;
      };

      XMLHttpRequestEventTarget.prototype.removeEventListener = function(eventType, listener) {
        var index;
        eventType = eventType.toLowerCase();
        if (this._listeners[eventType]) {
          index = this._listeners[eventType].indexOf(listener);
          if (index !== -1) {
            this._listeners[eventType].splice(index, 1);
          }
        }
        return void 0;
      };

      XMLHttpRequestEventTarget.prototype.dispatchEvent = function(event) {
        var eventType, j, len, listener, listeners;
        event.currentTarget = event.target = this;
        eventType = event.type;
        if (listeners = this._listeners[eventType]) {
          for (j = 0, len = listeners.length; j < len; j++) {
            listener = listeners[j];
            listener.call(this, event);
          }
        }
        if (listener = this["on" + eventType]) {
          listener.call(this, event);
        }
        return void 0;
      };

      return XMLHttpRequestEventTarget;

    })();

    http$$1 = http;

    https$$1 = https;

    os$$1 = os;

    url$$1 = url;

    XMLHttpRequest = (function(superClass) {
      extend(XMLHttpRequest, superClass);

      function XMLHttpRequest(options) {
        XMLHttpRequest.__super__.constructor.call(this);
        this.onreadystatechange = null;
        this._anonymous = options && options.anon;
        this.readyState = XMLHttpRequest.UNSENT;
        this.response = null;
        this.responseText = '';
        this.responseType = '';
        this.responseURL = '';
        this.status = 0;
        this.statusText = '';
        this.timeout = 0;
        this.upload = new XMLHttpRequestUpload(this);
        this._method = null;
        this._url = null;
        this._sync = false;
        this._headers = null;
        this._loweredHeaders = null;
        this._mimeOverride = null;
        this._request = null;
        this._response = null;
        this._responseParts = null;
        this._responseHeaders = null;
        this._aborting = null;
        this._error = null;
        this._loadedBytes = 0;
        this._totalBytes = 0;
        this._lengthComputable = false;
      }

      XMLHttpRequest.prototype.onreadystatechange = null;

      XMLHttpRequest.prototype.readyState = null;

      XMLHttpRequest.prototype.response = null;

      XMLHttpRequest.prototype.responseText = null;

      XMLHttpRequest.prototype.responseType = null;

      XMLHttpRequest.prototype.status = null;

      XMLHttpRequest.prototype.timeout = null;

      XMLHttpRequest.prototype.upload = null;

      XMLHttpRequest.prototype.open = function(method, url$$1, async, user, password) {
        var xhrUrl;
        method = method.toUpperCase();
        if (method in this._restrictedMethods) {
          throw new SecurityError("HTTP method " + method + " is not allowed in XHR");
        }
        xhrUrl = this._parseUrl(url$$1);
        if (async === void 0) {
          async = true;
        }
        switch (this.readyState) {
          case XMLHttpRequest.UNSENT:
          case XMLHttpRequest.OPENED:
          case XMLHttpRequest.DONE:
            break;
          case XMLHttpRequest.HEADERS_RECEIVED:
          case XMLHttpRequest.LOADING:

        }
        this._method = method;
        this._url = xhrUrl;
        this._sync = !async;
        this._headers = {};
        this._loweredHeaders = {};
        this._mimeOverride = null;
        this._setReadyState(XMLHttpRequest.OPENED);
        this._request = null;
        this._response = null;
        this.status = 0;
        this.statusText = '';
        this._responseParts = [];
        this._responseHeaders = null;
        this._loadedBytes = 0;
        this._totalBytes = 0;
        this._lengthComputable = false;
        return void 0;
      };

      XMLHttpRequest.prototype.setRequestHeader = function(name, value) {
        var loweredName;
        if (this.readyState !== XMLHttpRequest.OPENED) {
          throw new InvalidStateError("XHR readyState must be OPENED");
        }
        loweredName = name.toLowerCase();
        if (this._restrictedHeaders[loweredName] || /^sec\-/.test(loweredName) || /^proxy-/.test(loweredName)) {
          console.warn("Refused to set unsafe header \"" + name + "\"");
          return void 0;
        }
        value = value.toString();
        if (loweredName in this._loweredHeaders) {
          name = this._loweredHeaders[loweredName];
          this._headers[name] = this._headers[name] + ', ' + value;
        } else {
          this._loweredHeaders[loweredName] = name;
          this._headers[name] = value;
        }
        return void 0;
      };

      XMLHttpRequest.prototype.send = function(data) {
        if (this.readyState !== XMLHttpRequest.OPENED) {
          throw new InvalidStateError("XHR readyState must be OPENED");
        }
        if (this._request) {
          throw new InvalidStateError("send() already called");
        }
        switch (this._url.protocol) {
          case 'file:':
            this._sendFile(data);
            break;
          case 'http:':
          case 'https:':
            this._sendHttp(data);
            break;
          default:
            throw new NetworkError("Unsupported protocol " + this._url.protocol);
        }
        return void 0;
      };

      XMLHttpRequest.prototype.abort = function() {
        if (!this._request) {
          return;
        }
        this._request.abort();
        this._setError();
        this._dispatchProgress('abort');
        this._dispatchProgress('loadend');
        return void 0;
      };

      XMLHttpRequest.prototype.getResponseHeader = function(name) {
        var loweredName;
        if (!this._responseHeaders) {
          return null;
        }
        loweredName = name.toLowerCase();
        if (loweredName in this._responseHeaders) {
          return this._responseHeaders[loweredName];
        } else {
          return null;
        }
      };

      XMLHttpRequest.prototype.getAllResponseHeaders = function() {
        var lines, name, value;
        if (!this._responseHeaders) {
          return '';
        }
        lines = (function() {
          var ref, results;
          ref = this._responseHeaders;
          results = [];
          for (name in ref) {
            value = ref[name];
            results.push(name + ": " + value);
          }
          return results;
        }).call(this);
        return lines.join("\r\n");
      };

      XMLHttpRequest.prototype.overrideMimeType = function(newMimeType) {
        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
          throw new InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");
        }
        this._mimeOverride = newMimeType.toLowerCase();
        return void 0;
      };

      XMLHttpRequest.prototype.nodejsSet = function(options) {
        var baseUrl, parsedUrl;
        if ('httpAgent' in options) {
          this.nodejsHttpAgent = options.httpAgent;
        }
        if ('httpsAgent' in options) {
          this.nodejsHttpsAgent = options.httpsAgent;
        }
        if ('baseUrl' in options) {
          baseUrl = options.baseUrl;
          if (baseUrl !== null) {
            parsedUrl = url$$1.parse(baseUrl, false, true);
            if (!parsedUrl.protocol) {
              throw new SyntaxError("baseUrl must be an absolute URL");
            }
          }
          this.nodejsBaseUrl = baseUrl;
        }
        return void 0;
      };

      XMLHttpRequest.nodejsSet = function(options) {
        XMLHttpRequest.prototype.nodejsSet(options);
        return void 0;
      };

      XMLHttpRequest.prototype.UNSENT = 0;

      XMLHttpRequest.UNSENT = 0;

      XMLHttpRequest.prototype.OPENED = 1;

      XMLHttpRequest.OPENED = 1;

      XMLHttpRequest.prototype.HEADERS_RECEIVED = 2;

      XMLHttpRequest.HEADERS_RECEIVED = 2;

      XMLHttpRequest.prototype.LOADING = 3;

      XMLHttpRequest.LOADING = 3;

      XMLHttpRequest.prototype.DONE = 4;

      XMLHttpRequest.DONE = 4;

      XMLHttpRequest.prototype.nodejsHttpAgent = http$$1.globalAgent;

      XMLHttpRequest.prototype.nodejsHttpsAgent = https$$1.globalAgent;

      XMLHttpRequest.prototype.nodejsBaseUrl = null;

      XMLHttpRequest.prototype._restrictedMethods = {
        CONNECT: true,
        TRACE: true,
        TRACK: true
      };

      XMLHttpRequest.prototype._restrictedHeaders = {
        'accept-charset': true,
        'accept-encoding': true,
        'access-control-request-headers': true,
        'access-control-request-method': true,
        connection: true,
        'content-length': true,
        cookie: true,
        cookie2: true,
        date: true,
        dnt: true,
        expect: true,
        host: true,
        'keep-alive': true,
        origin: true,
        referer: true,
        te: true,
        trailer: true,
        'transfer-encoding': true,
        upgrade: true,
        'user-agent': true,
        via: true
      };

      XMLHttpRequest.prototype._privateHeaders = {
        'set-cookie': true,
        'set-cookie2': true
      };

      XMLHttpRequest.prototype._userAgent = ("Mozilla/5.0 (" + (os$$1.type()) + " " + (os$$1.arch()) + ") ") + ("node.js/" + process.versions.node + " v8/" + process.versions.v8);

      XMLHttpRequest.prototype._setReadyState = function(newReadyState) {
        var event;
        this.readyState = newReadyState;
        event = new ProgressEvent('readystatechange');
        this.dispatchEvent(event);
        return void 0;
      };

      XMLHttpRequest.prototype._sendFile = function() {
        if (this._url.method !== 'GET') {
          throw new NetworkError('The file protocol only supports GET');
        }
        throw new Error("Protocol file: not implemented");
      };

      XMLHttpRequest.prototype._sendHttp = function(data) {
        if (this._sync) {
          throw new Error("Synchronous XHR processing not implemented");
        }
        if ((data != null) && (this._method === 'GET' || this._method === 'HEAD')) {
          console.warn("Discarding entity body for " + this._method + " requests");
          data = null;
        } else {
          data || (data = '');
        }
        this.upload._setData(data);
        this._finalizeHeaders();
        this._sendHxxpRequest();
        return void 0;
      };

      XMLHttpRequest.prototype._sendHxxpRequest = function() {
        var agent, hxxp, request;
        if (this._url.protocol === 'http:') {
          hxxp = http$$1;
          agent = this.nodejsHttpAgent;
        } else {
          hxxp = https$$1;
          agent = this.nodejsHttpsAgent;
        }
        request = hxxp.request({
          hostname: this._url.hostname,
          port: this._url.port,
          path: this._url.path,
          auth: this._url.auth,
          method: this._method,
          headers: this._headers,
          agent: agent
        });
        this._request = request;
        if (this.timeout) {
          request.setTimeout(this.timeout, (function(_this) {
            return function() {
              return _this._onHttpTimeout(request);
            };
          })(this));
        }
        request.on('response', (function(_this) {
          return function(response) {
            return _this._onHttpResponse(request, response);
          };
        })(this));
        request.on('error', (function(_this) {
          return function(error) {
            return _this._onHttpRequestError(request, error);
          };
        })(this));
        this.upload._startUpload(request);
        if (this._request === request) {
          this._dispatchProgress('loadstart');
        }
        return void 0;
      };

      XMLHttpRequest.prototype._finalizeHeaders = function() {
        this._headers['Connection'] = 'keep-alive';
        this._headers['Host'] = this._url.host;
        if (this._anonymous) {
          this._headers['Referer'] = 'about:blank';
        }
        this._headers['User-Agent'] = this._userAgent;
        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
        return void 0;
      };

      XMLHttpRequest.prototype._onHttpResponse = function(request, response) {
        var lengthString;
        if (this._request !== request) {
          return;
        }
        switch (response.statusCode) {
          case 301:
          case 302:
          case 303:
          case 307:
          case 308:
            this._url = this._parseUrl(response.headers['location']);
            this._method = 'GET';
            if ('content-type' in this._loweredHeaders) {
              delete this._headers[this._loweredHeaders['content-type']];
              delete this._loweredHeaders['content-type'];
            }
            if ('Content-Type' in this._headers) {
              delete this._headers['Content-Type'];
            }
            delete this._headers['Content-Length'];
            this.upload._reset();
            this._finalizeHeaders();
            this._sendHxxpRequest();
            return;
        }
        this._response = response;
        this._response.on('data', (function(_this) {
          return function(data) {
            return _this._onHttpResponseData(response, data);
          };
        })(this));
        this._response.on('end', (function(_this) {
          return function() {
            return _this._onHttpResponseEnd(response);
          };
        })(this));
        this._response.on('close', (function(_this) {
          return function() {
            return _this._onHttpResponseClose(response);
          };
        })(this));
        this.responseURL = this._url.href.split('#')[0];
        this.status = this._response.statusCode;
        this.statusText = http$$1.STATUS_CODES[this.status];
        this._parseResponseHeaders(response);
        if (lengthString = this._responseHeaders['content-length']) {
          this._totalBytes = parseInt(lengthString);
          this._lengthComputable = true;
        } else {
          this._lengthComputable = false;
        }
        return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
      };

      XMLHttpRequest.prototype._onHttpResponseData = function(response, data) {
        if (this._response !== response) {
          return;
        }
        this._responseParts.push(data);
        this._loadedBytes += data.length;
        if (this.readyState !== XMLHttpRequest.LOADING) {
          this._setReadyState(XMLHttpRequest.LOADING);
        }
        return this._dispatchProgress('progress');
      };

      XMLHttpRequest.prototype._onHttpResponseEnd = function(response) {
        if (this._response !== response) {
          return;
        }
        this._parseResponse();
        this._request = null;
        this._response = null;
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('load');
        return this._dispatchProgress('loadend');
      };

      XMLHttpRequest.prototype._onHttpResponseClose = function(response) {
        var request;
        if (this._response !== response) {
          return;
        }
        request = this._request;
        this._setError();
        request.abort();
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('error');
        return this._dispatchProgress('loadend');
      };

      XMLHttpRequest.prototype._onHttpTimeout = function(request) {
        if (this._request !== request) {
          return;
        }
        this._setError();
        request.abort();
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('timeout');
        return this._dispatchProgress('loadend');
      };

      XMLHttpRequest.prototype._onHttpRequestError = function(request, error) {
        if (this._request !== request) {
          return;
        }
        this._setError();
        request.abort();
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('error');
        return this._dispatchProgress('loadend');
      };

      XMLHttpRequest.prototype._dispatchProgress = function(eventType) {
        var event;
        event = new ProgressEvent(eventType);
        event.lengthComputable = this._lengthComputable;
        event.loaded = this._loadedBytes;
        event.total = this._totalBytes;
        this.dispatchEvent(event);
        return void 0;
      };

      XMLHttpRequest.prototype._setError = function() {
        this._request = null;
        this._response = null;
        this._responseHeaders = null;
        this._responseParts = null;
        return void 0;
      };

      XMLHttpRequest.prototype._parseUrl = function(urlString) {
        var absoluteUrlString, index, password, user, xhrUrl;
        if (this.nodejsBaseUrl === null) {
          absoluteUrlString = urlString;
        } else {
          absoluteUrlString = url$$1.resolve(this.nodejsBaseUrl, urlString);
        }
        xhrUrl = url$$1.parse(absoluteUrlString, false, true);
        xhrUrl.hash = null;
        if (xhrUrl.auth && ((typeof user !== "undefined" && user !== null) || (typeof password !== "undefined" && password !== null))) {
          index = xhrUrl.auth.indexOf(':');
          if (index === -1) {
            if (!user) {
              user = xhrUrl.auth;
            }
          } else {
            if (!user) {
              user = xhrUrl.substring(0, index);
            }
            if (!password) {
              password = xhrUrl.substring(index + 1);
            }
          }
        }
        if (user || password) {
          xhrUrl.auth = user + ":" + password;
        }
        return xhrUrl;
      };

      XMLHttpRequest.prototype._parseResponseHeaders = function(response) {
        var loweredName, name, ref, value;
        this._responseHeaders = {};
        ref = response.headers;
        for (name in ref) {
          value = ref[name];
          loweredName = name.toLowerCase();
          if (this._privateHeaders[loweredName]) {
            continue;
          }
          if (this._mimeOverride !== null && loweredName === 'content-type') {
            value = this._mimeOverride;
          }
          this._responseHeaders[loweredName] = value;
        }
        if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {
          this._responseHeaders['content-type'] = this._mimeOverride;
        }
        return void 0;
      };

      XMLHttpRequest.prototype._parseResponse = function() {
        var arrayBuffer, buffer$$1, i, j, ref, view;
        if (Buffer.concat) {
          buffer$$1 = Buffer.concat(this._responseParts);
        } else {
          buffer$$1 = this._concatBuffers(this._responseParts);
        }
        this._responseParts = null;
        switch (this.responseType) {
          case 'text':
            this._parseTextResponse(buffer$$1);
            break;
          case 'json':
            this.responseText = null;
            try {
              this.response = JSON.parse(buffer$$1.toString('utf-8'));
            } catch (error1) {
              this.response = null;
            }
            break;
          case 'buffer':
            this.responseText = null;
            this.response = buffer$$1;
            break;
          case 'arraybuffer':
            this.responseText = null;
            arrayBuffer = new ArrayBuffer(buffer$$1.length);
            view = new Uint8Array(arrayBuffer);
            for (i = j = 0, ref = buffer$$1.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              view[i] = buffer$$1[i];
            }
            this.response = arrayBuffer;
            break;
          default:
            this._parseTextResponse(buffer$$1);
        }
        return void 0;
      };

      XMLHttpRequest.prototype._parseTextResponse = function(buffer$$1) {
        try {
          this.responseText = buffer$$1.toString(this._parseResponseEncoding());
        } catch (error1) {
          this.responseText = buffer$$1.toString('binary');
        }
        this.response = this.responseText;
        return void 0;
      };

      XMLHttpRequest.prototype._parseResponseEncoding = function() {
        var contentType, match;
        if (contentType = this._responseHeaders['content-type']) {
          if (match = /\;\s*charset\=(.*)$/.exec(contentType)) {
            return match[1];
          }
        }
        return 'utf-8';
      };

      XMLHttpRequest.prototype._concatBuffers = function(buffers) {
        var buffer$$1, j, k, len, len1, length, target;
        if (buffers.length === 0) {
          return new Buffer(0);
        }
        if (buffers.length === 1) {
          return buffers[0];
        }
        length = 0;
        for (j = 0, len = buffers.length; j < len; j++) {
          buffer$$1 = buffers[j];
          length += buffer$$1.length;
        }
        target = new Buffer(length);
        length = 0;
        for (k = 0, len1 = buffers.length; k < len1; k++) {
          buffer$$1 = buffers[k];
          buffer$$1.copy(target, length);
          length += buffer$$1.length;
        }
        return target;
      };

      return XMLHttpRequest;

    })(XMLHttpRequestEventTarget);

    module.exports = XMLHttpRequest;

    XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;

    SecurityError = (function(superClass) {
      extend(SecurityError, superClass);

      function SecurityError() {
        SecurityError.__super__.constructor.apply(this, arguments);
      }

      return SecurityError;

    })(Error);

    XMLHttpRequest.SecurityError = SecurityError;

    InvalidStateError = (function(superClass) {
      extend(InvalidStateError, superClass);

      function InvalidStateError() {
        InvalidStateError.__super__.constructor.apply(this, arguments);
      }

      return InvalidStateError;

    })(Error);

    InvalidStateError = (function(superClass) {
      extend(InvalidStateError, superClass);

      function InvalidStateError() {
        return InvalidStateError.__super__.constructor.apply(this, arguments);
      }

      return InvalidStateError;

    })(Error);

    XMLHttpRequest.InvalidStateError = InvalidStateError;

    NetworkError = (function(superClass) {
      extend(NetworkError, superClass);

      function NetworkError() {
        NetworkError.__super__.constructor.apply(this, arguments);
      }

      return NetworkError;

    })(Error);

    XMLHttpRequest.SyntaxError = SyntaxError;

    SyntaxError = (function(superClass) {
      extend(SyntaxError, superClass);

      function SyntaxError() {
        SyntaxError.__super__.constructor.apply(this, arguments);
      }

      return SyntaxError;

    })(Error);

    ProgressEvent = (function() {
      function ProgressEvent(type) {
        this.type = type;
        this.target = null;
        this.currentTarget = null;
        this.lengthComputable = false;
        this.loaded = 0;
        this.total = 0;
      }

      ProgressEvent.prototype.bubbles = false;

      ProgressEvent.prototype.cancelable = false;

      ProgressEvent.prototype.target = null;

      ProgressEvent.prototype.loaded = null;

      ProgressEvent.prototype.lengthComputable = null;

      ProgressEvent.prototype.total = null;

      return ProgressEvent;

    })();

    XMLHttpRequest.ProgressEvent = ProgressEvent;

    XMLHttpRequestUpload = (function(superClass) {
      extend(XMLHttpRequestUpload, superClass);

      function XMLHttpRequestUpload(request) {
        XMLHttpRequestUpload.__super__.constructor.call(this);
        this._request = request;
        this._reset();
      }

      XMLHttpRequestUpload.prototype._reset = function() {
        this._contentType = null;
        this._body = null;
        return void 0;
      };

      XMLHttpRequestUpload.prototype._setData = function(data) {
        var body, i, j, k, offset, ref, ref1, view;
        if (typeof data === 'undefined' || data === null) {
          return;
        }
        if (typeof data === 'string') {
          if (data.length !== 0) {
            this._contentType = 'text/plain;charset=UTF-8';
          }
          this._body = new Buffer(data, 'utf8');
        } else if (Buffer.isBuffer(data)) {
          this._body = data;
        } else if (data instanceof ArrayBuffer) {
          body = new Buffer(data.byteLength);
          view = new Uint8Array(data);
          for (i = j = 0, ref = data.byteLength; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            body[i] = view[i];
          }
          this._body = body;
        } else if (data.buffer && data.buffer instanceof ArrayBuffer) {
          body = new Buffer(data.byteLength);
          offset = data.byteOffset;
          view = new Uint8Array(data.buffer);
          for (i = k = 0, ref1 = data.byteLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
            body[i] = view[i + offset];
          }
          this._body = body;
        } else {
          throw new Error("Unsupported send() data " + data);
        }
        return void 0;
      };

      XMLHttpRequestUpload.prototype._finalizeHeaders = function(headers, loweredHeaders) {
        if (this._contentType) {
          if (!('content-type' in loweredHeaders)) {
            headers['Content-Type'] = this._contentType;
          }
        }
        if (this._body) {
          headers['Content-Length'] = this._body.length.toString();
        }
        return void 0;
      };

      XMLHttpRequestUpload.prototype._startUpload = function(request) {
        if (this._body) {
          request.write(this._body);
        }
        request.end();
        return void 0;
      };

      return XMLHttpRequestUpload;

    })(XMLHttpRequestEventTarget);

    XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;

  }).call(commonjsGlobal);
  });

  /*
      This file is part of web3.js.

      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.

      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /** @file httpprovider.js
   * @authors:
   *   Marek Kotewicz <marek@parity.io>
   *   Marian Oancea
   *   Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2015
   */

  var errors$3 = src$6.errors;
   // jshint ignore: line

  /**
   * HttpProvider should be used to send rpc calls over http
   */
  var HttpProvider = function HttpProvider(host, timeout, headers) {
      this.host = host || 'http://localhost:8545';
      this.timeout = timeout || 0;
      this.connected = false;
      this.headers = headers;
  };

  HttpProvider.prototype._prepareRequest = function(){
      var request = new xhr2();

      request.open('POST', this.host, true);
      request.setRequestHeader('Content-Type','application/json');

      if(this.headers) {
          this.headers.forEach(function(header) {
              request.setRequestHeader(header.name, header.value);
          });
      }

      return request;
  };

  /**
   * Should be used to make async request
   *
   * @method send
   * @param {Object} payload
   * @param {Function} callback triggered on end with (err, result)
   */
  HttpProvider.prototype.send = function (payload, callback) {
      var _this = this;
      var request = this._prepareRequest();


      request.onreadystatechange = function() {
          if (request.readyState === 4 && request.timeout !== 1) {
              var result = request.responseText;
              var error = null;

              try {
                  result = JSON.parse(result);
              } catch(e) {
                  error = errors$3.InvalidResponse(request.responseText);
              }

              _this.connected = true;
              callback(error, result);
          }
      };

      request.ontimeout = function() {
          _this.connected = false;
          callback(errors$3.ConnectionTimeout(this.timeout));
      };

      try {
          request.send(JSON.stringify(payload));
      } catch(error) {
          this.connected = false;
          callback(errors$3.InvalidConnection(this.host));
      }
  };


  var src$8 = HttpProvider;

  var httpHttps = createCommonjsModule(function (module, exports) {
  var http$$1 = exports.http = http;
  var https$$1 = exports.https = https;


  exports.get = function(opt, cb) {
    return getMod(opt).get(opt, cb)
  };

  exports.request = function(opt, cb) {
    return getMod(opt).request(opt, cb)
  };

  exports.getModule = getMod;
  function getMod(opt) {
    if (typeof opt === 'string')
      opt = url.parse(opt);

    return opt.protocol === 'https:' ? https$$1 : http$$1
  }
  });
  var httpHttps_1 = httpHttps.http;
  var httpHttps_2 = httpHttps.https;
  var httpHttps_3 = httpHttps.get;
  var httpHttps_4 = httpHttps.request;
  var httpHttps_5 = httpHttps.getModule;

  // this file is the concatenation of several js files. See http://github.com/jimhigson/oboe.js
  // for the unconcatenated source

  var oboeNode = (function  () {
     
     // v2.1.3

  /*

  Copyright (c) 2013, Jim Higson

  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  1.  Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

  2.  Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  */

  /** 
   * Partially complete a function.
   * 
   *  var add3 = partialComplete( function add(a,b){return a+b}, 3 );
   *  
   *  add3(4) // gives 7
   *  
   *  function wrap(left, right, cen){return left + " " + cen + " " + right;}
   *  
   *  var pirateGreeting = partialComplete( wrap , "I'm", ", a mighty pirate!" );
   *  
   *  pirateGreeting("Guybrush Threepwood"); 
   *  // gives "I'm Guybrush Threepwood, a mighty pirate!"
   */
  var partialComplete = varArgs(function( fn, args ) {

        // this isn't the shortest way to write this but it does
        // avoid creating a new array each time to pass to fn.apply,
        // otherwise could just call boundArgs.concat(callArgs)       

        var numBoundArgs = args.length;

        return varArgs(function( callArgs ) {
           
           for (var i = 0; i < callArgs.length; i++) {
              args[numBoundArgs + i] = callArgs[i];
           }
           
           args.length = numBoundArgs + callArgs.length;         
                       
           return fn.apply(this, args);
        }); 
     }),

  /**
   * Compose zero or more functions:
   * 
   *    compose(f1, f2, f3)(x) = f1(f2(f3(x))))
   * 
   * The last (inner-most) function may take more than one parameter:
   * 
   *    compose(f1, f2, f3)(x,y) = f1(f2(f3(x,y))))
   */
     compose = varArgs(function(fns) {

        var fnsList = arrayAsList(fns);
     
        function next(params, curFn) {  
           return [apply(params, curFn)];   
        }
              
        return varArgs(function(startParams){
          
           return foldR(next, startParams, fnsList)[0];
        });
     });

  /**
   * A more optimised version of compose that takes exactly two functions
   * @param f1
   * @param f2
   */
  function compose2(f1, f2){
     return function(){
        return f1.call(this,f2.apply(this,arguments));
     }
  }

  /**
   * Generic form for a function to get a property from an object
   * 
   *    var o = {
   *       foo:'bar'
   *    }
   *    
   *    var getFoo = attr('foo')
   *    
   *    fetFoo(o) // returns 'bar'
   * 
   * @param {String} key the property name
   */
  function attr(key) {
     return function(o) { return o[key]; };
  }
          
  /**
   * Call a list of functions with the same args until one returns a 
   * truthy result. Similar to the || operator.
   * 
   * So:
   *      lazyUnion([f1,f2,f3 ... fn])( p1, p2 ... pn )
   *      
   * Is equivalent to: 
   *      apply([p1, p2 ... pn], f1) || 
   *      apply([p1, p2 ... pn], f2) || 
   *      apply([p1, p2 ... pn], f3) ... apply(fn, [p1, p2 ... pn])  
   *  
   * @returns the first return value that is given that is truthy.
   */
     var lazyUnion = varArgs(function(fns) {

        return varArgs(function(params){
     
           var maybeValue;
     
           for (var i = 0; i < len(fns); i++) {
     
              maybeValue = apply(params, fns[i]);
     
              if( maybeValue ) {
                 return maybeValue;
              }
           }
        });
     });   

  /**
   * This file declares various pieces of functional programming.
   * 
   * This isn't a general purpose functional library, to keep things small it
   * has just the parts useful for Oboe.js.
   */


  /**
   * Call a single function with the given arguments array.
   * Basically, a functional-style version of the OO-style Function#apply for 
   * when we don't care about the context ('this') of the call.
   * 
   * The order of arguments allows partial completion of the arguments array
   */
  function apply(args, fn) {
     return fn.apply(undefined, args);
  }

  /**
   * Define variable argument functions but cut out all that tedious messing about 
   * with the arguments object. Delivers the variable-length part of the arguments
   * list as an array.
   * 
   * Eg:
   * 
   * var myFunction = varArgs(
   *    function( fixedArgument, otherFixedArgument, variableNumberOfArguments ){
   *       console.log( variableNumberOfArguments );
   *    }
   * )
   * 
   * myFunction('a', 'b', 1, 2, 3); // logs [1,2,3]
   * 
   * var myOtherFunction = varArgs(function( variableNumberOfArguments ){
   *    console.log( variableNumberOfArguments );
   * })
   * 
   * myFunction(1, 2, 3); // logs [1,2,3]
   * 
   */
  function varArgs(fn){

     var numberOfFixedArguments = fn.length -1,
         slice = Array.prototype.slice;          
           
                     
     if( numberOfFixedArguments == 0 ) {
        // an optimised case for when there are no fixed args:   
     
        return function(){
           return fn.call(this, slice.call(arguments));
        }
        
     } else if( numberOfFixedArguments == 1 ) {
        // an optimised case for when there are is one fixed args:
     
        return function(){
           return fn.call(this, arguments[0], slice.call(arguments, 1));
        }
     }
     
     // general case   

     // we know how many arguments fn will always take. Create a
     // fixed-size array to hold that many, to be re-used on
     // every call to the returned function
     var argsHolder = Array(fn.length);   
                               
     return function(){
                              
        for (var i = 0; i < numberOfFixedArguments; i++) {
           argsHolder[i] = arguments[i];         
        }

        argsHolder[numberOfFixedArguments] = 
           slice.call(arguments, numberOfFixedArguments);
                                  
        return fn.apply( this, argsHolder);      
     }       
  }


  /**
   * Swap the order of parameters to a binary function
   * 
   * A bit like this flip: http://zvon.org/other/haskell/Outputprelude/flip_f.html
   */
  function flip(fn){
     return function(a, b){
        return fn(b,a);
     }
  }


  /**
   * Create a function which is the intersection of two other functions.
   * 
   * Like the && operator, if the first is truthy, the second is never called,
   * otherwise the return value from the second is returned.
   */
  function lazyIntersection(fn1, fn2) {

     return function (param) {
                                                                
        return fn1(param) && fn2(param);
     };   
  }

  /**
   * A function which does nothing
   */
  function noop(){}

  /**
   * A function which is always happy
   */
  function always(){return true}

  /**
   * Create a function which always returns the same
   * value
   * 
   * var return3 = functor(3);
   * 
   * return3() // gives 3
   * return3() // still gives 3
   * return3() // will always give 3
   */
  function functor(val){
     return function(){
        return val;
     }
  }

  /**
   * This file defines some loosely associated syntactic sugar for 
   * Javascript programming 
   */


  /**
   * Returns true if the given candidate is of type T
   */
  function isOfType(T, maybeSomething){
     return maybeSomething && maybeSomething.constructor === T;
  }

  var len = attr('length'),    
      isString = partialComplete(isOfType, String);

  /** 
   * I don't like saying this:
   * 
   *    foo !=== undefined
   *    
   * because of the double-negative. I find this:
   * 
   *    defined(foo)
   *    
   * easier to read.
   */ 
  function defined( value ) {
     return value !== undefined;
  }

  /**
   * Returns true if object o has a key named like every property in 
   * the properties array. Will give false if any are missing, or if o 
   * is not an object.
   */
  function hasAllProperties(fieldList, o) {

     return      (o instanceof Object) 
              &&
                 all(function (field) {         
                    return (field in o);         
                 }, fieldList);
  }
  /**
   * Like cons in Lisp
   */
  function cons(x, xs) {
     
     /* Internally lists are linked 2-element Javascript arrays.
            
        Ideally the return here would be Object.freeze([x,xs])
        so that bugs related to mutation are found fast.
        However, cons is right on the critical path for
        performance and this slows oboe-mark down by
        ~25%. Under theoretical future JS engines that freeze more
        efficiently (possibly even use immutability to
        run faster) this should be considered for
        restoration.
     */
     
     return [x,xs];
  }

  /**
   * The empty list
   */
  var emptyList = null,

  /**
   * Get the head of a list.
   * 
   * Ie, head(cons(a,b)) = a
   */
      head = attr(0),

  /**
   * Get the tail of a list.
   * 
   * Ie, tail(cons(a,b)) = b
   */
      tail = attr(1);


  /** 
   * Converts an array to a list 
   * 
   *    asList([a,b,c])
   * 
   * is equivalent to:
   *    
   *    cons(a, cons(b, cons(c, emptyList))) 
   **/
  function arrayAsList(inputArray){

     return reverseList( 
        inputArray.reduce(
           flip(cons),
           emptyList 
        )
     );
  }

  /**
   * A varargs version of arrayAsList. Works a bit like list
   * in LISP.
   * 
   *    list(a,b,c) 
   *    
   * is equivalent to:
   * 
   *    cons(a, cons(b, cons(c, emptyList)))
   */
  var list = varArgs(arrayAsList);

  /**
   * Convert a list back to a js native array
   */
  function listAsArray(list){

     return foldR( function(arraySoFar, listItem){
        
        arraySoFar.unshift(listItem);
        return arraySoFar;
             
     }, [], list );
     
  }

  /**
   * Map a function over a list 
   */
  function map(fn, list) {

     return list
              ? cons(fn(head(list)), map(fn,tail(list)))
              : emptyList
              ;
  }

  /**
   * foldR implementation. Reduce a list down to a single value.
   * 
   * @pram {Function} fn     (rightEval, curVal) -> result 
   */
  function foldR(fn, startValue, list) {
        
     return list 
              ? fn(foldR(fn, startValue, tail(list)), head(list))
              : startValue
              ;
  }


  /**
   * Return a list like the one given but with the first instance equal 
   * to item removed 
   */
  function without(list, test, removedFn) {
   
     return withoutInner(list, removedFn || noop);
   
     function withoutInner(subList, removedFn) {
        return subList  
           ?  ( test(head(subList)) 
                    ? (removedFn(head(subList)), tail(subList)) 
                    : cons(head(subList), withoutInner(tail(subList), removedFn))
              )
           : emptyList
           ;
     }               
  }

  /** 
   * Returns true if the given function holds for every item in 
   * the list, false otherwise 
   */
  function all(fn, list) {
     
     return !list || 
            ( fn(head(list)) && all(fn, tail(list)) );
  }

  /**
   * Call every function in a list of functions with the same arguments
   * 
   * This doesn't make any sense if we're doing pure functional because 
   * it doesn't return anything. Hence, this is only really useful if the
   * functions being called have side-effects. 
   */
  function applyEach(fnList, args) {

     if( fnList ) {  
        head(fnList).apply(null, args);
        
        applyEach(tail(fnList), args);
     }
  }

  /**
   * Reverse the order of a list
   */
  function reverseList(list){ 

     // js re-implementation of 3rd solution from:
     //    http://www.haskell.org/haskellwiki/99_questions/Solutions/5
     function reverseInner( list, reversedAlready ) {
        if( !list ) {
           return reversedAlready;
        }
        
        return reverseInner(tail(list), cons(head(list), reversedAlready))
     }

     return reverseInner(list, emptyList);
  }

  function first(test, list) {
     return   list &&
                 (test(head(list)) 
                    ? head(list) 
                    : first(test,tail(list))); 
  }

  /* 
     This is a slightly hacked-up browser only version of clarinet 
     
        *  some features removed to help keep browser Oboe under 
           the 5k micro-library limit
        *  plug directly into event bus
     
     For the original go here:
        https://github.com/dscape/clarinet

     We receive the events:
        STREAM_DATA
        STREAM_END
        
     We emit the events:
        SAX_KEY
        SAX_VALUE_OPEN
        SAX_VALUE_CLOSE      
        FAIL_EVENT      
   */

  function clarinet(eventBus) {
     
    var 
        // shortcut some events on the bus
        emitSaxKey           = eventBus(SAX_KEY).emit,
        emitValueOpen        = eventBus(SAX_VALUE_OPEN).emit,
        emitValueClose       = eventBus(SAX_VALUE_CLOSE).emit,
        emitFail             = eventBus(FAIL_EVENT).emit,
                
        MAX_BUFFER_LENGTH = 64 * 1024
    ,   stringTokenPattern = /[\\"\n]/g
    ,   _n = 0
    
        // states
    ,   BEGIN                = _n++
    ,   VALUE                = _n++ // general stuff
    ,   OPEN_OBJECT          = _n++ // {
    ,   CLOSE_OBJECT         = _n++ // }
    ,   OPEN_ARRAY           = _n++ // [
    ,   CLOSE_ARRAY          = _n++ // ]
    ,   STRING               = _n++ // ""
    ,   OPEN_KEY             = _n++ // , "a"
    ,   CLOSE_KEY            = _n++ // :
    ,   TRUE                 = _n++ // r
    ,   TRUE2                = _n++ // u
    ,   TRUE3                = _n++ // e
    ,   FALSE                = _n++ // a
    ,   FALSE2               = _n++ // l
    ,   FALSE3               = _n++ // s
    ,   FALSE4               = _n++ // e
    ,   NULL                 = _n++ // u
    ,   NULL2                = _n++ // l
    ,   NULL3                = _n++ // l
    ,   NUMBER_DECIMAL_POINT = _n++ // .
    ,   NUMBER_DIGIT         = _n   // [0-9]

        // setup initial parser values
    ,   bufferCheckPosition  = MAX_BUFFER_LENGTH
    ,   latestError                
    ,   c                    
    ,   p                    
    ,   textNode             = undefined
    ,   numberNode           = ""     
    ,   slashed              = false
    ,   closed               = false
    ,   state                = BEGIN
    ,   stack                = []
    ,   unicodeS             = null
    ,   unicodeI             = 0
    ,   depth                = 0
    ,   position             = 0
    ,   column               = 0  //mostly for error reporting
    ,   line                 = 1
    ;

    function checkBufferLength () {
       
      var maxActual = 0;
       
      if (textNode !== undefined && textNode.length > MAX_BUFFER_LENGTH) {
        emitError("Max buffer length exceeded: textNode");
        maxActual = Math.max(maxActual, textNode.length);
      }
      if (numberNode.length > MAX_BUFFER_LENGTH) {
        emitError("Max buffer length exceeded: numberNode");
        maxActual = Math.max(maxActual, numberNode.length);
      }
       
      bufferCheckPosition = (MAX_BUFFER_LENGTH - maxActual)
                                 + position;
    }

    eventBus(STREAM_DATA).on(handleData);

     /* At the end of the http content close the clarinet 
      This will provide an error if the total content provided was not 
      valid json, ie if not all arrays, objects and Strings closed properly */
    eventBus(STREAM_END).on(handleStreamEnd);   

    function emitError (errorString) {
       if (textNode !== undefined) {
          emitValueOpen(textNode);
          emitValueClose();
          textNode = undefined;
       }

       latestError = Error(errorString + "\nLn: "+line+
                                         "\nCol: "+column+
                                         "\nChr: "+c);
       
       emitFail(errorReport(undefined, undefined, latestError));
    }

    function handleStreamEnd() {
      if( state == BEGIN ) {
        // Handle the case where the stream closes without ever receiving
        // any input. This isn't an error - response bodies can be blank,
        // particularly for 204 http responses
        
        // Because of how Oboe is currently implemented, we parse a
        // completely empty stream as containing an empty object.
        // This is because Oboe's done event is only fired when the
        // root object of the JSON stream closes.
        
        // This should be decoupled and attached instead to the input stream
        // from the http (or whatever) resource ending.
        // If this decoupling could happen the SAX parser could simply emit
        // zero events on a completely empty input.
        emitValueOpen({});
        emitValueClose();

        closed = true;
        return;
      }
    
      if (state !== VALUE || depth !== 0)
        emitError("Unexpected end");
   
      if (textNode !== undefined) {
        emitValueOpen(textNode);
        emitValueClose();
        textNode = undefined;
      }
       
      closed = true;
    }

    function whitespace(c){
       return c == '\r' || c == '\n' || c == ' ' || c == '\t';
    }
     
    function handleData (chunk) {
           
      // this used to throw the error but inside Oboe we will have already
      // gotten the error when it was emitted. The important thing is to
      // not continue with the parse.
      if (latestError)
        return;
        
      if (closed) {
         return emitError("Cannot write after close");
      }

      var i = 0;
      c = chunk[0]; 

      while (c) {
        p = c;
        c = chunk[i++];
        if(!c) break;

        position ++;
        if (c == "\n") {
          line ++;
          column = 0;
        } else column ++;
        switch (state) {

          case BEGIN:
            if (c === "{") state = OPEN_OBJECT;
            else if (c === "[") state = OPEN_ARRAY;
            else if (!whitespace(c))
              return emitError("Non-whitespace before {[.");
          continue;

          case OPEN_KEY:
          case OPEN_OBJECT:
            if (whitespace(c)) continue;
            if(state === OPEN_KEY) stack.push(CLOSE_KEY);
            else {
              if(c === '}') {
                emitValueOpen({});
                emitValueClose();
                state = stack.pop() || VALUE;
                continue;
              } else  stack.push(CLOSE_OBJECT);
            }
            if(c === '"')
               state = STRING;
            else
               return emitError("Malformed object key should start with \" ");
          continue;

          case CLOSE_KEY:
          case CLOSE_OBJECT:
            if (whitespace(c)) continue;

            if(c===':') {
              if(state === CLOSE_OBJECT) {
                stack.push(CLOSE_OBJECT);

                 if (textNode !== undefined) {
                    // was previously (in upstream Clarinet) one event
                    //  - object open came with the text of the first
                    emitValueOpen({});
                    emitSaxKey(textNode);
                    textNode = undefined;
                 }
                 depth++;
              } else {
                 if (textNode !== undefined) {
                    emitSaxKey(textNode);
                    textNode = undefined;
                 }
              }
               state  = VALUE;
            } else if (c==='}') {
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               emitValueClose();
              depth--;
              state = stack.pop() || VALUE;
            } else if(c===',') {
              if(state === CLOSE_OBJECT)
                stack.push(CLOSE_OBJECT);
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               state  = OPEN_KEY;
            } else 
               return emitError('Bad object');
          continue;

          case OPEN_ARRAY: // after an array there always a value
          case VALUE:
            if (whitespace(c)) continue;
            if(state===OPEN_ARRAY) {
              emitValueOpen([]);
              depth++;             
              state = VALUE;
              if(c === ']') {
                emitValueClose();
                depth--;
                state = stack.pop() || VALUE;
                continue;
              } else {
                stack.push(CLOSE_ARRAY);
              }
            }
                 if(c === '"') state = STRING;
            else if(c === '{') state = OPEN_OBJECT;
            else if(c === '[') state = OPEN_ARRAY;
            else if(c === 't') state = TRUE;
            else if(c === 'f') state = FALSE;
            else if(c === 'n') state = NULL;
            else if(c === '-') { // keep and continue
              numberNode += c;
            } else if(c==='0') {
              numberNode += c;
              state = NUMBER_DIGIT;
            } else if('123456789'.indexOf(c) !== -1) {
              numberNode += c;
              state = NUMBER_DIGIT;
            } else               
              return emitError("Bad value");
          continue;

          case CLOSE_ARRAY:
            if(c===',') {
              stack.push(CLOSE_ARRAY);
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               state  = VALUE;
            } else if (c===']') {
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               emitValueClose();
              depth--;
              state = stack.pop() || VALUE;
            } else if (whitespace(c))
                continue;
            else 
               return emitError('Bad array');
          continue;

          case STRING:
            if (textNode === undefined) {
                textNode = "";
            }

            // thanks thejh, this is an about 50% performance improvement.
            var starti              = i-1;
             
            STRING_BIGLOOP: while (true) {

              // zero means "no unicode active". 1-4 mean "parse some more". end after 4.
              while (unicodeI > 0) {
                unicodeS += c;
                c = chunk.charAt(i++);
                if (unicodeI === 4) {
                  // TODO this might be slow? well, probably not used too often anyway
                  textNode += String.fromCharCode(parseInt(unicodeS, 16));
                  unicodeI = 0;
                  starti = i-1;
                } else {
                  unicodeI++;
                }
                // we can just break here: no stuff we skipped that still has to be sliced out or so
                if (!c) break STRING_BIGLOOP;
              }
              if (c === '"' && !slashed) {
                state = stack.pop() || VALUE;
                textNode += chunk.substring(starti, i-1);
                break;
              }
              if (c === '\\' && !slashed) {
                slashed = true;
                textNode += chunk.substring(starti, i-1);
                 c = chunk.charAt(i++);
                if (!c) break;
              }
              if (slashed) {
                slashed = false;
                     if (c === 'n') { textNode += '\n'; }
                else if (c === 'r') { textNode += '\r'; }
                else if (c === 't') { textNode += '\t'; }
                else if (c === 'f') { textNode += '\f'; }
                else if (c === 'b') { textNode += '\b'; }
                else if (c === 'u') {
                  // \uxxxx. meh!
                  unicodeI = 1;
                  unicodeS = '';
                } else {
                  textNode += c;
                }
                c = chunk.charAt(i++);
                starti = i-1;
                if (!c) break;
                else continue;
              }

              stringTokenPattern.lastIndex = i;
              var reResult = stringTokenPattern.exec(chunk);
              if (!reResult) {
                i = chunk.length+1;
                textNode += chunk.substring(starti, i-1);
                break;
              }
              i = reResult.index+1;
              c = chunk.charAt(reResult.index);
              if (!c) {
                textNode += chunk.substring(starti, i-1);
                break;
              }
            }
          continue;

          case TRUE:
            if (!c)  continue; // strange buffers
            if (c==='r') state = TRUE2;
            else
               return emitError( 'Invalid true started with t'+ c);
          continue;

          case TRUE2:
            if (!c)  continue;
            if (c==='u') state = TRUE3;
            else
               return emitError('Invalid true started with tr'+ c);
          continue;

          case TRUE3:
            if (!c) continue;
            if(c==='e') {
              emitValueOpen(true);
              emitValueClose();
              state = stack.pop() || VALUE;
            } else
               return emitError('Invalid true started with tru'+ c);
          continue;

          case FALSE:
            if (!c)  continue;
            if (c==='a') state = FALSE2;
            else
               return emitError('Invalid false started with f'+ c);
          continue;

          case FALSE2:
            if (!c)  continue;
            if (c==='l') state = FALSE3;
            else
               return emitError('Invalid false started with fa'+ c);
          continue;

          case FALSE3:
            if (!c)  continue;
            if (c==='s') state = FALSE4;
            else
               return emitError('Invalid false started with fal'+ c);
          continue;

          case FALSE4:
            if (!c)  continue;
            if (c==='e') {
              emitValueOpen(false);
              emitValueClose();
              state = stack.pop() || VALUE;
            } else
               return emitError('Invalid false started with fals'+ c);
          continue;

          case NULL:
            if (!c)  continue;
            if (c==='u') state = NULL2;
            else
               return emitError('Invalid null started with n'+ c);
          continue;

          case NULL2:
            if (!c)  continue;
            if (c==='l') state = NULL3;
            else
               return emitError('Invalid null started with nu'+ c);
          continue;

          case NULL3:
            if (!c) continue;
            if(c==='l') {
              emitValueOpen(null);
              emitValueClose();
              state = stack.pop() || VALUE;
            } else 
               return emitError('Invalid null started with nul'+ c);
          continue;

          case NUMBER_DECIMAL_POINT:
            if(c==='.') {
              numberNode += c;
              state       = NUMBER_DIGIT;
            } else 
               return emitError('Leading zero not followed by .');
          continue;

          case NUMBER_DIGIT:
            if('0123456789'.indexOf(c) !== -1) numberNode += c;
            else if (c==='.') {
              if(numberNode.indexOf('.')!==-1)
                 return emitError('Invalid number has two dots');
              numberNode += c;
            } else if (c==='e' || c==='E') {
              if(numberNode.indexOf('e')!==-1 ||
                 numberNode.indexOf('E')!==-1 )
                 return emitError('Invalid number has two exponential');
              numberNode += c;
            } else if (c==="+" || c==="-") {
              if(!(p==='e' || p==='E'))
                 return emitError('Invalid symbol in number');
              numberNode += c;
            } else {
              if (numberNode) {
                emitValueOpen(parseFloat(numberNode));
                emitValueClose();
                numberNode = "";
              }
              i--; // go back one
              state = stack.pop() || VALUE;
            }
          continue;

          default:
            return emitError("Unknown state: " + state);
        }
      }
      if (position >= bufferCheckPosition)
        checkBufferLength();
    }
  }


  /** 
   * A bridge used to assign stateless functions to listen to clarinet.
   * 
   * As well as the parameter from clarinet, each callback will also be passed
   * the result of the last callback.
   * 
   * This may also be used to clear all listeners by assigning zero handlers:
   * 
   *    ascentManager( clarinet, {} )
   */
  function ascentManager(oboeBus, handlers){
     
     var listenerId = {},
         ascent;

     function stateAfter(handler) {
        return function(param){
           ascent = handler( ascent, param);
        }
     }
     
     for( var eventName in handlers ) {

        oboeBus(eventName).on(stateAfter(handlers[eventName]), listenerId);
     }
     
     oboeBus(NODE_SWAP).on(function(newNode) {
        
        var oldHead = head(ascent),
            key = keyOf(oldHead),
            ancestors = tail(ascent),
            parentNode;

        if( ancestors ) {
           parentNode = nodeOf(head(ancestors));
           parentNode[key] = newNode;
        }
     });

     oboeBus(NODE_DROP).on(function() {

        var oldHead = head(ascent),
            key = keyOf(oldHead),
            ancestors = tail(ascent),
            parentNode;

        if( ancestors ) {
           parentNode = nodeOf(head(ancestors));
   
           delete parentNode[key];
        }
     });

     oboeBus(ABORTING).on(function(){
        
        for( var eventName in handlers ) {
           oboeBus(eventName).un(listenerId);
        }
     });   
  }

  var httpTransport = functor(httpHttps);

  /**
   * A wrapper around the browser XmlHttpRequest object that raises an 
   * event whenever a new part of the response is available.
   * 
   * In older browsers progressive reading is impossible so all the 
   * content is given in a single call. For newer ones several events
   * should be raised, allowing progressive interpretation of the response.
   *      
   * @param {Function} oboeBus an event bus local to this Oboe instance
   * @param {XMLHttpRequest} transport the http implementation to use as the transport. Under normal
   *          operation, will have been created using httpTransport() above
   *          and therefore be Node's http
   *          but for tests a stub may be provided instead.
   * @param {String} method one of 'GET' 'POST' 'PUT' 'PATCH' 'DELETE'
   * @param {String} contentSource the url to make a request to, or a stream to read from
   * @param {String|Null} data some content to be sent with the request.
   *                      Only valid if method is POST or PUT.
   * @param {Object} [headers] the http request headers to send                       
   */  
  function streamingHttp(oboeBus, transport, method, contentSource, data, headers) {
     
     /* receiving data after calling .abort on Node's http has been observed in the
        wild. Keep aborted as state so that if the request has been aborted we
        can ignore new data from that point on */
     var aborted = false;

     function readStreamToEventBus(readableStream) {
           
        // use stream in flowing mode   
        readableStream.on('data', function (chunk) {

           // avoid reading the stream after aborting the request
           if( !aborted ) {
              oboeBus(STREAM_DATA).emit(chunk.toString());
           }
        });
        
        readableStream.on('end', function() {

           // avoid reading the stream after aborting the request
           if( !aborted ) {
              oboeBus(STREAM_END).emit();
           }
        });
     }
     
     function readStreamToEnd(readableStream, callback){
        var content = '';
     
        readableStream.on('data', function (chunk) {
                                               
           content += chunk.toString();
        });
        
        readableStream.on('end', function() {
                 
           callback( content );
        });
     }
     
     function openUrlAsStream( url$$1 ) {
        
        var parsedUrl = url.parse(url$$1);
             
        return transport.request({
           hostname: parsedUrl.hostname,
           port: parsedUrl.port, 
           path: parsedUrl.path,
           method: method,
           headers: headers,
           protocol: parsedUrl.protocol
        });
     }
     
     function fetchUrl() {
        if( !contentSource.match(/https?:\/\//) ) {
           throw new Error(
              'Supported protocols when passing a URL into Oboe are http and https. ' +
              'If you wish to use another protocol, please pass a ReadableStream ' +
              '(http://nodejs.org/api/stream.html#stream_class_stream_readable) like ' + 
              'oboe(fs.createReadStream("my_file")). I was given the URL: ' +
              contentSource
           );
        }
        
        var req = openUrlAsStream(contentSource);
        
        req.on('response', function(res){
           var statusCode = res.statusCode,
               successful = String(statusCode)[0] == 2;
                                                     
           oboeBus(HTTP_START).emit( res.statusCode, res.headers);
                                  
           if( successful ) {          
                 
              readStreamToEventBus(res);
              
           } else {
              readStreamToEnd(res, function(errorBody){
                 oboeBus(FAIL_EVENT).emit( 
                    errorReport( statusCode, errorBody )
                 );
              });
           }      
        });
        
        req.on('error', function(e) {
           oboeBus(FAIL_EVENT).emit( 
              errorReport(undefined, undefined, e )
           );
        });
        
        oboeBus(ABORTING).on( function(){
           aborted = true;
           req.abort();
        });
           
        if( data ) {
           req.write(data);
        }
        
        req.end();         
     }
     
     if( isString(contentSource) ) {
        fetchUrl(contentSource);
     } else {
        // contentsource is a stream
        readStreamToEventBus(contentSource);   
     }

  }

  var jsonPathSyntax = (function() {
   
     var
     
     /** 
      * Export a regular expression as a simple function by exposing just 
      * the Regex#exec. This allows regex tests to be used under the same 
      * interface as differently implemented tests, or for a user of the
      * tests to not concern themselves with their implementation as regular
      * expressions.
      * 
      * This could also be expressed point-free as:
      *   Function.prototype.bind.bind(RegExp.prototype.exec),
      *   
      * But that's far too confusing! (and not even smaller once minified 
      * and gzipped)
      */
         regexDescriptor = function regexDescriptor(regex) {
              return regex.exec.bind(regex);
         }
         
     /**
      * Join several regular expressions and express as a function.
      * This allows the token patterns to reuse component regular expressions
      * instead of being expressed in full using huge and confusing regular
      * expressions.
      */       
     ,   jsonPathClause = varArgs(function( componentRegexes ) {

              // The regular expressions all start with ^ because we 
              // only want to find matches at the start of the 
              // JSONPath fragment we are inspecting           
              componentRegexes.unshift(/^/);
              
              return   regexDescriptor(
                          RegExp(
                             componentRegexes.map(attr('source')).join('')
                          )
                       );
         })
         
     ,   possiblyCapturing =           /(\$?)/
     ,   namedNode =                   /([\w-_]+|\*)/
     ,   namePlaceholder =             /()/
     ,   nodeInArrayNotation =         /\["([^"]+)"\]/
     ,   numberedNodeInArrayNotation = /\[(\d+|\*)\]/
     ,   fieldList =                      /{([\w ]*?)}/
     ,   optionalFieldList =           /(?:{([\w ]*?)})?/
      

         //   foo or *                  
     ,   jsonPathNamedNodeInObjectNotation   = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  namedNode, 
                                                  optionalFieldList
                                               )
                                               
         //   ["foo"]   
     ,   jsonPathNamedNodeInArrayNotation    = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  nodeInArrayNotation, 
                                                  optionalFieldList
                                               )  

         //   [2] or [*]       
     ,   jsonPathNumberedNodeInArrayNotation = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  numberedNodeInArrayNotation, 
                                                  optionalFieldList
                                               )

         //   {a b c}      
     ,   jsonPathPureDuckTyping              = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  namePlaceholder, 
                                                  fieldList
                                               )
     
         //   ..
     ,   jsonPathDoubleDot                   = jsonPathClause(/\.\./)                  
     
         //   .
     ,   jsonPathDot                         = jsonPathClause(/\./)                    
     
         //   !
     ,   jsonPathBang                        = jsonPathClause(
                                                  possiblyCapturing, 
                                                  /!/
                                               )  
     
         //   nada!
     ,   emptyString                         = jsonPathClause(/$/)                     
     
     ;
     
    
     /* We export only a single function. When called, this function injects 
        into another function the descriptors from above.             
      */
     return function (fn){      
        return fn(      
           lazyUnion(
              jsonPathNamedNodeInObjectNotation
           ,  jsonPathNamedNodeInArrayNotation
           ,  jsonPathNumberedNodeInArrayNotation
           ,  jsonPathPureDuckTyping 
           )
        ,  jsonPathDoubleDot
        ,  jsonPathDot
        ,  jsonPathBang
        ,  emptyString 
        );
     }; 

  }());
  /**
   * Get a new key->node mapping
   * 
   * @param {String|Number} key
   * @param {Object|Array|String|Number|null} node a value found in the json
   */
  function namedNode(key, node) {
     return {key:key, node:node};
  }

  /** get the key of a namedNode */
  var keyOf = attr('key');

  /** get the node from a namedNode */
  var nodeOf = attr('node');
  /** 
   * This file provides various listeners which can be used to build up
   * a changing ascent based on the callbacks provided by Clarinet. It listens
   * to the low-level events from Clarinet and emits higher-level ones.
   *  
   * The building up is stateless so to track a JSON file
   * ascentManager.js is required to store the ascent state
   * between calls.
   */



  /** 
   * A special value to use in the path list to represent the path 'to' a root 
   * object (which doesn't really have any path). This prevents the need for 
   * special-casing detection of the root object and allows it to be treated 
   * like any other object. We might think of this as being similar to the 
   * 'unnamed root' domain ".", eg if I go to 
   * http://en.wikipedia.org./wiki/En/Main_page the dot after 'org' deliminates 
   * the unnamed root of the DNS.
   * 
   * This is kept as an object to take advantage that in Javascript's OO objects 
   * are guaranteed to be distinct, therefore no other object can possibly clash 
   * with this one. Strings, numbers etc provide no such guarantee. 
   **/
  var ROOT_PATH = {};


  /**
   * Create a new set of handlers for clarinet's events, bound to the emit 
   * function given.  
   */ 
  function incrementalContentBuilder( oboeBus ) {

     var emitNodeOpened = oboeBus(NODE_OPENED).emit,
         emitNodeClosed = oboeBus(NODE_CLOSED).emit,
         emitRootOpened = oboeBus(ROOT_PATH_FOUND).emit,
         emitRootClosed = oboeBus(ROOT_NODE_FOUND).emit;

     function arrayIndicesAreKeys( possiblyInconsistentAscent, newDeepestNode) {
     
        /* for values in arrays we aren't pre-warned of the coming paths 
           (Clarinet gives no call to onkey like it does for values in objects) 
           so if we are in an array we need to create this path ourselves. The 
           key will be len(parentNode) because array keys are always sequential 
           numbers. */

        var parentNode = nodeOf( head( possiblyInconsistentAscent));
        
        return      isOfType( Array, parentNode)
                 ?
                    keyFound(  possiblyInconsistentAscent, 
                                len(parentNode), 
                                newDeepestNode
                    )
                 :  
                    // nothing needed, return unchanged
                    possiblyInconsistentAscent 
                 ;
     }
                   
     function nodeOpened( ascent, newDeepestNode ) {
        
        if( !ascent ) {
           // we discovered the root node,         
           emitRootOpened( newDeepestNode);
                      
           return keyFound( ascent, ROOT_PATH, newDeepestNode);         
        }

        // we discovered a non-root node
                   
        var arrayConsistentAscent  = arrayIndicesAreKeys( ascent, newDeepestNode),      
            ancestorBranches       = tail( arrayConsistentAscent),
            previouslyUnmappedName = keyOf( head( arrayConsistentAscent));
            
        appendBuiltContent( 
           ancestorBranches, 
           previouslyUnmappedName, 
           newDeepestNode 
        );
                                                                                                           
        return cons( 
                 namedNode( previouslyUnmappedName, newDeepestNode ), 
                 ancestorBranches
        );                                                                          
     }


     /**
      * Add a new value to the object we are building up to represent the
      * parsed JSON
      */
     function appendBuiltContent( ancestorBranches, key, node ){
       
        nodeOf( head( ancestorBranches))[key] = node;
     }

       
     /**
      * For when we find a new key in the json.
      * 
      * @param {String|Number|Object} newDeepestName the key. If we are in an 
      *    array will be a number, otherwise a string. May take the special 
      *    value ROOT_PATH if the root node has just been found
      *    
      * @param {String|Number|Object|Array|Null|undefined} [maybeNewDeepestNode] 
      *    usually this won't be known so can be undefined. Can't use null 
      *    to represent unknown because null is a valid value in JSON
      **/  
     function keyFound(ascent, newDeepestName, maybeNewDeepestNode) {

        if( ascent ) { // if not root
        
           // If we have the key but (unless adding to an array) no known value
           // yet. Put that key in the output but against no defined value:      
           appendBuiltContent( ascent, newDeepestName, maybeNewDeepestNode );
        }
     
        var ascentWithNewPath = cons( 
                                   namedNode( newDeepestName, 
                                              maybeNewDeepestNode), 
                                   ascent
                                );

        emitNodeOpened( ascentWithNewPath);
   
        return ascentWithNewPath;
     }


     /**
      * For when the current node ends.
      */
     function nodeClosed( ascent ) {

        emitNodeClosed( ascent);
         
        return tail( ascent) ||
               // If there are no nodes left in the ascent the root node
               // just closed. Emit a special event for this: 
               emitRootClosed(nodeOf(head(ascent)));
     }      

     var contentBuilderHandlers = {};
     contentBuilderHandlers[SAX_VALUE_OPEN] = nodeOpened;
     contentBuilderHandlers[SAX_VALUE_CLOSE] = nodeClosed;
     contentBuilderHandlers[SAX_KEY] = keyFound;
     return contentBuilderHandlers;
  }

  /**
   * The jsonPath evaluator compiler used for Oboe.js. 
   * 
   * One function is exposed. This function takes a String JSONPath spec and 
   * returns a function to test candidate ascents for matches.
   * 
   *  String jsonPath -> (List ascent) -> Boolean|Object
   *
   * This file is coded in a pure functional style. That is, no function has 
   * side effects, every function evaluates to the same value for the same 
   * arguments and no variables are reassigned.
   */  
  // the call to jsonPathSyntax injects the token syntaxes that are needed 
  // inside the compiler
  var jsonPathCompiler = jsonPathSyntax(function (pathNodeSyntax, 
                                                  doubleDotSyntax, 
                                                  dotSyntax,
                                                  bangSyntax,
                                                  emptySyntax ) {

     var CAPTURING_INDEX = 1;
     var NAME_INDEX = 2;
     var FIELD_LIST_INDEX = 3;

     var headKey  = compose2(keyOf, head),
         headNode = compose2(nodeOf, head);
                     
     /**
      * Create an evaluator function for a named path node, expressed in the
      * JSONPath like:
      *    foo
      *    ["bar"]
      *    [2]   
      */
     function nameClause(previousExpr, detection ) {
       
        var name = detection[NAME_INDEX],
              
            matchesName = ( !name || name == '*' ) 
                             ?  always
                             :  function(ascent){return headKey(ascent) == name};
       

        return lazyIntersection(matchesName, previousExpr);
     }

     /**
      * Create an evaluator function for a a duck-typed node, expressed like:
      * 
      *    {spin, taste, colour}
      *    .particle{spin, taste, colour}
      *    *{spin, taste, colour}
      */
     function duckTypeClause(previousExpr, detection) {

        var fieldListStr = detection[FIELD_LIST_INDEX];

        if (!fieldListStr) 
           return previousExpr; // don't wrap at all, return given expr as-is      

        var hasAllrequiredFields = partialComplete(
                                      hasAllProperties, 
                                      arrayAsList(fieldListStr.split(/\W+/))
                                   ),
                                   
            isMatch =  compose2( 
                          hasAllrequiredFields, 
                          headNode
                       );

        return lazyIntersection(isMatch, previousExpr);
     }

     /**
      * Expression for $, returns the evaluator function
      */
     function capture( previousExpr, detection ) {

        // extract meaning from the detection      
        var capturing = !!detection[CAPTURING_INDEX];

        if (!capturing)          
           return previousExpr; // don't wrap at all, return given expr as-is      
        
        return lazyIntersection(previousExpr, head);
              
     }            
        
     /**
      * Create an evaluator function that moves onto the next item on the 
      * lists. This function is the place where the logic to move up a 
      * level in the ascent exists. 
      * 
      * Eg, for JSONPath ".foo" we need skip1(nameClause(always, [,'foo']))
      */
     function skip1(previousExpr) {
     
     
        if( previousExpr == always ) {
           /* If there is no previous expression this consume command 
              is at the start of the jsonPath.
              Since JSONPath specifies what we'd like to find but not 
              necessarily everything leading down to it, when running
              out of JSONPath to check against we default to true */
           return always;
        }

        /** return true if the ascent we have contains only the JSON root,
         *  false otherwise
         */
        function notAtRoot(ascent){
           return headKey(ascent) != ROOT_PATH;
        }
        
        return lazyIntersection(
                 /* If we're already at the root but there are more 
                    expressions to satisfy, can't consume any more. No match.

                    This check is why none of the other exprs have to be able 
                    to handle empty lists; skip1 is the only evaluator that 
                    moves onto the next token and it refuses to do so once it 
                    reaches the last item in the list. */
                 notAtRoot,
                 
                 /* We are not at the root of the ascent yet.
                    Move to the next level of the ascent by handing only 
                    the tail to the previous expression */ 
                 compose2(previousExpr, tail) 
        );
                                                                                                                 
     }   
     
     /**
      * Create an evaluator function for the .. (double dot) token. Consumes
      * zero or more levels of the ascent, the fewest that are required to find
      * a match when given to previousExpr.
      */   
     function skipMany(previousExpr) {

        if( previousExpr == always ) {
           /* If there is no previous expression this consume command 
              is at the start of the jsonPath.
              Since JSONPath specifies what we'd like to find but not 
              necessarily everything leading down to it, when running
              out of JSONPath to check against we default to true */            
           return always;
        }
            
        var 
            // In JSONPath .. is equivalent to !.. so if .. reaches the root
            // the match has succeeded. Ie, we might write ..foo or !..foo
            // and both should match identically.
            terminalCaseWhenArrivingAtRoot = rootExpr(),
            terminalCaseWhenPreviousExpressionIsSatisfied = previousExpr,
            recursiveCase = skip1(function(ascent) {
               return cases(ascent);
            }),

            cases = lazyUnion(
                       terminalCaseWhenArrivingAtRoot
                    ,  terminalCaseWhenPreviousExpressionIsSatisfied
                    ,  recursiveCase  
                    );
        
        return cases;
     }      
     
     /**
      * Generate an evaluator for ! - matches only the root element of the json
      * and ignores any previous expressions since nothing may precede !. 
      */   
     function rootExpr() {
        
        return function(ascent){
           return headKey(ascent) == ROOT_PATH;
        };
     }   
           
     /**
      * Generate a statement wrapper to sit around the outermost 
      * clause evaluator.
      * 
      * Handles the case where the capturing is implicit because the JSONPath
      * did not contain a '$' by returning the last node.
      */   
     function statementExpr(lastClause) {
        
        return function(ascent) {
     
           // kick off the evaluation by passing through to the last clause
           var exprMatch = lastClause(ascent);
                                                       
           return exprMatch === true ? head(ascent) : exprMatch;
        };
     }      
                            
     /**
      * For when a token has been found in the JSONPath input.
      * Compiles the parser for that token and returns in combination with the
      * parser already generated.
      * 
      * @param {Function} exprs  a list of the clause evaluator generators for
      *                          the token that was found
      * @param {Function} parserGeneratedSoFar the parser already found
      * @param {Array} detection the match given by the regex engine when 
      *                          the feature was found
      */
     function expressionsReader( exprs, parserGeneratedSoFar, detection ) {
                       
        // if exprs is zero-length foldR will pass back the 
        // parserGeneratedSoFar as-is so we don't need to treat 
        // this as a special case
        
        return   foldR( 
                    function( parserGeneratedSoFar, expr ){
           
                       return expr(parserGeneratedSoFar, detection);
                    }, 
                    parserGeneratedSoFar, 
                    exprs
                 );                     

     }

     /** 
      *  If jsonPath matches the given detector function, creates a function which
      *  evaluates against every clause in the clauseEvaluatorGenerators. The
      *  created function is propagated to the onSuccess function, along with
      *  the remaining unparsed JSONPath substring.
      *  
      *  The intended use is to create a clauseMatcher by filling in
      *  the first two arguments, thus providing a function that knows
      *  some syntax to match and what kind of generator to create if it
      *  finds it. The parameter list once completed is:
      *  
      *    (jsonPath, parserGeneratedSoFar, onSuccess)
      *  
      *  onSuccess may be compileJsonPathToFunction, to recursively continue 
      *  parsing after finding a match or returnFoundParser to stop here.
      */
     function generateClauseReaderIfTokenFound (
       
                          tokenDetector, clauseEvaluatorGenerators,
                           
                          jsonPath, parserGeneratedSoFar, onSuccess) {
                          
        var detected = tokenDetector(jsonPath);

        if(detected) {
           var compiledParser = expressionsReader(
                                   clauseEvaluatorGenerators, 
                                   parserGeneratedSoFar, 
                                   detected
                                ),
           
               remainingUnparsedJsonPath = jsonPath.substr(len(detected[0]));                
                                 
           return onSuccess(remainingUnparsedJsonPath, compiledParser);
        }         
     }
                   
     /**
      * Partially completes generateClauseReaderIfTokenFound above. 
      */
     function clauseMatcher(tokenDetector, exprs) {
          
        return   partialComplete( 
                    generateClauseReaderIfTokenFound, 
                    tokenDetector, 
                    exprs 
                 );
     }

     /**
      * clauseForJsonPath is a function which attempts to match against 
      * several clause matchers in order until one matches. If non match the
      * jsonPath expression is invalid and an error is thrown.
      * 
      * The parameter list is the same as a single clauseMatcher:
      * 
      *    (jsonPath, parserGeneratedSoFar, onSuccess)
      */     
     var clauseForJsonPath = lazyUnion(

        clauseMatcher(pathNodeSyntax   , list( capture, 
                                               duckTypeClause, 
                                               nameClause, 
                                               skip1 ))
                                                       
     ,  clauseMatcher(doubleDotSyntax  , list( skipMany))
         
         // dot is a separator only (like whitespace in other languages) but 
         // rather than make it a special case, use an empty list of 
         // expressions when this token is found
     ,  clauseMatcher(dotSyntax        , list() )  
                                                                                        
     ,  clauseMatcher(bangSyntax       , list( capture,
                                               rootExpr))
                                                            
     ,  clauseMatcher(emptySyntax      , list( statementExpr))
     
     ,  function (jsonPath) {
           throw Error('"' + jsonPath + '" could not be tokenised')      
        }
     );


     /**
      * One of two possible values for the onSuccess argument of 
      * generateClauseReaderIfTokenFound.
      * 
      * When this function is used, generateClauseReaderIfTokenFound simply 
      * returns the compiledParser that it made, regardless of if there is 
      * any remaining jsonPath to be compiled.
      */
     function returnFoundParser(_remainingJsonPath, compiledParser){ 
        return compiledParser 
     }     
                
     /**
      * Recursively compile a JSONPath expression.
      * 
      * This function serves as one of two possible values for the onSuccess 
      * argument of generateClauseReaderIfTokenFound, meaning continue to
      * recursively compile. Otherwise, returnFoundParser is given and
      * compilation terminates.
      */
     function compileJsonPathToFunction( uncompiledJsonPath, 
                                         parserGeneratedSoFar ) {

        /**
         * On finding a match, if there is remaining text to be compiled
         * we want to either continue parsing using a recursive call to 
         * compileJsonPathToFunction. Otherwise, we want to stop and return 
         * the parser that we have found so far.
         */
        var onFind =      uncompiledJsonPath
                       ?  compileJsonPathToFunction 
                       :  returnFoundParser;
                     
        return   clauseForJsonPath( 
                    uncompiledJsonPath, 
                    parserGeneratedSoFar, 
                    onFind
                 );                              
     }

     /**
      * This is the function that we expose to the rest of the library.
      */
     return function(jsonPath){
          
        try {
           // Kick off the recursive parsing of the jsonPath 
           return compileJsonPathToFunction(jsonPath, always);
           
        } catch( e ) {
           throw Error( 'Could not compile "' + jsonPath + 
                        '" because ' + e.message
           );
        }
     }

  });

  /** 
   * A pub/sub which is responsible for a single event type. A 
   * multi-event type event bus is created by pubSub by collecting
   * several of these.
   * 
   * @param {String} eventType                   
   *    the name of the events managed by this singleEventPubSub
   * @param {singleEventPubSub} [newListener]    
   *    place to notify of new listeners
   * @param {singleEventPubSub} [removeListener] 
   *    place to notify of when listeners are removed
   */
  function singleEventPubSub(eventType, newListener, removeListener){

     /** we are optimised for emitting events over firing them.
      *  As well as the tuple list which stores event ids and
      *  listeners there is a list with just the listeners which 
      *  can be iterated more quickly when we are emitting
      */
     var listenerTupleList,
         listenerList;

     function hasId(id){
        return function(tuple) {
           return tuple.id == id;      
        };  
     }
                
     return {

        /**
         * @param {Function} listener
         * @param {*} listenerId 
         *    an id that this listener can later by removed by. 
         *    Can be of any type, to be compared to other ids using ==
         */
        on:function( listener, listenerId ) {
           
           var tuple = {
              listener: listener
           ,  id:       listenerId || listener // when no id is given use the
                                               // listener function as the id
           };

           if( newListener ) {
              newListener.emit(eventType, listener, tuple.id);
           }
           
           listenerTupleList = cons( tuple,    listenerTupleList );
           listenerList      = cons( listener, listenerList      );

           return this; // chaining
        },
       
        emit:function () {                                                                                           
           applyEach( listenerList, arguments );
        },
        
        un: function( listenerId ) {
               
           var removed;             
                
           listenerTupleList = without(
              listenerTupleList,
              hasId(listenerId),
              function(tuple){
                 removed = tuple;
              }
           );    
           
           if( removed ) {
              listenerList = without( listenerList, function(listener){
                 return listener == removed.listener;
              });
           
              if( removeListener ) {
                 removeListener.emit(eventType, removed.listener, removed.id);
              }
           }
        },
        
        listeners: function(){
           // differs from Node EventEmitter: returns list, not array
           return listenerList;
        },
        
        hasListener: function(listenerId){
           var test = listenerId? hasId(listenerId) : always;
        
           return defined(first( test, listenerTupleList));
        }
     };
  }
  /**
   * pubSub is a curried interface for listening to and emitting
   * events.
   * 
   * If we get a bus:
   *    
   *    var bus = pubSub();
   * 
   * We can listen to event 'foo' like:
   * 
   *    bus('foo').on(myCallback)
   *    
   * And emit event foo like:
   * 
   *    bus('foo').emit()
   *    
   * or, with a parameter:
   * 
   *    bus('foo').emit('bar')
   *     
   * All functions can be cached and don't need to be 
   * bound. Ie:
   * 
   *    var fooEmitter = bus('foo').emit
   *    fooEmitter('bar');  // emit an event
   *    fooEmitter('baz');  // emit another
   *    
   * There's also an uncurried[1] shortcut for .emit and .on:
   * 
   *    bus.on('foo', callback)
   *    bus.emit('foo', 'bar')
   * 
   * [1]: http://zvon.org/other/haskell/Outputprelude/uncurry_f.html
   */
  function pubSub(){

     var singles = {},
         newListener = newSingle('newListener'),
         removeListener = newSingle('removeListener'); 
        
     function newSingle(eventName) {
        return singles[eventName] = singleEventPubSub(
           eventName, 
           newListener, 
           removeListener
        );   
     }      

     /** pubSub instances are functions */
     function pubSubInstance( eventName ){   
        
        return singles[eventName] || newSingle( eventName );   
     }

     // add convenience EventEmitter-style uncurried form of 'emit' and 'on'
     ['emit', 'on', 'un'].forEach(function(methodName){
     
        pubSubInstance[methodName] = varArgs(function(eventName, parameters){
           apply( parameters, pubSubInstance( eventName )[methodName]);
        });   
     });
           
     return pubSubInstance;
  }

  /**
   * This file declares some constants to use as names for event types.
   */

  var // the events which are never exported are kept as 
      // the smallest possible representation, in numbers:
      _S = 1,

      // fired whenever a new node starts in the JSON stream:
      NODE_OPENED     = _S++,

      // fired whenever a node closes in the JSON stream:
      NODE_CLOSED     = _S++,

      // called if a .node callback returns a value - 
      NODE_SWAP       = _S++,
      NODE_DROP       = _S++,

      FAIL_EVENT      = 'fail',
     
      ROOT_NODE_FOUND = _S++,
      ROOT_PATH_FOUND = _S++,
     
      HTTP_START      = 'start',
      STREAM_DATA     = 'data',
      STREAM_END      = 'end',
      ABORTING        = _S++,

      // SAX events butchered from Clarinet
      SAX_KEY          = _S++,
      SAX_VALUE_OPEN   = _S++,
      SAX_VALUE_CLOSE  = _S++;
      
  function errorReport(statusCode, body, error) {
     try{
        var jsonBody = JSON.parse(body);
     }catch(e){}

     return {
        statusCode:statusCode,
        body:body,
        jsonBody:jsonBody,
        thrown:error
     };
  }    

  /** 
   *  The pattern adaptor listens for newListener and removeListener
   *  events. When patterns are added or removed it compiles the JSONPath
   *  and wires them up.
   *  
   *  When nodes and paths are found it emits the fully-qualified match 
   *  events with parameters ready to ship to the outside world
   */

  function patternAdapter(oboeBus, jsonPathCompiler) {

     var predicateEventMap = {
        node:oboeBus(NODE_CLOSED)
     ,  path:oboeBus(NODE_OPENED)
     };
       
     function emitMatchingNode(emitMatch, node, ascent) {
           
        /* 
           We're now calling to the outside world where Lisp-style 
           lists will not be familiar. Convert to standard arrays. 
     
           Also, reverse the order because it is more common to 
           list paths "root to leaf" than "leaf to root"  */
        var descent     = reverseList(ascent);
                  
        emitMatch(
           node,
           
           // To make a path, strip off the last item which is the special
           // ROOT_PATH token for the 'path' to the root node          
           listAsArray(tail(map(keyOf,descent))),  // path
           listAsArray(map(nodeOf, descent))       // ancestors    
        );         
     }

     /* 
      * Set up the catching of events such as NODE_CLOSED and NODE_OPENED and, if 
      * matching the specified pattern, propagate to pattern-match events such as 
      * oboeBus('node:!')
      * 
      * 
      * 
      * @param {Function} predicateEvent 
      *          either oboeBus(NODE_CLOSED) or oboeBus(NODE_OPENED).
      * @param {Function} compiledJsonPath          
      */
     function addUnderlyingListener( fullEventName, predicateEvent, compiledJsonPath ){
     
        var emitMatch = oboeBus(fullEventName).emit;
     
        predicateEvent.on( function (ascent) {

           var maybeMatchingMapping = compiledJsonPath(ascent);

           /* Possible values for maybeMatchingMapping are now:

            false: 
            we did not match 

            an object/array/string/number/null: 
            we matched and have the node that matched.
            Because nulls are valid json values this can be null.

            undefined:
            we matched but don't have the matching node yet.
            ie, we know there is an upcoming node that matches but we 
            can't say anything else about it. 
            */
           if (maybeMatchingMapping !== false) {

              emitMatchingNode(
                 emitMatch, 
                 nodeOf(maybeMatchingMapping), 
                 ascent
              );
           }
        }, fullEventName);
       
        oboeBus('removeListener').on( function(removedEventName){

           // if the fully qualified match event listener is later removed, clean up 
           // by removing the underlying listener if it was the last using that pattern:
        
           if( removedEventName == fullEventName ) {
           
              if( !oboeBus(removedEventName).listeners(  )) {
                 predicateEvent.un( fullEventName );
              }
           }
        });   
     }

     oboeBus('newListener').on( function(fullEventName){

        var match = /(node|path):(.*)/.exec(fullEventName);
        
        if( match ) {
           var predicateEvent = predicateEventMap[match[1]];
                      
           if( !predicateEvent.hasListener( fullEventName) ) {  
                    
              addUnderlyingListener(
                 fullEventName,
                 predicateEvent, 
                 jsonPathCompiler( match[2] )
              );
           }
        }    
     });

  }

  /**
   * The instance API is the thing that is returned when oboe() is called.
   * it allows:
   *
   *    - listeners for various events to be added and removed
   *    - the http response header/headers to be read
   */
  function instanceApi(oboeBus, contentSource){

     var oboeApi,
         fullyQualifiedNamePattern = /^(node|path):./,
         rootNodeFinishedEvent = oboeBus(ROOT_NODE_FOUND),
         emitNodeDrop = oboeBus(NODE_DROP).emit,
         emitNodeSwap = oboeBus(NODE_SWAP).emit,

         /**
          * Add any kind of listener that the instance api exposes
          */
         addListener = varArgs(function( eventId, parameters ){

              if( oboeApi[eventId] ) {

                 // for events added as .on(event, callback), if there is a
                 // .event() equivalent with special behaviour , pass through
                 // to that:
                 apply(parameters, oboeApi[eventId]);
              } else {

                 // we have a standard Node.js EventEmitter 2-argument call.
                 // The first parameter is the listener.
                 var event = oboeBus(eventId),
                     listener = parameters[0];

                 if( fullyQualifiedNamePattern.test(eventId) ) {

                    // allow fully-qualified node/path listeners
                    // to be added
                    addForgettableCallback(event, listener);
                 } else  {

                    // the event has no special handling, pass through
                    // directly onto the event bus:
                    event.on( listener);
                 }
              }

              return oboeApi; // chaining
         }),

         /**
          * Remove any kind of listener that the instance api exposes
          */
         removeListener = function( eventId, p2, p3 ){

              if( eventId == 'done' ) {

                 rootNodeFinishedEvent.un(p2);

              } else if( eventId == 'node' || eventId == 'path' ) {

                 // allow removal of node and path
                 oboeBus.un(eventId + ':' + p2, p3);
              } else {

                 // we have a standard Node.js EventEmitter 2-argument call.
                 // The second parameter is the listener. This may be a call
                 // to remove a fully-qualified node/path listener but requires
                 // no special handling
                 var listener = p2;

                 oboeBus(eventId).un(listener);
              }

              return oboeApi; // chaining
         };

     /**
      * Add a callback, wrapped in a try/catch so as to not break the
      * execution of Oboe if an exception is thrown (fail events are
      * fired instead)
      *
      * The callback is used as the listener id so that it can later be
      * removed using .un(callback)
      */
     function addProtectedCallback(eventName, callback) {
        oboeBus(eventName).on(protectedCallback(callback), callback);
        return oboeApi; // chaining
     }

     /**
      * Add a callback where, if .forget() is called during the callback's
      * execution, the callback will be de-registered
      */
     function addForgettableCallback(event, callback, listenerId) {

        // listenerId is optional and if not given, the original
        // callback will be used
        listenerId = listenerId || callback;

        var safeCallback = protectedCallback(callback);

        event.on( function() {

           var discard = false;

           oboeApi.forget = function(){
              discard = true;
           };

           apply( arguments, safeCallback );

           delete oboeApi.forget;

           if( discard ) {
              event.un(listenerId);
           }
        }, listenerId);

        return oboeApi; // chaining
     }

     /**
      *  wrap a callback so that if it throws, Oboe.js doesn't crash but instead
      *  throw the error in another event loop
      */
     function protectedCallback( callback ) {
        return function() {
           try{
              return callback.apply(oboeApi, arguments);
           }catch(e)  {
              setTimeout(function() {
                throw e;
              });
           }
        }
     }

     /**
      * Return the fully qualified event for when a pattern matches
      * either a node or a path
      *
      * @param type {String} either 'node' or 'path'
      */
     function fullyQualifiedPatternMatchEvent(type, pattern) {
        return oboeBus(type + ':' + pattern);
     }

     function wrapCallbackToSwapNodeIfSomethingReturned( callback ) {
        return function() {
           var returnValueFromCallback = callback.apply(this, arguments);

           if( defined(returnValueFromCallback) ) {

              if( returnValueFromCallback == oboe.drop ) {
                 emitNodeDrop();
              } else {
                 emitNodeSwap(returnValueFromCallback);
              }
           }
        }
     }

     function addSingleNodeOrPathListener(eventId, pattern, callback) {

        var effectiveCallback;

        if( eventId == 'node' ) {
           effectiveCallback = wrapCallbackToSwapNodeIfSomethingReturned(callback);
        } else {
           effectiveCallback = callback;
        }

        addForgettableCallback(
           fullyQualifiedPatternMatchEvent(eventId, pattern),
           effectiveCallback,
           callback
        );
     }

     /**
      * Add several listeners at a time, from a map
      */
     function addMultipleNodeOrPathListeners(eventId, listenerMap) {

        for( var pattern in listenerMap ) {
           addSingleNodeOrPathListener(eventId, pattern, listenerMap[pattern]);
        }
     }

     /**
      * implementation behind .onPath() and .onNode()
      */
     function addNodeOrPathListenerApi( eventId, jsonPathOrListenerMap, callback ){

        if( isString(jsonPathOrListenerMap) ) {
           addSingleNodeOrPathListener(eventId, jsonPathOrListenerMap, callback);

        } else {
           addMultipleNodeOrPathListeners(eventId, jsonPathOrListenerMap);
        }

        return oboeApi; // chaining
     }


     // some interface methods are only filled in after we receive
     // values and are noops before that:
     oboeBus(ROOT_PATH_FOUND).on( function(rootNode) {
        oboeApi.root = functor(rootNode);
     });

     /**
      * When content starts make the headers readable through the
      * instance API
      */
     oboeBus(HTTP_START).on( function(_statusCode, headers) {

        oboeApi.header =  function(name) {
                             return name ? headers[name]
                                         : headers
                                         ;
                          };
     });

     /**
      * Construct and return the public API of the Oboe instance to be
      * returned to the calling application
      */
     return oboeApi = {
        on             : addListener,
        addListener    : addListener,
        removeListener : removeListener,
        emit           : oboeBus.emit,

        node           : partialComplete(addNodeOrPathListenerApi, 'node'),
        path           : partialComplete(addNodeOrPathListenerApi, 'path'),

        done           : partialComplete(addForgettableCallback, rootNodeFinishedEvent),
        start          : partialComplete(addProtectedCallback, HTTP_START ),

        // fail doesn't use protectedCallback because
        // could lead to non-terminating loops
        fail           : oboeBus(FAIL_EVENT).on,

        // public api calling abort fires the ABORTING event
        abort          : oboeBus(ABORTING).emit,

        // initially return nothing for header and root
        header         : noop,
        root           : noop,

        source         : contentSource
     };
  }

  /**
   * This file sits just behind the API which is used to attain a new
   * Oboe instance. It creates the new components that are required
   * and introduces them to each other.
   */

  function wire (httpMethodName, contentSource, body, headers, withCredentials){

     var oboeBus = pubSub();
     
     // Wire the input stream in if we are given a content source.
     // This will usually be the case. If not, the instance created
     // will have to be passed content from an external source.
    
     if( contentSource ) {

        streamingHttp( oboeBus,
                       httpTransport(), 
                       httpMethodName,
                       contentSource,
                       body,
                       headers,
                       withCredentials
        );
     }

     clarinet(oboeBus);

     ascentManager(oboeBus, incrementalContentBuilder(oboeBus));
        
     patternAdapter(oboeBus, jsonPathCompiler);      
        
     return instanceApi(oboeBus, contentSource);
  }

  function applyDefaults( passthrough, url$$1, httpMethodName, body, headers, withCredentials, cached ){

     headers = headers ?
        // Shallow-clone the headers array. This allows it to be
        // modified without side effects to the caller. We don't
        // want to change objects that the user passes in.
        JSON.parse(JSON.stringify(headers))
        : {};

     if( body ) {
        if( !isString(body) ) {

           // If the body is not a string, stringify it. This allows objects to
           // be given which will be sent as JSON.
           body = JSON.stringify(body);

           // Default Content-Type to JSON unless given otherwise.
           headers['Content-Type'] = headers['Content-Type'] || 'application/json';
        }
     } else {
        body = null;
     }

     // support cache busting like jQuery.ajax({cache:false})
     function modifiedUrl(baseUrl, cached) {

        if( cached === false ) {

           if( baseUrl.indexOf('?') == -1 ) {
              baseUrl += '?';
           } else {
              baseUrl += '&';
           }

           baseUrl += '_=' + new Date().getTime();
        }
        return baseUrl;
     }

     return passthrough( httpMethodName || 'GET', modifiedUrl(url$$1, cached), body, headers, withCredentials || false );
  }

  // export public API
  function oboe(arg1) {

     // We use duck-typing to detect if the parameter given is a stream, with the
     // below list of parameters.
     // Unpipe and unshift would normally be present on a stream but this breaks
     // compatibility with Request streams.
     // See https://github.com/jimhigson/oboe.js/issues/65
     
     var nodeStreamMethodNames = list('resume', 'pause', 'pipe'),
         isStream = partialComplete(
                       hasAllProperties
                    ,  nodeStreamMethodNames
                    );
     
     if( arg1 ) {
        if (isStream(arg1) || isString(arg1)) {

           //  simple version for GETs. Signature is:
           //    oboe( url )
           //  or, under node:
           //    oboe( readableStream )
           return applyDefaults(
              wire,
              arg1 // url
           );

        } else {

           // method signature is:
           //    oboe({method:m, url:u, body:b, headers:{...}})

           return applyDefaults(
              wire,
              arg1.url,
              arg1.method,
              arg1.body,
              arg1.headers,
              arg1.withCredentials,
              arg1.cached
           );
           
        }
     } else {
        // wire up a no-AJAX, no-stream Oboe. Will have to have content 
        // fed in externally and using .emit.
        return wire();
     }
  }

  /* oboe.drop is a special value. If a node callback returns this value the
     parsed node is deleted from the JSON
   */
  oboe.drop = function() {
     return oboe.drop;
  };


     return oboe;
  })();

  var errors$4 = src$6.errors;



  var IpcProvider = function IpcProvider(path$$1, net) {
      var _this = this;
      this.responseCallbacks = {};
      this.notificationCallbacks = [];
      this.path = path$$1;

      this.connection = net.connect({path: this.path});

      this.addDefaultEvents();

      // LISTEN FOR CONNECTION RESPONSES
      var callback = function(result) {
          /*jshint maxcomplexity: 6 */

          var id = null;

          // get the id which matches the returned id
          if(underscore.isArray(result)) {
              result.forEach(function(load){
                  if(_this.responseCallbacks[load.id])
                      id = load.id;
              });
          } else {
              id = result.id;
          }

          // notification
          if(!id && result.method.indexOf('_subscription') !== -1) {
              _this.notificationCallbacks.forEach(function(callback){
                  if(underscore.isFunction(callback))
                      callback(result);
              });

              // fire the callback
          } else if(_this.responseCallbacks[id]) {
              _this.responseCallbacks[id](null, result);
              delete _this.responseCallbacks[id];
          }
      };

      // use oboe.js for Sockets
      if (net.constructor.name === 'Socket') {
          oboeNode(this.connection)
          .done(callback);
      } else {
          this.connection.on('data', function(data){
              _this._parseResponse(data.toString()).forEach(callback);
          });
      }
  };

  /**
  Will add the error and end event to timeout existing calls

  @method addDefaultEvents
  */
  IpcProvider.prototype.addDefaultEvents = function(){
      var _this = this;

      this.connection.on('connect', function(){
      });

      this.connection.on('error', function(){
          _this._timeout();
      });

      this.connection.on('end', function(){
          _this._timeout();
      });

      this.connection.on('timeout', function(){
          _this._timeout();
      });
  };


  /**
   Will parse the response and make an array out of it.

   NOTE, this exists for backwards compatibility reasons.

   @method _parseResponse
   @param {String} data
   */
  IpcProvider.prototype._parseResponse = function(data) {
      var _this = this,
          returnValues = [];

      // DE-CHUNKER
      var dechunkedData = data
          .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
          .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
          .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
          .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
          .split('|--|');

      dechunkedData.forEach(function(data){

          // prepend the last chunk
          if(_this.lastChunk)
              data = _this.lastChunk + data;

          var result = null;

          try {
              result = JSON.parse(data);

          } catch(e) {

              _this.lastChunk = data;

              // start timeout to cancel all requests
              clearTimeout(_this.lastChunkTimeout);
              _this.lastChunkTimeout = setTimeout(function(){
                  _this._timeout();
                  throw errors$4.InvalidResponse(data);
              }, 1000 * 15);

              return;
          }

          // cancel timeout and set chunk to null
          clearTimeout(_this.lastChunkTimeout);
          _this.lastChunk = null;

          if(result)
              returnValues.push(result);
      });

      return returnValues;
  };


  /**
  Get the adds a callback to the responseCallbacks object,
  which will be called if a response matching the response Id will arrive.

  @method _addResponseCallback
  */
  IpcProvider.prototype._addResponseCallback = function(payload, callback) {
      var id = payload.id || payload[0].id;
      var method = payload.method || payload[0].method;

      this.responseCallbacks[id] = callback;
      this.responseCallbacks[id].method = method;
  };

  /**
  Timeout all requests when the end/error event is fired

  @method _timeout
  */
  IpcProvider.prototype._timeout = function() {
      for(var key in this.responseCallbacks) {
          if(this.responseCallbacks.hasOwnProperty(key)){
              this.responseCallbacks[key](errors$4.InvalidConnection('on IPC'));
              delete this.responseCallbacks[key];
          }
      }
  };

  /**
   Try to reconnect

   @method reconnect
   */
  IpcProvider.prototype.reconnect = function() {
      this.connection.connect({path: this.path});
  };


  IpcProvider.prototype.send = function (payload, callback) {
      // try reconnect, when connection is gone
      if(!this.connection.writable)
          this.connection.connect({path: this.path});


      this.connection.write(JSON.stringify(payload));
      this._addResponseCallback(payload, callback);
  };

  /**
  Subscribes to provider events.provider

  @method on
  @param {String} type    'notification', 'connect', 'error', 'end' or 'data'
  @param {Function} callback   the callback to call
  */
  IpcProvider.prototype.on = function (type, callback) {

      if(typeof callback !== 'function')
          throw new Error('The second parameter callback must be a function.');

      switch(type){
          case 'data':
              this.notificationCallbacks.push(callback);
              break;

          // adds error, end, timeout, connect
          default:
              this.connection.on(type, callback);
              break;
      }
  };

  /**
   Subscribes to provider events.provider

   @method on
   @param {String} type    'connect', 'error', 'end' or 'data'
   @param {Function} callback   the callback to call
   */
  IpcProvider.prototype.once = function (type, callback) {

      if(typeof callback !== 'function')
          throw new Error('The second parameter callback must be a function.');

      this.connection.once(type, callback);
  };

  /**
  Removes event listener

  @method removeListener
  @param {String} type    'data', 'connect', 'error', 'end' or 'data'
  @param {Function} callback   the callback to call
  */
  IpcProvider.prototype.removeListener = function (type, callback) {
      var _this = this;

      switch(type){
          case 'data':
              this.notificationCallbacks.forEach(function(cb, index){
                  if(cb === callback)
                      _this.notificationCallbacks.splice(index, 1);
              });
              break;

          default:
              this.connection.removeListener(type, callback);
              break;
      }
  };

  /**
  Removes all event listeners

  @method removeAllListeners
  @param {String} type    'data', 'connect', 'error', 'end' or 'data'
  */
  IpcProvider.prototype.removeAllListeners = function (type) {
      switch(type){
          case 'data':
              this.notificationCallbacks = [];
              break;

          default:
              this.connection.removeAllListeners(type);
              break;
      }
  };

  /**
  Resets the providers, clears all callbacks

  @method reset
  */
  IpcProvider.prototype.reset = function () {
      this._timeout();
      this.notificationCallbacks = [];

      this.connection.removeAllListeners('error');
      this.connection.removeAllListeners('end');
      this.connection.removeAllListeners('timeout');

      this.addDefaultEvents();
  };

  var src$9 = IpcProvider;

  var errors$5 = src$6.errors;






      /**
   * It's responsible for passing messages to providers
   * It's also responsible for polling the ethereum node for incoming messages
   * Default poll timeout is 1 second
   * Singleton
   */
  var RequestManager = function RequestManager(provider) {
      this.provider = null;
      this.providers = RequestManager.providers;

      this.setProvider(provider);
      this.subscriptions = {};
  };



  RequestManager.givenProvider = givenProvider_1;

  RequestManager.providers = {
      WebsocketProvider: src$7,
      HttpProvider: src$8,
      IpcProvider: src$9
  };



  /**
   * Should be used to set provider of request manager
   *
   * @method setProvider
   * @param {Object} p
   */
  RequestManager.prototype.setProvider = function (p, net) {
      var _this = this;

      // autodetect provider
      if(p && typeof p === 'string' && this.providers) {

          // HTTP
          if(/^http(s)?:\/\//i.test(p)) {
              p = new this.providers.HttpProvider(p);

              // WS
          } else if(/^ws(s)?:\/\//i.test(p)) {
              p = new this.providers.WebsocketProvider(p);

              // IPC
          } else if(p && typeof net === 'object'  && typeof net.connect === 'function') {
              p = new this.providers.IpcProvider(p, net);

          } else if(p) {
              throw new Error('Can\'t autodetect provider for "'+ p +'"');
          }
      }

      // reset the old one before changing
      if(this.provider)
          this.clearSubscriptions();


      this.provider = p || null;

      // listen to incoming notifications
      if(this.provider && this.provider.on) {
          this.provider.on('data', function requestManagerNotification(result, deprecatedResult){
              result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler

              // check for result.method, to prevent old providers errors to pass as result
              if(result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {
                  _this.subscriptions[result.params.subscription].callback(null, result.params.result);
              }
          });
          // TODO add error, end, timeout, connect??
          // this.provider.on('error', function requestManagerNotification(result){
          //     Object.keys(_this.subscriptions).forEach(function(id){
          //         if(_this.subscriptions[id].callback)
          //             _this.subscriptions[id].callback(err);
          //     });
          // }
      }
  };


  /**
   * Should be used to asynchronously send request
   *
   * @method sendAsync
   * @param {Object} data
   * @param {Function} callback
   */
  RequestManager.prototype.send = function (data, callback) {
      callback = callback || function(){};

      if (!this.provider) {
          return callback(errors$5.InvalidProvider());
      }

      var payload = jsonrpc.toPayload(data.method, data.params);
      this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {
          if(result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id "'+ result.id +'" (expected: "'+ payload.id +'") in '+ JSON.stringify(payload)));

          if (err) {
              return callback(err);
          }

          if (result && result.error) {
              return callback(errors$5.ErrorResponse(result));
          }

          if (!jsonrpc.isValidResponse(result)) {
              return callback(errors$5.InvalidResponse(result));
          }

          callback(null, result.result);
      });
  };

  /**
   * Should be called to asynchronously send batch request
   *
   * @method sendBatch
   * @param {Array} batch data
   * @param {Function} callback
   */
  RequestManager.prototype.sendBatch = function (data, callback) {
      if (!this.provider) {
          return callback(errors$5.InvalidProvider());
      }

      var payload = jsonrpc.toBatchPayload(data);
      this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {
          if (err) {
              return callback(err);
          }

          if (!underscore.isArray(results)) {
              return callback(errors$5.InvalidResponse(results));
          }

          callback(null, results);
      });
  };


  /**
   * Waits for notifications
   *
   * @method addSubscription
   * @param {String} id           the subscription id
   * @param {String} name         the subscription name
   * @param {String} type         the subscription namespace (eth, personal, etc)
   * @param {Function} callback   the callback to call for incoming notifications
   */
  RequestManager.prototype.addSubscription = function (id, name, type, callback) {
      if(this.provider.on) {
          this.subscriptions[id] = {
              callback: callback,
              type: type,
              name: name
          };

      } else {
          throw new Error('The provider doesn\'t support subscriptions: '+ this.provider.constructor.name);
      }
  };

  /**
   * Waits for notifications
   *
   * @method removeSubscription
   * @param {String} id           the subscription id
   * @param {Function} callback   fired once the subscription is removed
   */
  RequestManager.prototype.removeSubscription = function (id, callback) {
      var _this = this;

      if(this.subscriptions[id]) {

          this.send({
              method: this.subscriptions[id].type + '_unsubscribe',
              params: [id]
          }, callback);

          // remove subscription
          delete _this.subscriptions[id];
      }
  };

  /**
   * Should be called to reset the subscriptions
   *
   * @method reset
   */
  RequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {
      var _this = this;


      // uninstall all subscriptions
      Object.keys(this.subscriptions).forEach(function(id){
          if(!keepIsSyncing || _this.subscriptions[id].name !== 'syncing')
              _this.removeSubscription(id);
      });


      //  reset notification callbacks etc.
      if(this.provider.reset)
          this.provider.reset();
  };

  var src$10 = {
      Manager: RequestManager,
      BatchManager: batch
  };

  var eventemitter3 = createCommonjsModule(function (module) {

  //
  // We store our EE objects in a plain object whose properties are event names.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // `~` to make sure that the built-in object properties are not overridden or
  // used as an attack vector.
  // We also assume that `Object.create(null)` is available when the event name
  // is an ES6 Symbol.
  //
  var prefix = typeof Object.create !== 'function' ? '~' : false;

  /**
   * Representation of a single EventEmitter function.
   *
   * @param {Function} fn Event handler to be called.
   * @param {Mixed} context Context for function execution.
   * @param {Boolean} once Only emit once
   * @api private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Minimal EventEmitter interface that is molded against the Node.js
   * EventEmitter interface.
   *
   * @constructor
   * @api public
   */
  function EventEmitter() { /* Nothing to set */ }

  /**
   * Holds the assigned EventEmitters by name.
   *
   * @type {Object}
   * @private
   */
  EventEmitter.prototype._events = undefined;

  /**
   * Return a list of assigned event listeners.
   *
   * @param {String} event The events that should be listed.
   * @param {Boolean} exists We only need to know if there are listeners.
   * @returns {Array|Boolean}
   * @api public
   */
  EventEmitter.prototype.listeners = function listeners(event, exists) {
    var evt = prefix ? prefix + event : event
      , available = this._events && this._events[evt];

    if (exists) return !!available;
    if (!available) return [];
    if (available.fn) return [available.fn];

    for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
      ee[i] = available[i].fn;
    }

    return ee;
  };

  /**
   * Emit an event to all registered event listeners.
   *
   * @param {String} event The name of the event.
   * @returns {Boolean} Indication if we've emitted an event.
   * @api public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events || !this._events[evt]) return false;

    var listeners = this._events[evt]
      , len = arguments.length
      , args
      , i;

    if ('function' === typeof listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1: return listeners.fn.call(listeners.context), true;
        case 2: return listeners.fn.call(listeners.context, a1), true;
        case 3: return listeners.fn.call(listeners.context, a1, a2), true;
        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len -1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length
        , j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1: listeners[i].fn.call(listeners[i].context); break;
          case 2: listeners[i].fn.call(listeners[i].context, a1); break;
          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
          default:
            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Register a new EventListener for the given event.
   *
   * @param {String} event Name of the event.
   * @param {Functon} fn Callback function.
   * @param {Mixed} context The context of the function.
   * @api public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    var listener = new EE(fn, context || this)
      , evt = prefix ? prefix + event : event;

    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;
    else {
      if (!this._events[evt].fn) this._events[evt].push(listener);
      else this._events[evt] = [
        this._events[evt], listener
      ];
    }

    return this;
  };

  /**
   * Add an EventListener that's only called once.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} context The context of the function.
   * @api public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    var listener = new EE(fn, context || this, true)
      , evt = prefix ? prefix + event : event;

    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;
    else {
      if (!this._events[evt].fn) this._events[evt].push(listener);
      else this._events[evt] = [
        this._events[evt], listener
      ];
    }

    return this;
  };

  /**
   * Remove event listeners.
   *
   * @param {String} event The event we want to remove.
   * @param {Function} fn The listener that we need to find.
   * @param {Mixed} context Only remove listeners matching this context.
   * @param {Boolean} once Only remove once listeners.
   * @api public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events || !this._events[evt]) return this;

    var listeners = this._events[evt]
      , events$$1 = [];

    if (fn) {
      if (listeners.fn) {
        if (
             listeners.fn !== fn
          || (once && !listeners.once)
          || (context && listeners.context !== context)
        ) {
          events$$1.push(listeners);
        }
      } else {
        for (var i = 0, length = listeners.length; i < length; i++) {
          if (
               listeners[i].fn !== fn
            || (once && !listeners[i].once)
            || (context && listeners[i].context !== context)
          ) {
            events$$1.push(listeners[i]);
          }
        }
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events$$1.length) {
      this._events[evt] = events$$1.length === 1 ? events$$1[0] : events$$1;
    } else {
      delete this._events[evt];
    }

    return this;
  };

  /**
   * Remove all listeners or only the listeners for the specified event.
   *
   * @param {String} event The event want to remove all listeners for.
   * @api public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    if (!this._events) return this;

    if (event) delete this._events[prefix ? prefix + event : event];
    else this._events = prefix ? {} : Object.create(null);

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // This function doesn't apply anymore.
  //
  EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    return this;
  };

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Expose the module.
  //
  {
    module.exports = EventEmitter;
  }
  });

  // global key for user preferred registration
  var REGISTRATION_KEY = '@@any-promise/REGISTRATION',
      // Prior registration (preferred or detected)
      registered = null;

  /**
   * Registers the given implementation.  An implementation must
   * be registered prior to any call to `require("any-promise")`,
   * typically on application load.
   *
   * If called with no arguments, will return registration in
   * following priority:
   *
   * For Node.js:
   *
   * 1. Previous registration
   * 2. global.Promise if node.js version >= 0.12
   * 3. Auto detected promise based on first sucessful require of
   *    known promise libraries. Note this is a last resort, as the
   *    loaded library is non-deterministic. node.js >= 0.12 will
   *    always use global.Promise over this priority list.
   * 4. Throws error.
   *
   * For Browser:
   *
   * 1. Previous registration
   * 2. window.Promise
   * 3. Throws error.
   *
   * Options:
   *
   * Promise: Desired Promise constructor
   * global: Boolean - Should the registration be cached in a global variable to
   * allow cross dependency/bundle registration?  (default true)
   */
  var loader = function(root, loadImplementation){
    return function register(implementation, opts){
      implementation = implementation || null;
      opts = opts || {};
      // global registration unless explicitly  {global: false} in options (default true)
      var registerGlobal = opts.global !== false;

      // load any previous global registration
      if(registered === null && registerGlobal){
        registered = root[REGISTRATION_KEY] || null;
      }

      if(registered !== null
          && implementation !== null
          && registered.implementation !== implementation){
        // Throw error if attempting to redefine implementation
        throw new Error('any-promise already defined as "'+registered.implementation+
          '".  You can only register an implementation before the first '+
          ' call to require("any-promise") and an implementation cannot be changed')
      }

      if(registered === null){
        // use provided implementation
        if(implementation !== null && typeof opts.Promise !== 'undefined'){
          registered = {
            Promise: opts.Promise,
            implementation: implementation
          };
        } else {
          // require implementation if implementation is specified but not provided
          registered = loadImplementation(implementation);
        }

        if(registerGlobal){
          // register preference globally in case multiple installations
          root[REGISTRATION_KEY] = registered;
        }
      }

      return registered
    }
  };

  var register = loader(commonjsGlobal, loadImplementation);

  /**
   * Node.js version of loadImplementation.
   *
   * Requires the given implementation and returns the registration
   * containing {Promise, implementation}
   *
   * If implementation is undefined or global.Promise, loads it
   * Otherwise uses require
   */
  function loadImplementation(implementation){
    var impl = null;

    if(shouldPreferGlobalPromise(implementation)){
      // if no implementation or env specified use global.Promise
      impl = {
        Promise: commonjsGlobal.Promise,
        implementation: 'global.Promise'
      };
    } else if(implementation){
      // if implementation specified, require it
      var lib = commonjsRequire(implementation);
      impl = {
        Promise: lib.Promise || lib,
        implementation: implementation
      };
    } else {
      // try to auto detect implementation. This is non-deterministic
      // and should prefer other branches, but this is our last chance
      // to load something without throwing error
      impl = tryAutoDetect();
    }

    if(impl === null){
      throw new Error('Cannot find any-promise implementation nor'+
        ' global.Promise. You must install polyfill or call'+
        ' require("any-promise/register") with your preferred'+
        ' implementation, e.g. require("any-promise/register/bluebird")'+
        ' on application load prior to any require("any-promise").')
    }

    return impl
  }

  /**
   * Determines if the global.Promise should be preferred if an implementation
   * has not been registered.
   */
  function shouldPreferGlobalPromise(implementation){
    if(implementation){
      return implementation === 'global.Promise'
    } else if(typeof commonjsGlobal.Promise !== 'undefined'){
      // Load global promise if implementation not specified
      // Versions < 0.11 did not have global Promise
      // Do not use for version < 0.12 as version 0.11 contained buggy versions
      var version = (/v(\d+)\.(\d+)\.(\d+)/).exec(process.version);
      return !(version && +version[1] == 0 && +version[2] < 12)
    }

    // do not have global.Promise or another implementation was specified
    return false
  }

  /**
   * Look for common libs as last resort there is no guarantee that
   * this will return a desired implementation or even be deterministic.
   * The priority is also nearly arbitrary. We are only doing this
   * for older versions of Node.js <0.12 that do not have a reasonable
   * global.Promise implementation and we the user has not registered
   * the preference. This preserves the behavior of any-promise <= 0.1
   * and may be deprecated or removed in the future
   */
  function tryAutoDetect(){
    var libs = [
        "es6-promise",
        "promise",
        "native-promise-only",
        "bluebird",
        "rsvp",
        "when",
        "q",
        "pinkie",
        "lie",
        "vow"];
    var i = 0, len = libs.length;
    for(; i < len; i++){
      try {
        return loadImplementation(libs[i])
      } catch(e){}
    }
    return null
  }

  var anyPromise = register().Promise;

  /**
   * This function generates a defer promise and adds eventEmitter functionality to it
   *
   * @method eventifiedPromise
   */
  var PromiEvent = function PromiEvent(justPromise) {
      var resolve, reject,
          eventEmitter = new anyPromise(function() {
              resolve = arguments[0];
              reject = arguments[1];
          });

      if(justPromise) {
          return {
              resolve: resolve,
              reject: reject,
              eventEmitter: eventEmitter
          };
      }

      // get eventEmitter
      var emitter = new eventemitter3();

      // add eventEmitter to the promise
      eventEmitter._events = emitter._events;
      eventEmitter.emit = emitter.emit;
      eventEmitter.on = emitter.on;
      eventEmitter.once = emitter.once;
      eventEmitter.off = emitter.off;
      eventEmitter.listeners = emitter.listeners;
      eventEmitter.addListener = emitter.addListener;
      eventEmitter.removeListener = emitter.removeListener;
      eventEmitter.removeAllListeners = emitter.removeAllListeners;

      return {
          resolve: resolve,
          reject: reject,
          eventEmitter: eventEmitter
      };
  };

  PromiEvent.resolve = function(value) {
      var promise = PromiEvent(true);
      promise.resolve(value);
      return promise.eventEmitter;
  };

  var src$11 = PromiEvent;

  var errors$6 = src$6.errors;



  function Subscription(options) {
      eventemitter3.call(this);

      this.id = null;
      this.callback = null;
      this.arguments = null;
      this._reconnectIntervalId = null;

      this.options = {
          subscription: options.subscription,
          type: options.type,
          requestManager: options.requestManager
      };
  }

  // INHERIT
  Subscription.prototype = Object.create(eventemitter3.prototype);
  Subscription.prototype.constructor = Subscription;


  /**
   * Should be used to extract callback from array of arguments. Modifies input param
   *
   * @method extractCallback
   * @param {Array} arguments
   * @return {Function|Null} callback, if exists
   */

  Subscription.prototype._extractCallback = function (args) {
      if (underscore.isFunction(args[args.length - 1])) {
          return args.pop(); // modify the args array!
      }
  };

  /**
   * Should be called to check if the number of arguments is correct
   *
   * @method validateArgs
   * @param {Array} arguments
   * @throws {Error} if it is not
   */

  Subscription.prototype._validateArgs = function (args) {
      var subscription = this.options.subscription;

      if(!subscription)
          subscription = {};

      if(!subscription.params)
          subscription.params = 0;

      if (args.length !== subscription.params) {
          throw errors$6.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);
      }
  };

  /**
   * Should be called to format input args of method
   *
   * @method formatInput
   * @param {Array}
   * @return {Array}
   */

  Subscription.prototype._formatInput = function (args) {
      var subscription = this.options.subscription;

      if (!subscription) {
          return args;
      }

      if (!subscription.inputFormatter) {
          return args;
      }

      var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {
          return formatter ? formatter(args[index]) : args[index];
      });

      return formattedArgs;
  };

  /**
   * Should be called to format output(result) of method
   *
   * @method formatOutput
   * @param {Object}
   * @return {Object}
   */

  Subscription.prototype._formatOutput = function (result) {
      var subscription = this.options.subscription;

      return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;
  };

  /**
   * Should create payload from given input args
   *
   * @method toPayload
   * @param {Array} args
   * @return {Object}
   */
  Subscription.prototype._toPayload = function (args) {
      var params = [];
      this.callback = this._extractCallback(args);

      if (!this.subscriptionMethod) {
          this.subscriptionMethod = args.shift();

          // replace subscription with given name
          if (this.options.subscription.subscriptionName) {
              this.subscriptionMethod = this.options.subscription.subscriptionName;
          }
      }

      if (!this.arguments) {
          this.arguments = this._formatInput(args);
          this._validateArgs(this.arguments);
          args = []; // make empty after validation

      }

      // re-add subscriptionName
      params.push(this.subscriptionMethod);
      params = params.concat(this.arguments);


      if (args.length) {
          throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');
      }

      return {
          method: this.options.type + '_subscribe',
          params: params
      };
  };

  /**
   * Unsubscribes and clears callbacks
   *
   * @method unsubscribe
   * @return {Object}
   */
  Subscription.prototype.unsubscribe = function(callback) {
      this.options.requestManager.removeSubscription(this.id, callback);
      this.id = null;
      this.removeAllListeners();
      clearInterval(this._reconnectIntervalId);
  };

  /**
   * Subscribes and watches for changes
   *
   * @method subscribe
   * @param {String} subscription the subscription
   * @param {Object} options the options object with address topics and fromBlock
   * @return {Object}
   */
  Subscription.prototype.subscribe = function() {
      var _this = this;
      var args = Array.prototype.slice.call(arguments);
      var payload = this._toPayload(args);

      if(!payload) {
          return this;
      }

      if(!this.options.requestManager.provider) {
          var err1 = new Error('No provider set.');
          this.callback(err1, null, this);
          this.emit('error', err1);
          return this;
      }

      // throw error, if provider doesnt support subscriptions
      if(!this.options.requestManager.provider.on) {
          var err2 = new Error('The current provider doesn\'t support subscriptions: '+ this.options.requestManager.provider.constructor.name);
          this.callback(err2, null, this);
          this.emit('error', err2);
          return this;
      }

      // if id is there unsubscribe first
      if (this.id) {
          this.unsubscribe();
      }

      // store the params in the options object
      this.options.params = payload.params[1];

      // get past logs, if fromBlock is available
      if(payload.params[0] === 'logs' && underscore.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {
          // send the subscription request
          this.options.requestManager.send({
              method: 'eth_getLogs',
              params: [payload.params[1]]
          }, function (err, logs) {
              if(!err) {
                  logs.forEach(function(log){
                      var output = _this._formatOutput(log);
                      _this.callback(null, output, _this);
                      _this.emit('data', output);
                  });

                  // TODO subscribe here? after the past logs?

              } else {
                  _this.callback(err, null, _this);
                  _this.emit('error', err);
              }
          });
      }

      // create subscription
      // TODO move to separate function? so that past logs can go first?

      if(typeof payload.params[1] === 'object')
          delete payload.params[1].fromBlock;

      this.options.requestManager.send(payload, function (err, result) {
          if(!err && result) {
              _this.id = result;

              // call callback on notifications
              _this.options.requestManager.addSubscription(_this.id, payload.params[0] , _this.options.type, function(err, result) {

                  if (!err) {
                      if (!underscore.isArray(result)) {
                          result = [result];
                      }

                      result.forEach(function(resultItem) {
                          var output = _this._formatOutput(resultItem);

                          if (underscore.isFunction(_this.options.subscription.subscriptionHandler)) {
                              return _this.options.subscription.subscriptionHandler.call(_this, output);
                          } else {
                              _this.emit('data', output);
                          }

                          // call the callback, last so that unsubscribe there won't affect the emit above
                          if (underscore.isFunction(_this.callback)) {
                              _this.callback(null, output, _this);
                          }
                      });
                  } else {
                      // unsubscribe, but keep listeners
                      _this.options.requestManager.removeSubscription(_this.id);

                      // re-subscribe, if connection fails
                      if(_this.options.requestManager.provider.once) {
                          _this._reconnectIntervalId = setInterval(function () {
                              // TODO check if that makes sense!
                              if (_this.options.requestManager.provider.reconnect) {
                                  _this.options.requestManager.provider.reconnect();
                              }
                          }, 500);

                          _this.options.requestManager.provider.once('connect', function () {
                              clearInterval(_this._reconnectIntervalId);
                              _this.subscribe(_this.callback);
                          });
                      }
                      _this.emit('error', err);

                       // call the callback, last so that unsubscribe there won't affect the emit above
                       if (underscore.isFunction(_this.callback)) {
                          _this.callback(err, null, _this);
                      }
                  }
              });
          } else if (underscore.isFunction(_this.callback)) {
              _this.callback(err, null, _this);
              _this.emit('error', err);
          } else {
              // emit the event even if no callback was provided
              _this.emit('error', err);
          }
      });

      // return an object to cancel the subscription
      return this;
  };

  var subscription = Subscription;

  var Subscriptions = function Subscriptions(options) {
      this.name = options.name;
      this.type = options.type;
      this.subscriptions = options.subscriptions || {};
      this.requestManager = null;
  };


  Subscriptions.prototype.setRequestManager = function (rm) {
      this.requestManager = rm;
  };


  Subscriptions.prototype.attachToObject = function (obj) {
      var func = this.buildCall();
      func.call = this.call;
      var name = this.name.split('.');
      if (name.length > 1) {
          obj[name[0]] = obj[name[0]] || {};
          obj[name[0]][name[1]] = func;
      } else {
          obj[name[0]] = func;
      }
  };


  Subscriptions.prototype.buildCall = function() {
      var _this = this;

      return function(){
          if(!_this.subscriptions[arguments[0]]) {
              console.warn('Subscription '+ JSON.stringify(arguments[0]) +' doesn\'t exist. Subscribing anyway.');
          }

          var subscription$$1 = new subscription({
              subscription: _this.subscriptions[arguments[0]],
              requestManager: _this.requestManager,
              type: _this.type
          });

          return subscription$$1.subscribe.apply(subscription$$1, arguments);
      };
  };


  var src$12 = {
      subscriptions: Subscriptions,
      subscription: subscription
  };

  var errors$7 = src$6.errors;
  var formatters$1 = src$6.formatters;


  var Subscriptions$1 = src$12.subscriptions;

  var TIMEOUTBLOCK = 50;
  var POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK
  var CONFIRMATIONBLOCKS = 24;

  var Method = function Method(options) {

      if(!options.call || !options.name) {
          throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
      }

      this.name = options.name;
      this.call = options.call;
      this.params = options.params || 0;
      this.inputFormatter = options.inputFormatter;
      this.outputFormatter = options.outputFormatter;
      this.transformPayload = options.transformPayload;
      this.extraFormatters = options.extraFormatters;

      this.requestManager = options.requestManager;

      // reference to eth.accounts
      this.accounts = options.accounts;

      this.defaultBlock = options.defaultBlock || 'latest';
      this.defaultAccount = options.defaultAccount || null;
  };

  Method.prototype.setRequestManager = function (requestManager, accounts) {
      this.requestManager = requestManager;

      // reference to eth.accounts
      if (accounts) {
          this.accounts = accounts;
      }

  };

  Method.prototype.createFunction = function (requestManager, accounts) {
      var func = this.buildCall();
      func.call = this.call;

      this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);

      return func;
  };

  Method.prototype.attachToObject = function (obj) {
      var func = this.buildCall();
      func.call = this.call;
      var name = this.name.split('.');
      if (name.length > 1) {
          obj[name[0]] = obj[name[0]] || {};
          obj[name[0]][name[1]] = func;
      } else {
          obj[name[0]] = func;
      }
  };

  /**
   * Should be used to determine name of the jsonrpc method based on arguments
   *
   * @method getCall
   * @param {Array} arguments
   * @return {String} name of jsonrpc method
   */
  Method.prototype.getCall = function (args) {
      return underscore.isFunction(this.call) ? this.call(args) : this.call;
  };

  /**
   * Should be used to extract callback from array of arguments. Modifies input param
   *
   * @method extractCallback
   * @param {Array} arguments
   * @return {Function|Null} callback, if exists
   */
  Method.prototype.extractCallback = function (args) {
      if (underscore.isFunction(args[args.length - 1])) {
          return args.pop(); // modify the args array!
      }
  };

  /**
   * Should be called to check if the number of arguments is correct
   *
   * @method validateArgs
   * @param {Array} arguments
   * @throws {Error} if it is not
   */
  Method.prototype.validateArgs = function (args) {
      if (args.length !== this.params) {
          throw errors$7.InvalidNumberOfParams(args.length, this.params, this.name);
      }
  };

  /**
   * Should be called to format input args of method
   *
   * @method formatInput
   * @param {Array}
   * @return {Array}
   */
  Method.prototype.formatInput = function (args) {
      var _this = this;

      if (!this.inputFormatter) {
          return args;
      }

      return this.inputFormatter.map(function (formatter, index) {
          // bind this for defaultBlock, and defaultAccount
          return formatter ? formatter.call(_this, args[index]) : args[index];
      });
  };

  /**
   * Should be called to format output(result) of method
   *
   * @method formatOutput
   * @param {Object}
   * @return {Object}
   */
  Method.prototype.formatOutput = function (result) {
      var _this = this;

      if(underscore.isArray(result)) {
          return result.map(function(res){
              return _this.outputFormatter && res ? _this.outputFormatter(res) : res;
          });
      } else {
          return this.outputFormatter && result ? this.outputFormatter(result) : result;
      }
  };

  /**
   * Should create payload from given input args
   *
   * @method toPayload
   * @param {Array} args
   * @return {Object}
   */
  Method.prototype.toPayload = function (args) {
      var call = this.getCall(args);
      var callback = this.extractCallback(args);
      var params = this.formatInput(args);
      this.validateArgs(params);

      var payload = {
          method: call,
          params: params,
          callback: callback
      };

      if (this.transformPayload) {
          payload = this.transformPayload(payload);
      }

      return payload;
  };


  Method.prototype._confirmTransaction = function (defer, result, payload) {
      var method = this,
          promiseResolved = false,
          canUnsubscribe = true,
          timeoutCount = 0,
          confirmationCount = 0,
          intervalId = null,
          gasProvided = (underscore.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,
          isContractDeployment = underscore.isObject(payload.params[0]) &&
              payload.params[0].data &&
              payload.params[0].from &&
              !payload.params[0].to;


      // add custom send Methods
      var _ethereumCalls = [
          new Method({
              name: 'getTransactionReceipt',
              call: 'eth_getTransactionReceipt',
              params: 1,
              inputFormatter: [null],
              outputFormatter: formatters$1.outputTransactionReceiptFormatter
          }),
          new Method({
              name: 'getCode',
              call: 'eth_getCode',
              params: 2,
              inputFormatter: [formatters$1.inputAddressFormatter, formatters$1.inputDefaultBlockNumberFormatter]
          }),
          new Subscriptions$1({
              name: 'subscribe',
              type: 'eth',
              subscriptions: {
                  'newBlockHeaders': {
                      subscriptionName: 'newHeads', // replace subscription with this name
                      params: 0,
                      outputFormatter: formatters$1.outputBlockFormatter
                  }
              }
          })
      ];
      // attach methods to this._ethereumCall
      var _ethereumCall = {};
      underscore.each(_ethereumCalls, function (mthd) {
          mthd.attachToObject(_ethereumCall);
          mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()
      });


      // fire "receipt" and confirmation events and resolve after
      var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {
          if (!err) {
              // create fake unsubscribe
              if (!sub) {
                  sub = {
                      unsubscribe: function () {
                          clearInterval(intervalId);
                      }
                  };
              }
              // if we have a valid receipt we don't need to send a request
              return (existingReceipt ? src$11.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))
              // catch error from requesting receipt
              .catch(function (err) {
                  sub.unsubscribe();
                  promiseResolved = true;
                  src$4._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);
              })
              // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false
              .then(function(receipt) {
                  if (!receipt || !receipt.blockHash) {
                      throw new Error('Receipt missing or blockHash null');
                  }

                  // apply extra formatters
                  if (method.extraFormatters && method.extraFormatters.receiptFormatter) {
                      receipt = method.extraFormatters.receiptFormatter(receipt);
                  }

                  // check if confirmation listener exists
                  if (defer.eventEmitter.listeners('confirmation').length > 0) {

                      // If there was an immediately retrieved receipt, it's already
                      // been confirmed by the direct call to checkConfirmation needed
                      // for parity instant-seal
                      if (existingReceipt === undefined || confirmationCount !== 0){
                          defer.eventEmitter.emit('confirmation', confirmationCount, receipt);
                      }

                      canUnsubscribe = false;
                      confirmationCount++;

                      if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0
                          sub.unsubscribe();
                          defer.eventEmitter.removeAllListeners();
                      }
                  }

                  return receipt;
              })
              // CHECK for CONTRACT DEPLOYMENT
              .then(function(receipt) {

                  if (isContractDeployment && !promiseResolved) {

                      if (!receipt.contractAddress) {

                          if (canUnsubscribe) {
                              sub.unsubscribe();
                              promiseResolved = true;
                          }

                          src$4._fireError(new Error('The transaction receipt didn\'t contain a contract address.'), defer.eventEmitter, defer.reject);
                          return;
                      }

                      _ethereumCall.getCode(receipt.contractAddress, function (e, code) {

                          if (!code) {
                              return;
                          }


                          if (code.length > 2) {
                              defer.eventEmitter.emit('receipt', receipt);

                              // if contract, return instance instead of receipt
                              if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {
                                  defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));
                              } else {
                                  defer.resolve(receipt);
                              }

                              // need to remove listeners, as they aren't removed automatically when succesfull
                              if (canUnsubscribe) {
                                  defer.eventEmitter.removeAllListeners();
                              }

                          } else {
                              src$4._fireError(new Error('The contract code couldn\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);
                          }

                          if (canUnsubscribe) {
                              sub.unsubscribe();
                          }
                          promiseResolved = true;
                      });
                  }

                  return receipt;
              })
              // CHECK for normal tx check for receipt only
              .then(function(receipt) {

                  if (!isContractDeployment && !promiseResolved) {

                      if(!receipt.outOfGas &&
                         (!gasProvided || gasProvided !== receipt.gasUsed)) {
                          defer.eventEmitter.emit('receipt', receipt);
                          defer.resolve(receipt);

                          // need to remove listeners, as they aren't removed automatically when succesfull
                          if (canUnsubscribe) {
                              defer.eventEmitter.removeAllListeners();
                          }

                      } else {
                          if(receipt) {
                              receipt = JSON.stringify(receipt, null, 2);
                          }
                          src$4._fireError(new Error("Transaction ran out of gas. Please provide more gas:\n"+ receipt), defer.eventEmitter, defer.reject);
                      }

                      if (canUnsubscribe) {
                          sub.unsubscribe();
                      }
                      promiseResolved = true;
                  }

              })
              // time out the transaction if not mined after 50 blocks
              .catch(function () {
                  timeoutCount++;

                  // check to see if we are http polling
                  if(!!isPolling) {
                      // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second
                      if (timeoutCount - 1 >= POLLINGTIMEOUT) {
                          sub.unsubscribe();
                          promiseResolved = true;
                          src$4._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                      }
                  } else {
                      if (timeoutCount - 1 >= TIMEOUTBLOCK) {
                          sub.unsubscribe();
                          promiseResolved = true;
                          src$4._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                      }
                  }
              });


          } else {
              sub.unsubscribe();
              promiseResolved = true;
              src$4._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);
          }
      };

    // start watching for confirmation depending on the support features of the provider
    var startWatching = function(existingReceipt) {
        // if provider allows PUB/SUB
        if (underscore.isFunction(this.requestManager.provider.on)) {
            _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));
        } else {
            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);
        }
    }.bind(this);


    // first check if we already have a confirmed transaction
    _ethereumCall.getTransactionReceipt(result)
    .then(function(receipt) {
        if (receipt && receipt.blockHash) {
            if (defer.eventEmitter.listeners('confirmation').length > 0) {
                // We must keep on watching for new Blocks, if a confirmation listener is present
                startWatching(receipt);
            }
            checkConfirmation(receipt, false);

        } else if (!promiseResolved) {
            startWatching();
        }
    })
    .catch(function(){
        if (!promiseResolved) startWatching();
    });

  };


  var getWallet = function(from, accounts) {
      var wallet = null;

      // is index given
      if (underscore.isNumber(from)) {
          wallet = accounts.wallet[from];

          // is account given
      } else if (underscore.isObject(from) && from.address && from.privateKey) {
          wallet = from;

          // search in wallet for address
      } else {
          wallet = accounts.wallet[from.toLowerCase()];
      }

      return wallet;
  };

  Method.prototype.buildCall = function() {
      var method = this,
          isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'

      // actual send function
      var send = function () {
          var defer = src$11(!isSendTx),
              payload = method.toPayload(Array.prototype.slice.call(arguments));


          // CALLBACK function
          var sendTxCallback = function (err, result) {
              try {
                  result = method.formatOutput(result);
              } catch(e) {
                  err = e;
              }

              if (result instanceof Error) {
                  err = result;
              }

              if (!err) {
                  if (payload.callback) {
                      payload.callback(null, result);
                  }
              } else {
                  if(err.error) {
                      err = err.error;
                  }

                  return src$4._fireError(err, defer.eventEmitter, defer.reject, payload.callback);
              }

              // return PROMISE
              if (!isSendTx) {

                  if (!err) {
                      defer.resolve(result);

                  }

              // return PROMIEVENT
              } else {
                  defer.eventEmitter.emit('transactionHash', result);

                  method._confirmTransaction(defer, result, payload);
              }

          };

          // SENDS the SIGNED SIGNATURE
          var sendSignedTx = function(sign){

              var signedPayload = underscore.extend({}, payload, {
                  method: 'eth_sendRawTransaction',
                  params: [sign.rawTransaction]
              });

              method.requestManager.send(signedPayload, sendTxCallback);
          };


          var sendRequest = function(payload, method) {

              if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {
                  var wallet;

                  // ETH_SENDTRANSACTION
                  if (payload.method === 'eth_sendTransaction') {
                      var tx = payload.params[0];
                      wallet = getWallet((underscore.isObject(tx)) ? tx.from : null, method.accounts);


                      // If wallet was found, sign tx, and send using sendRawTransaction
                      if (wallet && wallet.privateKey) {
                          return method.accounts.signTransaction(underscore.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);
                      }

                  // ETH_SIGN
                  } else if (payload.method === 'eth_sign') {
                      var data = payload.params[1];
                      wallet = getWallet(payload.params[0], method.accounts);

                      // If wallet was found, sign tx, and send using sendRawTransaction
                      if (wallet && wallet.privateKey) {
                          var sign = method.accounts.sign(data, wallet.privateKey);

                          if (payload.callback) {
                              payload.callback(null, sign.signature);
                          }

                          defer.resolve(sign.signature);
                          return;
                      }


                  }
              }

              return method.requestManager.send(payload, sendTxCallback);
          };

          // Send the actual transaction
          if(isSendTx && underscore.isObject(payload.params[0]) && !payload.params[0].gasPrice) {

              var getGasPrice = (new Method({
                  name: 'getGasPrice',
                  call: 'eth_gasPrice',
                  params: 0
              })).createFunction(method.requestManager);

              getGasPrice(function (err, gasPrice) {

                  if (gasPrice) {
                      payload.params[0].gasPrice = gasPrice;
                  }
                  sendRequest(payload, method);
              });

          } else {
              sendRequest(payload, method);
          }


          return defer.eventEmitter;
      };

      // necessary to attach things to the method
      send.method = method;
      // necessary for batch requests
      send.request = this.request.bind(this);
      return send;
  };

  /**
   * Should be called to create the pure JSONRPC request which can be used in a batch request
   *
   * @method request
   * @return {Object} jsonrpc request
   */
  Method.prototype.request = function () {
      var payload = this.toPayload(Array.prototype.slice.call(arguments));
      payload.format = this.formatOutput.bind(this);
      return payload;
  };

  var src$13 = Method;

  var formatters$2 = src$6.formatters;




  var extend = function (pckg) {
      /* jshint maxcomplexity:5 */
      var ex = function (extension) {

          var extendedObject;
          if (extension.property) {
              if (!pckg[extension.property]) {
                  pckg[extension.property] = {};
              }
              extendedObject = pckg[extension.property];
          } else {
              extendedObject = pckg;
          }

          if (extension.methods) {
              extension.methods.forEach(function (method) {
                  if(!(method instanceof src$13)) {
                      method = new src$13(method);
                  }

                  method.attachToObject(extendedObject);
                  method.setRequestManager(pckg._requestManager);
              });
          }

          return pckg;
      };

      ex.formatters = formatters$2;
      ex.utils = src$4;
      ex.Method = src$13;

      return ex;
  };



  var extend_1 = extend;

  var src$14 = {
      packageInit: function (pkg, args) {
          args = Array.prototype.slice.call(args);

          if (!pkg) {
              throw new Error('You need to instantiate using the "new" keyword.');
          }


          // make property of pkg._provider, which can properly set providers
          Object.defineProperty(pkg, 'currentProvider', {
              get: function () {
                  return pkg._provider;
              },
              set: function (value) {
                  return pkg.setProvider(value);
              },
              enumerable: true,
              configurable: true
          });

          // inherit from web3 umbrella package
          if (args[0] && args[0]._requestManager) {
              pkg._requestManager = new src$10.Manager(args[0].currentProvider);

          // set requestmanager on package
          } else {
              pkg._requestManager = new src$10.Manager();
              pkg._requestManager.setProvider(args[0], args[1]);
          }

          // add givenProvider
          pkg.givenProvider = src$10.Manager.givenProvider;
          pkg.providers = src$10.Manager.providers;

           pkg._provider =  pkg._requestManager.provider;

          // add SETPROVIDER function (don't overwrite if already existing)
          if (!pkg.setProvider) {
              pkg.setProvider = function (provider, net) {
                  pkg._requestManager.setProvider(provider, net);
                  pkg._provider = pkg._requestManager.provider;
                  return true;
              };
          }

          // attach batch request creation
          pkg.BatchRequest = src$10.BatchManager.bind(null, pkg._requestManager);

          // attach extend function
          pkg.extend = extend_1(pkg);
      },
      addProviders: function (pkg) {
          pkg.givenProvider = src$10.Manager.givenProvider;
          pkg.providers = src$10.Manager.providers;
      }
  };

  var Net = function () {
      var _this = this;

      // sets _requestmanager
      src$14.packageInit(this, arguments);


      [
          new src$13({
              name: 'getId',
              call: 'net_version',
              params: 0,
              outputFormatter: src$4.hexToNumber
          }),
          new src$13({
              name: 'isListening',
              call: 'net_listening',
              params: 0
          }),
          new src$13({
              name: 'getPeerCount',
              call: 'net_peerCount',
              params: 0,
              outputFormatter: src$4.hexToNumber
          })
      ].forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager);
      });

  };

  src$14.addProviders(Net);


  var src$15 = Net;

  var formatters$3 = src$6.formatters;


  var Personal = function Personal() {
      var _this = this;

      // sets _requestmanager
      src$14.packageInit(this, arguments);

      this.net = new src$15(this.currentProvider);

      var defaultAccount = null;
      var defaultBlock = 'latest';

      Object.defineProperty(this, 'defaultAccount', {
          get: function () {
              return defaultAccount;
          },
          set: function (val) {
              if(val) {
                  defaultAccount = src$4.toChecksumAddress(formatters$3.inputAddressFormatter(val));
              }

              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultAccount = defaultAccount;
              });

              return val;
          },
          enumerable: true
      });
      Object.defineProperty(this, 'defaultBlock', {
          get: function () {
              return defaultBlock;
          },
          set: function (val) {
              defaultBlock = val;

              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultBlock = defaultBlock;
              });

              return val;
          },
          enumerable: true
      });


      var methods = [
          new src$13({
              name: 'getAccounts',
              call: 'personal_listAccounts',
              params: 0,
              outputFormatter: src$4.toChecksumAddress
          }),
          new src$13({
              name: 'newAccount',
              call: 'personal_newAccount',
              params: 1,
              inputFormatter: [null],
              outputFormatter: src$4.toChecksumAddress
          }),
          new src$13({
              name: 'unlockAccount',
              call: 'personal_unlockAccount',
              params: 3,
              inputFormatter: [formatters$3.inputAddressFormatter, null, null]
          }),
          new src$13({
              name: 'lockAccount',
              call: 'personal_lockAccount',
              params: 1,
              inputFormatter: [formatters$3.inputAddressFormatter]
          }),
          new src$13({
              name: 'importRawKey',
              call: 'personal_importRawKey',
              params: 2
          }),
          new src$13({
              name: 'sendTransaction',
              call: 'personal_sendTransaction',
              params: 2,
              inputFormatter: [formatters$3.inputTransactionFormatter, null]
          }),
          new src$13({
              name: 'signTransaction',
              call: 'personal_signTransaction',
              params: 2,
              inputFormatter: [formatters$3.inputTransactionFormatter, null]
          }),
          new src$13({
              name: 'sign',
              call: 'personal_sign',
              params: 3,
              inputFormatter: [formatters$3.inputSignFormatter, formatters$3.inputAddressFormatter, null]
          }),
          new src$13({
              name: 'ecRecover',
              call: 'personal_ecRecover',
              params: 2,
              inputFormatter: [formatters$3.inputSignFormatter, null]
          })
      ];
      methods.forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager);
          method.defaultBlock = _this.defaultBlock;
          method.defaultAccount = _this.defaultAccount;
      });
  };

  src$14.addProviders(Personal);



  var src$16 = Personal;

  var bn$4 = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert$$1 (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = commonjsRequire('buf' + 'fer').Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert$$1(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert$$1(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert$$1(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert$$1(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert$$1(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert$$1(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert$$1(byteLength <= reqLength, 'byte array longer than desired length');
      assert$$1(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert$$1(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert$$1(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert$$1(carry === 0);
      assert$$1((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) {
        // No-op, we should not move anything at all
      } else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert$$1(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert$$1(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert$$1(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert$$1(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert$$1(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert$$1(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert$$1(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert$$1(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      assert$$1(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert$$1(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert$$1(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert$$1(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert$$1(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert$$1(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert$$1(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert$$1(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert$$1(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert$$1(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert$$1(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert$$1(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert$$1(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert$$1(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert$$1(a.negative === 0, 'red works only with positives');
      assert$$1(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert$$1((a.negative | b.negative) === 0, 'red works only with positives');
      assert$$1(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert$$1(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert$$1(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert$$1(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })('object' === 'undefined' || module, commonjsGlobal);
  });

  /*
      This file is part of web3.js.

      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.

      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file param.js
   * @author Marek Kotewicz <marek@parity.io>
   * @date 2015
   */



  /**
   * SolidityParam object prototype.
   * Should be used when encoding, decoding solidity bytes
   */
  var SolidityParam = function (value, offset, rawValue) {
      this.value = value || '';
      this.offset = offset; // offset in bytes
      this.rawValue = rawValue; // used for debugging
  };

  /**
   * This method should be used to get length of params's dynamic part
   *
   * @method dynamicPartLength
   * @returns {Number} length of dynamic part (in bytes)
   */
  SolidityParam.prototype.dynamicPartLength = function () {
      return this.dynamicPart().length / 2;
  };

  /**
   * This method should be used to create copy of solidity param with different offset
   *
   * @method withOffset
   * @param {Number} offset length in bytes
   * @returns {SolidityParam} new solidity param with applied offset
   */
  SolidityParam.prototype.withOffset = function (offset) {
      return new SolidityParam(this.value, offset);
  };

  /**
   * This method should be used to combine solidity params together
   * eg. when appending an array
   *
   * @method combine
   * @param {SolidityParam} param with which we should combine
   * @param {SolidityParam} result of combination
   */
  SolidityParam.prototype.combine = function (param) {
      return new SolidityParam(this.value + param.value);
  };

  /**
   * This method should be called to check if param has dynamic size.
   * If it has, it returns true, otherwise false
   *
   * @method isDynamic
   * @returns {Boolean}
   */
  SolidityParam.prototype.isDynamic = function () {
      return this.offset !== undefined;
  };

  /**
   * This method should be called to transform offset to bytes
   *
   * @method offsetAsBytes
   * @returns {String} bytes representation of offset
   */
  SolidityParam.prototype.offsetAsBytes = function () {
      return !this.isDynamic() ? '' : formatters$4.toTwosComplement(this.offset).replace('0x','');
  };

  /**
   * This method should be called to get static part of param
   *
   * @method staticPart
   * @returns {String} offset if it is a dynamic param, otherwise value
   */
  SolidityParam.prototype.staticPart = function () {
      if (!this.isDynamic()) {
          return this.value;
      }
      return this.offsetAsBytes();
  };

  /**
   * This method should be called to get dynamic part of param
   *
   * @method dynamicPart
   * @returns {String} returns a value if it is a dynamic param, otherwise empty string
   */
  SolidityParam.prototype.dynamicPart = function () {
      return this.isDynamic() ? this.value : '';
  };

  /**
   * This method should be called to encode param
   *
   * @method encode
   * @returns {String}
   */
  SolidityParam.prototype.encode = function () {
      return this.staticPart() + this.dynamicPart();
  };

  /**
   * This method should be called to encode array of params
   *
   * @method encodeList
   * @param {Array[SolidityParam]} params
   * @returns {String}
   */
  SolidityParam.encodeList = function (params) {

      // updating offsets
      var totalOffset = params.length * 32;
      var offsetParams = params.map(function (param) {
          if (!param.isDynamic()) {
              return param;
          }
          var offset = totalOffset;
          totalOffset += param.dynamicPartLength();
          return param.withOffset(offset);
      });

      // encode everything!
      return offsetParams.reduce(function (result, param) {
          return result + param.dynamicPart();
      }, offsetParams.reduce(function (result, param) {
          return result + param.staticPart();
      }, ''));
  };



  var param = SolidityParam;

  /*
      This file is part of web3.js.

      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.

      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file formatters.js
   * @author Marek Kotewicz <marek@parity.io>
   * @author Fabian Vogelsteller <fabian@frozeman.de>
   * @date 2017
   */








  /**
   * Formats input value to byte representation of int
   * If value is negative, return it's two's complement
   * If the value is floating point, round it down
   *
   * @method formatInputInt
   * @param {String|Number|BN} value that needs to be formatted
   * @returns {SolidityParam}
   */
  var formatInputInt = function (value) {
      if(underscore.isNumber(value)) {
          value = Math.trunc(value);
      }
      return new param(src$4.toTwosComplement(value).replace('0x',''));
  };

  /**
   * Formats input bytes
   *
   * @method formatInputBytes
   * @param {String} value
   * @returns {SolidityParam}
   */
  var formatInputBytes = function (value) {
      if(!src$4.isHexStrict(value)) {
          throw new Error('Given parameter is not bytes: "'+ value + '"');
      }

      var result = value.replace(/^0x/i,'');

      if(result.length % 2 !== 0) {
          throw new Error('Given parameter bytes has an invalid length: "'+ value + '"');
      }

      if (result.length > 64) {
          throw new Error('Given parameter bytes is too long: "' + value + '"');
      }

      var l = Math.floor((result.length + 63) / 64);
      result = src$4.padRight(result, l * 64);
      return new param(result);
  };

  /**
   * Formats input bytes
   *
   * @method formatDynamicInputBytes
   * @param {String} value
   * @returns {SolidityParam}
   */
  var formatInputDynamicBytes = function (value) {
      if(!src$4.isHexStrict(value)) {
          throw new Error('Given parameter is not bytes: "'+ value + '"');
      }

      var result = value.replace(/^0x/i,'');

      if(result.length % 2 !== 0) {
          throw new Error('Given parameter bytes has an invalid length: "'+ value + '"');
      }

      var length = result.length / 2;
      var l = Math.floor((result.length + 63) / 64);
      result = src$4.padRight(result, l * 64);
      return new param(formatInputInt(length).value + result);
  };

  /**
   * Formats input value to byte representation of string
   *
   * @method formatInputString
   * @param {String}
   * @returns {SolidityParam}
   */
  var formatInputString = function (value) {
      if(!underscore.isString(value)) {
          throw new Error('Given parameter is not a valid string: ' + value);
      }

      var result = src$4.utf8ToHex(value).replace(/^0x/i,'');
      var length = result.length / 2;
      var l = Math.floor((result.length + 63) / 64);
      result = src$4.padRight(result, l * 64);
      return new param(formatInputInt(length).value + result);
  };

  /**
   * Formats input value to byte representation of bool
   *
   * @method formatInputBool
   * @param {Boolean}
   * @returns {SolidityParam}
   */
  var formatInputBool = function (value) {
      var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');
      return new param(result);
  };


  /**
   * Check if input value is negative
   *
   * @method signedIsNegative
   * @param {String} value is hex format
   * @returns {Boolean} true if it is negative, otherwise false
   */
  var signedIsNegative = function (value) {
      return (new bn$4(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';
  };

  /**
   * Formats right-aligned output bytes to int
   *
   * @method formatOutputInt
   * @param {SolidityParam} param
   * @returns {BN} right-aligned output bytes formatted to big number
   */
  var formatOutputInt = function (param$$1) {
      var value = param$$1.staticPart();

      if(!value && !param$$1.rawValue) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      // check if it's negative number
      // it it is, return two's complement
      if (signedIsNegative(value)) {
          return new bn$4(value, 16).fromTwos(256).toString(10);
      }
      return new bn$4(value, 16).toString(10);
  };

  /**
   * Formats right-aligned output bytes to uint
   *
   * @method formatOutputUInt
   * @param {SolidityParam} param
   * @returns {BN} right-aligned output bytes formatted to uint
   */
  var formatOutputUInt = function (param$$1, name) {
      var value = param$$1.staticPart();

      if(!value && !param$$1.rawValue) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      return new bn$4(value, 16).toString(10);
  };



  /**
   * Should be used to format output bool
   *
   * @method formatOutputBool
   * @param {SolidityParam} param
   * @param {String} name type name
   * @returns {Boolean} right-aligned input bytes formatted to bool
   */
  var formatOutputBool = function (param$$1, name) {
      var value = param$$1.staticPart();

      if(!value && !param$$1.rawValue) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      return (value === '0000000000000000000000000000000000000000000000000000000000000001');
  };

  /**
   * Should be used to format output bytes
   *
   * @method formatOutputBytes
   * @param {SolidityParam} param left-aligned hex representation of string
   * @param {String} name type name
   * @returns {String} hex string
   */
  var formatOutputBytes = function (param$$1, name) {
      var matches = name.match(/^bytes([0-9]*)/);
      var size = parseInt(matches[1]);

      if(param$$1.staticPart().slice(0, 2 * size).length !== size * 2) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue + ' The size doesn\'t match.');
      }

      return '0x' + param$$1.staticPart().slice(0, 2 * size);
  };

  /**
   * Should be used to format output bytes
   *
   * @method formatOutputDynamicBytes
   * @param {SolidityParam} param left-aligned hex representation of string
   * @param {String} name type name
   * @returns {String} hex string
   */
  var formatOutputDynamicBytes = function (param$$1, name) {
      var hex = param$$1.dynamicPart().slice(0, 64);

      if (!hex) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      var length = (new bn$4(hex, 16)).toNumber() * 2;
      return '0x' + param$$1.dynamicPart().substr(64, length);
  };

  /**
   * Should be used to format output string
   *
   * @method formatOutputString
   * @param {SolidityParam} left-aligned hex representation of string
   * @returns {String} ascii string
   */
  var formatOutputString = function (param$$1) {
      var hex = param$$1.dynamicPart().slice(0, 64);

      if(!hex) {
          throw new Error('ERROR: The returned value is not a convertible string:'+ hex);
      }

      var length = (new bn$4(hex, 16)).toNumber() * 2;
      return length ? src$4.hexToUtf8('0x'+ param$$1.dynamicPart().substr(64, length).replace(/^0x/i, '')) : '';
  };

  /**
   * Should be used to format output address
   *
   * @method formatOutputAddress
   * @param {SolidityParam} param right-aligned input bytes
   * @param {String} name type name
   * @returns {String} address
   */
  var formatOutputAddress = function (param$$1, name) {
      var value = param$$1.staticPart();

      if (!value) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      return src$4.toChecksumAddress("0x" + value.slice(value.length - 40, value.length));
  };

  var formatters$4 = {
      formatInputInt: formatInputInt,
      formatInputBytes: formatInputBytes,
      formatInputDynamicBytes: formatInputDynamicBytes,
      formatInputString: formatInputString,
      formatInputBool: formatInputBool,
      formatOutputInt: formatOutputInt,
      formatOutputUInt: formatOutputUInt,
      formatOutputBool: formatOutputBool,
      formatOutputBytes: formatOutputBytes,
      formatOutputDynamicBytes: formatOutputDynamicBytes,
      formatOutputString: formatOutputString,
      formatOutputAddress: formatOutputAddress,
      toTwosComplement: src$4.toTwosComplement
  };

  /**
   * SolidityType prototype is used to encode/decode solidity params of certain type
   */
  var SolidityType = function (config) {
      this._inputFormatter = config.inputFormatter;
      this._outputFormatter = config.outputFormatter;
  };

  /**
   * Should be used to determine if this SolidityType do match given name
   *
   * @method isType
   * @param {String} name
   * @return {Bool} true if type match this SolidityType, otherwise false
   */
  SolidityType.prototype.isType = function (name) {
      throw "This method should be overwritten for type " + name;
  };

  /**
   * Should be used to determine what is the length of static part in given type
   *
   * @method staticPartLength
   * @param {String} name
   * @return {Number} length of static part in bytes
   */
  SolidityType.prototype.staticPartLength = function (name) {
      // If name isn't an array then treat it like a single element array.
      return (this.nestedTypes(name) || ['[1]'])
          .map(function (type) {
              // the length of the nested array
              return parseInt(type.slice(1, -1), 10) || 1;
          })
          .reduce(function (previous, current) {
              return previous * current;
          // all basic types are 32 bytes long
          }, 32);
  };

  /**
   * Should be used to determine if type is dynamic array
   * eg:
   * "type[]" => true
   * "type[4]" => false
   *
   * @method isDynamicArray
   * @param {String} name
   * @return {Bool} true if the type is dynamic array
   */
  SolidityType.prototype.isDynamicArray = function (name) {
      var nestedTypes = this.nestedTypes(name);
      return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
  };

  /**
   * Should be used to determine if type is static array
   * eg:
   * "type[]" => false
   * "type[4]" => true
   *
   * @method isStaticArray
   * @param {String} name
   * @return {Bool} true if the type is static array
   */
  SolidityType.prototype.isStaticArray = function (name) {
      var nestedTypes = this.nestedTypes(name);
      return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
  };

  /**
   * Should return length of static array
   * eg.
   * "int[32]" => 32
   * "int256[14]" => 14
   * "int[2][3]" => 3
   * "int" => 1
   * "int[1]" => 1
   * "int[]" => 1
   *
   * @method staticArrayLength
   * @param {String} name
   * @return {Number} static array length
   */
  SolidityType.prototype.staticArrayLength = function (name) {
      var nestedTypes = this.nestedTypes(name);
      if (nestedTypes) {
         return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);
      }
      return 1;
  };

  /**
   * Should return nested type
   * eg.
   * "int[32]" => "int"
   * "int256[14]" => "int256"
   * "int[2][3]" => "int[2]"
   * "int" => "int"
   * "int[]" => "int"
   *
   * @method nestedName
   * @param {String} name
   * @return {String} nested name
   */
  SolidityType.prototype.nestedName = function (name) {
      // remove last [] in name
      var nestedTypes = this.nestedTypes(name);
      if (!nestedTypes) {
          return name;
      }

      return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);
  };

  /**
   * Should return true if type has dynamic size by default
   * such types are "string", "bytes"
   *
   * @method isDynamicType
   * @param {String} name
   * @return {Bool} true if is dynamic, otherwise false
   */
  SolidityType.prototype.isDynamicType = function () {
      return false;
  };

  /**
   * Should return array of nested types
   * eg.
   * "int[2][3][]" => ["[2]", "[3]", "[]"]
   * "int[] => ["[]"]
   * "int" => null
   *
   * @method nestedTypes
   * @param {String} name
   * @return {Array} array of nested types
   */
  SolidityType.prototype.nestedTypes = function (name) {
      // return list of strings eg. "[]", "[3]", "[]", "[2]"
      return name.match(/(\[[0-9]*\])/g);
  };

  /**
   * Should be used to encode the value
   *
   * @method encode
   * @param {Object} value
   * @param {String} name
   * @return {String} encoded value
   */
  SolidityType.prototype.encode = function (value, name) {
      var self = this;
      if (this.isDynamicArray(name)) {

          return (function () {
              var length = value.length;                          // in int
              var nestedName = self.nestedName(name);

              var result = [];
              result.push(formatters$4.formatInputInt(length).encode());

              value.forEach(function (v) {
                  result.push(self.encode(v, nestedName));
              });

              return result;
          })();

      } else if (this.isStaticArray(name)) {

          return (function () {
              var length = self.staticArrayLength(name);          // in int
              var nestedName = self.nestedName(name);

              var result = [];
              for (var i = 0; i < length; i++) {
                  result.push(self.encode(value[i], nestedName));
              }

              return result;
          })();

      }

      return this._inputFormatter(value, name).encode();
  };

  /**
   * Should be used to decode value from bytes
   *
   * @method decode
   * @param {String} bytes
   * @param {Number} offset in bytes
   * @param {String} name type name
   * @returns {Object} decoded value
   */
  SolidityType.prototype.decode = function (bytes, offset, name) {
      var self = this;

      if (this.isDynamicArray(name)) {

          return (function () {
              var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes
              var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int
              var arrayStart = arrayOffset + 32; // array starts after length; // in bytes

              var nestedName = self.nestedName(name);
              var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes
              var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
              var result = [];

              for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                  result.push(self.decode(bytes, arrayStart + i, nestedName));
              }

              return result;
          })();

      } else if (this.isStaticArray(name)) {

          return (function () {
              var length = self.staticArrayLength(name);                      // in int
              var arrayStart = offset;                                        // in bytes

              var nestedName = self.nestedName(name);
              var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes
              var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
              var result = [];

              for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                  result.push(self.decode(bytes, arrayStart + i, nestedName));
              }

              return result;
          })();
      } else if (this.isDynamicType(name)) {

          return (function () {
              var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes
              var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes
              var roundedLength = Math.floor((length + 31) / 32);                     // in int
              var param$$1 = new param(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0, bytes);
              return self._outputFormatter(param$$1, name);
          })();
      }

      var length = this.staticPartLength(name);
      var param$$1 = new param(bytes.substr(offset * 2, length * 2), undefined, bytes);
      return this._outputFormatter(param$$1, name);
  };

  var type = SolidityType;

  var formatters$5 = src$6.formatters;


  /**
   * SolidityTypeAddress is a protoype that represents address type
   * It matches:
   * address
   * address[]
   * address[4]
   * address[][]
   * address[3][]
   * address[][6][], ...
   */
  var SolidityTypeAddress = function () {
      this._inputFormatter = function(){
          var args = Array.prototype.slice.call(arguments);
          args[0] = (!args[0] || args[0] === '0x0') ? '' : formatters$5.inputAddressFormatter(args[0]);
          return formatters$4.formatInputInt.apply(this, args);
      };
      this._outputFormatter = formatters$4.formatOutputAddress;
  };

  SolidityTypeAddress.prototype = new type({});
  SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;

  SolidityTypeAddress.prototype.isType = function (name) {
      return !!name.match(/address(\[([0-9]*)\])?/);
  };

  var address = SolidityTypeAddress;

  /**
   * SolidityTypeBool is a protoype that represents bool type
   * It matches:
   * bool
   * bool[]
   * bool[4]
   * bool[][]
   * bool[3][]
   * bool[][6][], ...
   */
  var SolidityTypeBool = function () {
      this._inputFormatter = formatters$4.formatInputBool;
      this._outputFormatter = formatters$4.formatOutputBool;
  };

  SolidityTypeBool.prototype = new type({});
  SolidityTypeBool.prototype.constructor = SolidityTypeBool;

  SolidityTypeBool.prototype.isType = function (name) {
      return !!name.match(/^bool(\[([0-9]*)\])*$/);
  };

  var bool = SolidityTypeBool;

  /**
   * SolidityTypeInt is a protoype that represents int type
   * It matches:
   * int
   * int[]
   * int[4]
   * int[][]
   * int[3][]
   * int[][6][], ...
   * int32
   * int64[]
   * int8[4]
   * int256[][]
   * int[3][]
   * int64[][6][], ...
   */
  var SolidityTypeInt = function () {
      this._inputFormatter = formatters$4.formatInputInt;
      this._outputFormatter = formatters$4.formatOutputInt;
  };

  SolidityTypeInt.prototype = new type({});
  SolidityTypeInt.prototype.constructor = SolidityTypeInt;

  SolidityTypeInt.prototype.isType = function (name) {
      return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);
  };

  var int_1 = SolidityTypeInt;

  /**
   * SolidityTypeUInt is a protoype that represents uint type
   * It matches:
   * uint
   * uint[]
   * uint[4]
   * uint[][]
   * uint[3][]
   * uint[][6][], ...
   * uint32
   * uint64[]
   * uint8[4]
   * uint256[][]
   * uint[3][]
   * uint64[][6][], ...
   */
  var SolidityTypeUInt = function () {
      this._inputFormatter = formatters$4.formatInputInt;
      this._outputFormatter = formatters$4.formatOutputUInt;
  };

  SolidityTypeUInt.prototype = new type({});
  SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;

  SolidityTypeUInt.prototype.isType = function (name) {
      return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);
  };

  var uint = SolidityTypeUInt;

  var SolidityTypeDynamicBytes = function () {
      this._inputFormatter = formatters$4.formatInputDynamicBytes;
      this._outputFormatter = formatters$4.formatOutputDynamicBytes;
  };

  SolidityTypeDynamicBytes.prototype = new type({});
  SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;

  SolidityTypeDynamicBytes.prototype.isType = function (name) {
      return !!name.match(/^bytes(\[([0-9]*)\])*$/);
  };

  SolidityTypeDynamicBytes.prototype.isDynamicType = function () {
      return true;
  };

  var dynamicbytes = SolidityTypeDynamicBytes;

  var SolidityTypeString = function () {
      this._inputFormatter = formatters$4.formatInputString;
      this._outputFormatter = formatters$4.formatOutputString;
  };

  SolidityTypeString.prototype = new type({});
  SolidityTypeString.prototype.constructor = SolidityTypeString;

  SolidityTypeString.prototype.isType = function (name) {
      return !!name.match(/^string(\[([0-9]*)\])*$/);
  };

  SolidityTypeString.prototype.isDynamicType = function () {
      return true;
  };

  var string = SolidityTypeString;

  /**
   * SolidityTypeBytes is a prototype that represents the bytes type.
   * It matches:
   * bytes
   * bytes[]
   * bytes[4]
   * bytes[][]
   * bytes[3][]
   * bytes[][6][], ...
   * bytes32
   * bytes8[4]
   * bytes[3][]
   */
  var SolidityTypeBytes = function () {
      this._inputFormatter = formatters$4.formatInputBytes;
      this._outputFormatter = formatters$4.formatOutputBytes;
  };

  SolidityTypeBytes.prototype = new type({});
  SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;

  SolidityTypeBytes.prototype.isType = function (name) {
      return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);
  };

  var bytes = SolidityTypeBytes;

  /*
   This file is part of web3.js.

   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file index.js
   * @author Marek Kotewicz <marek@parity.io>
   * @author Fabian Vogelsteller <fabian@frozeman.de>
   * @date 2017
   */














  var isDynamic = function (solidityType, type) {
      return solidityType.isDynamicType(type) ||
          solidityType.isDynamicArray(type);
  };


  // result method
  function Result() {}


  /**
   * ABICoder prototype should be used to encode/decode solidity params of any type
   */
  var ABICoder = function (types) {
      this._types = types;
  };

  /**
   * This method should be used to transform type to SolidityType
   *
   * @method _requireType
   * @param {String} type
   * @returns {SolidityType}
   * @throws {Error} throws if no matching type is found
   */
  ABICoder.prototype._requireType = function (type) {
      var solidityType = this._types.filter(function (t) {
          return t.isType(type);
      })[0];

      if (!solidityType) {
          throw Error('Invalid solidity type: ' + type);
      }

      return solidityType;
  };



  ABICoder.prototype._getOffsets = function (types, solidityTypes) {
      var lengths =  solidityTypes.map(function (solidityType, index) {
          return solidityType.staticPartLength(types[index]);
      });

      for (var i = 1; i < lengths.length; i++) {
          // sum with length of previous element
          lengths[i] += lengths[i - 1];
      }

      return lengths.map(function (length, index) {
          // remove the current length, so the length is sum of previous elements
          var staticPartLength = solidityTypes[index].staticPartLength(types[index]);
          return length - staticPartLength;
      });
  };

  ABICoder.prototype._getSolidityTypes = function (types) {
      var self = this;
      return types.map(function (type) {
          return self._requireType(type);
      });
  };


  ABICoder.prototype._encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {
      var result = "";
      var self = this;

      types.forEach(function (type, i) {
          if (isDynamic(solidityTypes[i], types[i])) {
              result += formatters$4.formatInputInt(dynamicOffset).encode();
              var e = self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
              dynamicOffset += e.length / 2;
          } else {
              // don't add length to dynamicOffset. it's already counted
              result += self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
          }

          // TODO: figure out nested arrays
      });

      types.forEach(function (type, i) {
          if (isDynamic(solidityTypes[i], types[i])) {
              var e = self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
              dynamicOffset += e.length / 2;
              result += e;
          }
      });
      return result;
  };

  // TODO: refactor whole encoding!
  ABICoder.prototype._encodeWithOffset = function (type, solidityType, encoded, offset) {
      var self = this;
      if (solidityType.isDynamicArray(type)) {
          return (function () {
              // offset was already set
              var nestedName = solidityType.nestedName(type);
              var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
              var result = encoded[0];

              (function () {
                  var previousLength = 2; // in int
                  if (solidityType.isDynamicArray(nestedName)) {
                      for (var i = 1; i < encoded.length; i++) {
                          previousLength += +(encoded[i - 1])[0] || 0;
                          result += formatters$4.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                      }
                  }
              })();

              // first element is length, skip it
              (function () {
                  for (var i = 0; i < encoded.length - 1; i++) {
                      var additionalOffset = result / 2;
                      result += self._encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);
                  }
              })();

              return result;
          })();

      } else if (solidityType.isStaticArray(type)) {
          return (function () {
              var nestedName = solidityType.nestedName(type);
              var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
              var result = "";


              if (solidityType.isDynamicArray(nestedName)) {
                  (function () {
                      var previousLength = 0; // in int
                      for (var i = 0; i < encoded.length; i++) {
                          // calculate length of previous item
                          previousLength += +(encoded[i - 1] || [])[0] || 0;
                          result += formatters$4.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                      }
                  })();
              }

              (function () {
                  for (var i = 0; i < encoded.length; i++) {
                      var additionalOffset = result / 2;
                      result += self._encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);
                  }
              })();

              return result;
          })();
      }

      return encoded;
  };


  /**
   * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
   *
   * @method encodeFunctionSignature
   * @param {String|Object} functionName
   * @return {String} encoded function name
   */
  ABICoder.prototype.encodeFunctionSignature = function (functionName) {
      if(underscore.isObject(functionName)) {
          functionName = src$4._jsonInterfaceMethodToString(functionName);
      }

      return src$4.sha3(functionName).slice(0, 10);
  };


  /**
   * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
   *
   * @method encodeEventSignature
   * @param {String|Object} functionName
   * @return {String} encoded function name
   */
  ABICoder.prototype.encodeEventSignature = function (functionName) {
      if(underscore.isObject(functionName)) {
          functionName = src$4._jsonInterfaceMethodToString(functionName);
      }

      return src$4.sha3(functionName);
  };


  /**
   * Should be used to encode plain param
   *
   * @method encodeParameter
   * @param {String} type
   * @param {Object} param
   * @return {String} encoded plain param
   */
  ABICoder.prototype.encodeParameter = function (type, param) {
      return this.encodeParameters([type], [param]);
  };

  /**
   * Should be used to encode list of params
   *
   * @method encodeParameters
   * @param {Array} types
   * @param {Array} params
   * @return {String} encoded list of params
   */
  ABICoder.prototype.encodeParameters = function (types, params) {
      // given a json interface
      if(underscore.isObject(types) && types.inputs) {
          types = underscore.map(types.inputs, function (input) {
              return input.type;
          });
      }

      var solidityTypes = this._getSolidityTypes(types);

      var encodeds = solidityTypes.map(function (solidityType, index) {
          return solidityType.encode(params[index], types[index]);
      });

      var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {
          var staticPartLength = solidityType.staticPartLength(types[index]);
          var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;

          return acc + (isDynamic(solidityTypes[index], types[index]) ?
                  32 :
                  roundedStaticPartLength);
      }, 0);

      return '0x'+ this._encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);
  };


  /**
   * Encodes a function call from its json interface and parameters.
   *
   * @method encodeFunctionCall
   * @param {Array} jsonInterface
   * @param {Array} params
   * @return {String} The encoded ABI for this function call
   */
  ABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {
      return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface, params).replace('0x','');
  };


  /**
   * Should be used to decode bytes to plain param
   *
   * @method decodeParameter
   * @param {String} type
   * @param {String} bytes
   * @return {Object} plain param
   */
  ABICoder.prototype.decodeParameter = function (type, bytes$$1) {

      if (!underscore.isString(type)) {
          throw new Error('Given parameter type is not a string: '+ type);
      }

      return this.decodeParameters([{type: type}], bytes$$1)[0];
  };

  /**
   * Should be used to decode list of params
   *
   * @method decodeParameter
   * @param {Array} outputs
   * @param {String} bytes
   * @return {Array} array of plain params
   */
  ABICoder.prototype.decodeParameters = function (outputs, bytes$$1) {
      var isTypeArray = underscore.isArray(outputs) && underscore.isString(outputs[0]);
      var types = (isTypeArray) ? outputs : [];

      if(!isTypeArray) {
          outputs.forEach(function (output) {
              types.push(output.type);
          });
      }

      var solidityTypes = this._getSolidityTypes(types);
      var offsets = this._getOffsets(types, solidityTypes);

      var returnValue = new Result();
      returnValue.__length__ = 0;
      var count = 0;

      outputs.forEach(function (output, i) {
          var decodedValue = solidityTypes[count].decode(bytes$$1.replace(/^0x/i,''), offsets[count],  types[count], count);
          decodedValue = (decodedValue === '0x') ? null : decodedValue;

          returnValue[i] = decodedValue;

          if (underscore.isObject(output) && output.name) {
              returnValue[output.name] = decodedValue;
          }

          returnValue.__length__++;
          count++;
      });

      return returnValue;
  };

  /**
   * Decodes events non- and indexed parameters.
   *
   * @method decodeLog
   * @param {Object} inputs
   * @param {String} data
   * * @param {Array} topics
   * @return {Array} array of plain params
   */
  ABICoder.prototype.decodeLog = function (inputs, data, topics) {

      data = data || '';

      var notIndexedInputs = [];
      var indexedInputs = [];

      inputs.forEach(function (input, i) {
          if (input.indexed) {
              indexedInputs[i] = input;
          } else {
              notIndexedInputs[i] = input;
          }
      });

      var nonIndexedData = data.slice(2);
      var indexedData = underscore.isArray(topics) ? topics.map(function (topic) { return topic.slice(2); }).join('') : topics;

      var notIndexedParams = this.decodeParameters(notIndexedInputs, nonIndexedData);
      var indexedParams = this.decodeParameters(indexedInputs, indexedData);


      var returnValue = new Result();
      returnValue.__length__ = 0;

      inputs.forEach(function (res, i) {
          returnValue[i] = (res.type === 'string') ? '' : null;

          if (notIndexedParams[i]) {
              returnValue[i] = notIndexedParams[i];
          }
          if (indexedParams[i]) {
              returnValue[i] = indexedParams[i];
          }

          if(res.name) {
              returnValue[res.name] = returnValue[i];
          }

          returnValue.__length__++;
      });

      return returnValue;
  };


  var coder = new ABICoder([
      new address(),
      new bool(),
      new int_1(),
      new uint(),
      new dynamicbytes(),
      new bytes(),
      new string()
  ]);

  var src$17 = coder;

  var Subscription$1 = src$12.subscription;
  var formatters$6 = src$6.formatters;
  var errors$8 = src$6.errors;




  /**
   * Should be called to create new contract instance
   *
   * @method Contract
   * @constructor
   * @param {Array} jsonInterface
   * @param {String} address
   * @param {Object} options
   */
  var Contract = function Contract(jsonInterface, address, options) {
      var _this = this,
          args = Array.prototype.slice.call(arguments);

      if(!(this instanceof Contract)) {
          throw new Error('Please use the "new" keyword to instantiate a web3.eth.contract() object!');
      }

      // sets _requestmanager
      src$14.packageInit(this, [this.constructor.currentProvider]);

      this.clearSubscriptions = this._requestManager.clearSubscriptions;



      if(!jsonInterface || !(Array.isArray(jsonInterface))) {
          throw new Error('You must provide the json interface of the contract when instantiating a contract object.');
      }



      // create the options object
      this.options = {};

      var lastArg = args[args.length - 1];
      if(underscore.isObject(lastArg) && !underscore.isArray(lastArg)) {
          options = lastArg;

          this.options = underscore.extend(this.options, this._getOrSetDefaultOptions(options));
          if(underscore.isObject(address)) {
              address = null;
          }
      }

      // set address
      Object.defineProperty(this.options, 'address', {
          set: function(value){
              if(value) {
                  _this._address = src$4.toChecksumAddress(formatters$6.inputAddressFormatter(value));
              }
          },
          get: function(){
              return _this._address;
          },
          enumerable: true
      });

      // add method and event signatures, when the jsonInterface gets set
      Object.defineProperty(this.options, 'jsonInterface', {
          set: function(value){
              _this.methods = {};
              _this.events = {};

              _this._jsonInterface = value.map(function(method) {
                  var func,
                      funcName;

                  if (method.name) {
                      funcName = src$4._jsonInterfaceMethodToString(method);
                  }


                  // function
                  if (method.type === 'function') {
                      method.signature = src$17.encodeFunctionSignature(funcName);
                      func = _this._createTxObject.bind({
                          method: method,
                          parent: _this
                      });


                      // add method only if not one already exists
                      if(!_this.methods[method.name]) {
                          _this.methods[method.name] = func;
                      } else {
                          var cascadeFunc = _this._createTxObject.bind({
                              method: method,
                              parent: _this,
                              nextMethod: _this.methods[method.name]
                          });
                          _this.methods[method.name] = cascadeFunc;
                      }

                      // definitely add the method based on its signature
                      _this.methods[method.signature] = func;

                      // add method by name
                      _this.methods[funcName] = func;


                  // event
                  } else if (method.type === 'event') {
                      method.signature = src$17.encodeEventSignature(funcName);
                      var event = _this._on.bind(_this, method.signature);

                      // add method only if not already exists
                      if(!_this.events[method.name] || _this.events[method.name].name === 'bound ')
                          _this.events[method.name] = event;

                      // definitely add the method based on its signature
                      _this.events[method.signature] = event;

                      // add event by name
                      _this.events[funcName] = event;
                  }


                  return method;
              });

              // add allEvents
              _this.events.allEvents = _this._on.bind(_this, 'allevents');

              return _this._jsonInterface;
          },
          get: function(){
              return _this._jsonInterface;
          },
          enumerable: true
      });

      // get default account from the Class
      var defaultAccount = this.constructor.defaultAccount;
      var defaultBlock = this.constructor.defaultBlock || 'latest';

      Object.defineProperty(this, 'defaultAccount', {
          get: function () {
              return defaultAccount;
          },
          set: function (val) {
              if(val) {
                  defaultAccount = src$4.toChecksumAddress(formatters$6.inputAddressFormatter(val));
              }

              return val;
          },
          enumerable: true
      });
      Object.defineProperty(this, 'defaultBlock', {
          get: function () {
              return defaultBlock;
          },
          set: function (val) {
              defaultBlock = val;

              return val;
          },
          enumerable: true
      });

      // properties
      this.methods = {};
      this.events = {};

      this._address = null;
      this._jsonInterface = [];

      // set getter/setter properties
      this.options.address = address;
      this.options.jsonInterface = jsonInterface;

  };

  Contract.setProvider = function(provider, accounts) {
      // Contract.currentProvider = provider;
      src$14.packageInit(this, [provider]);

      this._ethAccounts = accounts;
  };


  /**
   * Get the callback and modiufy the array if necessary
   *
   * @method _getCallback
   * @param {Array} args
   * @return {Function} the callback
   */
  Contract.prototype._getCallback = function getCallback(args) {
      if (args && underscore.isFunction(args[args.length - 1])) {
          return args.pop(); // modify the args array!
      }
  };

  /**
   * Checks that no listener with name "newListener" or "removeListener" is added.
   *
   * @method _checkListener
   * @param {String} type
   * @param {String} event
   * @return {Object} the contract instance
   */
  Contract.prototype._checkListener = function(type, event){
      if(event === type) {
          throw new Error('The event "'+ type +'" is a reserved event name, you can\'t use it.');
      }
  };


  /**
   * Use default values, if options are not available
   *
   * @method _getOrSetDefaultOptions
   * @param {Object} options the options gived by the user
   * @return {Object} the options with gaps filled by defaults
   */
  Contract.prototype._getOrSetDefaultOptions = function getOrSetDefaultOptions(options) {
      var gasPrice = options.gasPrice ? String(options.gasPrice): null;
      var from = options.from ? src$4.toChecksumAddress(formatters$6.inputAddressFormatter(options.from)) : null;

      options.data = options.data || this.options.data;

      options.from = from || this.options.from;
      options.gasPrice = gasPrice || this.options.gasPrice;
      options.gas = options.gas || options.gasLimit || this.options.gas;

      // TODO replace with only gasLimit?
      delete options.gasLimit;

      return options;
  };


  /**
   * Should be used to encode indexed params and options to one final object
   *
   * @method _encodeEventABI
   * @param {Object} event
   * @param {Object} options
   * @return {Object} everything combined together and encoded
   */
  Contract.prototype._encodeEventABI = function (event, options) {
      options = options || {};
      var filter = options.filter || {},
          result = {};

      ['fromBlock', 'toBlock'].filter(function (f) {
          return options[f] !== undefined;
      }).forEach(function (f) {
          result[f] = formatters$6.inputBlockNumberFormatter(options[f]);
      });

      // use given topics
      if(underscore.isArray(options.topics)) {
          result.topics = options.topics;

      // create topics based on filter
      } else {

          result.topics = [];

          // add event signature
          if (event && !event.anonymous && event.name !== 'ALLEVENTS') {
              result.topics.push(event.signature);
          }

          // add event topics (indexed arguments)
          if (event.name !== 'ALLEVENTS') {
              var indexedTopics = event.inputs.filter(function (i) {
                  return i.indexed === true;
              }).map(function (i) {
                  var value = filter[i.name];
                  if (!value) {
                      return null;
                  }

                  // TODO: https://github.com/ethereum/web3.js/issues/344

                  if (underscore.isArray(value)) {
                      return value.map(function (v) {
                          return src$17.encodeParameter(i.type, v);
                      });
                  }
                  return src$17.encodeParameter(i.type, value);
              });

              result.topics = result.topics.concat(indexedTopics);
          }

          if(!result.topics.length)
              delete result.topics;
      }

      if(this.options.address) {
          result.address = this.options.address.toLowerCase();
      }

      return result;
  };

  /**
   * Should be used to decode indexed params and options
   *
   * @method _decodeEventABI
   * @param {Object} data
   * @return {Object} result object with decoded indexed && not indexed params
   */
  Contract.prototype._decodeEventABI = function (data) {
      var event = this;

      data.data = data.data || '';
      data.topics = data.topics || [];
      var result = formatters$6.outputLogFormatter(data);

      // if allEvents get the right event
      if(event.name === 'ALLEVENTS') {
          event = event.jsonInterface.find(function (intf) {
              return (intf.signature === data.topics[0]);
          }) || {anonymous: true};
      }

      // create empty inputs if none are present (e.g. anonymous events on allEvents)
      event.inputs = event.inputs || [];


      var argTopics = event.anonymous ? data.topics : data.topics.slice(1);

      result.returnValues = src$17.decodeLog(event.inputs, data.data, argTopics);
      delete result.returnValues.__length__;

      // add name
      result.event = event.name;

      // add signature
      result.signature = (event.anonymous || !data.topics[0]) ? null : data.topics[0];

      // move the data and topics to "raw"
      result.raw = {
          data: result.data,
          topics: result.topics
      };
      delete result.data;
      delete result.topics;


      return result;
  };

  /**
   * Encodes an ABI for a method, including signature or the method.
   * Or when constructor encodes only the constructor parameters.
   *
   * @method _encodeMethodABI
   * @param {Mixed} args the arguments to encode
   * @param {String} the encoded ABI
   */
  Contract.prototype._encodeMethodABI = function _encodeMethodABI() {
      var methodSignature = this._method.signature,
          args = this.arguments || [];

      var signature = false,
          paramsABI = this._parent.options.jsonInterface.filter(function (json) {
              return ((methodSignature === 'constructor' && json.type === methodSignature) ||
                  ((json.signature === methodSignature || json.signature === methodSignature.replace('0x','') || json.name === methodSignature) && json.type === 'function'));
          }).map(function (json) {
              var inputLength = (underscore.isArray(json.inputs)) ? json.inputs.length : 0;

              if (inputLength !== args.length) {
                  throw new Error('The number of arguments is not matching the methods required number. You need to pass '+ inputLength +' arguments.');
              }

              if (json.type === 'function') {
                  signature = json.signature;
              }
              return underscore.isArray(json.inputs) ? json.inputs.map(function (input) { return input.type; }) : [];
          }).map(function (types) {
              return src$17.encodeParameters(types, args).replace('0x','');
          })[0] || '';

      // return constructor
      if(methodSignature === 'constructor') {
          if(!this._deployData)
              throw new Error('The contract has no contract data option set. This is necessary to append the constructor parameters.');

          return this._deployData + paramsABI;

      // return method
      } else {

          var returnValue = (signature) ? signature + paramsABI : paramsABI;

          if(!returnValue) {
              throw new Error('Couldn\'t find a matching contract method named "'+ this._method.name +'".');
          } else {
              return returnValue;
          }
      }

  };


  /**
   * Decode method return values
   *
   * @method _decodeMethodReturn
   * @param {Array} outputs
   * @param {String} returnValues
   * @return {Object} decoded output return values
   */
  Contract.prototype._decodeMethodReturn = function (outputs, returnValues) {
      if (!returnValues) {
          return null;
      }

      returnValues = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
      var result = src$17.decodeParameters(outputs, returnValues);

      if (result.__length__ === 1) {
          return result[0];
      } else {
          delete result.__length__;
          return result;
      }
  };


  /**
   * Deploys a contract and fire events based on its state: transactionHash, receipt
   *
   * All event listeners will be removed, once the last possible event is fired ("error", or "receipt")
   *
   * @method deploy
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} EventEmitter possible events are "error", "transactionHash" and "receipt"
   */
  Contract.prototype.deploy = function(options, callback){

      options = options || {};

      options.arguments = options.arguments || [];
      options = this._getOrSetDefaultOptions(options);


      // return error, if no "data" is specified
      if(!options.data) {
          return src$4._fireError(new Error('No "data" specified in neither the given options, nor the default options.'), null, null, callback);
      }

      var constructor = underscore.find(this.options.jsonInterface, function (method) {
          return (method.type === 'constructor');
      }) || {};
      constructor.signature = 'constructor';

      return this._createTxObject.apply({
          method: constructor,
          parent: this,
          deployData: options.data,
          _ethAccounts: this.constructor._ethAccounts
      }, options.arguments);

  };

  /**
   * Gets the event signature and outputformatters
   *
   * @method _generateEventOptions
   * @param {Object} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the event options object
   */
  Contract.prototype._generateEventOptions = function() {
      var args = Array.prototype.slice.call(arguments);

      // get the callback
      var callback = this._getCallback(args);

      // get the options
      var options = (underscore.isObject(args[args.length - 1])) ? args.pop() : {};

      var event = (underscore.isString(args[0])) ? args[0] : 'allevents';
      event = (event.toLowerCase() === 'allevents') ? {
              name: 'ALLEVENTS',
              jsonInterface: this.options.jsonInterface
          } : this.options.jsonInterface.find(function (json) {
              return (json.type === 'event' && (json.name === event || json.signature === '0x'+ event.replace('0x','')));
          });

      if (!event) {
          throw new Error('Event "' + event.name + '" doesn\'t exist in this contract.');
      }

      if (!src$4.isAddress(this.options.address)) {
          throw new Error('This contract object doesn\'t have address set yet, please set an address first.');
      }

      return {
          params: this._encodeEventABI(event, options),
          event: event,
          callback: callback
      };
  };

  /**
   * Adds event listeners and creates a subscription, and remove it once its fired.
   *
   * @method clone
   * @return {Object} the event subscription
   */
  Contract.prototype.clone = function() {
      return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
  };


  /**
   * Adds event listeners and creates a subscription, and remove it once its fired.
   *
   * @method once
   * @param {String} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the event subscription
   */
  Contract.prototype.once = function(event, options, callback) {
      var args = Array.prototype.slice.call(arguments);

      // get the callback
      callback = this._getCallback(args);

      if (!callback) {
          throw new Error('Once requires a callback as the second parameter.');
      }

      // don't allow fromBlock
      if (options)
          delete options.fromBlock;

      // don't return as once shouldn't provide "on"
      this._on(event, options, function (err, res, sub) {
          sub.unsubscribe();
          if(underscore.isFunction(callback)){
              callback(err, res, sub);
          }
      });

      return undefined;
  };

  /**
   * Adds event listeners and creates a subscription.
   *
   * @method _on
   * @param {String} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the event subscription
   */
  Contract.prototype._on = function(){
      var subOptions = this._generateEventOptions.apply(this, arguments);


      // prevent the event "newListener" and "removeListener" from being overwritten
      this._checkListener('newListener', subOptions.event.name, subOptions.callback);
      this._checkListener('removeListener', subOptions.event.name, subOptions.callback);

      // TODO check if listener already exists? and reuse subscription if options are the same.

      // create new subscription
      var subscription = new Subscription$1({
          subscription: {
              params: 1,
              inputFormatter: [formatters$6.inputLogFormatter],
              outputFormatter: this._decodeEventABI.bind(subOptions.event),
              // DUBLICATE, also in web3-eth
              subscriptionHandler: function (output) {
                  if(output.removed) {
                      this.emit('changed', output);
                  } else {
                      this.emit('data', output);
                  }

                  if (underscore.isFunction(this.callback)) {
                      this.callback(null, output, this);
                  }
              }
          },
          type: 'eth',
          requestManager: this._requestManager
      });
      subscription.subscribe('logs', subOptions.params, subOptions.callback || function () {});

      return subscription;
  };

  /**
   * Get past events from contracts
   *
   * @method getPastEvents
   * @param {String} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the promievent
   */
  Contract.prototype.getPastEvents = function(){
      var subOptions = this._generateEventOptions.apply(this, arguments);

      var getPastLogs = new src$13({
          name: 'getPastLogs',
          call: 'eth_getLogs',
          params: 1,
          inputFormatter: [formatters$6.inputLogFormatter],
          outputFormatter: this._decodeEventABI.bind(subOptions.event)
      });
      getPastLogs.setRequestManager(this._requestManager);
      var call = getPastLogs.buildCall();

      getPastLogs = null;

      return call(subOptions.params, subOptions.callback);
  };


  /**
   * returns the an object with call, send, estimate functions
   *
   * @method _createTxObject
   * @returns {Object} an object with functions to call the methods
   */
  Contract.prototype._createTxObject =  function _createTxObject(){
      var args = Array.prototype.slice.call(arguments);
      var txObject = {};

      if(this.method.type === 'function') {

          txObject.call = this.parent._executeMethod.bind(txObject, 'call');
          txObject.call.request = this.parent._executeMethod.bind(txObject, 'call', true); // to make batch requests

      }

      txObject.send = this.parent._executeMethod.bind(txObject, 'send');
      txObject.send.request = this.parent._executeMethod.bind(txObject, 'send', true); // to make batch requests
      txObject.encodeABI = this.parent._encodeMethodABI.bind(txObject);
      txObject.estimateGas = this.parent._executeMethod.bind(txObject, 'estimate');

      if (args && this.method.inputs && args.length !== this.method.inputs.length) {
          if (this.nextMethod) {
              return this.nextMethod.apply(null, args);
          }
          throw errors$8.InvalidNumberOfParams(args.length, this.method.inputs.length, this.method.name);
      }

      txObject.arguments = args || [];
      txObject._method = this.method;
      txObject._parent = this.parent;
      txObject._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts;

      if(this.deployData) {
          txObject._deployData = this.deployData;
      }

      return txObject;
  };


  /**
   * Generates the options for the execute call
   *
   * @method _processExecuteArguments
   * @param {Array} args
   * @param {Promise} defer
   */
  Contract.prototype._processExecuteArguments = function _processExecuteArguments(args, defer) {
      var processedArgs = {};

      processedArgs.type = args.shift();

      // get the callback
      processedArgs.callback = this._parent._getCallback(args);

      // get block number to use for call
      if(processedArgs.type === 'call' && args[args.length - 1] !== true && (underscore.isString(args[args.length - 1]) || isFinite(args[args.length - 1])))
          processedArgs.defaultBlock = args.pop();

      // get the options
      processedArgs.options = (underscore.isObject(args[args.length - 1])) ? args.pop() : {};

      // get the generateRequest argument for batch requests
      processedArgs.generateRequest = (args[args.length - 1] === true)? args.pop() : false;

      processedArgs.options = this._parent._getOrSetDefaultOptions(processedArgs.options);
      processedArgs.options.data = this.encodeABI();

      // add contract address
      if(!this._deployData && !src$4.isAddress(this._parent.options.address))
          throw new Error('This contract object doesn\'t have address set yet, please set an address first.');

      if(!this._deployData)
          processedArgs.options.to = this._parent.options.address;

      // return error, if no "data" is specified
      if(!processedArgs.options.data)
          return src$4._fireError(new Error('Couldn\'t find a matching contract method, or the number of parameters is wrong.'), defer.eventEmitter, defer.reject, processedArgs.callback);

      return processedArgs;
  };

  /**
   * Executes a call, transact or estimateGas on a contract function
   *
   * @method _executeMethod
   * @param {String} type the type this execute function should execute
   * @param {Boolean} makeRequest if true, it simply returns the request parameters, rather than executing it
   */
  Contract.prototype._executeMethod = function _executeMethod(){
      var _this = this,
          args = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), defer),
          defer = src$11((args.type !== 'send')),
          ethAccounts = _this.constructor._ethAccounts || _this._ethAccounts;

      // simple return request for batch requests
      if(args.generateRequest) {

          var payload = {
              params: [formatters$6.inputCallFormatter.call(this._parent, args.options)],
              callback: args.callback
          };

          if(args.type === 'call') {
              payload.params.push(formatters$6.inputDefaultBlockNumberFormatter.call(this._parent, args.defaultBlock));
              payload.method = 'eth_call';
              payload.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs);
          } else {
              payload.method = 'eth_sendTransaction';
          }

          return payload;

      } else {

          switch (args.type) {
              case 'estimate':

                  var estimateGas = (new src$13({
                      name: 'estimateGas',
                      call: 'eth_estimateGas',
                      params: 1,
                      inputFormatter: [formatters$6.inputCallFormatter],
                      outputFormatter: src$4.hexToNumber,
                      requestManager: _this._parent._requestManager,
                      accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)
                      defaultAccount: _this._parent.defaultAccount,
                      defaultBlock: _this._parent.defaultBlock
                  })).createFunction();

                  return estimateGas(args.options, args.callback);

              case 'call':

                  // TODO check errors: missing "from" should give error on deploy and send, call ?

                  var call = (new src$13({
                      name: 'call',
                      call: 'eth_call',
                      params: 2,
                      inputFormatter: [formatters$6.inputCallFormatter, formatters$6.inputDefaultBlockNumberFormatter],
                      // add output formatter for decoding
                      outputFormatter: function (result) {
                          return _this._parent._decodeMethodReturn(_this._method.outputs, result);
                      },
                      requestManager: _this._parent._requestManager,
                      accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)
                      defaultAccount: _this._parent.defaultAccount,
                      defaultBlock: _this._parent.defaultBlock
                  })).createFunction();

                  return call(args.options, args.defaultBlock, args.callback);

              case 'send':

                  // return error, if no "from" is specified
                  if(!src$4.isAddress(args.options.from)) {
                      return src$4._fireError(new Error('No "from" address specified in neither the given options, nor the default options.'), defer.eventEmitter, defer.reject, args.callback);
                  }

                  if (underscore.isBoolean(this._method.payable) && !this._method.payable && args.options.value && args.options.value > 0) {
                      return src$4._fireError(new Error('Can not send value to non-payable contract method or constructor'), defer.eventEmitter, defer.reject, args.callback);
                  }


                  // make sure receipt logs are decoded
                  var extraFormatters = {
                      receiptFormatter: function (receipt) {
                          if (underscore.isArray(receipt.logs)) {

                              // decode logs
                              var events$$1 = underscore.map(receipt.logs, function(log) {
                                  return _this._parent._decodeEventABI.call({
                                      name: 'ALLEVENTS',
                                      jsonInterface: _this._parent.options.jsonInterface
                                  }, log);
                              });

                              // make log names keys
                              receipt.events = {};
                              var count = 0;
                              events$$1.forEach(function (ev) {
                                  if (ev.event) {
                                      // if > 1 of the same event, don't overwrite any existing events
                                      if (receipt.events[ev.event]) {
                                          if (Array.isArray(receipt.events[ ev.event ])) {
                                              receipt.events[ ev.event ].push(ev);
                                          } else {
                                              receipt.events[ev.event] = [receipt.events[ev.event], ev];
                                          }
                                      } else {
                                          receipt.events[ ev.event ] = ev;
                                      }
                                  } else {
                                      receipt.events[count] = ev;
                                      count++;
                                  }
                              });

                              delete receipt.logs;
                          }
                          return receipt;
                      },
                      contractDeployFormatter: function (receipt) {
                          var newContract = _this._parent.clone();
                          newContract.options.address = receipt.contractAddress;
                          return newContract;
                      }
                  };

                  var sendTransaction = (new src$13({
                      name: 'sendTransaction',
                      call: 'eth_sendTransaction',
                      params: 1,
                      inputFormatter: [formatters$6.inputTransactionFormatter],
                      requestManager: _this._parent._requestManager,
                      accounts: _this.constructor._ethAccounts || _this._ethAccounts, // is eth.accounts (necessary for wallet signing)
                      defaultAccount: _this._parent.defaultAccount,
                      defaultBlock: _this._parent.defaultBlock,
                      extraFormatters: extraFormatters
                  })).createFunction();

                  return sendTransaction(args.options, args.callback);

          }

      }

  };

  var src$18 = Contract;

  var at = function at(bytes, index) {
    return parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);
  };

  var random = function random(bytes) {
    var rnd = void 0;
    if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof commonjsRequire !== "undefined") rnd = commonjsRequire("c" + "rypto").randomBytes(bytes);else throw "Safe random numbers not available.";
    var hex = "0x";
    for (var i = 0; i < bytes; ++i) {
      hex += ("00" + rnd[i].toString(16)).slice(-2);
    }return hex;
  };

  var length = function length(a) {
    return (a.length - 2) / 2;
  };

  var flatten$1 = function flatten(a) {
    return "0x" + a.reduce(function (r, s) {
      return r + s.slice(2);
    }, "");
  };

  var slice = function slice(i, j, bs) {
    return "0x" + bs.slice(i * 2 + 2, j * 2 + 2);
  };

  var reverse = function reverse(hex) {
    var rev = "0x";
    for (var i = 0, l = length(hex); i < l; ++i) {
      rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
    }
    return rev;
  };

  var pad = function pad(l, hex) {
    return hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));
  };

  var padRight = function padRight(l, hex) {
    return hex.length === l * 2 + 2 ? hex : padRight(l, hex + "0");
  };

  var toArray = function toArray(hex) {
    var arr = [];
    for (var i = 2, l = hex.length; i < l; i += 2) {
      arr.push(parseInt(hex.slice(i, i + 2), 16));
    }return arr;
  };

  var fromArray = function fromArray(arr) {
    var hex = "0x";
    for (var i = 0, l = arr.length; i < l; ++i) {
      var b = arr[i];
      hex += (b < 16 ? "0" : "") + b.toString(16);
    }
    return hex;
  };

  var toUint8Array = function toUint8Array(hex) {
    return new Uint8Array(toArray(hex));
  };

  var fromUint8Array = function fromUint8Array(arr) {
    return fromArray([].slice.call(arr, 0));
  };

  var fromNumber = function fromNumber(num) {
    var hex = num.toString(16);
    return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
  };

  var toNumber = function toNumber(hex) {
    return parseInt(hex.slice(2), 16);
  };

  var concat$1 = function concat(a, b) {
    return a.concat(b.slice(2));
  };

  var fromNat = function fromNat(bn) {
    return bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);
  };

  var toNat = function toNat(bn) {
    return bn[2] === "0" ? "0x" + bn.slice(3) : bn;
  };

  var fromAscii = function fromAscii(ascii) {
    var hex = "0x";
    for (var i = 0; i < ascii.length; ++i) {
      hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
    }return hex;
  };

  var toAscii = function toAscii(hex) {
    var ascii = "";
    for (var i = 2; i < hex.length; i += 2) {
      ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
    }return ascii;
  };

  // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
  var fromString = function fromString(s) {
    var makeByte = function makeByte(uint8) {
      var b = uint8.toString(16);
      return b.length < 2 ? "0" + b : b;
    };
    var bytes = "0x";
    for (var ci = 0; ci != s.length; ci++) {
      var c = s.charCodeAt(ci);
      if (c < 128) {
        bytes += makeByte(c);
        continue;
      }
      if (c < 2048) {
        bytes += makeByte(c >> 6 | 192);
      } else {
        if (c > 0xd7ff && c < 0xdc00) {
          if (++ci == s.length) return null;
          var c2 = s.charCodeAt(ci);
          if (c2 < 0xdc00 || c2 > 0xdfff) return null;
          c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
          bytes += makeByte(c >> 18 | 240);
          bytes += makeByte(c >> 12 & 63 | 128);
        } else {
          // c <= 0xffff
          bytes += makeByte(c >> 12 | 224);
        }
        bytes += makeByte(c >> 6 & 63 | 128);
      }
      bytes += makeByte(c & 63 | 128);
    }
    return bytes;
  };

  var toString = function toString(bytes) {
    var s = '';
    var i = 0;
    var l = length(bytes);
    while (i < l) {
      var c = at(bytes, i++);
      if (c > 127) {
        if (c > 191 && c < 224) {
          if (i >= l) return null;
          c = (c & 31) << 6 | at(bytes, i) & 63;
        } else if (c > 223 && c < 240) {
          if (i + 1 >= l) return null;
          c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;
        } else if (c > 239 && c < 248) {
          if (i + 2 >= l) return null;
          c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;
        } else return null;
        ++i;
      }
      if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {
        c -= 0x10000;
        s += String.fromCharCode(c >> 10 | 0xd800);
        s += String.fromCharCode(c & 0x3FF | 0xdc00);
      } else return null;
    }
    return s;
  };

  var bytes$1 = {
    random: random,
    length: length,
    concat: concat$1,
    flatten: flatten$1,
    slice: slice,
    reverse: reverse,
    pad: pad,
    padRight: padRight,
    fromAscii: fromAscii,
    toAscii: toAscii,
    fromString: fromString,
    toString: toString,
    fromNumber: fromNumber,
    toNumber: toNumber,
    fromNat: fromNat,
    toNat: toNat,
    fromArray: fromArray,
    toArray: toArray,
    fromUint8Array: fromUint8Array,
    toUint8Array: toUint8Array
  };

  var bn$5 = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert$$1 (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = buffer.Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert$$1(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert$$1(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert$$1(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert$$1(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert$$1(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert$$1(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert$$1(byteLength <= reqLength, 'byte array longer than desired length');
      assert$$1(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert$$1((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert$$1(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert$$1(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert$$1(carry === 0);
      assert$$1((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) {
        // No-op, we should not move anything at all
      } else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert$$1(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert$$1(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert$$1(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert$$1(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert$$1(typeof num === 'number');
      assert$$1(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert$$1(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert$$1(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert$$1(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert$$1(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert$$1(p.negative === 0);
      assert$$1(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert$$1(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert$$1(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      assert$$1(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert$$1(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert$$1(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert$$1(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert$$1(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert$$1(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert$$1(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert$$1(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert$$1(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert$$1(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert$$1(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert$$1(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert$$1(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert$$1(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert$$1(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert$$1(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert$$1(a.negative === 0, 'red works only with positives');
      assert$$1(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert$$1((a.negative | b.negative) === 0, 'red works only with positives');
      assert$$1(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert$$1(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert$$1(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert$$1(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })('object' === 'undefined' || module, commonjsGlobal);
  });

  var fromBN = function fromBN(bn) {
    return "0x" + bn.toString("hex");
  };

  var toBN$1 = function toBN(str) {
    return new bn$5(str.slice(2), 16);
  };

  var fromString$1 = function fromString(str) {
    var bn = "0x" + (str.slice(0, 2) === "0x" ? new bn$5(str.slice(2), 16) : new bn$5(str, 10)).toString("hex");
    return bn === "0x0" ? "0x" : bn;
  };

  var toEther = function toEther(wei) {
    return toNumber$1(div(wei, fromString$1("10000000000"))) / 100000000;
  };

  var fromEther = function fromEther(eth) {
    return mul(fromNumber$1(Math.floor(eth * 100000000)), fromString$1("10000000000"));
  };

  var toString$1 = function toString(a) {
    return toBN$1(a).toString(10);
  };

  var fromNumber$1 = function fromNumber(a) {
    return typeof a === "string" ? /^0x/.test(a) ? a : "0x" + a : "0x" + new bn$5(a).toString("hex");
  };

  var toNumber$1 = function toNumber(a) {
    return toBN$1(a).toNumber();
  };

  var toUint256 = function toUint256(a) {
    return bytes$1.pad(32, a);
  };

  var bin = function bin(method) {
    return function (a, b) {
      return fromBN(toBN$1(a)[method](toBN$1(b)));
    };
  };

  var add = bin("add");
  var mul = bin("mul");
  var div = bin("div");
  var sub = bin("sub");

  var nat = {
    toString: toString$1,
    fromString: fromString$1,
    toNumber: toNumber$1,
    fromNumber: fromNumber$1,
    toEther: toEther,
    fromEther: fromEther,
    toUint256: toUint256,
    add: add,
    mul: mul,
    div: div,
    sub: sub
  };

  var _args = [["elliptic@6.4.0","/Users/ptescher/Development/BitskiCo/bitski-js-sdk"]];
  var _from$1 = "elliptic@6.4.0";
  var _id$1 = "elliptic@6.4.0";
  var _inBundle$1 = false;
  var _integrity$1 = "sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=";
  var _location$1 = "/elliptic";
  var _phantomChildren$1 = {};
  var _requested$1 = {"type":"version","registry":true,"raw":"elliptic@6.4.0","name":"elliptic","escapedName":"elliptic","rawSpec":"6.4.0","saveSpec":null,"fetchSpec":"6.4.0"};
  var _requiredBy$1 = ["/browserify-sign","/create-ecdh","/eth-lib","/web3-eth-accounts/eth-lib"];
  var _resolved$1 = "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz";
  var _spec$1 = "6.4.0";
  var _where$1 = "/Users/ptescher/Development/BitskiCo/bitski-js-sdk";
  var author$1 = {"name":"Fedor Indutny","email":"fedor@indutny.com"};
  var bugs$1 = {"url":"https://github.com/indutny/elliptic/issues"};
  var dependencies$1 = {"bn.js":"^4.4.0","brorand":"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0","inherits":"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"};
  var description$1 = "EC cryptography";
  var devDependencies = {"brfs":"^1.4.3","coveralls":"^2.11.3","grunt":"^0.4.5","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^8.6.2","istanbul":"^0.4.2","jscs":"^2.9.0","jshint":"^2.6.0","mocha":"^2.1.0"};
  var files = ["lib"];
  var homepage = "https://github.com/indutny/elliptic";
  var keywords$1 = ["EC","Elliptic","curve","Cryptography"];
  var license$1 = "MIT";
  var main$1 = "lib/elliptic.js";
  var name$2 = "elliptic";
  var repository$1 = {"type":"git","url":"git+ssh://git@github.com/indutny/elliptic.git"};
  var scripts = {"jscs":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","jshint":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","lint":"npm run jscs && npm run jshint","test":"npm run lint && npm run unit","unit":"istanbul test _mocha --reporter=spec test/index.js","version":"grunt dist && git add dist/"};
  var version$1 = "6.4.0";
  var _package$2 = {
  	_args: _args,
  	_from: _from$1,
  	_id: _id$1,
  	_inBundle: _inBundle$1,
  	_integrity: _integrity$1,
  	_location: _location$1,
  	_phantomChildren: _phantomChildren$1,
  	_requested: _requested$1,
  	_requiredBy: _requiredBy$1,
  	_resolved: _resolved$1,
  	_spec: _spec$1,
  	_where: _where$1,
  	author: author$1,
  	bugs: bugs$1,
  	dependencies: dependencies$1,
  	description: description$1,
  	devDependencies: devDependencies,
  	files: files,
  	homepage: homepage,
  	keywords: keywords$1,
  	license: license$1,
  	main: main$1,
  	name: name$2,
  	repository: repository$1,
  	scripts: scripts,
  	version: version$1
  };

  var _package$3 = /*#__PURE__*/Object.freeze({
    _args: _args,
    _from: _from$1,
    _id: _id$1,
    _inBundle: _inBundle$1,
    _integrity: _integrity$1,
    _location: _location$1,
    _phantomChildren: _phantomChildren$1,
    _requested: _requested$1,
    _requiredBy: _requiredBy$1,
    _resolved: _resolved$1,
    _spec: _spec$1,
    _where: _where$1,
    author: author$1,
    bugs: bugs$1,
    dependencies: dependencies$1,
    description: description$1,
    devDependencies: devDependencies,
    files: files,
    homepage: homepage,
    keywords: keywords$1,
    license: license$1,
    main: main$1,
    name: name$2,
    repository: repository$1,
    scripts: scripts,
    version: version$1,
    default: _package$2
  });

  var minimalisticAssert = assert$1;

  function assert$1(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  assert$1.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };

  var utils_1$1 = createCommonjsModule(function (module, exports) {

  var utils = exports;

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
      return res;
    }
    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;

  utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
      return toHex(arr);
    else
      return arr;
  };
  });

  var utils_1$2 = createCommonjsModule(function (module, exports) {

  var utils = exports;




  utils.assert = minimalisticAssert;
  utils.toArray = utils_1$1.toArray;
  utils.zero2 = utils_1$1.zero2;
  utils.toHex = utils_1$1.toHex;
  utils.encode = utils_1$1.encode;

  // Represent num in a w-NAF form
  function getNAF(num, w) {
    var naf = [];
    var ws = 1 << (w + 1);
    var k = num.clone();
    while (k.cmpn(1) >= 0) {
      var z;
      if (k.isOdd()) {
        var mod = k.andln(ws - 1);
        if (mod > (ws >> 1) - 1)
          z = (ws >> 1) - mod;
        else
          z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }
      naf.push(z);

      // Optimization, shift by word if possible
      var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
      for (var i = 1; i < shift; i++)
        naf.push(0);
      k.iushrn(shift);
    }

    return naf;
  }
  utils.getNAF = getNAF;

  // Represent k1, k2 in a Joint Sparse Form
  function getJSF(k1, k2) {
    var jsf = [
      [],
      []
    ];

    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

      // First phase
      var m14 = (k1.andln(3) + d1) & 3;
      var m24 = (k2.andln(3) + d2) & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        var m8 = (k1.andln(7) + d1) & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);

      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        var m8 = (k2.andln(7) + d2) & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u2 = -m24;
        else
          u2 = m24;
      }
      jsf[1].push(u2);

      // Second phase
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u2 + 1)
        d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }

    return jsf;
  }
  utils.getJSF = getJSF;

  function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] :
             this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;

  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                       bytes;
  }
  utils.parseBytes = parseBytes;

  function intFromLE(bytes) {
    return new bn$5(bytes, 'hex', 'le');
  }
  utils.intFromLE = intFromLE;
  });

  var r;

  var brorand = function rand(len) {
    if (!r)
      r = new Rand(null);

    return r.generate(len);
  };

  function Rand(rand) {
    this.rand = rand;
  }
  var Rand_1 = Rand;

  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };

  // Emulate crypto API using randy
  Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n);

    var res = new Uint8Array(n);
    for (var i = 0; i < res.length; i++)
      res[i] = this.rand.getByte();
    return res;
  };

  if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) {
      // Modern browsers
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      // IE
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };

    // Safari's WebWorkers do not have `crypto`
    } else if (typeof window === 'object') {
      // Old junk
      Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    // Node.js or Web worker with no crypto support
    try {
      var crypto$2 = crypto;
      if (typeof crypto$2.randomBytes !== 'function')
        throw new Error('Not supported');

      Rand.prototype._rand = function _rand(n) {
        return crypto$2.randomBytes(n);
      };
    } catch (e) {
    }
  }
  brorand.Rand = Rand_1;

  var utils$1 = elliptic_1.utils;
  var getNAF = utils$1.getNAF;
  var getJSF = utils$1.getJSF;
  var assert$2 = utils$1.assert;

  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new bn$5(conf.p, 16);

    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? bn$5.red(conf.prime) : bn$5.mont(this.p);

    // Useful for many curves
    this.zero = new bn$5(0).toRed(this.red);
    this.one = new bn$5(1).toRed(this.red);
    this.two = new bn$5(2).toRed(this.red);

    // Curve configuration, optional
    this.n = conf.n && new bn$5(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);

    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base = BaseCurve;

  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$2(p.precomputed);
    var doubles = p._getDoubles();

    var naf = getNAF(k, 1);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;

    // Translate into more windowed form
    var repr = [];
    for (var j = 0; j < naf.length; j += doubles.step) {
      var nafW = 0;
      for (var k = j + doubles.step - 1; k >= j; k--)
        nafW = (nafW << 1) + naf[k];
      repr.push(nafW);
    }

    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (var j = 0; j < repr.length; j++) {
        var nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };

  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;

    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;

    // Get NAF form
    var naf = getNAF(k, w);

    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      // Count zeroes
      for (var k = 0; i >= 0 && naf[i] === 0; i--)
        k++;
      if (i >= 0)
        k++;
      acc = acc.dblp(k);

      if (i < 0)
        break;
      var z = naf[i];
      assert$2(z !== 0);
      if (p.type === 'affine') {
        // J +- P
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        // J +- J
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };

  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                         points,
                                                         coeffs,
                                                         len,
                                                         jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;

    // Fill all arrays
    var max = 0;
    for (var i = 0; i < len; i++) {
      var p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }

    // Comb small window NAFs
    for (var i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a]);
        naf[b] = getNAF(coeffs[b], wndWidth[b]);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }

      var comb = [
        points[a], /* 1 */
        null, /* 3 */
        null, /* 5 */
        points[b] /* 7 */
      ];

      // Try to avoid Projective points, if possible
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }

      var index = [
        -3, /* -1 -1 */
        -1, /* -1 0 */
        -5, /* -1 1 */
        -7, /* 0 -1 */
        0, /* 0 0 */
        7, /* 0 1 */
        5, /* 1 -1 */
        1, /* 1 0 */
        3  /* 1 1 */
      ];

      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (var j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;

        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }

    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (var i = max; i >= 0; i--) {
      var k = 0;

      while (i >= 0) {
        var zero = true;
        for (var j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;

      for (var j = 0; j < len; j++) {
        var z = tmp[j];
        var p;
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();

        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    // Zeroify references
    for (var i = 0; i < len; i++)
      wnd[i] = null;

    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };

  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;

  BasePoint.prototype.eq = function eq(/*other*/) {
    throw new Error('Not implemented');
  };

  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };

  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils$1.toArray(bytes, enc);

    var len = this.p.byteLength();

    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
      if (bytes[0] === 0x06)
        assert$2(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 0x07)
        assert$2(bytes[bytes.length - 1] % 2 === 1);

      var res =  this.point(bytes.slice(1, 1 + len),
                            bytes.slice(1 + len, 1 + 2 * len));

      return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
  };

  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };

  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);

    if (compact)
      return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

    return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
  };

  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils$1.encode(this._encode(compact), enc);
  };

  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;

    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;

    return this;
  };

  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;

    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;

    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };

  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;

    var doubles = [ this ];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles
    };
  };

  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;

    var res = [ this ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res
    };
  };

  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };

  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };

  var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  });

  var inherits = createCommonjsModule(function (module) {
  try {
    var util$$1 = util;
    if (typeof util$$1.inherits !== 'function') throw '';
    module.exports = util$$1.inherits;
  } catch (e) {
    module.exports = inherits_browser;
  }
  });

  var Base = curve_1.base;

  var assert$3 = elliptic_1.utils.assert;

  function ShortCurve(conf) {
    Base.call(this, 'short', conf);

    this.a = new bn$5(conf.a, 16).toRed(this.red);
    this.b = new bn$5(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();

    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits(ShortCurve, Base);
  var short_1 = ShortCurve;

  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;

    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new bn$5(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      // Choose the smallest beta
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new bn$5(conf.lambda, 16);
    } else {
      // Choose the lambda that is matching selected beta
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$3(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }

    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new bn$5(vec.a, 16),
          b: new bn$5(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }

    return {
      beta: beta,
      lambda: lambda,
      basis: basis
    };
  };

  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : bn$5.mont(num);
    var tinv = new bn$5(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();

    var s = new bn$5(3).toRed(red).redNeg().redSqrt().redMul(tinv);

    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [ l1, l2 ];
  };

  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new bn$5(1);
    var y1 = new bn$5(0);
    var x2 = new bn$5(0);
    var y2 = new bn$5(1);

    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;

    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));

      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r;

      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x;

    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }

    // Normalize signs
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }

    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };

  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];

    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);

    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);

    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
  };

  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn$5(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;

    var x = point.x;
    var y = point.y;

    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };

  ShortCurve.prototype._endoWnafMulAdd =
      function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i = 0; i < points.length; i++) {
      var split = this._endoSplit(coeffs[i]);
      var p = points[i];
      var beta = p._getBeta();

      if (split.k1.negative) {
        split.k1.ineg();
        p = p.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }

      npoints[i * 2] = p;
      npoints[i * 2 + 1] = beta;
      ncoeffs[i * 2] = split.k1;
      ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

    // Clean-up references to points and coefficients
    for (var j = 0; j < i * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };

  function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new bn$5(x, 16);
      this.y = new bn$5(y, 16);
      // Force redgomery representation when loading from JSON
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits(Point, Base.BasePoint);

  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };

  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };

  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;

    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;

    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };

  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [ this.x, this.y ];

    return [ this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    } ];
  };

  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;

    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }

    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [ res ].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [ res ].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };

  Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf)
      return p;

    // P + O = P
    if (p.inf)
      return this;

    // P + P = 2P
    if (this.eq(p))
      return this.dbl();

    // P + (-P) = O
    if (this.neg().eq(p))
      return this.curve.point(null, null);

    // P + Q = O
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);

    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;

    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);

    var a = this.curve.a;

    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };

  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };

  Point.prototype.mul = function mul(k) {
    k = new bn$5(k, 16);

    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([ this ], [ k ]);
    else
      return this.curve._wnafMul(this, k);
  };

  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };

  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };

  Point.prototype.eq = function eq(p) {
    return this === p ||
           this.inf === p.inf &&
               (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };

  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;

    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };

  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);

    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };

  function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new bn$5(0);
    } else {
      this.x = new bn$5(x, 16);
      this.y = new bn$5(y, 16);
      this.z = new bn$5(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);

    this.zOne = this.z === this.curve.one;
  }
  inherits(JPoint, Base.BasePoint);

  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };

  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);

    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);

    return this.curve.point(ax, ay);
  };

  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };

  JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity())
      return p;

    // P + O = P
    if (p.isInfinity())
      return this;

    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity())
      return p.toJ();

    // P + O = P
    if (p.isInfinity())
      return this;

    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();

    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (var i = 0; i < pow; i++)
        r = r.dbl();
      return r;
    }

    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;

    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    // Reuse results
    var jyd = jy.redAdd(jy);
    for (var i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);

      jx = nx;
      jz = nz;
      jyd = dny;
    }

    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };

  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };

  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 14A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // T = M ^ 2 - 2*S
      var t = m.redSqr().redISub(s).redISub(s);

      // 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);

      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2*Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-dbl-2009-l
      // 2M + 5S + 13A

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = B^2
      var c = b.redSqr();
      // D = 2 * ((X1 + B)^2 - A - C)
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      // E = 3 * A
      var e = a.redAdd(a).redIAdd(a);
      // F = E^2
      var f = e.redSqr();

      // 8 * C
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);

      // X3 = F - 2 * D
      nx = f.redISub(d).redISub(d);
      // Y3 = E * (D - X3) - 8 * C
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      // Z3 = 2 * Y1 * Z1
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 15A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      // T = M^2 - 2 * S
      var t = m.redSqr().redISub(s).redISub(s);
      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2 * Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
      // 3M + 5S

      // delta = Z1^2
      var delta = this.z.redSqr();
      // gamma = Y1^2
      var gamma = this.y.redSqr();
      // beta = X1 * gamma
      var beta = this.x.redMul(gamma);
      // alpha = 3 * (X1 - delta) * (X1 + delta)
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      // X3 = alpha^2 - 8 * beta
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      // Z3 = (Y1 + Z1)^2 - gamma - delta
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;

    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();

    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);

    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);

    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mul = function mul(k, kbase) {
    k = new bn$5(k, kbase);

    return this.curve._wnafMul(this, k);
  };

  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
      return this.eq(p.toJ());

    if (this === p)
      return true;

    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;

    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };

  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;

      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
    return false;
  };

  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
  };

  JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  var Base$1 = curve_1.base;


  var utils$2 = elliptic_1.utils;

  function MontCurve(conf) {
    Base$1.call(this, 'mont', conf);

    this.a = new bn$5(conf.a, 16).toRed(this.red);
    this.b = new bn$5(conf.b, 16).toRed(this.red);
    this.i4 = new bn$5(4).toRed(this.red).redInvm();
    this.two = new bn$5(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits(MontCurve, Base$1);
  var mont = MontCurve;

  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();

    return y.redSqr().cmp(rhs) === 0;
  };

  function Point$1(curve, x, z) {
    Base$1.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new bn$5(x, 16);
      this.z = new bn$5(z, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits(Point$1, Base$1.BasePoint);

  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils$2.toArray(bytes, enc), 1);
  };

  MontCurve.prototype.point = function point(x, z) {
    return new Point$1(this, x, z);
  };

  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point$1.fromJSON(this, obj);
  };

  Point$1.prototype.precompute = function precompute() {
    // No-op
  };

  Point$1.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
  };

  Point$1.fromJSON = function fromJSON(curve, obj) {
    return new Point$1(curve, obj[0], obj[1] || curve.one);
  };

  Point$1.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point$1.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  Point$1.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A

    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };

  Point$1.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A

    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };

  Point$1.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q

    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
      bits.push(t.andln(1));

    for (var i = bits.length - 1; i >= 0; i--) {
      if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
      } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
      }
    }
    return b;
  };

  Point$1.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };

  Point$1.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };

  Point$1.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();

    return this.x.fromRed();
  };

  var Base$2 = curve_1.base;

  var assert$4 = elliptic_1.utils.assert;

  function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;

    Base$2.call(this, 'edwards', conf);

    this.a = new bn$5(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new bn$5(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new bn$5(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);

    assert$4(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits(EdwardsCurve, Base$2);
  var edwards = EdwardsCurve;

  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };

  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };

  // Just for compatibility with Short curve
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };

  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn$5(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new bn$5(y, 16);
    if (!y.red)
      y = y.toRed(this.red);

    // x^2 = (y^2 - 1) / (d y^2 + 1)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.one);
    var rhs = y2.redMul(this.d).redAdd(this.one);
    var x2 = lhs.redMul(rhs.redInvm());

    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error('invalid point');
      else
        return this.point(this.zero, y);
    }

    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    if (x.isOdd() !== odd)
      x = x.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;

    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();

    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

    return lhs.cmp(rhs) === 0;
  };

  function Point$2(curve, x, y, z, t) {
    Base$2.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new bn$5(x, 16);
      this.y = new bn$5(y, 16);
      this.z = z ? new bn$5(z, 16) : this.curve.one;
      this.t = t && new bn$5(t, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;

      // Use extended coordinates
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits(Point$2, Base$2.BasePoint);

  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point$2.fromJSON(this, obj);
  };

  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point$2(this, x, y, z, t);
  };

  Point$2.fromJSON = function fromJSON(curve, obj) {
    return new Point$2(curve, obj[0], obj[1], obj[2]);
  };

  Point$2.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point$2.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 &&
           this.y.cmp(this.z) === 0;
  };

  Point$2.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point$2.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S

    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();

    var nx;
    var ny;
    var nz;
    if (this.curve.twisted) {
      // E = a * C
      var e = this.curve._mulA(c);
      // F = E + D
      var f = e.redAdd(d);
      if (this.zOne) {
        // X3 = (B - C - D) * (F - 2)
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F^2 - 2 * F
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        // H = Z1^2
        var h = this.z.redSqr();
        // J = F - 2 * H
        var j = f.redSub(h).redISub(h);
        // X3 = (B-C-D)*J
        nx = b.redSub(c).redISub(d).redMul(j);
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F * J
        nz = f.redMul(j);
      }
    } else {
      // E = C + D
      var e = c.redAdd(d);
      // H = (c * Z1)^2
      var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
      // J = E - 2 * H
      var j = e.redSub(h).redSub(h);
      // X3 = c * (B - E) * J
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      // Y3 = c * E * (C - D)
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      // Z3 = E * J
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point$2.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    // Double in extended coordinates
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };

  Point$2.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M

    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point$2.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S

    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      // Y3 = A * G * (D - a * C)
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      // Z3 = F * G
      nz = f.redMul(g);
    } else {
      // Y3 = A * G * (D - C)
      ny = a.redMul(g).redMul(d.redSub(c));
      // Z3 = c * F * G
      nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point$2.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;

    if (this.curve.extended)
      return this._extAdd(p);
    else
      return this._projAdd(p);
  };

  Point$2.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };

  Point$2.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
  };

  Point$2.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
  };

  Point$2.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;

    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };

  Point$2.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(),
                            this.y,
                            this.z,
                            this.t && this.t.redNeg());
  };

  Point$2.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };

  Point$2.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };

  Point$2.prototype.eq = function eq(other) {
    return this === other ||
           this.getX().cmp(other.getX()) === 0 &&
           this.getY().cmp(other.getY()) === 0;
  };

  Point$2.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;

      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
    return false;
  };

  // Compatibility with BaseCurve
  Point$2.prototype.toP = Point$2.prototype.normalize;
  Point$2.prototype.mixedAdd = Point$2.prototype.add;

  var curve_1 = createCommonjsModule(function (module, exports) {

  var curve = exports;

  curve.base = base;
  curve.short = short_1;
  curve.mont = mont;
  curve.edwards = edwards;
  });

  var inherits_1 = inherits;

  function toArray$1(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  var toArray_1 = toArray$1;

  function toHex$1(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  var toHex_1 = toHex$1;

  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  var htonl_1 = htonl;

  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  var toHex32_1 = toHex32;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  var zero2_1 = zero2;

  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  var zero8_1 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    minimalisticAssert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  var join32_1 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  var split32_1 = split32;

  function rotr32(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  var rotr32_1 = rotr32;

  function rotl32(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  var rotl32_1 = rotl32;

  function sum32(a, b) {
    return (a + b) >>> 0;
  }
  var sum32_1 = sum32;

  function sum32_3(a, b, c) {
    return (a + b + c) >>> 0;
  }
  var sum32_3_1 = sum32_3;

  function sum32_4(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  var sum32_4_1 = sum32_4;

  function sum32_5(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  var sum32_5_1 = sum32_5;

  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];

    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  var sum64_1 = sum64;

  function sum64_hi(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  var sum64_hi_1 = sum64_hi;

  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  var sum64_lo_1 = sum64_lo;

  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;

    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  var sum64_4_hi_1 = sum64_4_hi;

  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  var sum64_4_lo_1 = sum64_4_lo;

  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;

    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  var sum64_5_hi_1 = sum64_5_hi;

  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;

    return lo >>> 0;
  }
  var sum64_5_lo_1 = sum64_5_lo;

  function rotr64_hi(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  }
  var rotr64_hi_1 = rotr64_hi;

  function rotr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  var rotr64_lo_1 = rotr64_lo;

  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  var shr64_hi_1 = shr64_hi;

  function shr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  var shr64_lo_1 = shr64_lo;

  var utils$3 = {
  	inherits: inherits_1,
  	toArray: toArray_1,
  	toHex: toHex_1,
  	htonl: htonl_1,
  	toHex32: toHex32_1,
  	zero2: zero2_1,
  	zero8: zero8_1,
  	join32: join32_1,
  	split32: split32_1,
  	rotr32: rotr32_1,
  	rotl32: rotl32_1,
  	sum32: sum32_1,
  	sum32_3: sum32_3_1,
  	sum32_4: sum32_4_1,
  	sum32_5: sum32_5_1,
  	sum64: sum64_1,
  	sum64_hi: sum64_hi_1,
  	sum64_lo: sum64_lo_1,
  	sum64_4_hi: sum64_4_hi_1,
  	sum64_4_lo: sum64_4_lo_1,
  	sum64_5_hi: sum64_5_hi_1,
  	sum64_5_lo: sum64_5_lo_1,
  	rotr64_hi: rotr64_hi_1,
  	rotr64_lo: rotr64_lo_1,
  	shr64_hi: shr64_hi_1,
  	shr64_lo: shr64_lo_1
  };

  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';

    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  var BlockHash_1 = BlockHash;

  BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils$3.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
      msg = this.pending;

      // Process pending data in blocks
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;

      msg = utils$3.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }

    return this;
  };

  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    minimalisticAssert(this.pending === null);

    return this._digest(enc);
  };

  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;

    // Append length
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }

    return res;
  };

  var common = {
  	BlockHash: BlockHash_1
  };

  var rotr32$1 = utils$3.rotr32;

  function ft_1(s, x, y, z) {
    if (s === 0)
      return ch32(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32(x, y, z);
  }
  var ft_1_1 = ft_1;

  function ch32(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }
  var ch32_1 = ch32;

  function maj32(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }
  var maj32_1 = maj32;

  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  var p32_1 = p32;

  function s0_256(x) {
    return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
  }
  var s0_256_1 = s0_256;

  function s1_256(x) {
    return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
  }
  var s1_256_1 = s1_256;

  function g0_256(x) {
    return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ (x >>> 3);
  }
  var g0_256_1 = g0_256;

  function g1_256(x) {
    return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ (x >>> 10);
  }
  var g1_256_1 = g1_256;

  var common$1 = {
  	ft_1: ft_1_1,
  	ch32: ch32_1,
  	maj32: maj32_1,
  	p32: p32_1,
  	s0_256: s0_256_1,
  	s1_256: s1_256_1,
  	g0_256: g0_256_1,
  	g1_256: g1_256_1
  };

  var rotl32$1 = utils$3.rotl32;
  var sum32$1 = utils$3.sum32;
  var sum32_5$1 = utils$3.sum32_5;
  var ft_1$1 = common$1.ft_1;
  var BlockHash$1 = common.BlockHash;

  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];

  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();

    BlockHash$1.call(this);
    this.h = [
      0x67452301, 0xefcdab89, 0x98badcfe,
      0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }

  utils$3.inherits(SHA1, BlockHash$1);
  var _1 = SHA1;

  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;

  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];

    for(; i < W.length; i++)
      W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t;
    }

    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
  };

  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h, 'big');
    else
      return utils$3.split32(this.h, 'big');
  };

  var sum32$2 = utils$3.sum32;
  var sum32_4$1 = utils$3.sum32_4;
  var sum32_5$2 = utils$3.sum32_5;
  var ch32$1 = common$1.ch32;
  var maj32$1 = common$1.maj32;
  var s0_256$1 = common$1.s0_256;
  var s1_256$1 = common$1.s1_256;
  var g0_256$1 = common$1.g0_256;
  var g1_256$1 = common$1.g1_256;

  var BlockHash$2 = common.BlockHash;

  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];

  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();

    BlockHash$2.call(this);
    this.h = [
      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils$3.inherits(SHA256, BlockHash$2);
  var _256 = SHA256;

  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;

  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];

    minimalisticAssert(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);
      var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32$2(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$2(T1, T2);
    }

    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
    this.h[5] = sum32$2(this.h[5], f);
    this.h[6] = sum32$2(this.h[6], g);
    this.h[7] = sum32$2(this.h[7], h);
  };

  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h, 'big');
    else
      return utils$3.split32(this.h, 'big');
  };

  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();

    _256.call(this);
    this.h = [
      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils$3.inherits(SHA224, _256);
  var _224 = SHA224;

  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;

  SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex')
      return utils$3.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils$3.split32(this.h.slice(0, 7), 'big');
  };

  var rotr64_hi$1 = utils$3.rotr64_hi;
  var rotr64_lo$1 = utils$3.rotr64_lo;
  var shr64_hi$1 = utils$3.shr64_hi;
  var shr64_lo$1 = utils$3.shr64_lo;
  var sum64$1 = utils$3.sum64;
  var sum64_hi$1 = utils$3.sum64_hi;
  var sum64_lo$1 = utils$3.sum64_lo;
  var sum64_4_hi$1 = utils$3.sum64_4_hi;
  var sum64_4_lo$1 = utils$3.sum64_4_lo;
  var sum64_5_hi$1 = utils$3.sum64_5_hi;
  var sum64_5_lo$1 = utils$3.sum64_5_lo;

  var BlockHash$3 = common.BlockHash;

  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();

    BlockHash$3.call(this);
    this.h = [
      0x6a09e667, 0xf3bcc908,
      0xbb67ae85, 0x84caa73b,
      0x3c6ef372, 0xfe94f82b,
      0xa54ff53a, 0x5f1d36f1,
      0x510e527f, 0xade682d1,
      0x9b05688c, 0x2b3e6c1f,
      0x1f83d9ab, 0xfb41bd6b,
      0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils$3.inherits(SHA512, BlockHash$3);
  var _512 = SHA512;

  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;

  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    // 32 x 32bit words
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];  // i - 7
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];  // i - 16
      var c3_lo = W[i - 31];

      W[i] = sum64_4_hi$1(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo$1(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
    }
  };

  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;

    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];

    minimalisticAssert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];

      var T1_hi = sum64_5_hi$1(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);
      var T1_lo = sum64_5_lo$1(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);

      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

      var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);

      hh = gh;
      hl = gl;

      gh = fh;
      gl = fl;

      fh = eh;
      fl = el;

      eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
      el = sum64_lo$1(dl, dl, T1_hi, T1_lo);

      dh = ch;
      dl = cl;

      ch = bh;
      cl = bl;

      bh = ah;
      bl = al;

      ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64$1(this.h, 0, ah, al);
    sum64$1(this.h, 2, bh, bl);
    sum64$1(this.h, 4, ch, cl);
    sum64$1(this.h, 6, dh, dl);
    sum64$1(this.h, 8, eh, el);
    sum64$1(this.h, 10, fh, fl);
    sum64$1(this.h, 12, gh, gl);
    sum64$1(this.h, 14, hh, hl);
  };

  SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h, 'big');
    else
      return utils$3.split32(this.h, 'big');
  };

  function ch64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 28);
    var c1_hi = rotr64_hi$1(xl, xh, 2);  // 34
    var c2_hi = rotr64_hi$1(xl, xh, 7);  // 39

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 28);
    var c1_lo = rotr64_lo$1(xl, xh, 2);  // 34
    var c2_lo = rotr64_lo$1(xl, xh, 7);  // 39

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 14);
    var c1_hi = rotr64_hi$1(xh, xl, 18);
    var c2_hi = rotr64_hi$1(xl, xh, 9);  // 41

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 14);
    var c1_lo = rotr64_lo$1(xh, xl, 18);
    var c2_lo = rotr64_lo$1(xl, xh, 9);  // 41

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 1);
    var c1_hi = rotr64_hi$1(xh, xl, 8);
    var c2_hi = shr64_hi$1(xh, xl, 7);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 1);
    var c1_lo = rotr64_lo$1(xh, xl, 8);
    var c2_lo = shr64_lo$1(xh, xl, 7);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 19);
    var c1_hi = rotr64_hi$1(xl, xh, 29);  // 61
    var c2_hi = shr64_hi$1(xh, xl, 6);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 19);
    var c1_lo = rotr64_lo$1(xl, xh, 29);  // 61
    var c2_lo = shr64_lo$1(xh, xl, 6);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();

    _512.call(this);
    this.h = [
      0xcbbb9d5d, 0xc1059ed8,
      0x629a292a, 0x367cd507,
      0x9159015a, 0x3070dd17,
      0x152fecd8, 0xf70e5939,
      0x67332667, 0xffc00b31,
      0x8eb44a87, 0x68581511,
      0xdb0c2e0d, 0x64f98fa7,
      0x47b5481d, 0xbefa4fa4 ];
  }
  utils$3.inherits(SHA384, _512);
  var _384 = SHA384;

  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;

  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils$3.split32(this.h.slice(0, 12), 'big');
  };

  var sha1 = _1;
  var sha224 = _224;
  var sha256 = _256;
  var sha384 = _384;
  var sha512 = _512;

  var sha = {
  	sha1: sha1,
  	sha224: sha224,
  	sha256: sha256,
  	sha384: sha384,
  	sha512: sha512
  };

  var rotl32$2 = utils$3.rotl32;
  var sum32$3 = utils$3.sum32;
  var sum32_3$1 = utils$3.sum32_3;
  var sum32_4$2 = utils$3.sum32_4;
  var BlockHash$4 = common.BlockHash;

  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();

    BlockHash$4.call(this);

    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils$3.inherits(RIPEMD160, BlockHash$4);
  var ripemd160 = RIPEMD160;

  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;

  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32$3(
        rotl32$2(
          sum32_4$2(A, f$1(j, B, C, D), msg[r$1[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32$2(C, 10);
      C = B;
      B = T;
      T = sum32$3(
        rotl32$2(
          sum32_4$2(Ah, f$1(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32$2(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3$1(this.h[1], C, Dh);
    this.h[1] = sum32_3$1(this.h[2], D, Eh);
    this.h[2] = sum32_3$1(this.h[3], E, Ah);
    this.h[3] = sum32_3$1(this.h[4], A, Bh);
    this.h[4] = sum32_3$1(this.h[0], B, Ch);
    this.h[0] = T;
  };

  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h, 'little');
    else
      return utils$3.split32(this.h, 'little');
  };

  function f$1(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }

  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }

  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }

  var r$1 = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];

  var ripemd = {
  	ripemd160: ripemd160
  };

  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils$3.toArray(key, enc));
  }
  var hmac = Hmac;

  Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    minimalisticAssert(key.length <= this.blockSize);

    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);

    for (i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);

    // 0x36 ^ 0x5c = 0x6a
    for (i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };

  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };

  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };

  var hash_1$1 = createCommonjsModule(function (module, exports) {
  var hash = exports;

  hash.utils = utils$3;
  hash.common = common;
  hash.sha = sha;
  hash.ripemd = ripemd;
  hash.hmac = hmac;

  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  });

  var secp256k1 = {
    doubles: {
      step: 4,
      points: [
        [
          'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
          'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
        ],
        [
          '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
          '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
        ],
        [
          '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
          'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
        ],
        [
          '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
          '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
        ],
        [
          '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
          '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
        ],
        [
          '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
          '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
        ],
        [
          'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
          '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
        ],
        [
          '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
          'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
        ],
        [
          'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
          '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
        ],
        [
          'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
          'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
        ],
        [
          'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
          '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
        ],
        [
          '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
          '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
        ],
        [
          '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
          '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
        ],
        [
          '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
          '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
        ],
        [
          '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
          '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
        ],
        [
          '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
          '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
        ],
        [
          '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
          '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
        ],
        [
          '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
          '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
        ],
        [
          '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
          'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
        ],
        [
          'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
          '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
        ],
        [
          'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
          '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
        ],
        [
          '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
          '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
        ],
        [
          '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
          '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
        ],
        [
          'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
          '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
        ],
        [
          '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
          'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
        ],
        [
          'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
          '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
        ],
        [
          'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
          'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
        ],
        [
          'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
          '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
        ],
        [
          'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
          'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
        ],
        [
          'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
          '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
        ],
        [
          '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
          'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
        ],
        [
          '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
          '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
        ],
        [
          'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
          '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
        ],
        [
          '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
          'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
        ],
        [
          'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
          '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
        ],
        [
          'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
          '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
        ],
        [
          'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
          'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
        ],
        [
          '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
          '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
        ],
        [
          '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
          '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
        ],
        [
          '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
          'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
        ],
        [
          '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
          '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
        ],
        [
          'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
          '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
        ],
        [
          '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
          '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
        ],
        [
          '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
          'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
        ],
        [
          '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
          '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
        ],
        [
          'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
          '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
        ],
        [
          '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
          'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
        ],
        [
          'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
          'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
        ],
        [
          'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
          '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
        ],
        [
          '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
          'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
        ],
        [
          '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
          'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
        ],
        [
          'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
          '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
        ],
        [
          'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
          '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
        ],
        [
          'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
          '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
        ],
        [
          '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
          'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
        ],
        [
          '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
          '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
        ],
        [
          'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
          'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
        ],
        [
          '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
          'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
        ],
        [
          '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
          '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
        ],
        [
          '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
          '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
        ],
        [
          'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
          'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
        ],
        [
          '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
          '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
        ],
        [
          '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
          '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
        ],
        [
          'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
          '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
        ],
        [
          'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
          'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
        ]
      ]
    },
    naf: {
      wnd: 7,
      points: [
        [
          'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
          '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
        ],
        [
          '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
          'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
        ],
        [
          '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
          '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
        ],
        [
          'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
          'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
        ],
        [
          '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
          'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
        ],
        [
          'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
          'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
        ],
        [
          'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
          '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
        ],
        [
          'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
          '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
        ],
        [
          '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
          '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
        ],
        [
          '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
          '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
        ],
        [
          '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
          '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
        ],
        [
          '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
          '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
        ],
        [
          'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
          'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
        ],
        [
          'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
          '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
        ],
        [
          '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
          'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
        ],
        [
          '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
          'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
        ],
        [
          '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
          '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
        ],
        [
          '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
          '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
        ],
        [
          '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
          '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
        ],
        [
          '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
          'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
        ],
        [
          'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
          'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
        ],
        [
          '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
          '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
        ],
        [
          '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
          '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
        ],
        [
          'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
          'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
        ],
        [
          '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
          '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
        ],
        [
          'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
          'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
        ],
        [
          'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
          'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
        ],
        [
          '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
          '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
        ],
        [
          '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
          '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
        ],
        [
          '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
          '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
        ],
        [
          'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
          '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
        ],
        [
          '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
          '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
        ],
        [
          'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
          '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
        ],
        [
          '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
          'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
        ],
        [
          '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
          'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
        ],
        [
          'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
          'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
        ],
        [
          '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
          '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
        ],
        [
          '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
          'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
        ],
        [
          'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
          'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
        ],
        [
          '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
          '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
        ],
        [
          '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
          'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
        ],
        [
          '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
          '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
        ],
        [
          '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
          'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
        ],
        [
          'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
          '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
        ],
        [
          '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
          '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
        ],
        [
          '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
          'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
        ],
        [
          '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
          'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
        ],
        [
          'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
          'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
        ],
        [
          'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
          'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
        ],
        [
          '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
          '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
        ],
        [
          '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
          '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
        ],
        [
          'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
          '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
        ],
        [
          'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
          'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
        ],
        [
          '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
          '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
        ],
        [
          '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
          '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
        ],
        [
          'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
          '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
        ],
        [
          '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
          '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
        ],
        [
          'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
          'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
        ],
        [
          '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
          'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
        ],
        [
          '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
          '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
        ],
        [
          'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
          '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
        ],
        [
          'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
          '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
        ],
        [
          '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
          '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
        ],
        [
          '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
          '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
        ],
        [
          '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
          'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
        ],
        [
          '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
          'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
        ],
        [
          '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
          '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
        ],
        [
          '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
          '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
        ],
        [
          '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
          '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
        ],
        [
          '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
          'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
        ],
        [
          'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
          'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
        ],
        [
          '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
          'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
        ],
        [
          'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
          '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
        ],
        [
          'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
          '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
        ],
        [
          'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
          '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
        ],
        [
          'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
          '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
        ],
        [
          '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
          'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
        ],
        [
          '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
          '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
        ],
        [
          '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
          'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
        ],
        [
          'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
          'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
        ],
        [
          'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
          '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
        ],
        [
          'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
          'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
        ],
        [
          'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
          '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
        ],
        [
          '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
          '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
        ],
        [
          'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
          '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
        ],
        [
          'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
          '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
        ],
        [
          '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
          '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
        ],
        [
          '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
          'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
        ],
        [
          'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
          '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
        ],
        [
          'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
          '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
        ],
        [
          'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
          '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
        ],
        [
          '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
          '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
        ],
        [
          'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
          'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
        ],
        [
          '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
          'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
        ],
        [
          'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
          'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
        ],
        [
          'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
          '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
        ],
        [
          '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
          'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
        ],
        [
          'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
          '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
        ],
        [
          'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
          '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
        ],
        [
          'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
          '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
        ],
        [
          '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
          'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
        ],
        [
          '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
          'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
        ],
        [
          'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
          '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
        ],
        [
          '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
          'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
        ],
        [
          '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
          '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
        ],
        [
          '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
          'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
        ],
        [
          'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
          'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
        ],
        [
          '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
          'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
        ],
        [
          '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
          '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
        ],
        [
          '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
          'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
        ],
        [
          '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
          '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
        ],
        [
          'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
          'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
        ],
        [
          '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
          '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
        ],
        [
          'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
          '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
        ],
        [
          '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
          '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
        ],
        [
          'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
          'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
        ],
        [
          'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
          '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
        ],
        [
          'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
          'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
        ],
        [
          '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
          'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
        ],
        [
          '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
          '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
        ],
        [
          '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
          'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
        ],
        [
          '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
          '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
        ],
        [
          '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
          '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
        ],
        [
          '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
          'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
        ],
        [
          '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
          '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
        ],
        [
          '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
          '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
        ],
        [
          '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
          '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
        ]
      ]
    }
  };

  var curves_1 = createCommonjsModule(function (module, exports) {

  var curves = exports;




  var assert$$1 = elliptic_1.utils.assert;

  function PresetCurve(options) {
    if (options.type === 'short')
      this.curve = new elliptic_1.curve.short(options);
    else if (options.type === 'edwards')
      this.curve = new elliptic_1.curve.edwards(options);
    else
      this.curve = new elliptic_1.curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;

    assert$$1(this.g.validate(), 'Invalid curve');
    assert$$1(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;

  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }

  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
      '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
    ]
  });

  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
      'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
    ]
  });

  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
      '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
    ]
  });

  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
       '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
       'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash_1$1.sha384,
    gRed: false,
    g: [
      'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
      '5502f25d bf55296c 3a545e38 72760ab7',
      '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
      '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
    ]
  });

  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
       '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
       '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
       'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash_1$1.sha512,
    gRed: false,
    g: [
      '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
      '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
      'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
      '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
      '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
      '3fad0761 353c7086 a272c240 88be9476 9fd16650'
    ]
  });

  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      '9'
    ]
  });

  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

      // 4/5
      '6666666666666666666666666666666666666666666666666666666666666658'
    ]
  });

  var pre;
  try {
    pre = secp256k1;
  } catch (e) {
    pre = undefined;
  }

  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash_1$1.sha256,

    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
      {
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3'
      },
      {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15'
      }
    ],

    gRed: false,
    g: [
      '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
      '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
      pre
    ]
  });
  });

  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;

    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;

    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;

    var entropy = utils_1$1.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils_1$1.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils_1$1.toArray(options.pers, options.persEnc || 'hex');
    minimalisticAssert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG;

  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);

    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }

    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000;  // 2^48
  };

  HmacDRBG.prototype._hmac = function hmac() {
    return new hash_1$1.hmac(this.hash, this.K);
  };

  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac()
                   .update(this.V)
                   .update([ 0x00 ]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;

    this.K = this._hmac()
                 .update(this.V)
                 .update([ 0x01 ])
                 .update(seed)
                 .digest();
    this.V = this._hmac().update(this.V).digest();
  };

  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }

    entropy = utils_1$1.toArray(entropy, entropyEnc);
    add = utils_1$1.toArray(add, addEnc);

    minimalisticAssert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };

  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error('Reseed is required');

    // Optional encoding
    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }

    // Optional additional data
    if (add) {
      add = utils_1$1.toArray(add, addEnc || 'hex');
      this._update(add);
    }

    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }

    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils_1$1.encode(res, enc);
  };

  var utils$4 = elliptic_1.utils;
  var assert$5 = utils$4.assert;

  function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;

    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key = KeyPair;

  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;

    return new KeyPair(ec, {
      pub: pub,
      pubEnc: enc
    });
  };

  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;

    return new KeyPair(ec, {
      priv: priv,
      privEnc: enc
    });
  };

  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();

    if (pub.isInfinity())
      return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
      return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: 'Public key * N != O' };

    return { result: true, reason: null };
  };

  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }

    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);

    if (!enc)
      return this.pub;

    return this.pub.encode(enc, compact);
  };

  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };

  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new bn$5(key, enc || 16);

    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
  };

  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      // Montgomery points only have an `x` coordinate.
      // Weierstrass/Edwards points on the other hand have both `x` and
      // `y` coordinates.
      if (this.ec.curve.type === 'mont') {
        assert$5(key.x, 'Need x coordinate');
      } else if (this.ec.curve.type === 'short' ||
                 this.ec.curve.type === 'edwards') {
        assert$5(key.x && key.y, 'Need both x and y coordinate');
      }
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };

  // ECDH
  KeyPair.prototype.derive = function derive(pub) {
    return pub.mul(this.priv).getX();
  };

  // ECDSA
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };

  KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };

  KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
           ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };

  var utils$5 = elliptic_1.utils;
  var assert$6 = utils$5.assert;

  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;

    if (this._importDER(options, enc))
      return;

    assert$6(options.r && options.s, 'Signature without r or s');
    this.r = new bn$5(options.r, 16);
    this.s = new bn$5(options.s, 16);
    if (options.recoveryParam === undefined)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature = Signature;

  function Position() {
    this.place = 0;
  }

  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) {
      return initial;
    }
    var octetLen = initial & 0xf;
    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
    }
    p.place = off;
    return val;
  }

  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }

  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils$5.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) {
      return false;
    }
    var len = getLength(data, p);
    if ((len + p.place) !== data.length) {
      return false;
    }
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var rlen = getLength(data, p);
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var slen = getLength(data, p);
    if (data.length !== slen + p.place) {
      return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0 && (r[1] & 0x80)) {
      r = r.slice(1);
    }
    if (s[0] === 0 && (s[1] & 0x80)) {
      s = s.slice(1);
    }

    this.r = new bn$5(r);
    this.s = new bn$5(s);
    this.recoveryParam = null;

    return true;
  };

  function constructLength(arr, len) {
    if (len < 0x80) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while (--octets) {
      arr.push((len >>> (octets << 3)) & 0xff);
    }
    arr.push(len);
  }

  Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();

    // Pad values
    if (r[0] & 0x80)
      r = [ 0 ].concat(r);
    // Pad values
    if (s[0] & 0x80)
      s = [ 0 ].concat(s);

    r = rmPadding(r);
    s = rmPadding(s);

    while (!s[0] && !(s[1] & 0x80)) {
      s = s.slice(1);
    }
    var arr = [ 0x02 ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [ 0x30 ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils$5.encode(res, enc);
  };

  var utils$6 = elliptic_1.utils;
  var assert$7 = utils$6.assert;




  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);

    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
      assert$7(elliptic_1.curves.hasOwnProperty(options), 'Unknown curve ' + options);

      options = elliptic_1.curves[options];
    }

    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof elliptic_1.curves.PresetCurve)
      options = { curve: options };

    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;

    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);

    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
  }
  var ec = EC;

  EC.prototype.keyPair = function keyPair(options) {
    return new key(this, options);
  };

  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key.fromPrivate(this, priv, enc);
  };

  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key.fromPublic(this, pub, enc);
  };

  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};

    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
      entropy: options.entropy || elliptic_1.rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || 'utf8',
      nonce: this.n.toArray()
    });

    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new bn$5(2));
    do {
      var priv = new bn$5(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;

      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    } while (true);
  };

  EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };

  EC.prototype.sign = function sign(msg, key$$1, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};

    key$$1 = this.keyFromPrivate(key$$1, enc);
    msg = this._truncateToN(new bn$5(msg, 16));

    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key$$1.getPrivate().toArray('be', bytes);

    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);

    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8'
    });

    // Number of bytes to generate
    var ns1 = this.n.sub(new bn$5(1));

    for (var iter = 0; true; iter++) {
      var k = options.k ?
          options.k(iter) :
          new bn$5(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;

      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;

      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0)
        continue;

      var s = k.invm(this.n).mul(r.mul(key$$1.getPrivate()).iadd(msg));
      s = s.umod(this.n);
      if (s.cmpn(0) === 0)
        continue;

      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                          (kpX.cmp(r) !== 0 ? 2 : 0);

      // Use complement of `s`, if it is > `n / 2`
      if (options.canonical && s.cmp(this.nh) > 0) {
        s = this.n.sub(s);
        recoveryParam ^= 1;
      }

      return new signature({ r: r, s: s, recoveryParam: recoveryParam });
    }
  };

  EC.prototype.verify = function verify(msg, signature$$1, key$$1, enc) {
    msg = this._truncateToN(new bn$5(msg, 16));
    key$$1 = this.keyFromPublic(key$$1, enc);
    signature$$1 = new signature(signature$$1, 'hex');

    // Perform primitive values validation
    var r = signature$$1.r;
    var s = signature$$1.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
      return false;

    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);

    if (!this.curve._maxwellTrick) {
      var p = this.g.mulAdd(u1, key$$1.getPublic(), u2);
      if (p.isInfinity())
        return false;

      return p.getX().umod(this.n).cmp(r) === 0;
    }

    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K

    var p = this.g.jmulAdd(u1, key$$1.getPublic(), u2);
    if (p.isInfinity())
      return false;

    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
  };

  EC.prototype.recoverPubKey = function(msg, signature$$1, j, enc) {
    assert$7((3 & j) === j, 'The recovery param is more than two bits');
    signature$$1 = new signature(signature$$1, enc);

    var n = this.n;
    var e = new bn$5(msg);
    var r = signature$$1.r;
    var s = signature$$1.s;

    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error('Unable to find sencond key candinate');

    // 1.1. Let x = r + jn.
    if (isSecondKey)
      r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
      r = this.curve.pointFromX(r, isYOdd);

    var rInv = signature$$1.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);

    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
  };

  EC.prototype.getKeyRecoveryParam = function(e, signature$$1, Q, enc) {
    signature$$1 = new signature(signature$$1, enc);
    if (signature$$1.recoveryParam !== null)
      return signature$$1.recoveryParam;

    for (var i = 0; i < 4; i++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature$$1, i);
      } catch (e) {
        continue;
      }

      if (Qprime.eq(Q))
        return i;
    }
    throw new Error('Unable to find valid recovery factor');
  };

  var utils$7 = elliptic_1.utils;
  var assert$8 = utils$7.assert;
  var parseBytes = utils$7.parseBytes;
  var cachedProperty = utils$7.cachedProperty;

  /**
  * @param {EDDSA} eddsa - instance
  * @param {Object} params - public/private key parameters
  *
  * @param {Array<Byte>} [params.secret] - secret seed bytes
  * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
  * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
  *
  */
  function KeyPair$1(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes(params.pub);
  }

  KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair$1)
      return pub;
    return new KeyPair$1(eddsa, { pub: pub });
  };

  KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair$1)
      return secret;
    return new KeyPair$1(eddsa, { secret: secret });
  };

  KeyPair$1.prototype.secret = function secret() {
    return this._secret;
  };

  cachedProperty(KeyPair$1, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });

  cachedProperty(KeyPair$1, 'pub', function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });

  cachedProperty(KeyPair$1, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;

    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;

    return a;
  });

  cachedProperty(KeyPair$1, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });

  cachedProperty(KeyPair$1, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });

  cachedProperty(KeyPair$1, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });

  KeyPair$1.prototype.sign = function sign(message) {
    assert$8(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
  };

  KeyPair$1.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };

  KeyPair$1.prototype.getSecret = function getSecret(enc) {
    assert$8(this._secret, 'KeyPair is public only');
    return utils$7.encode(this.secret(), enc);
  };

  KeyPair$1.prototype.getPublic = function getPublic(enc) {
    return utils$7.encode(this.pubBytes(), enc);
  };

  var key$1 = KeyPair$1;

  var utils$8 = elliptic_1.utils;
  var assert$9 = utils$8.assert;
  var cachedProperty$1 = utils$8.cachedProperty;
  var parseBytes$1 = utils$8.parseBytes;

  /**
  * @param {EDDSA} eddsa - eddsa instance
  * @param {Array<Bytes>|Object} sig -
  * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
  * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
  * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
  * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
  */
  function Signature$1(eddsa, sig) {
    this.eddsa = eddsa;

    if (typeof sig !== 'object')
      sig = parseBytes$1(sig);

    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
      };
    }

    assert$9(sig.R && sig.S, 'Signature without R or S');

    if (eddsa.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof bn$5)
      this._S = sig.S;

    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }

  cachedProperty$1(Signature$1, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
  });

  cachedProperty$1(Signature$1, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
  });

  cachedProperty$1(Signature$1, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });

  cachedProperty$1(Signature$1, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });

  Signature$1.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };

  Signature$1.prototype.toHex = function toHex() {
    return utils$8.encode(this.toBytes(), 'hex').toUpperCase();
  };

  var signature$1 = Signature$1;

  var utils$9 = elliptic_1.utils;
  var assert$10 = utils$9.assert;
  var parseBytes$2 = utils$9.parseBytes;



  function EDDSA(curve) {
    assert$10(curve === 'ed25519', 'only tested with ed25519 so far');

    if (!(this instanceof EDDSA))
      return new EDDSA(curve);

    var curve = elliptic_1.curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);

    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash_1$1.sha512;
  }

  var eddsa = EDDSA;

  /**
  * @param {Array|String} message - message bytes
  * @param {Array|String|KeyPair} secret - secret bytes or a keypair
  * @returns {Signature} - signature
  */
  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes$2(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
                 .mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
  };

  /**
  * @param {Array} message - message bytes
  * @param {Array|String|Signature} sig - sig bytes
  * @param {Array|String|Point|KeyPair} pub - public key
  * @returns {Boolean} - true if public key matches sig of message
  */
  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes$2(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
  };

  EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for (var i = 0; i < arguments.length; i++)
      hash.update(arguments[i]);
    return utils$9.intFromLE(hash.digest()).umod(this.curve.n);
  };

  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return key$1.fromPublic(this, pub);
  };

  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return key$1.fromSecret(this, secret);
  };

  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof signature$1)
      return sig;
    return new signature$1(this, sig);
  };

  /**
  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
  *
  * EDDSA defines methods for encoding and decoding points and integers. These are
  * helper convenience methods, that pass along to utility functions implied
  * parameters.
  *
  */
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
  };

  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils$9.parseBytes(bytes);

    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

    var y = utils$9.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };

  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
  };

  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils$9.intFromLE(bytes);
  };

  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };

  var require$$0$1 = ( _package$3 && _package$2 ) || _package$3;

  var elliptic_1 = createCommonjsModule(function (module, exports) {

  var elliptic = exports;

  elliptic.version = require$$0$1.version;
  elliptic.utils = utils_1$2;
  elliptic.rand = brorand;
  elliptic.curve = curve_1;
  elliptic.curves = curves_1;

  // Protocols
  elliptic.ec = ec;
  elliptic.eddsa = eddsa;
  });

  // The RLP format
  // Serialization and deserialization for the BytesTree type, under the following grammar:
  // | First byte | Meaning                                                                    |
  // | ---------- | -------------------------------------------------------------------------- |
  // | 0   to 127 | HEX(leaf)                                                                  |
  // | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |
  // | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |
  // | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |
  // | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |

  var encode = function encode(tree) {
    var padEven = function padEven(str) {
      return str.length % 2 === 0 ? str : "0" + str;
    };

    var uint = function uint(num) {
      return padEven(num.toString(16));
    };

    var length = function length(len, add) {
      return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);
    };

    var dataTree = function dataTree(tree) {
      if (typeof tree === "string") {
        var hex = tree.slice(2);
        var pre = hex.length != 2 || hex >= "80" ? length(hex.length / 2, 128) : "";
        return pre + hex;
      } else {
        var _hex = tree.map(dataTree).join("");
        var _pre = length(_hex.length / 2, 192);
        return _pre + _hex;
      }
    };

    return "0x" + dataTree(tree);
  };

  var decode = function decode(hex) {
    var i = 2;

    var parseTree = function parseTree() {
      if (i >= hex.length) throw "";
      var head = hex.slice(i, i + 2);
      return head < "80" ? (i += 2, "0x" + head) : head < "c0" ? parseHex() : parseList();
    };

    var parseLength = function parseLength() {
      var len = parseInt(hex.slice(i, i += 2), 16) % 64;
      return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);
    };

    var parseHex = function parseHex() {
      var len = parseLength();
      return "0x" + hex.slice(i, i += len * 2);
    };

    var parseList = function parseList() {
      var lim = parseLength() * 2 + i;
      var list = [];
      while (i < lim) {
        list.push(parseTree());
      }return list;
    };

    try {
      return parseTree();
    } catch (e) {
      return [];
    }
  };

  var rlp = { encode: encode, decode: decode };

  // This was ported from https://github.com/emn178/js-sha3, with some minor
  // modifications and pruning. It is licensed under MIT:
  //
  // Copyright 2015-2016 Chen, Yi-Cyuan
  //  
  // Permission is hereby granted, free of charge, to any person obtaining
  // a copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to
  // permit persons to whom the Software is furnished to do so, subject to
  // the following conditions:
  // 
  // The above copyright notice and this permission notice shall be
  // included in all copies or substantial portions of the Software.
  // 
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  var HEX_CHARS$1 = '0123456789abcdef'.split('');
  var KECCAK_PADDING$1 = [1, 256, 65536, 16777216];
  var SHIFT$1 = [0, 8, 16, 24];
  var RC$1 = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

  var Keccak$1 = function Keccak(bits) {
    return {
      blocks: [],
      reset: true,
      block: 0,
      start: 0,
      blockCount: 1600 - (bits << 1) >> 5,
      outputBlocks: bits >> 5,
      s: function (s) {
        return [].concat(s, s, s, s, s);
      }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    };
  };

  var update$1 = function update(state, message) {
    var length = message.length,
        blocks = state.blocks,
        byteCount = state.blockCount << 2,
        blockCount = state.blockCount,
        outputBlocks = state.outputBlocks,
        s = state.s,
        index = 0,
        i,
        code;

    // update
    while (index < length) {
      if (state.reset) {
        state.reset = false;
        blocks[0] = state.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (typeof message !== "string") {
        for (i = state.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT$1[i++ & 3];
        }
      } else {
        for (i = state.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT$1[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT$1[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT$1[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT$1[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT$1[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT$1[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT$1[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT$1[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT$1[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT$1[i++ & 3];
          }
        }
      }
      state.lastByteIndex = i;
      if (i >= byteCount) {
        state.start = i - byteCount;
        state.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f$2(s);
        state.reset = true;
      } else {
        state.start = i;
      }
    }

    // finalize
    i = state.lastByteIndex;
    blocks[i >> 2] |= KECCAK_PADDING$1[i & 3];
    if (state.lastByteIndex === byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f$2(s);

    // toString
    var hex = '',
        i = 0,
        j = 0,
        block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS$1[block >> 4 & 0x0F] + HEX_CHARS$1[block & 0x0F] + HEX_CHARS$1[block >> 12 & 0x0F] + HEX_CHARS$1[block >> 8 & 0x0F] + HEX_CHARS$1[block >> 20 & 0x0F] + HEX_CHARS$1[block >> 16 & 0x0F] + HEX_CHARS$1[block >> 28 & 0x0F] + HEX_CHARS$1[block >> 24 & 0x0F];
      }
      if (j % blockCount === 0) {
        f$2(s);
        i = 0;
      }
    }
    return "0x" + hex;
  };

  var f$2 = function f(s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ (c2 << 1 | c3 >>> 31);
      l = c9 ^ (c3 << 1 | c2 >>> 31);
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ (c4 << 1 | c5 >>> 31);
      l = c1 ^ (c5 << 1 | c4 >>> 31);
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ (c6 << 1 | c7 >>> 31);
      l = c3 ^ (c7 << 1 | c6 >>> 31);
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ (c8 << 1 | c9 >>> 31);
      l = c5 ^ (c9 << 1 | c8 >>> 31);
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ (c0 << 1 | c1 >>> 31);
      l = c7 ^ (c1 << 1 | c0 >>> 31);
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = s[11] << 4 | s[10] >>> 28;
      b33 = s[10] << 4 | s[11] >>> 28;
      b14 = s[20] << 3 | s[21] >>> 29;
      b15 = s[21] << 3 | s[20] >>> 29;
      b46 = s[31] << 9 | s[30] >>> 23;
      b47 = s[30] << 9 | s[31] >>> 23;
      b28 = s[40] << 18 | s[41] >>> 14;
      b29 = s[41] << 18 | s[40] >>> 14;
      b20 = s[2] << 1 | s[3] >>> 31;
      b21 = s[3] << 1 | s[2] >>> 31;
      b2 = s[13] << 12 | s[12] >>> 20;
      b3 = s[12] << 12 | s[13] >>> 20;
      b34 = s[22] << 10 | s[23] >>> 22;
      b35 = s[23] << 10 | s[22] >>> 22;
      b16 = s[33] << 13 | s[32] >>> 19;
      b17 = s[32] << 13 | s[33] >>> 19;
      b48 = s[42] << 2 | s[43] >>> 30;
      b49 = s[43] << 2 | s[42] >>> 30;
      b40 = s[5] << 30 | s[4] >>> 2;
      b41 = s[4] << 30 | s[5] >>> 2;
      b22 = s[14] << 6 | s[15] >>> 26;
      b23 = s[15] << 6 | s[14] >>> 26;
      b4 = s[25] << 11 | s[24] >>> 21;
      b5 = s[24] << 11 | s[25] >>> 21;
      b36 = s[34] << 15 | s[35] >>> 17;
      b37 = s[35] << 15 | s[34] >>> 17;
      b18 = s[45] << 29 | s[44] >>> 3;
      b19 = s[44] << 29 | s[45] >>> 3;
      b10 = s[6] << 28 | s[7] >>> 4;
      b11 = s[7] << 28 | s[6] >>> 4;
      b42 = s[17] << 23 | s[16] >>> 9;
      b43 = s[16] << 23 | s[17] >>> 9;
      b24 = s[26] << 25 | s[27] >>> 7;
      b25 = s[27] << 25 | s[26] >>> 7;
      b6 = s[36] << 21 | s[37] >>> 11;
      b7 = s[37] << 21 | s[36] >>> 11;
      b38 = s[47] << 24 | s[46] >>> 8;
      b39 = s[46] << 24 | s[47] >>> 8;
      b30 = s[8] << 27 | s[9] >>> 5;
      b31 = s[9] << 27 | s[8] >>> 5;
      b12 = s[18] << 20 | s[19] >>> 12;
      b13 = s[19] << 20 | s[18] >>> 12;
      b44 = s[29] << 7 | s[28] >>> 25;
      b45 = s[28] << 7 | s[29] >>> 25;
      b26 = s[38] << 8 | s[39] >>> 24;
      b27 = s[39] << 8 | s[38] >>> 24;
      b8 = s[48] << 14 | s[49] >>> 18;
      b9 = s[49] << 14 | s[48] >>> 18;

      s[0] = b0 ^ ~b2 & b4;
      s[1] = b1 ^ ~b3 & b5;
      s[10] = b10 ^ ~b12 & b14;
      s[11] = b11 ^ ~b13 & b15;
      s[20] = b20 ^ ~b22 & b24;
      s[21] = b21 ^ ~b23 & b25;
      s[30] = b30 ^ ~b32 & b34;
      s[31] = b31 ^ ~b33 & b35;
      s[40] = b40 ^ ~b42 & b44;
      s[41] = b41 ^ ~b43 & b45;
      s[2] = b2 ^ ~b4 & b6;
      s[3] = b3 ^ ~b5 & b7;
      s[12] = b12 ^ ~b14 & b16;
      s[13] = b13 ^ ~b15 & b17;
      s[22] = b22 ^ ~b24 & b26;
      s[23] = b23 ^ ~b25 & b27;
      s[32] = b32 ^ ~b34 & b36;
      s[33] = b33 ^ ~b35 & b37;
      s[42] = b42 ^ ~b44 & b46;
      s[43] = b43 ^ ~b45 & b47;
      s[4] = b4 ^ ~b6 & b8;
      s[5] = b5 ^ ~b7 & b9;
      s[14] = b14 ^ ~b16 & b18;
      s[15] = b15 ^ ~b17 & b19;
      s[24] = b24 ^ ~b26 & b28;
      s[25] = b25 ^ ~b27 & b29;
      s[34] = b34 ^ ~b36 & b38;
      s[35] = b35 ^ ~b37 & b39;
      s[44] = b44 ^ ~b46 & b48;
      s[45] = b45 ^ ~b47 & b49;
      s[6] = b6 ^ ~b8 & b0;
      s[7] = b7 ^ ~b9 & b1;
      s[16] = b16 ^ ~b18 & b10;
      s[17] = b17 ^ ~b19 & b11;
      s[26] = b26 ^ ~b28 & b20;
      s[27] = b27 ^ ~b29 & b21;
      s[36] = b36 ^ ~b38 & b30;
      s[37] = b37 ^ ~b39 & b31;
      s[46] = b46 ^ ~b48 & b40;
      s[47] = b47 ^ ~b49 & b41;
      s[8] = b8 ^ ~b0 & b2;
      s[9] = b9 ^ ~b1 & b3;
      s[18] = b18 ^ ~b10 & b12;
      s[19] = b19 ^ ~b11 & b13;
      s[28] = b28 ^ ~b20 & b22;
      s[29] = b29 ^ ~b21 & b23;
      s[38] = b38 ^ ~b30 & b32;
      s[39] = b39 ^ ~b31 & b33;
      s[48] = b48 ^ ~b40 & b42;
      s[49] = b49 ^ ~b41 & b43;

      s[0] ^= RC$1[n];
      s[1] ^= RC$1[n + 1];
    }
  };

  var keccak$1 = function keccak(bits) {
    return function (str) {
      var msg;
      if (str.slice(0, 2) === "0x") {
        msg = [];
        for (var i = 2, l = str.length; i < l; i += 2) {
          msg.push(parseInt(str.slice(i, i + 2), 16));
        }
      } else {
        msg = str;
      }
      return update$1(Keccak$1(bits, bits), msg);
    };
  };

  var hash$1 = {
    keccak256: keccak$1(256),
    keccak512: keccak$1(512),
    keccak256s: keccak$1(256),
    keccak512s: keccak$1(512)
  };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();





  var secp256k1$1 = new elliptic_1.ec("secp256k1"); // eslint-disable-line

  var keccak256 = hash$1.keccak256,
      keccak256s = hash$1.keccak256s;

  var create = function create(entropy) {
    var innerHex = keccak256(bytes$1.concat(bytes$1.random(32), entropy || bytes$1.random(32)));
    var middleHex = bytes$1.concat(bytes$1.concat(bytes$1.random(32), innerHex), bytes$1.random(32));
    var outerHex = keccak256(middleHex);
    return fromPrivate(outerHex);
  };

  var toChecksum = function toChecksum(address) {
    var addressHash = keccak256s(address.slice(2));
    var checksumAddress = "0x";
    for (var i = 0; i < 40; i++) {
      checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];
    }return checksumAddress;
  };

  var fromPrivate = function fromPrivate(privateKey) {
    var buffer$$1 = new Buffer(privateKey.slice(2), "hex");
    var ecKey = secp256k1$1.keyFromPrivate(buffer$$1);
    var publicKey = "0x" + ecKey.getPublic(false, 'hex').slice(2);
    var publicHash = keccak256(publicKey);
    var address = toChecksum("0x" + publicHash.slice(-40));
    return {
      address: address,
      privateKey: privateKey
    };
  };

  var encodeSignature = function encodeSignature(_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
        v = _ref2[0],
        r = bytes$1.pad(32, _ref2[1]),
        s = bytes$1.pad(32, _ref2[2]);

    return bytes$1.flatten([r, s, v]);
  };

  var decodeSignature = function decodeSignature(hex) {
    return [bytes$1.slice(64, bytes$1.length(hex), hex), bytes$1.slice(0, 32, hex), bytes$1.slice(32, 64, hex)];
  };

  var makeSigner = function makeSigner(addToV) {
    return function (hash, privateKey) {
      var signature = secp256k1$1.keyFromPrivate(new Buffer(privateKey.slice(2), "hex")).sign(new Buffer(hash.slice(2), "hex"), { canonical: true });
      return encodeSignature([nat.fromString(bytes$1.fromNumber(addToV + signature.recoveryParam)), bytes$1.pad(32, bytes$1.fromNat("0x" + signature.r.toString(16))), bytes$1.pad(32, bytes$1.fromNat("0x" + signature.s.toString(16)))]);
    };
  };

  var sign = makeSigner(27); // v=27|28 instead of 0|1...

  var recover = function recover(hash, signature) {
    var vals = decodeSignature(signature);
    var vrs = { v: bytes$1.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };
    var ecPublicKey = secp256k1$1.recoverPubKey(new Buffer(hash.slice(2), "hex"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that
    var publicKey = "0x" + ecPublicKey.encode("hex", false).slice(2);
    var publicHash = keccak256(publicKey);
    var address = toChecksum("0x" + publicHash.slice(-40));
    return address;
  };

  var account = {
    create: create,
    toChecksum: toChecksum,
    fromPrivate: fromPrivate,
    sign: sign,
    makeSigner: makeSigner,
    recover: recover,
    encodeSignature: encodeSignature,
    decodeSignature: decodeSignature
  };

  var randombytes = crypto.randomBytes;

  var createHash = crypto.createHash;

  var createHmac = crypto.createHmac;

  var sha224WithRSAEncryption = {"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"};
  var sha256WithRSAEncryption = {"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"};
  var sha384WithRSAEncryption = {"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"};
  var sha512WithRSAEncryption = {"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"};
  var sha256$1 = {"sign":"ecdsa","hash":"sha256","id":""};
  var sha224$1 = {"sign":"ecdsa","hash":"sha224","id":""};
  var sha384$1 = {"sign":"ecdsa","hash":"sha384","id":""};
  var sha512$1 = {"sign":"ecdsa","hash":"sha512","id":""};
  var DSA = {"sign":"dsa","hash":"sha1","id":""};
  var ripemd160WithRSA = {"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"};
  var md5WithRSAEncryption = {"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"};
  var algorithms = {
  	sha224WithRSAEncryption: sha224WithRSAEncryption,
  	sha256WithRSAEncryption: sha256WithRSAEncryption,
  	sha384WithRSAEncryption: sha384WithRSAEncryption,
  	sha512WithRSAEncryption: sha512WithRSAEncryption,
  	sha256: sha256$1,
  	sha224: sha224$1,
  	sha384: sha384$1,
  	sha512: sha512$1,
  	DSA: DSA,
  	ripemd160WithRSA: ripemd160WithRSA,
  	md5WithRSAEncryption: md5WithRSAEncryption,
  	"RSA-SHA224": {"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},
  	"RSA-SHA256": {"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},
  	"RSA-SHA384": {"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},
  	"RSA-SHA512": {"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},
  	"RSA-SHA1": {"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},
  	"ecdsa-with-SHA1": {"sign":"ecdsa","hash":"sha1","id":""},
  	"DSA-SHA": {"sign":"dsa","hash":"sha1","id":""},
  	"DSA-SHA1": {"sign":"dsa","hash":"sha1","id":""},
  	"DSA-WITH-SHA224": {"sign":"dsa","hash":"sha224","id":""},
  	"DSA-SHA224": {"sign":"dsa","hash":"sha224","id":""},
  	"DSA-WITH-SHA256": {"sign":"dsa","hash":"sha256","id":""},
  	"DSA-SHA256": {"sign":"dsa","hash":"sha256","id":""},
  	"DSA-WITH-SHA384": {"sign":"dsa","hash":"sha384","id":""},
  	"DSA-SHA384": {"sign":"dsa","hash":"sha384","id":""},
  	"DSA-WITH-SHA512": {"sign":"dsa","hash":"sha512","id":""},
  	"DSA-SHA512": {"sign":"dsa","hash":"sha512","id":""},
  	"DSA-RIPEMD160": {"sign":"dsa","hash":"rmd160","id":""},
  	"RSA-RIPEMD160": {"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},
  	"RSA-MD5": {"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}
  };

  var algorithms$1 = /*#__PURE__*/Object.freeze({
    sha224WithRSAEncryption: sha224WithRSAEncryption,
    sha256WithRSAEncryption: sha256WithRSAEncryption,
    sha384WithRSAEncryption: sha384WithRSAEncryption,
    sha512WithRSAEncryption: sha512WithRSAEncryption,
    sha256: sha256$1,
    sha224: sha224$1,
    sha384: sha384$1,
    sha512: sha512$1,
    DSA: DSA,
    ripemd160WithRSA: ripemd160WithRSA,
    md5WithRSAEncryption: md5WithRSAEncryption,
    default: algorithms
  });

  var require$$0$2 = ( algorithms$1 && algorithms ) || algorithms$1;

  var algos = require$$0$2;

  var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs
  var precondition = function (iterations, keylen) {
    if (typeof iterations !== 'number') {
      throw new TypeError('Iterations not a number')
    }

    if (iterations < 0) {
      throw new TypeError('Bad iterations')
    }

    if (typeof keylen !== 'number') {
      throw new TypeError('Key length not a number')
    }

    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
      throw new TypeError('Bad key length')
    }
  };

  var defaultEncoding;
  /* istanbul ignore next */
  if (process.browser) {
    defaultEncoding = 'utf-8';
  } else {
    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);

    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
  }
  var defaultEncoding_1 = defaultEncoding;

  var safeBuffer = createCommonjsModule(function (module, exports) {
  /* eslint-disable node/no-deprecated-api */

  var Buffer = buffer.Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return buffer.SlowBuffer(size)
  };
  });
  var safeBuffer_1 = safeBuffer.Buffer;

  var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  };




  var Buffer$1 = safeBuffer.Buffer;

  function pbkdf2 (password, salt, iterations, keylen, digest) {
    if (!Buffer$1.isBuffer(password)) password = Buffer$1.from(password, defaultEncoding_1);
    if (!Buffer$1.isBuffer(salt)) salt = Buffer$1.from(salt, defaultEncoding_1);

    precondition(iterations, keylen);
    digest = digest || 'sha1';

    var DK = Buffer$1.allocUnsafe(keylen);
    var block1 = Buffer$1.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);

    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);

    for (var i = 1; i <= l; i++) {
      block1.writeUInt32BE(i, salt.length);

      var T = createHmac(digest, password).update(block1).digest();
      var U = T;

      for (var j = 1; j < iterations; j++) {
        U = createHmac(digest, password).update(U).digest();
        for (var k = 0; k < hLen; k++) T[k] ^= U[k];
      }

      T.copy(DK, destPos);
      destPos += hLen;
    }

    return DK
  }

  var sync = pbkdf2;

  var Buffer$2 = safeBuffer.Buffer;

  var ZERO_BUF;
  var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
  var toBrowser = {
    'sha': 'SHA-1',
    'sha-1': 'SHA-1',
    'sha1': 'SHA-1',
    'sha256': 'SHA-256',
    'sha-256': 'SHA-256',
    'sha384': 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    'sha512': 'SHA-512'
  };
  var checks = [];
  function checkNative (algo) {
    if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
      return Promise.resolve(false)
    }
    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
      return Promise.resolve(false)
    }
    if (checks[algo] !== undefined) {
      return checks[algo]
    }
    ZERO_BUF = ZERO_BUF || Buffer$2.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
      .then(function () {
        return true
      }).catch(function () {
        return false
      });
    checks[algo] = prom;
    return prom
  }
  function browserPbkdf2 (password, salt, iterations, length, algo) {
    return subtle.importKey(
      'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
    ).then(function (key) {
      return subtle.deriveBits({
        name: 'PBKDF2',
        salt: salt,
        iterations: iterations,
        hash: {
          name: algo
        }
      }, key, length << 3)
    }).then(function (res) {
      return Buffer$2.from(res)
    })
  }
  function resolvePromise (promise, callback) {
    promise.then(function (out) {
      process.nextTick(function () {
        callback(null, out);
      });
    }, function (e) {
      process.nextTick(function () {
        callback(e);
      });
    });
  }
  var async = function (password, salt, iterations, keylen, digest, callback) {
    if (!Buffer$2.isBuffer(password)) password = Buffer$2.from(password, defaultEncoding_1);
    if (!Buffer$2.isBuffer(salt)) salt = Buffer$2.from(salt, defaultEncoding_1);

    precondition(iterations, keylen);
    if (typeof digest === 'function') {
      callback = digest;
      digest = undefined;
    }
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

    digest = digest || 'sha1';
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof commonjsGlobal.Promise !== 'function') {
      return process.nextTick(function () {
        var out;
        try {
          out = sync(password, salt, iterations, keylen, digest);
        } catch (e) {
          return callback(e)
        }
        callback(null, out);
      })
    }
    resolvePromise(checkNative(algo).then(function (resp) {
      if (resp) {
        return browserPbkdf2(password, salt, iterations, keylen, algo)
      } else {
        return sync(password, salt, iterations, keylen, digest)
      }
    }), callback);
  };

  var pbkdf2$1 = createCommonjsModule(function (module, exports) {
  /* istanbul ignore next */
  if (crypto && (!crypto.pbkdf2Sync || crypto.pbkdf2Sync.toString().indexOf('keylen, digest') === -1)) {
    exports.pbkdf2 = async;
    exports.pbkdf2Sync = sync;
  } else {
    exports.pbkdf2Sync = crypto.pbkdf2Sync;
    exports.pbkdf2 = crypto.pbkdf2;
  }
  });
  var pbkdf2_1 = pbkdf2$1.pbkdf2;
  var pbkdf2_2 = pbkdf2$1.pbkdf2Sync;

  var browserifyCipher = createCommonjsModule(function (module, exports) {
  exports.createCipher = exports.Cipher = crypto.createCipher;
  exports.createCipheriv = exports.Cipheriv = crypto.createCipheriv;
  exports.createDecipher = exports.Decipher = crypto.createDecipher;
  exports.createDecipheriv = exports.Decipheriv = crypto.createDecipheriv;
  exports.listCiphers = exports.getCiphers = crypto.getCiphers;
  });
  var browserifyCipher_1 = browserifyCipher.createCipher;
  var browserifyCipher_2 = browserifyCipher.Cipher;
  var browserifyCipher_3 = browserifyCipher.createCipheriv;
  var browserifyCipher_4 = browserifyCipher.Cipheriv;
  var browserifyCipher_5 = browserifyCipher.createDecipher;
  var browserifyCipher_6 = browserifyCipher.Decipher;
  var browserifyCipher_7 = browserifyCipher.createDecipheriv;
  var browserifyCipher_8 = browserifyCipher.Decipheriv;
  var browserifyCipher_9 = browserifyCipher.listCiphers;
  var browserifyCipher_10 = browserifyCipher.getCiphers;

  // getDiffieHellman
  var DiffieHellmanGroup = crypto.DiffieHellmanGroup;
  var createDiffieHellmanGroup = crypto.createDiffieHellmanGroup;
  var getDiffieHellman = crypto.getDiffieHellman;

  // createDiffieHellman
  var createDiffieHellman = crypto.createDiffieHellman;
  var DiffieHellman = crypto.DiffieHellman;

  var diffieHellman = {
  	DiffieHellmanGroup: DiffieHellmanGroup,
  	createDiffieHellmanGroup: createDiffieHellmanGroup,
  	getDiffieHellman: getDiffieHellman,
  	createDiffieHellman: createDiffieHellman,
  	DiffieHellman: DiffieHellman
  };

  var createSign = crypto.createSign;
  var Sign = crypto.Sign;

  var createVerify = crypto.createVerify;
  var Verify = crypto.Verify;

  var browserifySign = {
  	createSign: createSign,
  	Sign: Sign,
  	createVerify: createVerify,
  	Verify: Verify
  };

  var browser = function createECDH(curve) {
  	return new ECDH(curve);
  };

  var aliases = {
  	secp256k1: {
  		name: 'secp256k1',
  		byteLength: 32
  	},
  	secp224r1: {
  		name: 'p224',
  		byteLength: 28
  	},
  	prime256v1: {
  		name: 'p256',
  		byteLength: 32
  	},
  	prime192v1: {
  		name: 'p192',
  		byteLength: 24
  	},
  	ed25519: {
  		name: 'ed25519',
  		byteLength: 32
  	},
  	secp384r1: {
  		name: 'p384',
  		byteLength: 48
  	},
  	secp521r1: {
  		name: 'p521',
  		byteLength: 66
  	}
  };

  aliases.p224 = aliases.secp224r1;
  aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
  aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
  aliases.p384 = aliases.secp384r1;
  aliases.p521 = aliases.secp521r1;

  function ECDH(curve) {
  	this.curveType = aliases[curve];
  	if (!this.curveType ) {
  		this.curveType = {
  			name: curve
  		};
  	}
  	this.curve = new elliptic_1.ec(this.curveType.name);
  	this.keys = void 0;
  }

  ECDH.prototype.generateKeys = function (enc, format) {
  	this.keys = this.curve.genKeyPair();
  	return this.getPublicKey(enc, format);
  };

  ECDH.prototype.computeSecret = function (other, inenc, enc) {
  	inenc = inenc || 'utf8';
  	if (!Buffer.isBuffer(other)) {
  		other = new Buffer(other, inenc);
  	}
  	var otherPub = this.curve.keyFromPublic(other).getPublic();
  	var out = otherPub.mul(this.keys.getPrivate()).getX();
  	return formatReturnValue(out, enc, this.curveType.byteLength);
  };

  ECDH.prototype.getPublicKey = function (enc, format) {
  	var key = this.keys.getPublic(format === 'compressed', true);
  	if (format === 'hybrid') {
  		if (key[key.length - 1] % 2) {
  			key[0] = 7;
  		} else {
  			key [0] = 6;
  		}
  	}
  	return formatReturnValue(key, enc);
  };

  ECDH.prototype.getPrivateKey = function (enc) {
  	return formatReturnValue(this.keys.getPrivate(), enc);
  };

  ECDH.prototype.setPublicKey = function (pub, enc) {
  	enc = enc || 'utf8';
  	if (!Buffer.isBuffer(pub)) {
  		pub = new Buffer(pub, enc);
  	}
  	this.keys._importPublic(pub);
  	return this;
  };

  ECDH.prototype.setPrivateKey = function (priv, enc) {
  	enc = enc || 'utf8';
  	if (!Buffer.isBuffer(priv)) {
  		priv = new Buffer(priv, enc);
  	}
  	var _priv = new bn$5(priv);
  	_priv = _priv.toString(16);
  	this.keys._importPrivate(_priv);
  	return this;
  };

  function formatReturnValue(bn, enc, len) {
  	if (!Array.isArray(bn)) {
  		bn = bn.toArray();
  	}
  	var buf = new Buffer(bn);
  	if (len && buf.length < len) {
  		var zeros = new Buffer(len - buf.length);
  		zeros.fill(0);
  		buf = Buffer.concat([zeros, buf]);
  	}
  	if (!enc) {
  		return buf;
  	} else {
  		return buf.toString(enc);
  	}
  }

  var createECDH = crypto.createECDH;

  var createEcdh = createECDH || browser;

  var api_1 = createCommonjsModule(function (module, exports) {
  var api = exports;

  api.define = function define(name, body) {
    return new Entity(name, body);
  };

  function Entity(name, body) {
    this.name = name;
    this.body = body;

    this.decoders = {};
    this.encoders = {};
  }
  Entity.prototype._createNamed = function createNamed(base) {
    var named;
    try {
      named = vm.runInThisContext(
        '(function ' + this.name + '(entity) {\n' +
        '  this._initNamed(entity);\n' +
        '})'
      );
    } catch (e) {
      named = function (entity) {
        this._initNamed(entity);
      };
    }
    inherits(named, base);
    named.prototype._initNamed = function initnamed(entity) {
      base.call(this, entity);
    };

    return new named(this);
  };

  Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc))
      this.decoders[enc] = this._createNamed(asn1_1.decoders[enc]);
    return this.decoders[enc];
  };

  Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
  };

  Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc))
      this.encoders[enc] = this._createNamed(asn1_1.encoders[enc]);
    return this.encoders[enc];
  };

  Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
  };
  });

  function Reporter(options) {
    this._reporterState = {
      obj: null,
      path: [],
      options: options || {},
      errors: []
    };
  }
  var Reporter_1 = Reporter;

  Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
  };

  Reporter.prototype.save = function save() {
    var state = this._reporterState;

    return { obj: state.obj, pathLen: state.path.length };
  };

  Reporter.prototype.restore = function restore(data) {
    var state = this._reporterState;

    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
  };

  Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
  };

  Reporter.prototype.exitKey = function exitKey(index) {
    var state = this._reporterState;

    state.path = state.path.slice(0, index - 1);
  };

  Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    var state = this._reporterState;

    this.exitKey(index);
    if (state.obj !== null)
      state.obj[key] = value;
  };

  Reporter.prototype.path = function path$$1() {
    return this._reporterState.path.join('/');
  };

  Reporter.prototype.enterObject = function enterObject() {
    var state = this._reporterState;

    var prev = state.obj;
    state.obj = {};
    return prev;
  };

  Reporter.prototype.leaveObject = function leaveObject(prev) {
    var state = this._reporterState;

    var now = state.obj;
    state.obj = prev;
    return now;
  };

  Reporter.prototype.error = function error(msg) {
    var err;
    var state = this._reporterState;

    var inherited = msg instanceof ReporterError;
    if (inherited) {
      err = msg;
    } else {
      err = new ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
      }).join(''), msg.message || msg, msg.stack);
    }

    if (!state.options.partial)
      throw err;

    if (!inherited)
      state.errors.push(err);

    return err;
  };

  Reporter.prototype.wrapResult = function wrapResult(result) {
    var state = this._reporterState;
    if (!state.options.partial)
      return result;

    return {
      result: this.isError(result) ? null : result,
      errors: state.errors
    };
  };

  function ReporterError(path$$1, msg) {
    this.path = path$$1;
    this.rethrow(msg);
  }inherits(ReporterError, Error);

  ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ReporterError);

    if (!this.stack) {
      try {
        // IE only adds stack when thrown
        throw new Error(this.message);
      } catch (e) {
        this.stack = e.stack;
      }
    }
    return this;
  };

  var reporter = {
  	Reporter: Reporter_1
  };

  var Reporter$1 = base_1.Reporter;
  var Buffer$3 = buffer.Buffer;

  function DecoderBuffer(base, options) {
    Reporter$1.call(this, options);
    if (!Buffer$3.isBuffer(base)) {
      this.error('Input not Buffer');
      return;
    }

    this.base = base;
    this.offset = 0;
    this.length = base.length;
  }
  inherits(DecoderBuffer, Reporter$1);
  var DecoderBuffer_1 = DecoderBuffer;

  DecoderBuffer.prototype.save = function save() {
    return { offset: this.offset, reporter: Reporter$1.prototype.save.call(this) };
  };

  DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    var res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;

    this.offset = save.offset;
    Reporter$1.prototype.restore.call(this, save.reporter);

    return res;
  };

  DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
  };

  DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length)
      return this.base.readUInt8(this.offset++, true);
    else
      return this.error(fail || 'DecoderBuffer overrun');
  };

  DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length))
      return this.error(fail || 'DecoderBuffer overrun');

    var res = new DecoderBuffer(this.base);

    // Share reporter state
    res._reporterState = this._reporterState;

    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
  };

  DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
  };

  function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
      this.length = 0;
      this.value = value.map(function(item) {
        if (!(item instanceof EncoderBuffer))
          item = new EncoderBuffer(item, reporter);
        this.length += item.length;
        return item;
      }, this);
    } else if (typeof value === 'number') {
      if (!(0 <= value && value <= 0xff))
        return reporter.error('non-byte EncoderBuffer value');
      this.value = value;
      this.length = 1;
    } else if (typeof value === 'string') {
      this.value = value;
      this.length = Buffer$3.byteLength(value);
    } else if (Buffer$3.isBuffer(value)) {
      this.value = value;
      this.length = value.length;
    } else {
      return reporter.error('Unsupported type: ' + typeof value);
    }
  }
  var EncoderBuffer_1 = EncoderBuffer;

  EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out)
      out = new Buffer$3(this.length);
    if (!offset)
      offset = 0;

    if (this.length === 0)
      return out;

    if (Array.isArray(this.value)) {
      this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
      });
    } else {
      if (typeof this.value === 'number')
        out[offset] = this.value;
      else if (typeof this.value === 'string')
        out.write(this.value, offset);
      else if (Buffer$3.isBuffer(this.value))
        this.value.copy(out, offset);
      offset += this.length;
    }

    return out;
  };

  var buffer$1 = {
  	DecoderBuffer: DecoderBuffer_1,
  	EncoderBuffer: EncoderBuffer_1
  };

  var Reporter$2 = base_1.Reporter;
  var EncoderBuffer$1 = base_1.EncoderBuffer;
  var DecoderBuffer$1 = base_1.DecoderBuffer;


  // Supported tags
  var tags = [
    'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
    'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
    'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
    'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
  ];

  // Public methods list
  var methods = [
    'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
    'any', 'contains'
  ].concat(tags);

  // Overrided methods list
  var overrided = [
    '_peekTag', '_decodeTag', '_use',
    '_decodeStr', '_decodeObjid', '_decodeTime',
    '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

    '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
    '_encodeNull', '_encodeInt', '_encodeBool'
  ];

  function Node(enc, parent) {
    var state = {};
    this._baseState = state;

    state.enc = enc;

    state.parent = parent || null;
    state.children = null;

    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;

    // Should create new instance on each method
    if (!state.parent) {
      state.children = [];
      this._wrap();
    }
  }
  var node = Node;

  var stateProps = [
    'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
    'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
    'implicit', 'contains'
  ];

  Node.prototype.clone = function clone() {
    var state = this._baseState;
    var cstate = {};
    stateProps.forEach(function(prop) {
      cstate[prop] = state[prop];
    });
    var res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
  };

  Node.prototype._wrap = function wrap() {
    var state = this._baseState;
    methods.forEach(function(method) {
      this[method] = function _wrappedMethod() {
        var clone = new this.constructor(this);
        state.children.push(clone);
        return clone[method].apply(clone, arguments);
      };
    }, this);
  };

  Node.prototype._init = function init(body) {
    var state = this._baseState;

    minimalisticAssert(state.parent === null);
    body.call(this);

    // Filter children
    state.children = state.children.filter(function(child) {
      return child._baseState.parent === this;
    }, this);
    minimalisticAssert.equal(state.children.length, 1, 'Root node can have only one child');
  };

  Node.prototype._useArgs = function useArgs(args) {
    var state = this._baseState;

    // Filter children and args
    var children = args.filter(function(arg) {
      return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
      return !(arg instanceof this.constructor);
    }, this);

    if (children.length !== 0) {
      minimalisticAssert(state.children === null);
      state.children = children;

      // Replace parent to maintain backward link
      children.forEach(function(child) {
        child._baseState.parent = this;
      }, this);
    }
    if (args.length !== 0) {
      minimalisticAssert(state.args === null);
      state.args = args;
      state.reverseArgs = args.map(function(arg) {
        if (typeof arg !== 'object' || arg.constructor !== Object)
          return arg;

        var res = {};
        Object.keys(arg).forEach(function(key) {
          if (key == (key | 0))
            key |= 0;
          var value = arg[key];
          res[value] = key;
        });
        return res;
      });
    }
  };

  //
  // Overrided methods
  //

  overrided.forEach(function(method) {
    Node.prototype[method] = function _overrided() {
      var state = this._baseState;
      throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
  });

  //
  // Public methods
  //

  tags.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);

      minimalisticAssert(state.tag === null);
      state.tag = tag;

      this._useArgs(args);

      return this;
    };
  });

  Node.prototype.use = function use(item) {
    minimalisticAssert(item);
    var state = this._baseState;

    minimalisticAssert(state.use === null);
    state.use = item;

    return this;
  };

  Node.prototype.optional = function optional() {
    var state = this._baseState;

    state.optional = true;

    return this;
  };

  Node.prototype.def = function def(val) {
    var state = this._baseState;

    minimalisticAssert(state['default'] === null);
    state['default'] = val;
    state.optional = true;

    return this;
  };

  Node.prototype.explicit = function explicit(num) {
    var state = this._baseState;

    minimalisticAssert(state.explicit === null && state.implicit === null);
    state.explicit = num;

    return this;
  };

  Node.prototype.implicit = function implicit(num) {
    var state = this._baseState;

    minimalisticAssert(state.explicit === null && state.implicit === null);
    state.implicit = num;

    return this;
  };

  Node.prototype.obj = function obj() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    state.obj = true;

    if (args.length !== 0)
      this._useArgs(args);

    return this;
  };

  Node.prototype.key = function key(newKey) {
    var state = this._baseState;

    minimalisticAssert(state.key === null);
    state.key = newKey;

    return this;
  };

  Node.prototype.any = function any() {
    var state = this._baseState;

    state.any = true;

    return this;
  };

  Node.prototype.choice = function choice(obj) {
    var state = this._baseState;

    minimalisticAssert(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
      return obj[key];
    }));

    return this;
  };

  Node.prototype.contains = function contains(item) {
    var state = this._baseState;

    minimalisticAssert(state.use === null);
    state.contains = item;

    return this;
  };

  //
  // Decoding
  //

  Node.prototype._decode = function decode(input, options) {
    var state = this._baseState;

    // Decode root node
    if (state.parent === null)
      return input.wrapResult(state.children[0]._decode(input, options));

    var result = state['default'];
    var present = true;

    var prevKey = null;
    if (state.key !== null)
      prevKey = input.enterKey(state.key);

    // Check if tag is there
    if (state.optional) {
      var tag = null;
      if (state.explicit !== null)
        tag = state.explicit;
      else if (state.implicit !== null)
        tag = state.implicit;
      else if (state.tag !== null)
        tag = state.tag;

      if (tag === null && !state.any) {
        // Trial and Error
        var save = input.save();
        try {
          if (state.choice === null)
            this._decodeGeneric(state.tag, input, options);
          else
            this._decodeChoice(input, options);
          present = true;
        } catch (e) {
          present = false;
        }
        input.restore(save);
      } else {
        present = this._peekTag(input, tag, state.any);

        if (input.isError(present))
          return present;
      }
    }

    // Push object on stack
    var prevObj;
    if (state.obj && present)
      prevObj = input.enterObject();

    if (present) {
      // Unwrap explicit values
      if (state.explicit !== null) {
        var explicit = this._decodeTag(input, state.explicit);
        if (input.isError(explicit))
          return explicit;
        input = explicit;
      }

      var start = input.offset;

      // Unwrap implicit and normal values
      if (state.use === null && state.choice === null) {
        if (state.any)
          var save = input.save();
        var body = this._decodeTag(
          input,
          state.implicit !== null ? state.implicit : state.tag,
          state.any
        );
        if (input.isError(body))
          return body;

        if (state.any)
          result = input.raw(save);
        else
          input = body;
      }

      if (options && options.track && state.tag !== null)
        options.track(input.path(), start, input.length, 'tagged');

      if (options && options.track && state.tag !== null)
        options.track(input.path(), input.offset, input.length, 'content');

      // Select proper method for tag
      if (state.any)
        result = result;
      else if (state.choice === null)
        result = this._decodeGeneric(state.tag, input, options);
      else
        result = this._decodeChoice(input, options);

      if (input.isError(result))
        return result;

      // Decode children
      if (!state.any && state.choice === null && state.children !== null) {
        state.children.forEach(function decodeChildren(child) {
          // NOTE: We are ignoring errors here, to let parser continue with other
          // parts of encoded data
          child._decode(input, options);
        });
      }

      // Decode contained/encoded by schema, only in bit or octet strings
      if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
        var data = new DecoderBuffer$1(result);
        result = this._getUse(state.contains, input._reporterState.obj)
            ._decode(data, options);
      }
    }

    // Pop object
    if (state.obj && present)
      result = input.leaveObject(prevObj);

    // Set key
    if (state.key !== null && (result !== null || present === true))
      input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null)
      input.exitKey(prevKey);

    return result;
  };

  Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    var state = this._baseState;

    if (tag === 'seq' || tag === 'set')
      return null;
    if (tag === 'seqof' || tag === 'setof')
      return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag))
      return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args)
      return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid')
      return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime')
      return this._decodeTime(input, tag, options);
    else if (tag === 'null_')
      return this._decodeNull(input, options);
    else if (tag === 'bool')
      return this._decodeBool(input, options);
    else if (tag === 'objDesc')
      return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum')
      return this._decodeInt(input, state.args && state.args[0], options);

    if (state.use !== null) {
      return this._getUse(state.use, input._reporterState.obj)
          ._decode(input, options);
    } else {
      return input.error('unknown tag: ' + tag);
    }
  };

  Node.prototype._getUse = function _getUse(entity, obj) {

    var state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    minimalisticAssert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
      state.useDecoder = state.useDecoder.clone();
      state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
  };

  Node.prototype._decodeChoice = function decodeChoice(input, options) {
    var state = this._baseState;
    var result = null;
    var match = false;

    Object.keys(state.choice).some(function(key) {
      var save = input.save();
      var node = state.choice[key];
      try {
        var value = node._decode(input, options);
        if (input.isError(value))
          return false;

        result = { type: key, value: value };
        match = true;
      } catch (e) {
        input.restore(save);
        return false;
      }
      return true;
    }, this);

    if (!match)
      return input.error('Choice not matched');

    return result;
  };

  //
  // Encoding
  //

  Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer$1(data, this.reporter);
  };

  Node.prototype._encode = function encode(data, reporter, parent) {
    var state = this._baseState;
    if (state['default'] !== null && state['default'] === data)
      return;

    var result = this._encodeValue(data, reporter, parent);
    if (result === undefined)
      return;

    if (this._skipDefault(result, reporter, parent))
      return;

    return result;
  };

  Node.prototype._encodeValue = function encode(data, reporter, parent) {
    var state = this._baseState;

    // Decode root node
    if (state.parent === null)
      return state.children[0]._encode(data, reporter || new Reporter$2());

    var result = null;

    // Set reporter to share it with a child class
    this.reporter = reporter;

    // Check if data is there
    if (state.optional && data === undefined) {
      if (state['default'] !== null)
        data = state['default'];
      else
        return;
    }

    // Encode children first
    var content = null;
    var primitive = false;
    if (state.any) {
      // Anything that was given is translated to buffer
      result = this._createEncoderBuffer(data);
    } else if (state.choice) {
      result = this._encodeChoice(data, reporter);
    } else if (state.contains) {
      content = this._getUse(state.contains, parent)._encode(data, reporter);
      primitive = true;
    } else if (state.children) {
      content = state.children.map(function(child) {
        if (child._baseState.tag === 'null_')
          return child._encode(null, reporter, data);

        if (child._baseState.key === null)
          return reporter.error('Child should have a key');
        var prevKey = reporter.enterKey(child._baseState.key);

        if (typeof data !== 'object')
          return reporter.error('Child expected, but input is not object');

        var res = child._encode(data[child._baseState.key], reporter, data);
        reporter.leaveKey(prevKey);

        return res;
      }, this).filter(function(child) {
        return child;
      });
      content = this._createEncoderBuffer(content);
    } else {
      if (state.tag === 'seqof' || state.tag === 'setof') {
        // TODO(indutny): this should be thrown on DSL level
        if (!(state.args && state.args.length === 1))
          return reporter.error('Too many args for : ' + state.tag);

        if (!Array.isArray(data))
          return reporter.error('seqof/setof, but data is not Array');

        var child = this.clone();
        child._baseState.implicit = null;
        content = this._createEncoderBuffer(data.map(function(item) {
          var state = this._baseState;

          return this._getUse(state.args[0], data)._encode(item, reporter);
        }, child));
      } else if (state.use !== null) {
        result = this._getUse(state.use, parent)._encode(data, reporter);
      } else {
        content = this._encodePrimitive(state.tag, data);
        primitive = true;
      }
    }

    // Encode data itself
    var result;
    if (!state.any && state.choice === null) {
      var tag = state.implicit !== null ? state.implicit : state.tag;
      var cls = state.implicit === null ? 'universal' : 'context';

      if (tag === null) {
        if (state.use === null)
          reporter.error('Tag could be omitted only for .use()');
      } else {
        if (state.use === null)
          result = this._encodeComposite(tag, primitive, cls, content);
      }
    }

    // Wrap in explicit
    if (state.explicit !== null)
      result = this._encodeComposite(state.explicit, false, 'context', result);

    return result;
  };

  Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    var state = this._baseState;

    var node = state.choice[data.type];
    if (!node) {
      minimalisticAssert(
          false,
          data.type + ' not found in ' +
              JSON.stringify(Object.keys(state.choice)));
    }
    return node._encode(data.value, reporter);
  };

  Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    var state = this._baseState;

    if (/str$/.test(tag))
      return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args)
      return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid')
      return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime')
      return this._encodeTime(data, tag);
    else if (tag === 'null_')
      return this._encodeNull();
    else if (tag === 'int' || tag === 'enum')
      return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool')
      return this._encodeBool(data);
    else if (tag === 'objDesc')
      return this._encodeStr(data, tag);
    else
      throw new Error('Unsupported tag: ' + tag);
  };

  Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
  };

  Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
  };

  var base_1 = createCommonjsModule(function (module, exports) {
  var base = exports;

  base.Reporter = reporter.Reporter;
  base.DecoderBuffer = buffer$1.DecoderBuffer;
  base.EncoderBuffer = buffer$1.EncoderBuffer;
  base.Node = node;
  });

  var der = createCommonjsModule(function (module, exports) {
  exports.tagClass = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
  };
  exports.tagClassByName = constants_1._reverse(exports.tagClass);

  exports.tag = {
    0x00: 'end',
    0x01: 'bool',
    0x02: 'int',
    0x03: 'bitstr',
    0x04: 'octstr',
    0x05: 'null_',
    0x06: 'objid',
    0x07: 'objDesc',
    0x08: 'external',
    0x09: 'real',
    0x0a: 'enum',
    0x0b: 'embed',
    0x0c: 'utf8str',
    0x0d: 'relativeOid',
    0x10: 'seq',
    0x11: 'set',
    0x12: 'numstr',
    0x13: 'printstr',
    0x14: 't61str',
    0x15: 'videostr',
    0x16: 'ia5str',
    0x17: 'utctime',
    0x18: 'gentime',
    0x19: 'graphstr',
    0x1a: 'iso646str',
    0x1b: 'genstr',
    0x1c: 'unistr',
    0x1d: 'charstr',
    0x1e: 'bmpstr'
  };
  exports.tagByName = constants_1._reverse(exports.tag);
  });
  var der_1 = der.tagClass;
  var der_2 = der.tagClassByName;
  var der_3 = der.tag;
  var der_4 = der.tagByName;

  var constants_1 = createCommonjsModule(function (module, exports) {
  var constants$$1 = exports;

  // Helper
  constants$$1._reverse = function reverse(map) {
    var res = {};

    Object.keys(map).forEach(function(key) {
      // Convert key to integer if it is stringified
      if ((key | 0) == key)
        key = key | 0;

      var value = map[key];
      res[value] = key;
    });

    return res;
  };

  constants$$1.der = der;
  });

  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


  var errors$9 = {

    newInvalidAsn1Error: function(msg) {
      var e = new Error();
      e.name = 'InvalidAsn1Error';
      e.message = msg || '';
      return e;
    }

  };

  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


  var types$1 = {
    EOC: 0,
    Boolean: 1,
    Integer: 2,
    BitString: 3,
    OctetString: 4,
    Null: 5,
    OID: 6,
    ObjectDescriptor: 7,
    External: 8,
    Real: 9, // float
    Enumeration: 10,
    PDV: 11,
    Utf8String: 12,
    RelativeOID: 13,
    Sequence: 16,
    Set: 17,
    NumericString: 18,
    PrintableString: 19,
    T61String: 20,
    VideotexString: 21,
    IA5String: 22,
    UTCTime: 23,
    GeneralizedTime: 24,
    GraphicString: 25,
    VisibleString: 26,
    GeneralString: 28,
    UniversalString: 29,
    CharacterString: 30,
    BMPString: 31,
    Constructor: 32,
    Context: 128
  };

  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.







  ///--- Globals

  var newInvalidAsn1Error = errors$9.newInvalidAsn1Error;



  ///--- API

  function Reader(data) {
    if (!data || !Buffer.isBuffer(data))
      throw new TypeError('data must be a node Buffer');

    this._buf = data;
    this._size = data.length;

    // These hold the "current" state
    this._len = 0;
    this._offset = 0;
  }

  Object.defineProperty(Reader.prototype, 'length', {
    enumerable: true,
    get: function () { return (this._len); }
  });

  Object.defineProperty(Reader.prototype, 'offset', {
    enumerable: true,
    get: function () { return (this._offset); }
  });

  Object.defineProperty(Reader.prototype, 'remain', {
    get: function () { return (this._size - this._offset); }
  });

  Object.defineProperty(Reader.prototype, 'buffer', {
    get: function () { return (this._buf.slice(this._offset)); }
  });


  /**
   * Reads a single byte and advances offset; you can pass in `true` to make this
   * a "peek" operation (i.e., get the byte, but don't advance the offset).
   *
   * @param {Boolean} peek true means don't move offset.
   * @return {Number} the next byte, null if not enough data.
   */
  Reader.prototype.readByte = function(peek) {
    if (this._size - this._offset < 1)
      return null;

    var b = this._buf[this._offset] & 0xff;

    if (!peek)
      this._offset += 1;

    return b;
  };


  Reader.prototype.peek = function() {
    return this.readByte(true);
  };


  /**
   * Reads a (potentially) variable length off the BER buffer.  This call is
   * not really meant to be called directly, as callers have to manipulate
   * the internal buffer afterwards.
   *
   * As a result of this call, you can call `Reader.length`, until the
   * next thing called that does a readLength.
   *
   * @return {Number} the amount of offset to advance the buffer.
   * @throws {InvalidAsn1Error} on bad ASN.1
   */
  Reader.prototype.readLength = function(offset) {
    if (offset === undefined)
      offset = this._offset;

    if (offset >= this._size)
      return null;

    var lenB = this._buf[offset++] & 0xff;
    if (lenB === null)
      return null;

    if ((lenB & 0x80) == 0x80) {
      lenB &= 0x7f;

      if (lenB == 0)
        throw newInvalidAsn1Error('Indefinite length not supported');

      if (lenB > 4)
        throw newInvalidAsn1Error('encoding too long');

      if (this._size - offset < lenB)
        return null;

      this._len = 0;
      for (var i = 0; i < lenB; i++)
        this._len = (this._len << 8) + (this._buf[offset++] & 0xff);

    } else {
      // Wasn't a variable length
      this._len = lenB;
    }

    return offset;
  };


  /**
   * Parses the next sequence in this BER buffer.
   *
   * To get the length of the sequence, call `Reader.length`.
   *
   * @return {Number} the sequence's tag.
   */
  Reader.prototype.readSequence = function(tag) {
    var seq = this.peek();
    if (seq === null)
      return null;
    if (tag !== undefined && tag !== seq)
      throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                                ': got 0x' + seq.toString(16));

    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
      return null;

    this._offset = o;
    return seq;
  };


  Reader.prototype.readInt = function() {
    return this._readTag(types$1.Integer);
  };


  Reader.prototype.readBoolean = function() {
    return (this._readTag(types$1.Boolean) === 0 ? false : true);
  };


  Reader.prototype.readEnumeration = function() {
    return this._readTag(types$1.Enumeration);
  };


  Reader.prototype.readString = function(tag, retbuf) {
    if (!tag)
      tag = types$1.OctetString;

    var b = this.peek();
    if (b === null)
      return null;

    if (b !== tag)
      throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                                ': got 0x' + b.toString(16));

    var o = this.readLength(this._offset + 1); // stored in `length`

    if (o === null)
      return null;

    if (this.length > this._size - o)
      return null;

    this._offset = o;

    if (this.length === 0)
      return retbuf ? new Buffer(0) : '';

    var str = this._buf.slice(this._offset, this._offset + this.length);
    this._offset += this.length;

    return retbuf ? str : str.toString('utf8');
  };

  Reader.prototype.readOID = function(tag) {
    if (!tag)
      tag = types$1.OID;

    var b = this.readString(tag, true);
    if (b === null)
      return null;

    var values = [];
    var value = 0;

    for (var i = 0; i < b.length; i++) {
      var byte = b[i] & 0xff;

      value <<= 7;
      value += byte & 0x7f;
      if ((byte & 0x80) == 0) {
        values.push(value);
        value = 0;
      }
    }

    value = values.shift();
    values.unshift(value % 40);
    values.unshift((value / 40) >> 0);

    return values.join('.');
  };


  Reader.prototype._readTag = function(tag) {
    assert.ok(tag !== undefined);

    var b = this.peek();

    if (b === null)
      return null;

    if (b !== tag)
      throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                                ': got 0x' + b.toString(16));

    var o = this.readLength(this._offset + 1); // stored in `length`
    if (o === null)
      return null;

    if (this.length > 4)
      throw newInvalidAsn1Error('Integer too long: ' + this.length);

    if (this.length > this._size - o)
      return null;
    this._offset = o;

    var fb = this._buf[this._offset];
    var value = 0;

    for (var i = 0; i < this.length; i++) {
      value <<= 8;
      value |= (this._buf[this._offset++] & 0xff);
    }

    if ((fb & 0x80) == 0x80 && i !== 4)
      value -= (1 << (i * 8));

    return value >> 0;
  };



  ///--- Exported API

  var reader = Reader;

  var DEFAULT_OPTS = {
    size: 1024,
    growthFactor: 8
  };


  ///--- Helpers

  function merge(from, to) {
    assert.ok(from);
    assert.equal(typeof(from), 'object');
    assert.ok(to);
    assert.equal(typeof(to), 'object');

    var keys = Object.getOwnPropertyNames(from);
    keys.forEach(function(key) {
      if (to[key])
        return;

      var value = Object.getOwnPropertyDescriptor(from, key);
      Object.defineProperty(to, key, value);
    });

    return to;
  }



  ///--- API

  function Writer(options) {
    options = merge(DEFAULT_OPTS, options || {});

    this._buf = new Buffer(options.size || 1024);
    this._size = this._buf.length;
    this._offset = 0;
    this._options = options;

    // A list of offsets in the buffer where we need to insert
    // sequence tag/len pairs.
    this._seq = [];
  }

  Object.defineProperty(Writer.prototype, 'buffer', {
    get: function () {
      if (this._seq.length)
        throw new InvalidAsn1Error(this._seq.length + ' unended sequence(s)');

      return (this._buf.slice(0, this._offset));
    }
  });

  Writer.prototype.writeByte = function(b) {
    if (typeof(b) !== 'number')
      throw new TypeError('argument must be a Number');

    this._ensure(1);
    this._buf[this._offset++] = b;
  };


  Writer.prototype.writeInt = function(i, tag) {
    if (typeof(i) !== 'number')
      throw new TypeError('argument must be a Number');
    if (typeof(tag) !== 'number')
      tag = types$1.Integer;

    var sz = 4;

    while ((((i & 0xff800000) === 0) || ((i & 0xff800000) === 0xff800000 >> 0)) &&
           (sz > 1)) {
      sz--;
      i <<= 8;
    }

    if (sz > 4)
      throw new InvalidAsn1Error('BER ints cannot be > 0xffffffff');

    this._ensure(2 + sz);
    this._buf[this._offset++] = tag;
    this._buf[this._offset++] = sz;

    while (sz-- > 0) {
      this._buf[this._offset++] = ((i & 0xff000000) >>> 24);
      i <<= 8;
    }

  };


  Writer.prototype.writeNull = function() {
    this.writeByte(types$1.Null);
    this.writeByte(0x00);
  };


  Writer.prototype.writeEnumeration = function(i, tag) {
    if (typeof(i) !== 'number')
      throw new TypeError('argument must be a Number');
    if (typeof(tag) !== 'number')
      tag = types$1.Enumeration;

    return this.writeInt(i, tag);
  };


  Writer.prototype.writeBoolean = function(b, tag) {
    if (typeof(b) !== 'boolean')
      throw new TypeError('argument must be a Boolean');
    if (typeof(tag) !== 'number')
      tag = types$1.Boolean;

    this._ensure(3);
    this._buf[this._offset++] = tag;
    this._buf[this._offset++] = 0x01;
    this._buf[this._offset++] = b ? 0xff : 0x00;
  };


  Writer.prototype.writeString = function(s, tag) {
    if (typeof(s) !== 'string')
      throw new TypeError('argument must be a string (was: ' + typeof(s) + ')');
    if (typeof(tag) !== 'number')
      tag = types$1.OctetString;

    var len = Buffer.byteLength(s);
    this.writeByte(tag);
    this.writeLength(len);
    if (len) {
      this._ensure(len);
      this._buf.write(s, this._offset);
      this._offset += len;
    }
  };


  Writer.prototype.writeBuffer = function(buf, tag) {
    if (typeof(tag) !== 'number')
      throw new TypeError('tag must be a number');
    if (!Buffer.isBuffer(buf))
      throw new TypeError('argument must be a buffer');

    this.writeByte(tag);
    this.writeLength(buf.length);
    this._ensure(buf.length);
    buf.copy(this._buf, this._offset, 0, buf.length);
    this._offset += buf.length;
  };


  Writer.prototype.writeStringArray = function(strings) {
    if ((!strings instanceof Array))
      throw new TypeError('argument must be an Array[String]');

    var self = this;
    strings.forEach(function(s) {
      self.writeString(s);
    });
  };

  // This is really to solve DER cases, but whatever for now
  Writer.prototype.writeOID = function(s, tag) {
    if (typeof(s) !== 'string')
      throw new TypeError('argument must be a string');
    if (typeof(tag) !== 'number')
      tag = types$1.OID;

    if (!/^([0-9]+\.){3,}[0-9]+$/.test(s))
      throw new Error('argument is not a valid OID string');

    function encodeOctet(bytes, octet) {
      if (octet < 128) {
          bytes.push(octet);
      } else if (octet < 16384) {
          bytes.push((octet >>> 7) | 0x80);
          bytes.push(octet & 0x7F);
      } else if (octet < 2097152) {
        bytes.push((octet >>> 14) | 0x80);
        bytes.push(((octet >>> 7) | 0x80) & 0xFF);
        bytes.push(octet & 0x7F);
      } else if (octet < 268435456) {
        bytes.push((octet >>> 21) | 0x80);
        bytes.push(((octet >>> 14) | 0x80) & 0xFF);
        bytes.push(((octet >>> 7) | 0x80) & 0xFF);
        bytes.push(octet & 0x7F);
      } else {
        bytes.push(((octet >>> 28) | 0x80) & 0xFF);
        bytes.push(((octet >>> 21) | 0x80) & 0xFF);
        bytes.push(((octet >>> 14) | 0x80) & 0xFF);
        bytes.push(((octet >>> 7) | 0x80) & 0xFF);
        bytes.push(octet & 0x7F);
      }
    }

    var tmp = s.split('.');
    var bytes = [];
    bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
    tmp.slice(2).forEach(function(b) {
      encodeOctet(bytes, parseInt(b, 10));
    });

    var self = this;
    this._ensure(2 + bytes.length);
    this.writeByte(tag);
    this.writeLength(bytes.length);
    bytes.forEach(function(b) {
      self.writeByte(b);
    });
  };


  Writer.prototype.writeLength = function(len) {
    if (typeof(len) !== 'number')
      throw new TypeError('argument must be a Number');

    this._ensure(4);

    if (len <= 0x7f) {
      this._buf[this._offset++] = len;
    } else if (len <= 0xff) {
      this._buf[this._offset++] = 0x81;
      this._buf[this._offset++] = len;
    } else if (len <= 0xffff) {
      this._buf[this._offset++] = 0x82;
      this._buf[this._offset++] = len >> 8;
      this._buf[this._offset++] = len;
    } else if (len <= 0xffffff) {
      this._buf[this._offset++] = 0x83;
      this._buf[this._offset++] = len >> 16;
      this._buf[this._offset++] = len >> 8;
      this._buf[this._offset++] = len;
    } else {
      throw new InvalidAsn1ERror('Length too long (> 4 bytes)');
    }
  };

  Writer.prototype.startSequence = function(tag) {
    if (typeof(tag) !== 'number')
      tag = types$1.Sequence | types$1.Constructor;

    this.writeByte(tag);
    this._seq.push(this._offset);
    this._ensure(3);
    this._offset += 3;
  };


  Writer.prototype.endSequence = function() {
    var seq = this._seq.pop();
    var start = seq + 3;
    var len = this._offset - start;

    if (len <= 0x7f) {
      this._shift(start, len, -2);
      this._buf[seq] = len;
    } else if (len <= 0xff) {
      this._shift(start, len, -1);
      this._buf[seq] = 0x81;
      this._buf[seq + 1] = len;
    } else if (len <= 0xffff) {
      this._buf[seq] = 0x82;
      this._buf[seq + 1] = len >> 8;
      this._buf[seq + 2] = len;
    } else if (len <= 0xffffff) {
      this._shift(start, len, 1);
      this._buf[seq] = 0x83;
      this._buf[seq + 1] = len >> 16;
      this._buf[seq + 2] = len >> 8;
      this._buf[seq + 3] = len;
    } else {
      throw new InvalidAsn1Error('Sequence too long');
    }
  };


  Writer.prototype._shift = function(start, len, shift) {
    assert.ok(start !== undefined);
    assert.ok(len !== undefined);
    assert.ok(shift);

    this._buf.copy(this._buf, start + shift, start, start + len);
    this._offset += shift;
  };

  Writer.prototype._ensure = function(len) {
    assert.ok(len);

    if (this._size - this._offset < len) {
      var sz = this._size * this._options.growthFactor;
      if (sz - this._offset < len)
        sz += len;

      var buf = new Buffer(sz);

      this._buf.copy(buf, 0, 0, this._offset);
      this._buf = buf;
      this._size = sz;
    }
  };



  ///--- Exported API

  var writer = Writer;

  var ber = createCommonjsModule(function (module) {
  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.








  ///--- Exports

  module.exports = {

    Reader: reader,

    Writer: writer

  };

  for (var t in types$1) {
    if (types$1.hasOwnProperty(t))
      module.exports[t] = types$1[t];
  }
  for (var e in errors$9) {
    if (errors$9.hasOwnProperty(e))
      module.exports[e] = errors$9[e];
  }
  });
  var ber_1 = ber.Reader;
  var ber_2 = ber.Writer;

  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

  // If you have no idea what ASN.1 or BER is, see this:
  // ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc





  ///--- Exported API

  var lib$1 = {

    Ber: ber,

    BerReader: ber.Reader,

    BerWriter: ber.Writer

  };

  var base$1 = lib$1.base;
  var bignum = lib$1.bignum;

  // Import DER constants
  var der$1 = lib$1.constants.der;

  function DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;

    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }var der_1$1 = DERDecoder;

  DERDecoder.prototype.decode = function decode(data, options) {
    if (!(data instanceof base$1.DecoderBuffer))
      data = new base$1.DecoderBuffer(data, options);

    return this.tree._decode(data, options);
  };

  // Tree methods

  function DERNode(parent) {
    base$1.Node.call(this, 'der', parent);
  }
  inherits(DERNode, base$1.Node);

  DERNode.prototype._peekTag = function peekTag(buffer$$1, tag, any) {
    if (buffer$$1.isEmpty())
      return false;

    var state = buffer$$1.save();
    var decodedTag = derDecodeTag(buffer$$1, 'Failed to peek tag: "' + tag + '"');
    if (buffer$$1.isError(decodedTag))
      return decodedTag;

    buffer$$1.restore(state);

    return decodedTag.tag === tag || decodedTag.tagStr === tag ||
      (decodedTag.tagStr + 'of') === tag || any;
  };

  DERNode.prototype._decodeTag = function decodeTag(buffer$$1, tag, any) {
    var decodedTag = derDecodeTag(buffer$$1,
                                  'Failed to decode tag of "' + tag + '"');
    if (buffer$$1.isError(decodedTag))
      return decodedTag;

    var len = derDecodeLen(buffer$$1,
                           decodedTag.primitive,
                           'Failed to get length of "' + tag + '"');

    // Failure
    if (buffer$$1.isError(len))
      return len;

    if (!any &&
        decodedTag.tag !== tag &&
        decodedTag.tagStr !== tag &&
        decodedTag.tagStr + 'of' !== tag) {
      return buffer$$1.error('Failed to match tag: "' + tag + '"');
    }

    if (decodedTag.primitive || len !== null)
      return buffer$$1.skip(len, 'Failed to match body of: "' + tag + '"');

    // Indefinite length... find END tag
    var state = buffer$$1.save();
    var res = this._skipUntilEnd(
        buffer$$1,
        'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer$$1.isError(res))
      return res;

    len = buffer$$1.offset - state.offset;
    buffer$$1.restore(state);
    return buffer$$1.skip(len, 'Failed to match body of: "' + tag + '"');
  };

  DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer$$1, fail) {
    while (true) {
      var tag = derDecodeTag(buffer$$1, fail);
      if (buffer$$1.isError(tag))
        return tag;
      var len = derDecodeLen(buffer$$1, tag.primitive, fail);
      if (buffer$$1.isError(len))
        return len;

      var res;
      if (tag.primitive || len !== null)
        res = buffer$$1.skip(len);
      else
        res = this._skipUntilEnd(buffer$$1, fail);

      // Failure
      if (buffer$$1.isError(res))
        return res;

      if (tag.tagStr === 'end')
        break;
    }
  };

  DERNode.prototype._decodeList = function decodeList(buffer$$1, tag, decoder,
                                                      options) {
    var result = [];
    while (!buffer$$1.isEmpty()) {
      var possibleEnd = this._peekTag(buffer$$1, 'end');
      if (buffer$$1.isError(possibleEnd))
        return possibleEnd;

      var res = decoder.decode(buffer$$1, 'der', options);
      if (buffer$$1.isError(res) && possibleEnd)
        break;
      result.push(res);
    }
    return result;
  };

  DERNode.prototype._decodeStr = function decodeStr(buffer$$1, tag) {
    if (tag === 'bitstr') {
      var unused = buffer$$1.readUInt8();
      if (buffer$$1.isError(unused))
        return unused;
      return { unused: unused, data: buffer$$1.raw() };
    } else if (tag === 'bmpstr') {
      var raw = buffer$$1.raw();
      if (raw.length % 2 === 1)
        return buffer$$1.error('Decoding of string type: bmpstr length mismatch');

      var str = '';
      for (var i = 0; i < raw.length / 2; i++) {
        str += String.fromCharCode(raw.readUInt16BE(i * 2));
      }
      return str;
    } else if (tag === 'numstr') {
      var numstr = buffer$$1.raw().toString('ascii');
      if (!this._isNumstr(numstr)) {
        return buffer$$1.error('Decoding of string type: ' +
                            'numstr unsupported characters');
      }
      return numstr;
    } else if (tag === 'octstr') {
      return buffer$$1.raw();
    } else if (tag === 'objDesc') {
      return buffer$$1.raw();
    } else if (tag === 'printstr') {
      var printstr = buffer$$1.raw().toString('ascii');
      if (!this._isPrintstr(printstr)) {
        return buffer$$1.error('Decoding of string type: ' +
                            'printstr unsupported characters');
      }
      return printstr;
    } else if (/str$/.test(tag)) {
      return buffer$$1.raw().toString();
    } else {
      return buffer$$1.error('Decoding of string type: ' + tag + ' unsupported');
    }
  };

  DERNode.prototype._decodeObjid = function decodeObjid(buffer$$1, values, relative) {
    var result;
    var identifiers = [];
    var ident = 0;
    while (!buffer$$1.isEmpty()) {
      var subident = buffer$$1.readUInt8();
      ident <<= 7;
      ident |= subident & 0x7f;
      if ((subident & 0x80) === 0) {
        identifiers.push(ident);
        ident = 0;
      }
    }
    if (subident & 0x80)
      identifiers.push(ident);

    var first = (identifiers[0] / 40) | 0;
    var second = identifiers[0] % 40;

    if (relative)
      result = identifiers;
    else
      result = [first, second].concat(identifiers.slice(1));

    if (values) {
      var tmp = values[result.join(' ')];
      if (tmp === undefined)
        tmp = values[result.join('.')];
      if (tmp !== undefined)
        result = tmp;
    }

    return result;
  };

  DERNode.prototype._decodeTime = function decodeTime(buffer$$1, tag) {
    var str = buffer$$1.raw().toString();
    if (tag === 'gentime') {
      var year = str.slice(0, 4) | 0;
      var mon = str.slice(4, 6) | 0;
      var day = str.slice(6, 8) | 0;
      var hour = str.slice(8, 10) | 0;
      var min = str.slice(10, 12) | 0;
      var sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
      var year = str.slice(0, 2) | 0;
      var mon = str.slice(2, 4) | 0;
      var day = str.slice(4, 6) | 0;
      var hour = str.slice(6, 8) | 0;
      var min = str.slice(8, 10) | 0;
      var sec = str.slice(10, 12) | 0;
      if (year < 70)
        year = 2000 + year;
      else
        year = 1900 + year;
    } else {
      return buffer$$1.error('Decoding ' + tag + ' time is not supported yet');
    }

    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
  };

  DERNode.prototype._decodeNull = function decodeNull(buffer$$1) {
    return null;
  };

  DERNode.prototype._decodeBool = function decodeBool(buffer$$1) {
    var res = buffer$$1.readUInt8();
    if (buffer$$1.isError(res))
      return res;
    else
      return res !== 0;
  };

  DERNode.prototype._decodeInt = function decodeInt(buffer$$1, values) {
    // Bigint, return as it is (assume big endian)
    var raw = buffer$$1.raw();
    var res = new bignum(raw);

    if (values)
      res = values[res.toString(10)] || res;

    return res;
  };

  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function')
      entity = entity(obj);
    return entity._getDecoder('der').tree;
  };

  // Utility methods

  function derDecodeTag(buf, fail) {
    var tag = buf.readUInt8(fail);
    if (buf.isError(tag))
      return tag;

    var cls = der$1.tagClass[tag >> 6];
    var primitive = (tag & 0x20) === 0;

    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
      var oct = tag;
      tag = 0;
      while ((oct & 0x80) === 0x80) {
        oct = buf.readUInt8(fail);
        if (buf.isError(oct))
          return oct;

        tag <<= 7;
        tag |= oct & 0x7f;
      }
    } else {
      tag &= 0x1f;
    }
    var tagStr = der$1.tag[tag];

    return {
      cls: cls,
      primitive: primitive,
      tag: tag,
      tagStr: tagStr
    };
  }

  function derDecodeLen(buf, primitive, fail) {
    var len = buf.readUInt8(fail);
    if (buf.isError(len))
      return len;

    // Indefinite form
    if (!primitive && len === 0x80)
      return null;

    // Definite form
    if ((len & 0x80) === 0) {
      // Short form
      return len;
    }

    // Long form
    var num = len & 0x7f;
    if (num > 4)
      return buf.error('length octect is too long');

    len = 0;
    for (var i = 0; i < num; i++) {
      len <<= 8;
      var j = buf.readUInt8(fail);
      if (buf.isError(j))
        return j;
      len |= j;
    }

    return len;
  }

  var Buffer$4 = buffer.Buffer;



  function PEMDecoder(entity) {
    der_1$1.call(this, entity);
    this.enc = 'pem';
  }inherits(PEMDecoder, der_1$1);
  var pem = PEMDecoder;

  PEMDecoder.prototype.decode = function decode(data, options) {
    var lines = data.toString().split(/[\r\n]+/g);

    var label = options.label.toUpperCase();

    var re = /^-----(BEGIN|END) ([^-]+)-----$/;
    var start = -1;
    var end = -1;
    for (var i = 0; i < lines.length; i++) {
      var match = lines[i].match(re);
      if (match === null)
        continue;

      if (match[2] !== label)
        continue;

      if (start === -1) {
        if (match[1] !== 'BEGIN')
          break;
        start = i;
      } else {
        if (match[1] !== 'END')
          break;
        end = i;
        break;
      }
    }
    if (start === -1 || end === -1)
      throw new Error('PEM section not found for: ' + label);

    var base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9\+\/=]+/gi, '');

    var input = new Buffer$4(base64, 'base64');
    return der_1$1.prototype.decode.call(this, input, options);
  };

  var decoders_1 = createCommonjsModule(function (module, exports) {
  var decoders = exports;

  decoders.der = der_1$1;
  decoders.pem = pem;
  });

  var Buffer$5 = buffer.Buffer;


  var base$2 = lib$1.base;

  // Import DER constants
  var der$2 = lib$1.constants.der;

  function DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;

    // Construct base tree
    this.tree = new DERNode$1();
    this.tree._init(entity.body);
  }var der_1$2 = DEREncoder;

  DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
  };

  // Tree methods

  function DERNode$1(parent) {
    base$2.Node.call(this, 'der', parent);
  }
  inherits(DERNode$1, base$2.Node);

  DERNode$1.prototype._encodeComposite = function encodeComposite(tag,
                                                                primitive,
                                                                cls,
                                                                content) {
    var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

    // Short form
    if (content.length < 0x80) {
      var header = new Buffer$5(2);
      header[0] = encodedTag;
      header[1] = content.length;
      return this._createEncoderBuffer([ header, content ]);
    }

    // Long form
    // Count octets required to store length
    var lenOctets = 1;
    for (var i = content.length; i >= 0x100; i >>= 8)
      lenOctets++;

    var header = new Buffer$5(1 + 1 + lenOctets);
    header[0] = encodedTag;
    header[1] = 0x80 | lenOctets;

    for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
      header[i] = j & 0xff;

    return this._createEncoderBuffer([ header, content ]);
  };

  DERNode$1.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') {
      return this._createEncoderBuffer([ str.unused | 0, str.data ]);
    } else if (tag === 'bmpstr') {
      var buf = new Buffer$5(str.length * 2);
      for (var i = 0; i < str.length; i++) {
        buf.writeUInt16BE(str.charCodeAt(i), i * 2);
      }
      return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
      if (!this._isNumstr(str)) {
        return this.reporter.error('Encoding of string type: numstr supports ' +
                                   'only digits and space');
      }
      return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
      if (!this._isPrintstr(str)) {
        return this.reporter.error('Encoding of string type: printstr supports ' +
                                   'only latin upper and lower case letters, ' +
                                   'digits, space, apostrophe, left and rigth ' +
                                   'parenthesis, plus sign, comma, hyphen, ' +
                                   'dot, slash, colon, equal sign, ' +
                                   'question mark');
      }
      return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) {
      return this._createEncoderBuffer(str);
    } else if (tag === 'objDesc') {
      return this._createEncoderBuffer(str);
    } else {
      return this.reporter.error('Encoding of string type: ' + tag +
                                 ' unsupported');
    }
  };

  DERNode$1.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
      if (!values)
        return this.reporter.error('string objid given, but no values map found');
      if (!values.hasOwnProperty(id))
        return this.reporter.error('objid not found in values map');
      id = values[id].split(/[\s\.]+/g);
      for (var i = 0; i < id.length; i++)
        id[i] |= 0;
    } else if (Array.isArray(id)) {
      id = id.slice();
      for (var i = 0; i < id.length; i++)
        id[i] |= 0;
    }

    if (!Array.isArray(id)) {
      return this.reporter.error('objid() should be either array or string, ' +
                                 'got: ' + JSON.stringify(id));
    }

    if (!relative) {
      if (id[1] >= 40)
        return this.reporter.error('Second objid identifier OOB');
      id.splice(0, 2, id[0] * 40 + id[1]);
    }

    // Count number of octets
    var size = 0;
    for (var i = 0; i < id.length; i++) {
      var ident = id[i];
      for (size++; ident >= 0x80; ident >>= 7)
        size++;
    }

    var objid = new Buffer$5(size);
    var offset = objid.length - 1;
    for (var i = id.length - 1; i >= 0; i--) {
      var ident = id[i];
      objid[offset--] = ident & 0x7f;
      while ((ident >>= 7) > 0)
        objid[offset--] = 0x80 | (ident & 0x7f);
    }

    return this._createEncoderBuffer(objid);
  };

  function two(num) {
    if (num < 10)
      return '0' + num;
    else
      return num;
  }

  DERNode$1.prototype._encodeTime = function encodeTime(time, tag) {
    var str;
    var date = new Date(time);

    if (tag === 'gentime') {
      str = [
        two(date.getFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
      ].join('');
    } else if (tag === 'utctime') {
      str = [
        two(date.getFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
      ].join('');
    } else {
      this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    }

    return this._encodeStr(str, 'octstr');
  };

  DERNode$1.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
  };

  DERNode$1.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
      if (!values)
        return this.reporter.error('String int or enum given, but no values map');
      if (!values.hasOwnProperty(num)) {
        return this.reporter.error('Values map doesn\'t contain: ' +
                                   JSON.stringify(num));
      }
      num = values[num];
    }

    // Bignum, assume big endian
    if (typeof num !== 'number' && !Buffer$5.isBuffer(num)) {
      var numArray = num.toArray();
      if (!num.sign && numArray[0] & 0x80) {
        numArray.unshift(0);
      }
      num = new Buffer$5(numArray);
    }

    if (Buffer$5.isBuffer(num)) {
      var size = num.length;
      if (num.length === 0)
        size++;

      var out = new Buffer$5(size);
      num.copy(out);
      if (num.length === 0)
        out[0] = 0;
      return this._createEncoderBuffer(out);
    }

    if (num < 0x80)
      return this._createEncoderBuffer(num);

    if (num < 0x100)
      return this._createEncoderBuffer([0, num]);

    var size = 1;
    for (var i = num; i >= 0x100; i >>= 8)
      size++;

    var out = new Array(size);
    for (var i = out.length - 1; i >= 0; i--) {
      out[i] = num & 0xff;
      num >>= 8;
    }
    if(out[0] & 0x80) {
      out.unshift(0);
    }

    return this._createEncoderBuffer(new Buffer$5(out));
  };

  DERNode$1.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
  };

  DERNode$1.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function')
      entity = entity(obj);
    return entity._getEncoder('der').tree;
  };

  DERNode$1.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    var state = this._baseState;
    var i;
    if (state['default'] === null)
      return false;

    var data = dataBuffer.join();
    if (state.defaultBuffer === undefined)
      state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

    if (data.length !== state.defaultBuffer.length)
      return false;

    for (i=0; i < data.length; i++)
      if (data[i] !== state.defaultBuffer[i])
        return false;

    return true;
  };

  // Utility methods

  function encodeTag(tag, primitive, cls, reporter) {
    var res;

    if (tag === 'seqof')
      tag = 'seq';
    else if (tag === 'setof')
      tag = 'set';

    if (der$2.tagByName.hasOwnProperty(tag))
      res = der$2.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag)
      res = tag;
    else
      return reporter.error('Unknown tag: ' + tag);

    if (res >= 0x1f)
      return reporter.error('Multi-octet tag encoding unsupported');

    if (!primitive)
      res |= 0x20;

    res |= (der$2.tagClassByName[cls || 'universal'] << 6);

    return res;
  }

  function PEMEncoder(entity) {
    der_1$2.call(this, entity);
    this.enc = 'pem';
  }inherits(PEMEncoder, der_1$2);
  var pem$1 = PEMEncoder;

  PEMEncoder.prototype.encode = function encode(data, options) {
    var buf = der_1$2.prototype.encode.call(this, data);

    var p = buf.toString('base64');
    var out = [ '-----BEGIN ' + options.label + '-----' ];
    for (var i = 0; i < p.length; i += 64)
      out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
  };

  var encoders_1 = createCommonjsModule(function (module, exports) {
  var encoders = exports;

  encoders.der = der_1$2;
  encoders.pem = pem$1;
  });

  var asn1_1 = createCommonjsModule(function (module, exports) {
  var asn1 = exports;

  asn1.bignum = bn$5;

  asn1.define = api_1.define;
  asn1.base = base_1;
  asn1.constants = constants_1;
  asn1.decoders = decoders_1;
  asn1.encoders = encoders_1;
  });

  var Time = asn1_1.define('Time', function () {
    this.choice({
      utcTime: this.utctime(),
      generalTime: this.gentime()
    });
  });

  var AttributeTypeValue = asn1_1.define('AttributeTypeValue', function () {
    this.seq().obj(
      this.key('type').objid(),
      this.key('value').any()
    );
  });

  var AlgorithmIdentifier = asn1_1.define('AlgorithmIdentifier', function () {
    this.seq().obj(
      this.key('algorithm').objid(),
      this.key('parameters').optional()
    );
  });

  var SubjectPublicKeyInfo = asn1_1.define('SubjectPublicKeyInfo', function () {
    this.seq().obj(
      this.key('algorithm').use(AlgorithmIdentifier),
      this.key('subjectPublicKey').bitstr()
    );
  });

  var RelativeDistinguishedName = asn1_1.define('RelativeDistinguishedName', function () {
    this.setof(AttributeTypeValue);
  });

  var RDNSequence = asn1_1.define('RDNSequence', function () {
    this.seqof(RelativeDistinguishedName);
  });

  var Name = asn1_1.define('Name', function () {
    this.choice({
      rdnSequence: this.use(RDNSequence)
    });
  });

  var Validity = asn1_1.define('Validity', function () {
    this.seq().obj(
      this.key('notBefore').use(Time),
      this.key('notAfter').use(Time)
    );
  });

  var Extension = asn1_1.define('Extension', function () {
    this.seq().obj(
      this.key('extnID').objid(),
      this.key('critical').bool().def(false),
      this.key('extnValue').octstr()
    );
  });

  var TBSCertificate = asn1_1.define('TBSCertificate', function () {
    this.seq().obj(
      this.key('version').explicit(0).int(),
      this.key('serialNumber').int(),
      this.key('signature').use(AlgorithmIdentifier),
      this.key('issuer').use(Name),
      this.key('validity').use(Validity),
      this.key('subject').use(Name),
      this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
      this.key('issuerUniqueID').implicit(1).bitstr().optional(),
      this.key('subjectUniqueID').implicit(2).bitstr().optional(),
      this.key('extensions').explicit(3).seqof(Extension).optional()
    );
  });

  var X509Certificate = asn1_1.define('X509Certificate', function () {
    this.seq().obj(
      this.key('tbsCertificate').use(TBSCertificate),
      this.key('signatureAlgorithm').use(AlgorithmIdentifier),
      this.key('signatureValue').bitstr()
    );
  });

  var certificate = X509Certificate;

  var certificate$1 = certificate;

  var RSAPrivateKey = asn1_1.define('RSAPrivateKey', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('modulus').int(),
      this.key('publicExponent').int(),
      this.key('privateExponent').int(),
      this.key('prime1').int(),
      this.key('prime2').int(),
      this.key('exponent1').int(),
      this.key('exponent2').int(),
      this.key('coefficient').int()
    );
  });
  var RSAPrivateKey_1 = RSAPrivateKey;

  var RSAPublicKey = asn1_1.define('RSAPublicKey', function () {
    this.seq().obj(
      this.key('modulus').int(),
      this.key('publicExponent').int()
    );
  });
  var RSAPublicKey_1 = RSAPublicKey;

  var PublicKey = asn1_1.define('SubjectPublicKeyInfo', function () {
    this.seq().obj(
      this.key('algorithm').use(AlgorithmIdentifier$1),
      this.key('subjectPublicKey').bitstr()
    );
  });
  var PublicKey_1 = PublicKey;

  var AlgorithmIdentifier$1 = asn1_1.define('AlgorithmIdentifier', function () {
    this.seq().obj(
      this.key('algorithm').objid(),
      this.key('none').null_().optional(),
      this.key('curve').objid().optional(),
      this.key('params').seq().obj(
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int()
      ).optional()
    );
  });

  var PrivateKeyInfo = asn1_1.define('PrivateKeyInfo', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('algorithm').use(AlgorithmIdentifier$1),
      this.key('subjectPrivateKey').octstr()
    );
  });
  var PrivateKey = PrivateKeyInfo;
  var EncryptedPrivateKeyInfo = asn1_1.define('EncryptedPrivateKeyInfo', function () {
    this.seq().obj(
      this.key('algorithm').seq().obj(
        this.key('id').objid(),
        this.key('decrypt').seq().obj(
          this.key('kde').seq().obj(
            this.key('id').objid(),
            this.key('kdeparams').seq().obj(
              this.key('salt').octstr(),
              this.key('iters').int()
            )
          ),
          this.key('cipher').seq().obj(
            this.key('algo').objid(),
            this.key('iv').octstr()
          )
        )
      ),
      this.key('subjectPrivateKey').octstr()
    );
  });

  var EncryptedPrivateKey = EncryptedPrivateKeyInfo;

  var DSAPrivateKey = asn1_1.define('DSAPrivateKey', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int(),
      this.key('pub_key').int(),
      this.key('priv_key').int()
    );
  });
  var DSAPrivateKey_1 = DSAPrivateKey;

  var DSAparam = asn1_1.define('DSAparam', function () {
    this.int();
  });

  var ECPrivateKey = asn1_1.define('ECPrivateKey', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('privateKey').octstr(),
      this.key('parameters').optional().explicit(0).use(ECParameters),
      this.key('publicKey').optional().explicit(1).bitstr()
    );
  });
  var ECPrivateKey_1 = ECPrivateKey;

  var ECParameters = asn1_1.define('ECParameters', function () {
    this.choice({
      namedCurve: this.objid()
    });
  });

  var signature$2 = asn1_1.define('signature', function () {
    this.seq().obj(
      this.key('r').int(),
      this.key('s').int()
    );
  });

  var asn1_1$1 = {
  	certificate: certificate$1,
  	RSAPrivateKey: RSAPrivateKey_1,
  	RSAPublicKey: RSAPublicKey_1,
  	PublicKey: PublicKey_1,
  	PrivateKey: PrivateKey,
  	EncryptedPrivateKey: EncryptedPrivateKey,
  	DSAPrivateKey: DSAPrivateKey_1,
  	DSAparam: DSAparam,
  	ECPrivateKey: ECPrivateKey_1,
  	signature: signature$2
  };

  var aesid = {
  	"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
  	"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
  	"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
  	"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
  	"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
  	"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
  	"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
  	"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
  	"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
  	"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
  	"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
  	"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
  };

  var aesid$1 = /*#__PURE__*/Object.freeze({
    default: aesid
  });

  var Buffer$6 = safeBuffer.Buffer;
  var Transform = require$$0.Transform;


  function throwIfNotStringOrBuffer (val, prefix) {
    if (!Buffer$6.isBuffer(val) && typeof val !== 'string') {
      throw new TypeError(prefix + ' must be a string or a buffer')
    }
  }

  function HashBase (blockSize) {
    Transform.call(this);

    this._block = Buffer$6.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];

    this._finalized = false;
  }

  inherits(HashBase, Transform);

  HashBase.prototype._transform = function (chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype._flush = function (callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype.update = function (data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer$6.isBuffer(data)) data = Buffer$6.from(data, encoding);

    // consume data
    var block = this._block;
    var offset = 0;
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data.length) block[this._blockOffset++] = data[offset++];

    // update length
    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
      this._length[j] += carry;
      carry = (this._length[j] / 0x0100000000) | 0;
      if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }

    return this
  };

  HashBase.prototype._update = function () {
    throw new Error('_update is not implemented')
  };

  HashBase.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true;

    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);

    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i = 0; i < 4; ++i) this._length[i] = 0;

    return digest
  };

  HashBase.prototype._digest = function () {
    throw new Error('_digest is not implemented')
  };

  var hashBase = HashBase;

  var ARRAY16 = new Array(16);

  function MD5 () {
    hashBase.call(this, 64);

    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
  }

  inherits(MD5, hashBase);

  MD5.prototype._update = function () {
    var M = ARRAY16;
    for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;

    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

    this._a = (this._a + a) | 0;
    this._b = (this._b + b) | 0;
    this._c = (this._c + c) | 0;
    this._d = (this._d + d) | 0;
  };

  MD5.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();

    // produce result
    var buffer$$1 = new Buffer(16);
    buffer$$1.writeInt32LE(this._a, 0);
    buffer$$1.writeInt32LE(this._b, 4);
    buffer$$1.writeInt32LE(this._c, 8);
    buffer$$1.writeInt32LE(this._d, 12);
    return buffer$$1
  };

  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function fnF (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
  }

  function fnG (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
  }

  function fnH (a, b, c, d, m, k, s) {
    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
  }

  function fnI (a, b, c, d, m, k, s) {
    return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
  }

  var md5_js = MD5;

  var Buffer$7 = safeBuffer.Buffer;


  /* eslint-disable camelcase */
  function EVP_BytesToKey (password, salt, keyBits, ivLen) {
    if (!Buffer$7.isBuffer(password)) password = Buffer$7.from(password, 'binary');
    if (salt) {
      if (!Buffer$7.isBuffer(salt)) salt = Buffer$7.from(salt, 'binary');
      if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
    }

    var keyLen = keyBits / 8;
    var key = Buffer$7.alloc(keyLen);
    var iv = Buffer$7.alloc(ivLen || 0);
    var tmp = Buffer$7.alloc(0);

    while (keyLen > 0 || ivLen > 0) {
      var hash = new md5_js();
      hash.update(tmp);
      hash.update(password);
      if (salt) hash.update(salt);
      tmp = hash.digest();

      var used = 0;

      if (keyLen > 0) {
        var keyStart = key.length - keyLen;
        used = Math.min(keyLen, tmp.length);
        tmp.copy(key, keyStart, 0, used);
        keyLen -= used;
      }

      if (used < tmp.length && ivLen > 0) {
        var ivStart = iv.length - ivLen;
        var length = Math.min(ivLen, tmp.length - used);
        tmp.copy(iv, ivStart, used, used + length);
        ivLen -= length;
      }
    }

    tmp.fill(0);
    return { key: key, iv: iv }
  }

  var evp_bytestokey = EVP_BytesToKey;

  var browserifyAes = createCommonjsModule(function (module, exports) {
  exports.createCipher = exports.Cipher = crypto.createCipher;
  exports.createCipheriv = exports.Cipheriv = crypto.createCipheriv;
  exports.createDecipher = exports.Decipher = crypto.createDecipher;
  exports.createDecipheriv = exports.Decipheriv = crypto.createDecipheriv;
  exports.listCiphers = exports.getCiphers = crypto.getCiphers;
  });
  var browserifyAes_1 = browserifyAes.createCipher;
  var browserifyAes_2 = browserifyAes.Cipher;
  var browserifyAes_3 = browserifyAes.createCipheriv;
  var browserifyAes_4 = browserifyAes.Cipheriv;
  var browserifyAes_5 = browserifyAes.createDecipher;
  var browserifyAes_6 = browserifyAes.Decipher;
  var browserifyAes_7 = browserifyAes.createDecipheriv;
  var browserifyAes_8 = browserifyAes.Decipheriv;
  var browserifyAes_9 = browserifyAes.listCiphers;
  var browserifyAes_10 = browserifyAes.getCiphers;

  // adapted from https://github.com/apatil/pemstrip
  var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
  var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n/m;
  var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1-----$/m;


  var fixProc = function (okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
      var match2 = key.match(fullRegex);
      decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64');
    } else {
      var suite = 'aes' + match[1];
      var iv = new Buffer(match[2], 'hex');
      var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64');
      var cipherKey = evp_bytestokey(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
      var out = [];
      var cipher = browserifyAes.createDecipheriv(suite, cipherKey, iv);
      out.push(cipher.update(cipherText));
      out.push(cipher.final());
      decrypted = Buffer.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
      tag: tag,
      data: decrypted
    }
  };

  var aesid$2 = ( aesid$1 && aesid ) || aesid$1;

  var parseAsn1 = parseKeys;

  function parseKeys (buffer$$1) {
    var password;
    if (typeof buffer$$1 === 'object' && !Buffer.isBuffer(buffer$$1)) {
      password = buffer$$1.passphrase;
      buffer$$1 = buffer$$1.key;
    }
    if (typeof buffer$$1 === 'string') {
      buffer$$1 = new Buffer(buffer$$1);
    }

    var stripped = fixProc(buffer$$1, password);

    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch (type) {
      case 'CERTIFICATE':
        ndata = asn1_1$1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
      case 'PUBLIC KEY':
        if (!ndata) {
          ndata = asn1_1$1.PublicKey.decode(data, 'der');
        }
        subtype = ndata.algorithm.algorithm.join('.');
        switch (subtype) {
          case '1.2.840.113549.1.1.1':
            return asn1_1$1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
          case '1.2.840.10045.2.1':
            ndata.subjectPrivateKey = ndata.subjectPublicKey;
            return {
              type: 'ec',
              data: ndata
            }
          case '1.2.840.10040.4.1':
            ndata.algorithm.params.pub_key = asn1_1$1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
            return {
              type: 'dsa',
              data: ndata.algorithm.params
            }
          default: throw new Error('unknown key id ' + subtype)
        }
        throw new Error('unknown key type ' + type)
      case 'ENCRYPTED PRIVATE KEY':
        data = asn1_1$1.EncryptedPrivateKey.decode(data, 'der');
        data = decrypt(data, password);
        // falls through
      case 'PRIVATE KEY':
        ndata = asn1_1$1.PrivateKey.decode(data, 'der');
        subtype = ndata.algorithm.algorithm.join('.');
        switch (subtype) {
          case '1.2.840.113549.1.1.1':
            return asn1_1$1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
          case '1.2.840.10045.2.1':
            return {
              curve: ndata.algorithm.curve,
              privateKey: asn1_1$1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
            }
          case '1.2.840.10040.4.1':
            ndata.algorithm.params.priv_key = asn1_1$1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
            return {
              type: 'dsa',
              params: ndata.algorithm.params
            }
          default: throw new Error('unknown key id ' + subtype)
        }
        throw new Error('unknown key type ' + type)
      case 'RSA PUBLIC KEY':
        return asn1_1$1.RSAPublicKey.decode(data, 'der')
      case 'RSA PRIVATE KEY':
        return asn1_1$1.RSAPrivateKey.decode(data, 'der')
      case 'DSA PRIVATE KEY':
        return {
          type: 'dsa',
          params: asn1_1$1.DSAPrivateKey.decode(data, 'der')
        }
      case 'EC PRIVATE KEY':
        data = asn1_1$1.ECPrivateKey.decode(data, 'der');
        return {
          curve: data.parameters.value,
          privateKey: data.privateKey
        }
      default: throw new Error('unknown key type ' + type)
    }
  }
  parseKeys.signature = asn1_1$1.signature;
  function decrypt (data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid$2[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = pbkdf2$1.pbkdf2Sync(password, salt, iters, keylen);
    var cipher = browserifyAes.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return Buffer.concat(out)
  }

  var mgf = function (seed, len) {
    var t = new Buffer('');
    var  i = 0, c;
    while (t.length < len) {
      c = i2ops(i++);
      t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
    }
    return t.slice(0, len);
  };

  function i2ops(c) {
    var out = new Buffer(4);
    out.writeUInt32BE(c,0);
    return out;
  }

  var xor = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while (++i < len) {
      a[i] ^= b[i];
    }
    return a
  };

  function withPublic(paddedMsg, key) {
    return new Buffer(paddedMsg
      .toRed(bn$5.mont(key.modulus))
      .redPow(new bn$5(key.publicExponent))
      .fromRed()
      .toArray());
  }

  var withPublic_1 = withPublic;

  var browserifyRsa = crt;
  function blind(priv) {
    var r = getr(priv);
    var blinder = r.toRed(bn$5.mont(priv.modulus))
    .redPow(new bn$5(priv.publicExponent)).fromRed();
    return {
      blinder: blinder,
      unblinder:r.invm(priv.modulus)
    };
  }
  function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var mod = bn$5.mont(priv.modulus);
    var blinded = new bn$5(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(bn$5.mont(priv.prime1));
    var c2 = blinded.toRed(bn$5.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1);
    var m2 = c2.redPow(priv.exponent2);
    m1 = m1.fromRed();
    m2 = m2.fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p);
    h.imul(q);
    m2.iadd(h);
    return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
  }
  crt.getr = getr;
  function getr(priv) {
    var len = priv.modulus.byteLength();
    var r = new bn$5(randombytes(len));
    while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
      r = new bn$5(randombytes(len));
    }
    return r;
  }

  var publicEncrypt = function publicEncrypt(public_key, msg, reverse) {
    var padding;
    if (public_key.padding) {
      padding = public_key.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key = parseAsn1(public_key);
    var paddedMsg;
    if (padding === 4) {
      paddedMsg = oaep(key, msg);
    } else if (padding === 1) {
      paddedMsg = pkcs1(key, msg, reverse);
    } else if (padding === 3) {
      paddedMsg = new bn$5(msg);
      if (paddedMsg.cmp(key.modulus) >= 0) {
        throw new Error('data too long for modulus');
      }
    } else {
      throw new Error('unknown padding');
    }
    if (reverse) {
      return browserifyRsa(paddedMsg, key);
    } else {
      return withPublic_1(paddedMsg, key);
    }
  };

  function oaep(key, msg){
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash('sha1').update(new Buffer('')).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) {
      throw new Error('message too long');
    }
    var ps = new Buffer(k - mLen - hLen2 - 2);
    ps.fill(0);
    var dblen = k - hLen - 1;
    var seed = randombytes(hLen);
    var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new bn$5(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
  }
  function pkcs1(key, msg, reverse){
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) {
      throw new Error('message too long');
    }
    var ps;
    if (reverse) {
      ps = new Buffer(k - mLen - 3);
      ps.fill(0xff);
    } else {
      ps = nonZero(k - mLen - 3);
    }
    return new bn$5(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
  }
  function nonZero(len, crypto$$1) {
    var out = new Buffer(len);
    var i = 0;
    var cache = randombytes(len*2);
    var cur = 0;
    var num;
    while (i < len) {
      if (cur === cache.length) {
        cache = randombytes(len*2);
        cur = 0;
      }
      num = cache[cur++];
      if (num) {
        out[i++] = num;
      }
    }
    return out;
  }

  var privateDecrypt = function privateDecrypt(private_key, enc, reverse) {
    var padding;
    if (private_key.padding) {
      padding = private_key.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    
    var key = parseAsn1(private_key);
    var k = key.modulus.byteLength();
    if (enc.length > k || new bn$5(enc).cmp(key.modulus) >= 0) {
      throw new Error('decryption error');
    }
    var msg;
    if (reverse) {
      msg = withPublic_1(new bn$5(enc), key);
    } else {
      msg = browserifyRsa(enc, key);
    }
    var zBuffer = new Buffer(k - msg.length);
    zBuffer.fill(0);
    msg = Buffer.concat([zBuffer, msg], k);
    if (padding === 4) {
      return oaep$1(key, msg);
    } else if (padding === 1) {
      return pkcs1$1(key, msg, reverse);
    } else if (padding === 3) {
      return msg;
    } else {
      throw new Error('unknown padding');
    }
  };

  function oaep$1(key, msg){
    var n = key.modulus;
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash('sha1').update(new Buffer('')).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) {
      throw new Error('decryption error');
    }
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb =  msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) {
      throw new Error('decryption error');
    }
    var i = hLen;
    while (db[i] === 0) {
      i++;
    }
    if (db[i++] !== 1) {
      throw new Error('decryption error');
    }
    return db.slice(i);
  }

  function pkcs1$1(key, msg, reverse){
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while (msg[i++] !== 0) {
      if (i >= msg.length) {
        status++;
        break;
      }
    }
    var ps = msg.slice(2, i - 1);
    var p2 = msg.slice(i - 1, i);

    if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
      status++;
    }
    if (ps.length < 8) {
      status++;
    }
    if (status) {
      throw new Error('decryption error');
    }
    return  msg.slice(i);
  }
  function compare(a, b){
    a = new Buffer(a);
    b = new Buffer(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
      dif++;
      len = Math.min(a.length, b.length);
    }
    var i = -1;
    while (++i < len) {
      dif += (a[i] ^ b[i]);
    }
    return dif;
  }

  var browser$1 = createCommonjsModule(function (module, exports) {
  exports.publicEncrypt = publicEncrypt;
  exports.privateDecrypt = privateDecrypt;

  exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
  };

  exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
  };
  });
  var browser_1 = browser$1.publicEncrypt;
  var browser_2 = browser$1.privateDecrypt;
  var browser_3 = browser$1.privateEncrypt;
  var browser_4 = browser$1.publicDecrypt;

  var publicEncrypt$1 = createCommonjsModule(function (module, exports) {
  var crypto$$1 = crypto;
  if (typeof crypto$$1.publicEncrypt !== 'function') {
    crypto$$1 = browser$1;
  }
  exports.publicEncrypt = crypto$$1.publicEncrypt;
  exports.privateDecrypt = crypto$$1.privateDecrypt;

  if (typeof crypto$$1.privateEncrypt !== 'function') {
    exports.privateEncrypt = browser$1.privateEncrypt;
  } else {
    exports.privateEncrypt = crypto$$1.privateEncrypt;
  }

  if (typeof crypto$$1.publicDecrypt !== 'function') {
    exports.publicDecrypt = browser$1.publicDecrypt;
  } else {
    exports.publicDecrypt = crypto$$1.publicDecrypt;
  }
  });
  var publicEncrypt_1 = publicEncrypt$1.publicEncrypt;
  var publicEncrypt_2 = publicEncrypt$1.privateDecrypt;
  var publicEncrypt_3 = publicEncrypt$1.privateEncrypt;
  var publicEncrypt_4 = publicEncrypt$1.publicDecrypt;

  var browser$2 = createCommonjsModule(function (module, exports) {

  function oldBrowser () {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
  }


  var Buffer = safeBuffer.Buffer;
  var kBufferMaxLength = safeBuffer.kMaxLength;
  var crypto$$1 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
  var kMaxUint32 = Math.pow(2, 32) - 1;
  function assertOffset (offset, length) {
    if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
      throw new TypeError('offset must be a number')
    }

    if (offset > kMaxUint32 || offset < 0) {
      throw new TypeError('offset must be a uint32')
    }

    if (offset > kBufferMaxLength || offset > length) {
      throw new RangeError('offset out of range')
    }
  }

  function assertSize (size, offset, length) {
    if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
      throw new TypeError('size must be a number')
    }

    if (size > kMaxUint32 || size < 0) {
      throw new TypeError('size must be a uint32')
    }

    if (size + offset > length || size > kBufferMaxLength) {
      throw new RangeError('buffer too small')
    }
  }
  if ((crypto$$1 && crypto$$1.getRandomValues) || !process.browser) {
    exports.randomFill = randomFill;
    exports.randomFillSync = randomFillSync;
  } else {
    exports.randomFill = oldBrowser;
    exports.randomFillSync = oldBrowser;
  }
  function randomFill (buf, offset, size, cb) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
    }

    if (typeof offset === 'function') {
      cb = offset;
      offset = 0;
      size = buf.length;
    } else if (typeof size === 'function') {
      cb = size;
      size = buf.length - offset;
    } else if (typeof cb !== 'function') {
      throw new TypeError('"cb" argument must be a function')
    }
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb)
  }

  function actualFill (buf, offset, size, cb) {
    if (process.browser) {
      var ourBuf = buf.buffer;
      var uint = new Uint8Array(ourBuf, offset, size);
      crypto$$1.getRandomValues(uint);
      if (cb) {
        process.nextTick(function () {
          cb(null, buf);
        });
        return
      }
      return buf
    }
    if (cb) {
      randombytes(size, function (err, bytes) {
        if (err) {
          return cb(err)
        }
        bytes.copy(buf, offset);
        cb(null, buf);
      });
      return
    }
    var bytes = randombytes(size);
    bytes.copy(buf, offset);
    return buf
  }
  function randomFillSync (buf, offset, size) {
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    if (!Buffer.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
    }

    assertOffset(offset, buf.length);

    if (size === undefined) size = buf.length - offset;

    assertSize(size, offset, buf.length);

    return actualFill(buf, offset, size)
  }
  });
  var browser_1$1 = browser$2.randomFill;
  var browser_2$1 = browser$2.randomFillSync;

  var randomfill = createCommonjsModule(function (module, exports) {
  if (typeof crypto.randomFill === 'function' && typeof crypto.randomFillSync === 'function') {
    exports.randomFill = crypto.randomFill;
    exports.randomFillSync = crypto.randomFillSync;
  } else {
    module.exports = browser$2;
  }
  });
  var randomfill_1 = randomfill.randomFill;
  var randomfill_2 = randomfill.randomFillSync;

  var cryptoBrowserify = createCommonjsModule(function (module, exports) {

  exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = randombytes;
  exports.createHash = exports.Hash = createHash;
  exports.createHmac = exports.Hmac = createHmac;


  var algoKeys = Object.keys(algos);
  var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);
  exports.getHashes = function () {
    return hashes
  };


  exports.pbkdf2 = pbkdf2$1.pbkdf2;
  exports.pbkdf2Sync = pbkdf2$1.pbkdf2Sync;



  exports.Cipher = browserifyCipher.Cipher;
  exports.createCipher = browserifyCipher.createCipher;
  exports.Cipheriv = browserifyCipher.Cipheriv;
  exports.createCipheriv = browserifyCipher.createCipheriv;
  exports.Decipher = browserifyCipher.Decipher;
  exports.createDecipher = browserifyCipher.createDecipher;
  exports.Decipheriv = browserifyCipher.Decipheriv;
  exports.createDecipheriv = browserifyCipher.createDecipheriv;
  exports.getCiphers = browserifyCipher.getCiphers;
  exports.listCiphers = browserifyCipher.listCiphers;



  exports.DiffieHellmanGroup = diffieHellman.DiffieHellmanGroup;
  exports.createDiffieHellmanGroup = diffieHellman.createDiffieHellmanGroup;
  exports.getDiffieHellman = diffieHellman.getDiffieHellman;
  exports.createDiffieHellman = diffieHellman.createDiffieHellman;
  exports.DiffieHellman = diffieHellman.DiffieHellman;



  exports.createSign = browserifySign.createSign;
  exports.Sign = browserifySign.Sign;
  exports.createVerify = browserifySign.createVerify;
  exports.Verify = browserifySign.Verify;

  exports.createECDH = createEcdh;



  exports.publicEncrypt = publicEncrypt$1.publicEncrypt;
  exports.privateEncrypt = publicEncrypt$1.privateEncrypt;
  exports.publicDecrypt = publicEncrypt$1.publicDecrypt;
  exports.privateDecrypt = publicEncrypt$1.privateDecrypt;

  // the least I can do is make error messages for the rest of the node.js/crypto api.
  // ;[
  //   'createCredentials'
  // ].forEach(function (name) {
  //   exports[name] = function () {
  //     throw new Error([
  //       'sorry, ' + name + ' is not implemented yet',
  //       'we accept pull requests',
  //       'https://github.com/crypto-browserify/crypto-browserify'
  //     ].join('\n'))
  //   }
  // })



  exports.randomFill = randomfill.randomFill;
  exports.randomFillSync = randomfill.randomFillSync;

  exports.createCredentials = function () {
    throw new Error([
      'sorry, createCredentials is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  };

  exports.constants = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
  };
  });
  var cryptoBrowserify_1 = cryptoBrowserify.randomBytes;
  var cryptoBrowserify_2 = cryptoBrowserify.rng;
  var cryptoBrowserify_3 = cryptoBrowserify.pseudoRandomBytes;
  var cryptoBrowserify_4 = cryptoBrowserify.prng;
  var cryptoBrowserify_5 = cryptoBrowserify.createHash;
  var cryptoBrowserify_6 = cryptoBrowserify.Hash;
  var cryptoBrowserify_7 = cryptoBrowserify.createHmac;
  var cryptoBrowserify_8 = cryptoBrowserify.Hmac;
  var cryptoBrowserify_9 = cryptoBrowserify.getHashes;
  var cryptoBrowserify_10 = cryptoBrowserify.pbkdf2;
  var cryptoBrowserify_11 = cryptoBrowserify.pbkdf2Sync;
  var cryptoBrowserify_12 = cryptoBrowserify.Cipher;
  var cryptoBrowserify_13 = cryptoBrowserify.createCipher;
  var cryptoBrowserify_14 = cryptoBrowserify.Cipheriv;
  var cryptoBrowserify_15 = cryptoBrowserify.createCipheriv;
  var cryptoBrowserify_16 = cryptoBrowserify.Decipher;
  var cryptoBrowserify_17 = cryptoBrowserify.createDecipher;
  var cryptoBrowserify_18 = cryptoBrowserify.Decipheriv;
  var cryptoBrowserify_19 = cryptoBrowserify.createDecipheriv;
  var cryptoBrowserify_20 = cryptoBrowserify.getCiphers;
  var cryptoBrowserify_21 = cryptoBrowserify.listCiphers;
  var cryptoBrowserify_22 = cryptoBrowserify.DiffieHellmanGroup;
  var cryptoBrowserify_23 = cryptoBrowserify.createDiffieHellmanGroup;
  var cryptoBrowserify_24 = cryptoBrowserify.getDiffieHellman;
  var cryptoBrowserify_25 = cryptoBrowserify.createDiffieHellman;
  var cryptoBrowserify_26 = cryptoBrowserify.DiffieHellman;
  var cryptoBrowserify_27 = cryptoBrowserify.createSign;
  var cryptoBrowserify_28 = cryptoBrowserify.Sign;
  var cryptoBrowserify_29 = cryptoBrowserify.createVerify;
  var cryptoBrowserify_30 = cryptoBrowserify.Verify;
  var cryptoBrowserify_31 = cryptoBrowserify.createECDH;
  var cryptoBrowserify_32 = cryptoBrowserify.publicEncrypt;
  var cryptoBrowserify_33 = cryptoBrowserify.privateEncrypt;
  var cryptoBrowserify_34 = cryptoBrowserify.publicDecrypt;
  var cryptoBrowserify_35 = cryptoBrowserify.privateDecrypt;
  var cryptoBrowserify_36 = cryptoBrowserify.randomFill;
  var cryptoBrowserify_37 = cryptoBrowserify.randomFillSync;
  var cryptoBrowserify_38 = cryptoBrowserify.createCredentials;
  var cryptoBrowserify_39 = cryptoBrowserify.constants;

  function hash$2(key, salt, n, r, p, dklen, progressCb) {
    return scrypt.hashSync(key, { N: n, r: r, p: p }, dklen, salt)
  }

  var node$1 = hash$2;

  var rb = crypto.randomBytes;
  var rng = function() {
    return rb(16);
  };

  //     uuid.js
  //
  //     Copyright (c) 2010-2012 Robert Kieffer
  //     MIT License - http://opensource.org/licenses/mit-license.php

  // Unique ID creation requires a high quality random # generator.  We feature
  // detect to determine the best RNG source, normalizing to a function that
  // returns 128-bits of randomness, since that's what's usually required


  // Maps for number <-> hex string conversion
  var _byteToHex = [];
  var _hexToByte = {};
  for (var i = 0; i < 256; i++) {
    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
    _hexToByte[_byteToHex[i]] = i;
  }

  // **`parse()` - Parse a UUID into it's component bytes**
  function parse(s, buf, offset) {
    var i = (buf && offset) || 0, ii = 0;

    buf = buf || [];
    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
      if (ii < 16) { // Don't overflow!
        buf[i + ii++] = _hexToByte[oct];
      }
    });

    // Zero out remaining bytes if string was short
    while (ii < 16) {
      buf[i + ii++] = 0;
    }

    return buf;
  }

  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
  function unparse(buf, offset) {
    var i = offset || 0, bth = _byteToHex;
    return  bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]];
  }

  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  // random #'s we need to init node and clockseq
  var _seedBytes = rng();

  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
  var _nodeId = [
    _seedBytes[0] | 0x01,
    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
  ];

  // Per 4.2.2, randomize (14 bit) clockseq
  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

  // Previous uuid creation time
  var _lastMSecs = 0, _lastNSecs = 0;

  // See https://github.com/broofa/node-uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];

    options = options || {};

    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;

    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;

    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;

    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;

    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;

    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;

    // `clock_seq_low`
    b[i++] = clockseq & 0xff;

    // `node`
    var node = options.node || _nodeId;
    for (var n = 0; n < 6; n++) {
      b[i + n] = node[n];
    }

    return buf ? buf : unparse(b);
  }

  // **`v4()` - Generate random UUID**

  // See https://github.com/broofa/node-uuid for API details
  function v4(options, buf, offset) {
    // Deprecated - 'format' argument, as supported in v1.2
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options == 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || rng)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ii++) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || unparse(rnds);
  }

  // Export public API
  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;
  uuid.parse = parse;
  uuid.unparse = unparse;

  var uuid_1 = uuid;

  var cryp = (typeof commonjsGlobal === 'undefined') ? cryptoBrowserify : crypto;





  var isNot = function(value) {
      return (underscore.isUndefined(value) || underscore.isNull(value));
  };

  var trimLeadingZero = function (hex) {
      while (hex && hex.startsWith('0x0')) {
          hex = '0x' + hex.slice(3);
      }
      return hex;
  };

  var makeEven = function (hex) {
      if(hex.length % 2 === 1) {
          hex = hex.replace('0x', '0x0');
      }
      return hex;
  };


  var Accounts = function Accounts() {
      var _this = this;

      // sets _requestmanager
      src$14.packageInit(this, arguments);

      // remove unecessary core functions
      delete this.BatchRequest;
      delete this.extend;

      var _ethereumCall = [
          new src$13({
              name: 'getId',
              call: 'net_version',
              params: 0,
              outputFormatter: src$4.hexToNumber
          }),
          new src$13({
              name: 'getGasPrice',
              call: 'eth_gasPrice',
              params: 0
          }),
          new src$13({
              name: 'getTransactionCount',
              call: 'eth_getTransactionCount',
              params: 2,
              inputFormatter: [function (address) {
                  if (src$4.isAddress(address)) {
                      return address;
                  } else {
                      throw new Error('Address '+ address +' is not a valid address to get the "transactionCount".');
                  }
              }, function () { return 'latest'; }]
          })
      ];
      // attach methods to this._ethereumCall
      this._ethereumCall = {};
      underscore.each(_ethereumCall, function (method) {
          method.attachToObject(_this._ethereumCall);
          method.setRequestManager(_this._requestManager);
      });


      this.wallet = new Wallet(this);
  };

  Accounts.prototype._addAccountFunctions = function (account$$1) {
      var _this = this;

      // add sign functions
      account$$1.signTransaction = function signTransaction(tx, callback) {
          return _this.signTransaction(tx, account$$1.privateKey, callback);
      };
      account$$1.sign = function sign(data) {
          return _this.sign(data, account$$1.privateKey);
      };

      account$$1.encrypt = function encrypt(password, options) {
          return _this.encrypt(account$$1.privateKey, password, options);
      };


      return account$$1;
  };

  Accounts.prototype.create = function create(entropy) {
      return this._addAccountFunctions(account.create(entropy || src$4.randomHex(32)));
  };

  Accounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey) {
      return this._addAccountFunctions(account.fromPrivate(privateKey));
  };

  Accounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {
      var _this = this,
          error = false,
          result;

      callback = callback || function () {};

      if (!tx) {
          error = new Error('No transaction object given!');

          callback(error);
          return anyPromise.reject(error);
      }

      function signed (tx) {

          if (!tx.gas && !tx.gasLimit) {
              error = new Error('"gas" is missing');
          }

          if (tx.nonce  < 0 ||
              tx.gas  < 0 ||
              tx.gasPrice  < 0 ||
              tx.chainId  < 0) {
              error = new Error('Gas, gasPrice, nonce or chainId is lower than 0');
          }

          if (error) {
              callback(error);
              return anyPromise.reject(new Error('"gas" is missing'));
          }

          try {
              tx = src$6.formatters.inputCallFormatter(tx);

              var transaction = tx;
              transaction.to = tx.to || '0x';
              transaction.data = tx.data || '0x';
              transaction.value = tx.value || '0x';
              transaction.chainId = src$4.numberToHex(tx.chainId);

              var rlpEncoded = rlp.encode([
                  bytes$1.fromNat(transaction.nonce),
                  bytes$1.fromNat(transaction.gasPrice),
                  bytes$1.fromNat(transaction.gas),
                  transaction.to.toLowerCase(),
                  bytes$1.fromNat(transaction.value),
                  transaction.data,
                  bytes$1.fromNat(transaction.chainId || "0x1"),
                  "0x",
                  "0x"]);


              var hash = hash$1.keccak256(rlpEncoded);

              var signature = account.makeSigner(nat.toNumber(transaction.chainId || "0x1") * 2 + 35)(hash$1.keccak256(rlpEncoded), privateKey);

              var rawTx = rlp.decode(rlpEncoded).slice(0, 6).concat(account.decodeSignature(signature));

              rawTx[6] = makeEven(trimLeadingZero(rawTx[6]));
              rawTx[7] = makeEven(trimLeadingZero(rawTx[7]));
              rawTx[8] = makeEven(trimLeadingZero(rawTx[8]));

              var rawTransaction = rlp.encode(rawTx);

              var values = rlp.decode(rawTransaction);
              result = {
                  messageHash: hash,
                  v: trimLeadingZero(values[6]),
                  r: trimLeadingZero(values[7]),
                  s: trimLeadingZero(values[8]),
                  rawTransaction: rawTransaction
              };

          } catch(e) {
              callback(e);
              return anyPromise.reject(e);
          }

          callback(null, result);
          return result;
      }

      // Resolve immediately if nonce, chainId and price are provided
      if (tx.nonce !== undefined && tx.chainId !== undefined && tx.gasPrice !== undefined) {
          return anyPromise.resolve(signed(tx));
      }


      // Otherwise, get the missing info from the Ethereum Node
      return anyPromise.all([
          isNot(tx.chainId) ? _this._ethereumCall.getId() : tx.chainId,
          isNot(tx.gasPrice) ? _this._ethereumCall.getGasPrice() : tx.gasPrice,
          isNot(tx.nonce) ? _this._ethereumCall.getTransactionCount(_this.privateKeyToAccount(privateKey).address) : tx.nonce
      ]).then(function (args) {
          if (isNot(args[0]) || isNot(args[1]) || isNot(args[2])) {
              throw new Error('One of the values "chainId", "gasPrice", or "nonce" couldn\'t be fetched: '+ JSON.stringify(args));
          }
          return signed(underscore.extend(tx, {chainId: args[0], gasPrice: args[1], nonce: args[2]}));
      });
  };

  /* jshint ignore:start */
  Accounts.prototype.recoverTransaction = function recoverTransaction(rawTx) {
      var values = rlp.decode(rawTx);
      var signature = account.encodeSignature(values.slice(6,9));
      var recovery = bytes$1.toNumber(values[6]);
      var extraData = recovery < 35 ? [] : [bytes$1.fromNumber((recovery - 35) >> 1), "0x", "0x"];
      var signingData = values.slice(0,6).concat(extraData);
      var signingDataHex = rlp.encode(signingData);
      return account.recover(hash$1.keccak256(signingDataHex), signature);
  };
  /* jshint ignore:end */

  Accounts.prototype.hashMessage = function hashMessage(data) {
      var message = src$4.isHexStrict(data) ? src$4.hexToBytes(data) : data;
      var messageBuffer = Buffer.from(message);
      var preamble = "\x19Ethereum Signed Message:\n" + message.length;
      var preambleBuffer = Buffer.from(preamble);
      var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);
      return hash$1.keccak256s(ethMessage);
  };

  Accounts.prototype.sign = function sign(data, privateKey) {
      var hash = this.hashMessage(data);
      var signature = account.sign(hash, privateKey);
      var vrs = account.decodeSignature(signature);
      return {
          message: data,
          messageHash: hash,
          v: vrs[0],
          r: vrs[1],
          s: vrs[2],
          signature: signature
      };
  };

  Accounts.prototype.recover = function recover(message, signature, preFixed) {
      var args = [].slice.apply(arguments);


      if (underscore.isObject(message)) {
          return this.recover(message.messageHash, account.encodeSignature([message.v, message.r, message.s]), true);
      }

      if (!preFixed) {
          message = this.hashMessage(message);
      }

      if (args.length >= 4) {
          preFixed = args.slice(-1)[0];
          preFixed = underscore.isBoolean(preFixed) ? !!preFixed : false;

          return this.recover(message, account.encodeSignature(args.slice(1, 4)), preFixed); // v, r, s
      }
      return account.recover(message, signature);
  };

  // Taken from https://github.com/ethereumjs/ethereumjs-wallet
  Accounts.prototype.decrypt = function (v3Keystore, password, nonStrict) {
      /* jshint maxcomplexity: 10 */

      if(!underscore.isString(password)) {
          throw new Error('No password given.');
      }

      var json = (underscore.isObject(v3Keystore)) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);

      if (json.version !== 3) {
          throw new Error('Not a valid V3 wallet');
      }

      var derivedKey;
      var kdfparams;
      if (json.crypto.kdf === 'scrypt') {
          kdfparams = json.crypto.kdfparams;

          // FIXME: support progress reporting callback
          derivedKey = node$1(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
      } else if (json.crypto.kdf === 'pbkdf2') {
          kdfparams = json.crypto.kdfparams;

          if (kdfparams.prf !== 'hmac-sha256') {
              throw new Error('Unsupported parameters to PBKDF2');
          }

          derivedKey = cryp.pbkdf2Sync(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
      } else {
          throw new Error('Unsupported key derivation scheme');
      }

      var ciphertext = new Buffer(json.crypto.ciphertext, 'hex');

      var mac = src$4.sha3(Buffer.concat([ derivedKey.slice(16, 32), ciphertext ])).replace('0x','');
      if (mac !== json.crypto.mac) {
          throw new Error('Key derivation failed - possibly wrong password');
      }

      var decipher = cryp.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), new Buffer(json.crypto.cipherparams.iv, 'hex'));
      var seed = '0x'+ Buffer.concat([ decipher.update(ciphertext), decipher.final() ]).toString('hex');

      return this.privateKeyToAccount(seed);
  };

  Accounts.prototype.encrypt = function (privateKey, password, options) {
      /* jshint maxcomplexity: 20 */
      var account$$1 = this.privateKeyToAccount(privateKey);

      options = options || {};
      var salt = options.salt || cryp.randomBytes(32);
      var iv = options.iv || cryp.randomBytes(16);

      var derivedKey;
      var kdf = options.kdf || 'scrypt';
      var kdfparams = {
          dklen: options.dklen || 32,
          salt: salt.toString('hex')
      };

      if (kdf === 'pbkdf2') {
          kdfparams.c = options.c || 262144;
          kdfparams.prf = 'hmac-sha256';
          derivedKey = cryp.pbkdf2Sync(new Buffer(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');
      } else if (kdf === 'scrypt') {
          // FIXME: support progress reporting callback
          kdfparams.n = options.n || 8192; // 2048 4096 8192 16384
          kdfparams.r = options.r || 8;
          kdfparams.p = options.p || 1;
          derivedKey = node$1(new Buffer(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
      } else {
          throw new Error('Unsupported kdf');
      }

      var cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);
      if (!cipher) {
          throw new Error('Unsupported cipher');
      }

      var ciphertext = Buffer.concat([ cipher.update(new Buffer(account$$1.privateKey.replace('0x',''), 'hex')), cipher.final() ]);

      var mac = src$4.sha3(Buffer.concat([ derivedKey.slice(16, 32), new Buffer(ciphertext, 'hex') ])).replace('0x','');

      return {
          version: 3,
          id: uuid_1.v4({ random: options.uuid || cryp.randomBytes(16) }),
          address: account$$1.address.toLowerCase().replace('0x',''),
          crypto: {
              ciphertext: ciphertext.toString('hex'),
              cipherparams: {
                  iv: iv.toString('hex')
              },
              cipher: options.cipher || 'aes-128-ctr',
              kdf: kdf,
              kdfparams: kdfparams,
              mac: mac.toString('hex')
          }
      };
  };


  // Note: this is trying to follow closely the specs on
  // http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html

  function Wallet(accounts) {
      this._accounts = accounts;
      this.length = 0;
      this.defaultKeyName = "web3js_wallet";
  }

  Wallet.prototype._findSafeIndex = function (pointer) {
      pointer = pointer || 0;
      if (underscore.has(this, pointer)) {
          return this._findSafeIndex(pointer + 1);
      } else {
          return pointer;
      }
  };

  Wallet.prototype._currentIndexes = function () {
      var keys = Object.keys(this);
      var indexes = keys
          .map(function(key) { return parseInt(key); })
          .filter(function(n) { return (n < 9e20); });

      return indexes;
  };

  Wallet.prototype.create = function (numberOfAccounts, entropy) {
      for (var i = 0; i < numberOfAccounts; ++i) {
          this.add(this._accounts.create(entropy).privateKey);
      }
      return this;
  };

  Wallet.prototype.add = function (account$$1) {

      if (underscore.isString(account$$1)) {
          account$$1 = this._accounts.privateKeyToAccount(account$$1);
      }
      if (!this[account$$1.address]) {
          account$$1 = this._accounts.privateKeyToAccount(account$$1.privateKey);
          account$$1.index = this._findSafeIndex();

          this[account$$1.index] = account$$1;
          this[account$$1.address] = account$$1;
          this[account$$1.address.toLowerCase()] = account$$1;

          this.length++;

          return account$$1;
      } else {
          return this[account$$1.address];
      }
  };

  Wallet.prototype.remove = function (addressOrIndex) {
      var account$$1 = this[addressOrIndex];

      if (account$$1 && account$$1.address) {
          // address
          this[account$$1.address].privateKey = null;
          delete this[account$$1.address];
          // address lowercase
          this[account$$1.address.toLowerCase()].privateKey = null;
          delete this[account$$1.address.toLowerCase()];
          // index
          this[account$$1.index].privateKey = null;
          delete this[account$$1.index];

          this.length--;

          return true;
      } else {
          return false;
      }
  };

  Wallet.prototype.clear = function () {
      var _this = this;
      var indexes = this._currentIndexes();

      indexes.forEach(function(index) {
          _this.remove(index);
      });

      return this;
  };

  Wallet.prototype.encrypt = function (password, options) {
      var _this = this;
      var indexes = this._currentIndexes();

      var accounts = indexes.map(function(index) {
          return _this[index].encrypt(password, options);
      });

      return accounts;
  };


  Wallet.prototype.decrypt = function (encryptedWallet, password) {
      var _this = this;

      encryptedWallet.forEach(function (keystore) {
          var account$$1 = _this._accounts.decrypt(keystore, password);

          if (account$$1) {
              _this.add(account$$1);
          } else {
              throw new Error('Couldn\'t decrypt accounts. Password wrong?');
          }
      });

      return this;
  };

  Wallet.prototype.save = function (password, keyName) {
      localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));

      return true;
  };

  Wallet.prototype.load = function (password, keyName) {
      var keystore = localStorage.getItem(keyName || this.defaultKeyName);

      if (keystore) {
          try {
              keystore = JSON.parse(keystore);
          } catch(e) {

          }
      }

      return this.decrypt(keystore || [], password);
  };

  if (typeof localStorage === 'undefined') {
      delete Wallet.prototype.save;
      delete Wallet.prototype.load;
  }


  var src$19 = Accounts;

  var getNetworkType = function (callback) {
      var _this = this,
          id;


      return this.net.getId()
          .then(function (givenId) {

              id = givenId;

              return _this.getBlock(0);
          })
          .then(function (genesis) {
              var returnValue = 'private';

              if (genesis.hash === '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3' &&
                  id === 1) {
                  returnValue = 'main';
              }
              if (genesis.hash === '0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303' &&
                  id === 2) {
                  returnValue = 'morden';
              }
              if (genesis.hash === '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d' &&
                  id === 3) {
                  returnValue = 'ropsten';
              }
              if (genesis.hash === '0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177' &&
                  id === 4) {
                  returnValue = 'rinkeby';
              }
              if (genesis.hash === '0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9' &&
                  id === 42) {
                  returnValue = 'kovan';
              }

              if (underscore.isFunction(callback)) {
                  callback(null, returnValue);
              }

              return returnValue;
          })
          .catch(function (err) {
              if (underscore.isFunction(callback)) {
                  callback(err);
              } else {
                  throw err;
              }
          });
  };

  var getNetworkType_1 = getNetworkType;

  var Subscriptions$2 = src$12.subscriptions;











  var formatter = src$6.formatters;


  var blockCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
  };

  var transactionFromBlockCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
  };

  var uncleCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
  };

  var getBlockTransactionCountCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
  };

  var uncleCountCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
  };


  var Eth = function Eth() {
      var _this = this;

      // sets _requestmanager
      src$14.packageInit(this, arguments);

      // overwrite setProvider
      var setProvider = this.setProvider;
      this.setProvider = function () {
          setProvider.apply(_this, arguments);
          _this.net.setProvider.apply(_this, arguments);
          _this.personal.setProvider.apply(_this, arguments);
          _this.accounts.setProvider.apply(_this, arguments);
          _this.Contract.setProvider(_this.currentProvider, _this.accounts);
      };


      var defaultAccount = null;
      var defaultBlock = 'latest';

      Object.defineProperty(this, 'defaultAccount', {
          get: function () {
              return defaultAccount;
          },
          set: function (val) {
              if(val) {
                  defaultAccount = src$4.toChecksumAddress(formatter.inputAddressFormatter(val));
              }

              // also set on the Contract object
              _this.Contract.defaultAccount = defaultAccount;
              _this.personal.defaultAccount = defaultAccount;

              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultAccount = defaultAccount;
              });

              return val;
          },
          enumerable: true
      });
      Object.defineProperty(this, 'defaultBlock', {
          get: function () {
              return defaultBlock;
          },
          set: function (val) {
              defaultBlock = val;
              // also set on the Contract object
              _this.Contract.defaultBlock = defaultBlock;
              _this.personal.defaultBlock = defaultBlock;

              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultBlock = defaultBlock;
              });

              return val;
          },
          enumerable: true
      });


      this.clearSubscriptions = _this._requestManager.clearSubscriptions;

      // add net
      this.net = new src$15(this.currentProvider);
      // add chain detection
      this.net.getNetworkType = getNetworkType_1.bind(this);

      // add accounts
      this.accounts = new src$19(this.currentProvider);

      // add personal
      this.personal = new src$16(this.currentProvider);
      this.personal.defaultAccount = this.defaultAccount;

      // create a proxy Contract type for this instance, as a Contract's provider
      // is stored as a class member rather than an instance variable. If we do
      // not create this proxy type, changing the provider in one instance of
      // web3-eth would subsequently change the provider for _all_ contract
      // instances!
      var Contract = function Contract() {
          src$18.apply(this, arguments);
      };

      Contract.setProvider = function() {
          src$18.setProvider.apply(this, arguments);
      };

      // make our proxy Contract inherit from web3-eth-contract so that it has all
      // the right functionality and so that instanceof and friends work properly
      Contract.prototype = Object.create(src$18.prototype);
      Contract.prototype.constructor = Contract;

      // add contract
      this.Contract = Contract;
      this.Contract.defaultAccount = this.defaultAccount;
      this.Contract.defaultBlock = this.defaultBlock;
      this.Contract.setProvider(this.currentProvider, this.accounts);

      // add IBAN
      this.Iban = src$5;

      // add ABI
      this.abi = src$17;


      var methods = [
          new src$13({
              name: 'getProtocolVersion',
              call: 'eth_protocolVersion',
              params: 0
          }),
          new src$13({
              name: 'getCoinbase',
              call: 'eth_coinbase',
              params: 0
          }),
          new src$13({
              name: 'isMining',
              call: 'eth_mining',
              params: 0
          }),
          new src$13({
              name: 'getHashrate',
              call: 'eth_hashrate',
              params: 0,
              outputFormatter: src$4.hexToNumber
          }),
          new src$13({
              name: 'isSyncing',
              call: 'eth_syncing',
              params: 0,
              outputFormatter: formatter.outputSyncingFormatter
          }),
          new src$13({
              name: 'getGasPrice',
              call: 'eth_gasPrice',
              params: 0,
              outputFormatter: formatter.outputBigNumberFormatter
          }),
          new src$13({
              name: 'getAccounts',
              call: 'eth_accounts',
              params: 0,
              outputFormatter: src$4.toChecksumAddress
          }),
          new src$13({
              name: 'getBlockNumber',
              call: 'eth_blockNumber',
              params: 0,
              outputFormatter: src$4.hexToNumber
          }),
          new src$13({
              name: 'getBalance',
              call: 'eth_getBalance',
              params: 2,
              inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
              outputFormatter: formatter.outputBigNumberFormatter
          }),
          new src$13({
              name: 'getStorageAt',
              call: 'eth_getStorageAt',
              params: 3,
              inputFormatter: [formatter.inputAddressFormatter, src$4.numberToHex, formatter.inputDefaultBlockNumberFormatter]
          }),
          new src$13({
              name: 'getCode',
              call: 'eth_getCode',
              params: 2,
              inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]
          }),
          new src$13({
              name: 'getBlock',
              call: blockCall,
              params: 2,
              inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],
              outputFormatter: formatter.outputBlockFormatter
          }),
          new src$13({
              name: 'getUncle',
              call: uncleCall,
              params: 2,
              inputFormatter: [formatter.inputBlockNumberFormatter, src$4.numberToHex],
              outputFormatter: formatter.outputBlockFormatter,

          }),
          new src$13({
              name: 'getBlockTransactionCount',
              call: getBlockTransactionCountCall,
              params: 1,
              inputFormatter: [formatter.inputBlockNumberFormatter],
              outputFormatter: src$4.hexToNumber
          }),
          new src$13({
              name: 'getBlockUncleCount',
              call: uncleCountCall,
              params: 1,
              inputFormatter: [formatter.inputBlockNumberFormatter],
              outputFormatter: src$4.hexToNumber
          }),
          new src$13({
              name: 'getTransaction',
              call: 'eth_getTransactionByHash',
              params: 1,
              inputFormatter: [null],
              outputFormatter: formatter.outputTransactionFormatter
          }),
          new src$13({
              name: 'getTransactionFromBlock',
              call: transactionFromBlockCall,
              params: 2,
              inputFormatter: [formatter.inputBlockNumberFormatter, src$4.numberToHex],
              outputFormatter: formatter.outputTransactionFormatter
          }),
          new src$13({
              name: 'getTransactionReceipt',
              call: 'eth_getTransactionReceipt',
              params: 1,
              inputFormatter: [null],
              outputFormatter: formatter.outputTransactionReceiptFormatter
          }),
          new src$13({
              name: 'getTransactionCount',
              call: 'eth_getTransactionCount',
              params: 2,
              inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
              outputFormatter: src$4.hexToNumber
          }),
          new src$13({
              name: 'sendSignedTransaction',
              call: 'eth_sendRawTransaction',
              params: 1,
              inputFormatter: [null]
          }),
          new src$13({
              name: 'signTransaction',
              call: 'eth_signTransaction',
              params: 1,
              inputFormatter: [formatter.inputTransactionFormatter]
          }),
          new src$13({
              name: 'sendTransaction',
              call: 'eth_sendTransaction',
              params: 1,
              inputFormatter: [formatter.inputTransactionFormatter]
          }),
          new src$13({
              name: 'sign',
              call: 'eth_sign',
              params: 2,
              inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],
              transformPayload: function (payload) {
                  payload.params.reverse();
                  return payload;
              }
          }),
          new src$13({
              name: 'call',
              call: 'eth_call',
              params: 2,
              inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]
          }),
          new src$13({
              name: 'estimateGas',
              call: 'eth_estimateGas',
              params: 1,
              inputFormatter: [formatter.inputCallFormatter],
              outputFormatter: src$4.hexToNumber
          }),
          new src$13({
              name: 'getCompilers',
              call: 'eth_getCompilers',
              params: 0
          }),
          new src$13({
              name: 'compile.solidity',
              call: 'eth_compileSolidity',
              params: 1
          }),
          new src$13({
              name: 'compile.lll',
              call: 'eth_compileLLL',
              params: 1
          }),
          new src$13({
              name: 'compile.serpent',
              call: 'eth_compileSerpent',
              params: 1
          }),
          new src$13({
              name: 'submitWork',
              call: 'eth_submitWork',
              params: 3
          }),
          new src$13({
              name: 'getWork',
              call: 'eth_getWork',
              params: 0
          }),
          new src$13({
              name: 'getPastLogs',
              call: 'eth_getLogs',
              params: 1,
              inputFormatter: [formatter.inputLogFormatter],
              outputFormatter: formatter.outputLogFormatter
          }),

          // subscriptions
          new Subscriptions$2({
              name: 'subscribe',
              type: 'eth',
              subscriptions: {
                  'newBlockHeaders': {
                      // TODO rename on RPC side?
                      subscriptionName: 'newHeads', // replace subscription with this name
                      params: 0,
                      outputFormatter: formatter.outputBlockFormatter
                  },
                  'pendingTransactions': {
                      subscriptionName: 'newPendingTransactions', // replace subscription with this name
                      params: 0
                  },
                  'logs': {
                      params: 1,
                      inputFormatter: [formatter.inputLogFormatter],
                      outputFormatter: formatter.outputLogFormatter,
                      // DUBLICATE, also in web3-eth-contract
                      subscriptionHandler: function (output) {
                          if(output.removed) {
                              this.emit('changed', output);
                          } else {
                              this.emit('data', output);
                          }

                          if (underscore.isFunction(this.callback)) {
                              this.callback(null, output, this);
                          }
                      }
                  },
                  'syncing': {
                      params: 0,
                      outputFormatter: formatter.outputSyncingFormatter,
                      subscriptionHandler: function (output) {
                          var _this = this;

                          // fire TRUE at start
                          if(this._isSyncing !== true) {
                              this._isSyncing = true;
                              this.emit('changed', _this._isSyncing);

                              if (underscore.isFunction(this.callback)) {
                                  this.callback(null, _this._isSyncing, this);
                              }

                              setTimeout(function () {
                                  _this.emit('data', output);

                                  if (underscore.isFunction(_this.callback)) {
                                      _this.callback(null, output, _this);
                                  }
                              }, 0);

                              // fire sync status
                          } else {
                              this.emit('data', output);
                              if (underscore.isFunction(_this.callback)) {
                                  this.callback(null, output, this);
                              }

                              // wait for some time before fireing the FALSE
                              clearTimeout(this._isSyncingTimeout);
                              this._isSyncingTimeout = setTimeout(function () {
                                  if(output.currentBlock > output.highestBlock - 200) {
                                      _this._isSyncing = false;
                                      _this.emit('changed', _this._isSyncing);

                                      if (underscore.isFunction(_this.callback)) {
                                          _this.callback(null, _this._isSyncing, _this);
                                      }
                                  }
                              }, 500);
                          }
                      }
                  }
              }
          })
      ];

      methods.forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)
          method.defaultBlock = _this.defaultBlock;
          method.defaultAccount = _this.defaultAccount;
      });

  };

  src$14.addProviders(Eth);


  var src$20 = Eth;

  var Subscriptions$3 = src$12.subscriptions;

  // var formatters = require('web3-core-helpers').formatters;



  var Shh = function Shh() {
      var _this = this;

      // sets _requestmanager
      src$14.packageInit(this, arguments);

      // overwrite setProvider
      var setProvider = this.setProvider;
      this.setProvider = function () {
          setProvider.apply(_this, arguments);
          _this.net.setProvider.apply(_this, arguments);
      };

      this.clearSubscriptions = _this._requestManager.clearSubscriptions;

      this.net = new src$15(this.currentProvider);


      [
          new Subscriptions$3({
              name: 'subscribe',
              type: 'shh',
              subscriptions: {
                  'messages': {
                      params: 1
                      // inputFormatter: [formatters.inputPostFormatter],
                      // outputFormatter: formatters.outputPostFormatter
                  }
              }
          }),

          new src$13({
              name: 'getVersion',
              call: 'shh_version',
              params: 0
          }),
          new src$13({
              name: 'getInfo',
              call: 'shh_info',
              params: 0
          }),
          new src$13({
              name: 'setMaxMessageSize',
              call: 'shh_setMaxMessageSize',
              params: 1
          }),
          new src$13({
              name: 'setMinPoW',
              call: 'shh_setMinPoW',
              params: 1
          }),
          new src$13({
              name: 'markTrustedPeer',
              call: 'shh_markTrustedPeer',
              params: 1
          }),
          new src$13({
              name: 'newKeyPair',
              call: 'shh_newKeyPair',
              params: 0
          }),
          new src$13({
              name: 'addPrivateKey',
              call: 'shh_addPrivateKey',
              params: 1
          }),
          new src$13({
              name: 'deleteKeyPair',
              call: 'shh_deleteKeyPair',
              params: 1
          }),
          new src$13({
              name: 'hasKeyPair',
              call: 'shh_hasKeyPair',
              params: 1
          }),
          new src$13({
              name: 'getPublicKey',
              call: 'shh_getPublicKey',
              params: 1
          }),
          new src$13({
              name: 'getPrivateKey',
              call: 'shh_getPrivateKey',
              params: 1
          }),
          new src$13({
              name: 'newSymKey',
              call: 'shh_newSymKey',
              params: 0
          }),
          new src$13({
              name: 'addSymKey',
              call: 'shh_addSymKey',
              params: 1
          }),
          new src$13({
              name: 'generateSymKeyFromPassword',
              call: 'shh_generateSymKeyFromPassword',
              params: 1
          }),
          new src$13({
              name: 'hasSymKey',
              call: 'shh_hasSymKey',
              params: 1
          }),
          new src$13({
              name: 'getSymKey',
              call: 'shh_getSymKey',
              params: 1
          }),
          new src$13({
              name: 'deleteSymKey',
              call: 'shh_deleteSymKey',
              params: 1
          }),

          new src$13({
              name: 'newMessageFilter',
              call: 'shh_newMessageFilter',
              params: 1
          }),
          new src$13({
              name: 'getFilterMessages',
              call: 'shh_getFilterMessages',
              params: 1
          }),
          new src$13({
              name: 'deleteMessageFilter',
              call: 'shh_deleteMessageFilter',
              params: 1
          }),

          new src$13({
              name: 'post',
              call: 'shh_post',
              params: 1,
              inputFormatter: [null]
          })
      ].forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager);
      });
  };

  src$14.addProviders(Shh);



  var src$21 = Shh;

  var fs_1 = clone(fs);

  function clone (obj) {
    if (obj === null || typeof obj !== 'object')
      return obj

    if (obj instanceof Object)
      var copy = { __proto__: obj.__proto__ };
    else
      var copy = Object.create(null);

    Object.getOwnPropertyNames(obj).forEach(function (key) {
      Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
    });

    return copy
  }

  var origCwd = process.cwd;
  var cwd = null;

  var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;

  process.cwd = function() {
    if (!cwd)
      cwd = origCwd.call(process);
    return cwd
  };
  try {
    process.cwd();
  } catch (er) {}

  var chdir = process.chdir;
  process.chdir = function(d) {
    cwd = null;
    chdir.call(process, d);
  };

  var polyfills = patch;

  function patch (fs$$1) {
    // (re-)implement some things that are known busted or missing.

    // lchmod, broken prior to 0.6.2
    // back-port the fix here.
    if (constants.hasOwnProperty('O_SYMLINK') &&
        process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
      patchLchmod(fs$$1);
    }

    // lutimes implementation, or no-op
    if (!fs$$1.lutimes) {
      patchLutimes(fs$$1);
    }

    // https://github.com/isaacs/node-graceful-fs/issues/4
    // Chown should not fail on einval or eperm if non-root.
    // It should not fail on enosys ever, as this just indicates
    // that a fs doesn't support the intended operation.

    fs$$1.chown = chownFix(fs$$1.chown);
    fs$$1.fchown = chownFix(fs$$1.fchown);
    fs$$1.lchown = chownFix(fs$$1.lchown);

    fs$$1.chmod = chmodFix(fs$$1.chmod);
    fs$$1.fchmod = chmodFix(fs$$1.fchmod);
    fs$$1.lchmod = chmodFix(fs$$1.lchmod);

    fs$$1.chownSync = chownFixSync(fs$$1.chownSync);
    fs$$1.fchownSync = chownFixSync(fs$$1.fchownSync);
    fs$$1.lchownSync = chownFixSync(fs$$1.lchownSync);

    fs$$1.chmodSync = chmodFixSync(fs$$1.chmodSync);
    fs$$1.fchmodSync = chmodFixSync(fs$$1.fchmodSync);
    fs$$1.lchmodSync = chmodFixSync(fs$$1.lchmodSync);

    fs$$1.stat = statFix(fs$$1.stat);
    fs$$1.fstat = statFix(fs$$1.fstat);
    fs$$1.lstat = statFix(fs$$1.lstat);

    fs$$1.statSync = statFixSync(fs$$1.statSync);
    fs$$1.fstatSync = statFixSync(fs$$1.fstatSync);
    fs$$1.lstatSync = statFixSync(fs$$1.lstatSync);

    // if lchmod/lchown do not exist, then make them no-ops
    if (!fs$$1.lchmod) {
      fs$$1.lchmod = function (path$$1, mode, cb) {
        if (cb) process.nextTick(cb);
      };
      fs$$1.lchmodSync = function () {};
    }
    if (!fs$$1.lchown) {
      fs$$1.lchown = function (path$$1, uid, gid, cb) {
        if (cb) process.nextTick(cb);
      };
      fs$$1.lchownSync = function () {};
    }

    // on Windows, A/V software can lock the directory, causing this
    // to fail with an EACCES or EPERM if the directory contains newly
    // created files.  Try again on failure, for up to 60 seconds.

    // Set the timeout this long because some Windows Anti-Virus, such as Parity
    // bit9, may lock files for up to a minute, causing npm package install
    // failures. Also, take care to yield the scheduler. Windows scheduling gives
    // CPU to a busy looping process, which can cause the program causing the lock
    // contention to be starved of CPU by node, so the contention doesn't resolve.
    if (platform === "win32") {
      fs$$1.rename = (function (fs$rename) { return function (from, to, cb) {
        var start = Date.now();
        var backoff = 0;
        fs$rename(from, to, function CB (er) {
          if (er
              && (er.code === "EACCES" || er.code === "EPERM")
              && Date.now() - start < 60000) {
            setTimeout(function() {
              fs$$1.stat(to, function (stater, st) {
                if (stater && stater.code === "ENOENT")
                  fs$rename(from, to, CB);
                else
                  cb(er);
              });
            }, backoff);
            if (backoff < 100)
              backoff += 10;
            return;
          }
          if (cb) cb(er);
        });
      }})(fs$$1.rename);
    }

    // if read() returns EAGAIN, then just try it again.
    fs$$1.read = (function (fs$read) { return function (fd, buffer$$1, offset, length, position, callback_) {
      var callback;
      if (callback_ && typeof callback_ === 'function') {
        var eagCounter = 0;
        callback = function (er, _, __) {
          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter ++;
            return fs$read.call(fs$$1, fd, buffer$$1, offset, length, position, callback)
          }
          callback_.apply(this, arguments);
        };
      }
      return fs$read.call(fs$$1, fd, buffer$$1, offset, length, position, callback)
    }})(fs$$1.read);

    fs$$1.readSync = (function (fs$readSync) { return function (fd, buffer$$1, offset, length, position) {
      var eagCounter = 0;
      while (true) {
        try {
          return fs$readSync.call(fs$$1, fd, buffer$$1, offset, length, position)
        } catch (er) {
          if (er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter ++;
            continue
          }
          throw er
        }
      }
    }})(fs$$1.readSync);
  }

  function patchLchmod (fs$$1) {
    fs$$1.lchmod = function (path$$1, mode, callback) {
      fs$$1.open( path$$1
             , constants.O_WRONLY | constants.O_SYMLINK
             , mode
             , function (err, fd) {
        if (err) {
          if (callback) callback(err);
          return
        }
        // prefer to return the chmod error, if one occurs,
        // but still try to close, and report closing errors if they occur.
        fs$$1.fchmod(fd, mode, function (err) {
          fs$$1.close(fd, function(err2) {
            if (callback) callback(err || err2);
          });
        });
      });
    };

    fs$$1.lchmodSync = function (path$$1, mode) {
      var fd = fs$$1.openSync(path$$1, constants.O_WRONLY | constants.O_SYMLINK, mode);

      // prefer to return the chmod error, if one occurs,
      // but still try to close, and report closing errors if they occur.
      var threw = true;
      var ret;
      try {
        ret = fs$$1.fchmodSync(fd, mode);
        threw = false;
      } finally {
        if (threw) {
          try {
            fs$$1.closeSync(fd);
          } catch (er) {}
        } else {
          fs$$1.closeSync(fd);
        }
      }
      return ret
    };
  }

  function patchLutimes (fs$$1) {
    if (constants.hasOwnProperty("O_SYMLINK")) {
      fs$$1.lutimes = function (path$$1, at, mt, cb) {
        fs$$1.open(path$$1, constants.O_SYMLINK, function (er, fd) {
          if (er) {
            if (cb) cb(er);
            return
          }
          fs$$1.futimes(fd, at, mt, function (er) {
            fs$$1.close(fd, function (er2) {
              if (cb) cb(er || er2);
            });
          });
        });
      };

      fs$$1.lutimesSync = function (path$$1, at, mt) {
        var fd = fs$$1.openSync(path$$1, constants.O_SYMLINK);
        var ret;
        var threw = true;
        try {
          ret = fs$$1.futimesSync(fd, at, mt);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs$$1.closeSync(fd);
            } catch (er) {}
          } else {
            fs$$1.closeSync(fd);
          }
        }
        return ret
      };

    } else {
      fs$$1.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb); };
      fs$$1.lutimesSync = function () {};
    }
  }

  function chmodFix (orig) {
    if (!orig) return orig
    return function (target, mode, cb) {
      return orig.call(fs_1, target, mode, function (er) {
        if (chownErOk(er)) er = null;
        if (cb) cb.apply(this, arguments);
      })
    }
  }

  function chmodFixSync (orig) {
    if (!orig) return orig
    return function (target, mode) {
      try {
        return orig.call(fs_1, target, mode)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }


  function chownFix (orig) {
    if (!orig) return orig
    return function (target, uid, gid, cb) {
      return orig.call(fs_1, target, uid, gid, function (er) {
        if (chownErOk(er)) er = null;
        if (cb) cb.apply(this, arguments);
      })
    }
  }

  function chownFixSync (orig) {
    if (!orig) return orig
    return function (target, uid, gid) {
      try {
        return orig.call(fs_1, target, uid, gid)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }


  function statFix (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, cb) {
      return orig.call(fs_1, target, function (er, stats) {
        if (!stats) return cb.apply(this, arguments)
        if (stats.uid < 0) stats.uid += 0x100000000;
        if (stats.gid < 0) stats.gid += 0x100000000;
        if (cb) cb.apply(this, arguments);
      })
    }
  }

  function statFixSync (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target) {
      var stats = orig.call(fs_1, target);
      if (stats.uid < 0) stats.uid += 0x100000000;
      if (stats.gid < 0) stats.gid += 0x100000000;
      return stats;
    }
  }

  // ENOSYS means that the fs doesn't support the op. Just ignore
  // that, because it doesn't matter.
  //
  // if there's no getuid, or if getuid() is something other
  // than 0, and the error is EINVAL or EPERM, then just ignore
  // it.
  //
  // This specific case is a silent failure in cp, install, tar,
  // and most other unix tools that manage permissions.
  //
  // When running as root, or if other types of errors are
  // encountered, then it's strict.
  function chownErOk (er) {
    if (!er)
      return true

    if (er.code === "ENOSYS")
      return true

    var nonroot = !process.getuid || process.getuid() !== 0;
    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM")
        return true
    }

    return false
  }

  var Stream = require$$0.Stream;

  var legacyStreams = legacy;

  function legacy (fs$$1) {
    return {
      ReadStream: ReadStream,
      WriteStream: WriteStream
    }

    function ReadStream (path$$1, options) {
      if (!(this instanceof ReadStream)) return new ReadStream(path$$1, options);

      Stream.call(this);

      var self = this;

      this.path = path$$1;
      this.fd = null;
      this.readable = true;
      this.paused = false;

      this.flags = 'r';
      this.mode = 438; /*=0666*/
      this.bufferSize = 64 * 1024;

      options = options || {};

      // Mixin options into this
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }

      if (this.encoding) this.setEncoding(this.encoding);

      if (this.start !== undefined) {
        if ('number' !== typeof this.start) {
          throw TypeError('start must be a Number');
        }
        if (this.end === undefined) {
          this.end = Infinity;
        } else if ('number' !== typeof this.end) {
          throw TypeError('end must be a Number');
        }

        if (this.start > this.end) {
          throw new Error('start must be <= end');
        }

        this.pos = this.start;
      }

      if (this.fd !== null) {
        process.nextTick(function() {
          self._read();
        });
        return;
      }

      fs$$1.open(this.path, this.flags, this.mode, function (err, fd) {
        if (err) {
          self.emit('error', err);
          self.readable = false;
          return;
        }

        self.fd = fd;
        self.emit('open', fd);
        self._read();
      });
    }

    function WriteStream (path$$1, options) {
      if (!(this instanceof WriteStream)) return new WriteStream(path$$1, options);

      Stream.call(this);

      this.path = path$$1;
      this.fd = null;
      this.writable = true;

      this.flags = 'w';
      this.encoding = 'binary';
      this.mode = 438; /*=0666*/
      this.bytesWritten = 0;

      options = options || {};

      // Mixin options into this
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }

      if (this.start !== undefined) {
        if ('number' !== typeof this.start) {
          throw TypeError('start must be a Number');
        }
        if (this.start < 0) {
          throw new Error('start must be >= zero');
        }

        this.pos = this.start;
      }

      this.busy = false;
      this._queue = [];

      if (this.fd === null) {
        this._open = fs$$1.open;
        this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
        this.flush();
      }
    }
  }

  var gracefulFs = createCommonjsModule(function (module) {
  var queue = [];



  function noop () {}

  var debug = noop;
  if (util.debuglog)
    debug = util.debuglog('gfs4');
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
    debug = function() {
      var m = util.format.apply(util, arguments);
      m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ');
      console.error(m);
    };

  if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
    process.on('exit', function() {
      debug(queue);
      assert.equal(queue.length, 0);
    });
  }

  module.exports = patch(fs_1);
  if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH) {
    module.exports = patch(fs);
  }

  // Always patch fs.close/closeSync, because we want to
  // retry() whenever a close happens *anywhere* in the program.
  // This is essential when multiple graceful-fs instances are
  // in play at the same time.
  module.exports.close =
  fs.close = (function (fs$close) { return function (fd, cb) {
    return fs$close.call(fs, fd, function (err) {
      if (!err)
        retry();

      if (typeof cb === 'function')
        cb.apply(this, arguments);
    })
  }})(fs.close);

  module.exports.closeSync =
  fs.closeSync = (function (fs$closeSync) { return function (fd) {
    // Note that graceful-fs also retries when fs.closeSync() fails.
    // Looks like a bug to me, although it's probably a harmless one.
    var rval = fs$closeSync.apply(fs, arguments);
    retry();
    return rval
  }})(fs.closeSync);

  function patch (fs$$1) {
    // Everything that references the open() function needs to be in here
    polyfills(fs$$1);
    fs$$1.gracefulify = patch;
    fs$$1.FileReadStream = ReadStream;  // Legacy name.
    fs$$1.FileWriteStream = WriteStream;  // Legacy name.
    fs$$1.createReadStream = createReadStream;
    fs$$1.createWriteStream = createWriteStream;
    var fs$readFile = fs$$1.readFile;
    fs$$1.readFile = readFile;
    function readFile (path$$1, options, cb) {
      if (typeof options === 'function')
        cb = options, options = null;

      return go$readFile(path$$1, options, cb)

      function go$readFile (path$$1, options, cb) {
        return fs$readFile(path$$1, options, function (err) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$readFile, [path$$1, options, cb]]);
          else {
            if (typeof cb === 'function')
              cb.apply(this, arguments);
            retry();
          }
        })
      }
    }

    var fs$writeFile = fs$$1.writeFile;
    fs$$1.writeFile = writeFile;
    function writeFile (path$$1, data, options, cb) {
      if (typeof options === 'function')
        cb = options, options = null;

      return go$writeFile(path$$1, data, options, cb)

      function go$writeFile (path$$1, data, options, cb) {
        return fs$writeFile(path$$1, data, options, function (err) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$writeFile, [path$$1, data, options, cb]]);
          else {
            if (typeof cb === 'function')
              cb.apply(this, arguments);
            retry();
          }
        })
      }
    }

    var fs$appendFile = fs$$1.appendFile;
    if (fs$appendFile)
      fs$$1.appendFile = appendFile;
    function appendFile (path$$1, data, options, cb) {
      if (typeof options === 'function')
        cb = options, options = null;

      return go$appendFile(path$$1, data, options, cb)

      function go$appendFile (path$$1, data, options, cb) {
        return fs$appendFile(path$$1, data, options, function (err) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$appendFile, [path$$1, data, options, cb]]);
          else {
            if (typeof cb === 'function')
              cb.apply(this, arguments);
            retry();
          }
        })
      }
    }

    var fs$readdir = fs$$1.readdir;
    fs$$1.readdir = readdir;
    function readdir (path$$1, options, cb) {
      var args = [path$$1];
      if (typeof options !== 'function') {
        args.push(options);
      } else {
        cb = options;
      }
      args.push(go$readdir$cb);

      return go$readdir(args)

      function go$readdir$cb (err, files) {
        if (files && files.sort)
          files.sort();

        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$readdir, [args]]);
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments);
          retry();
        }
      }
    }

    function go$readdir (args) {
      return fs$readdir.apply(fs$$1, args)
    }

    if (process.version.substr(0, 4) === 'v0.8') {
      var legStreams = legacyStreams(fs$$1);
      ReadStream = legStreams.ReadStream;
      WriteStream = legStreams.WriteStream;
    }

    var fs$ReadStream = fs$$1.ReadStream;
    ReadStream.prototype = Object.create(fs$ReadStream.prototype);
    ReadStream.prototype.open = ReadStream$open;

    var fs$WriteStream = fs$$1.WriteStream;
    WriteStream.prototype = Object.create(fs$WriteStream.prototype);
    WriteStream.prototype.open = WriteStream$open;

    fs$$1.ReadStream = ReadStream;
    fs$$1.WriteStream = WriteStream;

    function ReadStream (path$$1, options) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
    }

    function ReadStream$open () {
      var that = this;
      open(that.path, that.flags, that.mode, function (err, fd) {
        if (err) {
          if (that.autoClose)
            that.destroy();

          that.emit('error', err);
        } else {
          that.fd = fd;
          that.emit('open', fd);
          that.read();
        }
      });
    }

    function WriteStream (path$$1, options) {
      if (this instanceof WriteStream)
        return fs$WriteStream.apply(this, arguments), this
      else
        return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
    }

    function WriteStream$open () {
      var that = this;
      open(that.path, that.flags, that.mode, function (err, fd) {
        if (err) {
          that.destroy();
          that.emit('error', err);
        } else {
          that.fd = fd;
          that.emit('open', fd);
        }
      });
    }

    function createReadStream (path$$1, options) {
      return new ReadStream(path$$1, options)
    }

    function createWriteStream (path$$1, options) {
      return new WriteStream(path$$1, options)
    }

    var fs$open = fs$$1.open;
    fs$$1.open = open;
    function open (path$$1, flags, mode, cb) {
      if (typeof mode === 'function')
        cb = mode, mode = null;

      return go$open(path$$1, flags, mode, cb)

      function go$open (path$$1, flags, mode, cb) {
        return fs$open(path$$1, flags, mode, function (err, fd) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$open, [path$$1, flags, mode, cb]]);
          else {
            if (typeof cb === 'function')
              cb.apply(this, arguments);
            retry();
          }
        })
      }
    }

    return fs$$1
  }

  function enqueue (elem) {
    debug('ENQUEUE', elem[0].name, elem[1]);
    queue.push(elem);
  }

  function retry () {
    var elem = queue.shift();
    if (elem) {
      debug('RETRY', elem[0].name, elem[1]);
      elem[0].apply(null, elem[1]);
    }
  }
  });
  var gracefulFs_1 = gracefulFs.close;
  var gracefulFs_2 = gracefulFs.closeSync;

  var thenify_1 = thenify;

  /**
   * Turn async functions into promises
   *
   * @param {Function} $$__fn__$$
   * @return {Function}
   * @api public
   */

  function thenify($$__fn__$$, options) {
    assert(typeof $$__fn__$$ === 'function');
    return eval(createWrapper($$__fn__$$.name, options))
  }

  /**
   * Turn async functions into promises and backward compatible with callback
   *
   * @param {Function} $$__fn__$$
   * @return {Function}
   * @api public
   */

  thenify.withCallback = function ($$__fn__$$, options) {
    assert(typeof $$__fn__$$ === 'function');
    options = options || {};
    options.withCallback = true;
    if (options.multiArgs === undefined) options.multiArgs = true;
    return eval(createWrapper($$__fn__$$.name, options))
  };

  function createWrapper(name, options) {
    name = (name || '').replace(/\s|bound(?!$)/g, '');
    options = options || {};
    // default to true
    var multiArgs = options.multiArgs !== undefined ? options.multiArgs : true;
    multiArgs = 'var multiArgs = ' + JSON.stringify(multiArgs) + '\n';

    var withCallback = options.withCallback ?
      'var lastType = typeof arguments[len - 1]\n'
      + 'if (lastType === "function") return $$__fn__$$.apply(self, arguments)\n'
     : '';

    return '(function ' + name + '() {\n'
      + 'var self = this\n'
      + 'var len = arguments.length\n'
      + multiArgs
      + withCallback
      + 'var args = new Array(len + 1)\n'
      + 'for (var i = 0; i < len; ++i) args[i] = arguments[i]\n'
      + 'var lastIndex = i\n'
      + 'return new Promise(function (resolve, reject) {\n'
        + 'args[lastIndex] = createCallback(resolve, reject, multiArgs)\n'
        + '$$__fn__$$.apply(self, args)\n'
      + '})\n'
    + '})'
  }

  var thenifyAll_1 = thenifyAll;
  thenifyAll.withCallback = withCallback;
  thenifyAll.thenify = thenify_1;

  /**
   * Promisifies all the selected functions in an object.
   *
   * @param {Object} source the source object for the async functions
   * @param {Object} [destination] the destination to set all the promisified methods
   * @param {Array} [methods] an array of method names of `source`
   * @return {Object}
   * @api public
   */

  function thenifyAll(source, destination, methods) {
    return promisifyAll(source, destination, methods, thenify_1)
  }

  /**
   * Promisifies all the selected functions in an object and backward compatible with callback.
   *
   * @param {Object} source the source object for the async functions
   * @param {Object} [destination] the destination to set all the promisified methods
   * @param {Array} [methods] an array of method names of `source`
   * @return {Object}
   * @api public
   */

  function withCallback(source, destination, methods) {
    return promisifyAll(source, destination, methods, thenify_1.withCallback)
  }

  function promisifyAll(source, destination, methods, promisify) {
    if (!destination) {
      destination = {};
      methods = Object.keys(source);
    }

    if (Array.isArray(destination)) {
      methods = destination;
      destination = {};
    }

    if (!methods) {
      methods = Object.keys(source);
    }

    if (typeof source === 'function') destination = promisify(source);

    methods.forEach(function (name) {
      // promisify only if it's a function
      if (typeof source[name] === 'function') destination[name] = promisify(source[name]);
    });

    // proxy the rest
    Object.keys(source).forEach(function (name) {
      if (deprecated$1(source, name)) return
      if (destination[name]) return
      destination[name] = source[name];
    });

    return destination
  }

  function deprecated$1(source, name) {
    var desc = Object.getOwnPropertyDescriptor(source, name);
    if (!desc || !desc.get) return false
    if (desc.get.name === 'deprecated') return true
    return false
  }

  var fs_1$1 = createCommonjsModule(function (module, exports) {
  var fs$$1;
  try {
    fs$$1 = gracefulFs;
  } catch(err) {
    fs$$1 = fs;
  }

  var api = [
    'appendFile',
    'chmod',
    'chown',
    'close',
    'fchmod',
    'fchown',
    'fdatasync',
    'fstat',
    'fsync',
    'ftruncate',
    'futimes',
    'lchown',
    'link',
    'lstat',
    'mkdir',
    'open',
    'read',
    'readFile',
    'readdir',
    'readlink',
    'realpath',
    'rename',
    'rmdir',
    'stat',
    'symlink',
    'truncate',
    'unlink',
    'utimes',
    'write',
    'writeFile'
  ];

  typeof fs$$1.access === 'function' && api.push('access');
  typeof fs$$1.copyFile === 'function' && api.push('copyFile');
  typeof fs$$1.mkdtemp === 'function' && api.push('mkdtemp');

  thenifyAll_1.withCallback(fs$$1, exports, api);

  exports.exists = function (filename, callback) {
    // callback
    if (typeof callback === 'function') {
      return fs$$1.stat(filename, function (err) {
        callback(null, !err);
      })
    }
    // or promise
    return new anyPromise(function (resolve) {
      fs$$1.stat(filename, function (err) {
        resolve(!err);
      });
    })
  };
  });
  var fs_2 = fs_1$1.exists;

  // simple mutable assign
  function assign () {
    const args = [].slice.call(arguments).filter(i => i);
    const dest = args.shift();
    args.forEach(src => {
      Object.keys(src).forEach(key => {
        dest[key] = src[key];
      });
    });

    return dest
  }

  var assign_1 = assign;

  // HFS, ext{2,3}, FAT do not, Node.js v0.10 does not
  function hasMillisResSync () {
    let tmpfile = path.join('millis-test-sync' + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path.join(os.tmpdir(), tmpfile);

    // 550 millis past UNIX epoch
    const d = new Date(1435410243862);
    gracefulFs.writeFileSync(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141');
    const fd = gracefulFs.openSync(tmpfile, 'r+');
    gracefulFs.futimesSync(fd, d, d);
    gracefulFs.closeSync(fd);
    return gracefulFs.statSync(tmpfile).mtime > 1435410243000
  }

  function hasMillisRes (callback) {
    let tmpfile = path.join('millis-test' + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path.join(os.tmpdir(), tmpfile);

    // 550 millis past UNIX epoch
    const d = new Date(1435410243862);
    gracefulFs.writeFile(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141', err => {
      if (err) return callback(err)
      gracefulFs.open(tmpfile, 'r+', (err, fd) => {
        if (err) return callback(err)
        gracefulFs.futimes(fd, d, d, err => {
          if (err) return callback(err)
          gracefulFs.close(fd, err => {
            if (err) return callback(err)
            gracefulFs.stat(tmpfile, (err, stats) => {
              if (err) return callback(err)
              callback(null, stats.mtime > 1435410243000);
            });
          });
        });
      });
    });
  }

  function timeRemoveMillis (timestamp) {
    if (typeof timestamp === 'number') {
      return Math.floor(timestamp / 1000) * 1000
    } else if (timestamp instanceof Date) {
      return new Date(Math.floor(timestamp.getTime() / 1000) * 1000)
    } else {
      throw new Error('fs-extra: timeRemoveMillis() unknown parameter type')
    }
  }

  function utimesMillis (path$$1, atime, mtime, callback) {
    // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
    gracefulFs.open(path$$1, 'r+', (err, fd) => {
      if (err) return callback(err)
      gracefulFs.futimes(fd, atime, mtime, futimesErr => {
        gracefulFs.close(fd, closeErr => {
          if (callback) callback(futimesErr || closeErr);
        });
      });
    });
  }

  var utimes = {
    hasMillisRes,
    hasMillisResSync,
    timeRemoveMillis,
    utimesMillis
  };

  // imported from ncp (this is temporary, will rewrite)





  function ncp (source, dest, options, callback) {
    if (!callback) {
      callback = options;
      options = {};
    }

    var basePath = process.cwd();
    var currentPath = path.resolve(basePath, source);
    var targetPath = path.resolve(basePath, dest);

    var filter = options.filter;
    var transform = options.transform;
    var overwrite = options.overwrite;
    // If overwrite is undefined, use clobber, otherwise default to true:
    if (overwrite === undefined) overwrite = options.clobber;
    if (overwrite === undefined) overwrite = true;
    var errorOnExist = options.errorOnExist;
    var dereference = options.dereference;
    var preserveTimestamps = options.preserveTimestamps === true;

    var started = 0;
    var finished = 0;
    var running = 0;

    var errored = false;

    startCopy(currentPath);

    function startCopy (source) {
      started++;
      if (filter) {
        if (filter instanceof RegExp) {
          console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function');
          if (!filter.test(source)) {
            return doneOne(true)
          }
        } else if (typeof filter === 'function') {
          if (!filter(source, dest)) {
            return doneOne(true)
          }
        }
      }
      return getStats(source)
    }

    function getStats (source) {
      var stat = dereference ? gracefulFs.stat : gracefulFs.lstat;
      running++;
      stat(source, function (err, stats) {
        if (err) return onError(err)

        // We need to get the mode from the stats object and preserve it.
        var item = {
          name: source,
          mode: stats.mode,
          mtime: stats.mtime, // modified time
          atime: stats.atime, // access time
          stats: stats // temporary
        };

        if (stats.isDirectory()) {
          return onDir(item)
        } else if (stats.isFile() || stats.isCharacterDevice() || stats.isBlockDevice()) {
          return onFile(item)
        } else if (stats.isSymbolicLink()) {
          // Symlinks don't really need to know about the mode.
          return onLink(source)
        }
      });
    }

    function onFile (file) {
      var target = file.name.replace(currentPath, targetPath.replace('$', '$$$$')); // escapes '$' with '$$'
      isWritable(target, function (writable) {
        if (writable) {
          copyFile(file, target);
        } else {
          if (overwrite) {
            rmFile(target, function () {
              copyFile(file, target);
            });
          } else if (errorOnExist) {
            onError(new Error(target + ' already exists'));
          } else {
            doneOne();
          }
        }
      });
    }

    function copyFile (file, target) {
      var readStream = gracefulFs.createReadStream(file.name);
      var writeStream = gracefulFs.createWriteStream(target, { mode: file.mode });

      readStream.on('error', onError);
      writeStream.on('error', onError);

      if (transform) {
        transform(readStream, writeStream, file);
      } else {
        writeStream.on('open', function () {
          readStream.pipe(writeStream);
        });
      }

      writeStream.once('close', function () {
        gracefulFs.chmod(target, file.mode, function (err) {
          if (err) return onError(err)
          if (preserveTimestamps) {
            utimes.utimesMillis(target, file.atime, file.mtime, function (err) {
              if (err) return onError(err)
              return doneOne()
            });
          } else {
            doneOne();
          }
        });
      });
    }

    function rmFile (file, done) {
      gracefulFs.unlink(file, function (err) {
        if (err) return onError(err)
        return done()
      });
    }

    function onDir (dir) {
      var target = dir.name.replace(currentPath, targetPath.replace('$', '$$$$')); // escapes '$' with '$$'
      isWritable(target, function (writable) {
        if (writable) {
          return mkDir(dir, target)
        }
        copyDir(dir.name);
      });
    }

    function mkDir (dir, target) {
      gracefulFs.mkdir(target, dir.mode, function (err) {
        if (err) return onError(err)
        // despite setting mode in fs.mkdir, doesn't seem to work
        // so we set it here.
        gracefulFs.chmod(target, dir.mode, function (err) {
          if (err) return onError(err)
          copyDir(dir.name);
        });
      });
    }

    function copyDir (dir) {
      gracefulFs.readdir(dir, function (err, items) {
        if (err) return onError(err)
        items.forEach(function (item) {
          startCopy(path.join(dir, item));
        });
        return doneOne()
      });
    }

    function onLink (link) {
      var target = link.replace(currentPath, targetPath);
      gracefulFs.readlink(link, function (err, resolvedPath) {
        if (err) return onError(err)
        checkLink(resolvedPath, target);
      });
    }

    function checkLink (resolvedPath, target) {
      if (dereference) {
        resolvedPath = path.resolve(basePath, resolvedPath);
      }
      isWritable(target, function (writable) {
        if (writable) {
          return makeLink(resolvedPath, target)
        }
        gracefulFs.readlink(target, function (err, targetDest) {
          if (err) return onError(err)

          if (dereference) {
            targetDest = path.resolve(basePath, targetDest);
          }
          if (targetDest === resolvedPath) {
            return doneOne()
          }
          return rmFile(target, function () {
            makeLink(resolvedPath, target);
          })
        });
      });
    }

    function makeLink (linkPath, target) {
      gracefulFs.symlink(linkPath, target, function (err) {
        if (err) return onError(err)
        return doneOne()
      });
    }

    function isWritable (path$$1, done) {
      gracefulFs.lstat(path$$1, function (err) {
        if (err) {
          if (err.code === 'ENOENT') return done(true)
          return done(false)
        }
        return done(false)
      });
    }

    function onError (err) {
      // ensure callback is defined & called only once:
      if (!errored && callback !== undefined) {
        errored = true;
        return callback(err)
      }
    }

    function doneOne (skipped) {
      if (!skipped) running--;
      finished++;
      if ((started === finished) && (running === 0)) {
        if (callback !== undefined) {
          return callback(null)
        }
      }
    }
  }

  var ncp_1 = ncp;

  // get drive on windows
  function getRootPath (p) {
    p = path.normalize(path.resolve(p)).split(path.sep);
    if (p.length > 0) return p[0]
    return null
  }

  // http://stackoverflow.com/a/62888/10333 contains more accurate
  // TODO: expand to include the rest
  const INVALID_PATH_CHARS = /[<>:"|?*]/;

  function invalidWin32Path (p) {
    const rp = getRootPath(p);
    p = p.replace(rp, '');
    return INVALID_PATH_CHARS.test(p)
  }

  var win32 = {
    getRootPath,
    invalidWin32Path
  };

  const invalidWin32Path$1 = win32.invalidWin32Path;

  const o777 = parseInt('0777', 8);

  function mkdirs (p, opts, callback, made) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    } else if (!opts || typeof opts !== 'object') {
      opts = { mode: opts };
    }

    if (process.platform === 'win32' && invalidWin32Path$1(p)) {
      const errInval = new Error(p + ' contains invalid WIN32 path characters.');
      errInval.code = 'EINVAL';
      return callback(errInval)
    }

    let mode = opts.mode;
    const xfs = opts.fs || gracefulFs;

    if (mode === undefined) {
      mode = o777 & (~process.umask());
    }
    if (!made) made = null;

    callback = callback || function () {};
    p = path.resolve(p);

    xfs.mkdir(p, mode, er => {
      if (!er) {
        made = made || p;
        return callback(null, made)
      }
      switch (er.code) {
        case 'ENOENT':
          if (path.dirname(p) === p) return callback(er)
          mkdirs(path.dirname(p), opts, (er, made) => {
            if (er) callback(er, made);
            else mkdirs(p, opts, callback, made);
          });
          break

        // In the case of any other error, just see if there's a dir
        // there already.  If so, then hooray!  If not, then something
        // is borked.
        default:
          xfs.stat(p, (er2, stat) => {
            // if the stat fails, then that's super weird.
            // let the original error be the failure reason.
            if (er2 || !stat.isDirectory()) callback(er, made);
            else callback(null, made);
          });
          break
      }
    });
  }

  var mkdirs_1 = mkdirs;

  const invalidWin32Path$2 = win32.invalidWin32Path;

  const o777$1 = parseInt('0777', 8);

  function mkdirsSync (p, opts, made) {
    if (!opts || typeof opts !== 'object') {
      opts = { mode: opts };
    }

    let mode = opts.mode;
    const xfs = opts.fs || gracefulFs;

    if (process.platform === 'win32' && invalidWin32Path$2(p)) {
      const errInval = new Error(p + ' contains invalid WIN32 path characters.');
      errInval.code = 'EINVAL';
      throw errInval
    }

    if (mode === undefined) {
      mode = o777$1 & (~process.umask());
    }
    if (!made) made = null;

    p = path.resolve(p);

    try {
      xfs.mkdirSync(p, mode);
      made = made || p;
    } catch (err0) {
      switch (err0.code) {
        case 'ENOENT':
          if (path.dirname(p) === p) throw err0
          made = mkdirsSync(path.dirname(p), opts, made);
          mkdirsSync(p, opts, made);
          break

        // In the case of any other error, just see if there's a dir
        // there already.  If so, then hooray!  If not, then something
        // is borked.
        default:
          let stat;
          try {
            stat = xfs.statSync(p);
          } catch (err1) {
            throw err0
          }
          if (!stat.isDirectory()) throw err0
          break
      }
    }

    return made
  }

  var mkdirsSync_1 = mkdirsSync;

  var mkdirs$1 = {
    mkdirs: mkdirs_1,
    mkdirsSync: mkdirsSync_1,
    // alias
    mkdirp: mkdirs_1,
    mkdirpSync: mkdirsSync_1,
    ensureDir: mkdirs_1,
    ensureDirSync: mkdirsSync_1
  };

  function copy (src, dest, options, callback) {
    if (typeof options === 'function' && !callback) {
      callback = options;
      options = {};
    } else if (typeof options === 'function' || options instanceof RegExp) {
      options = {filter: options};
    }
    callback = callback || function () {};
    options = options || {};

    // Warn about using preserveTimestamps on 32-bit node:
    if (options.preserveTimestamps && process.arch === 'ia32') {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }

    // don't allow src and dest to be the same
    const basePath = process.cwd();
    const currentPath = path.resolve(basePath, src);
    const targetPath = path.resolve(basePath, dest);
    if (currentPath === targetPath) return callback(new Error('Source and destination must not be the same.'))

    gracefulFs.lstat(src, (err, stats) => {
      if (err) return callback(err)

      let dir = null;
      if (stats.isDirectory()) {
        const parts = dest.split(path.sep);
        parts.pop();
        dir = parts.join(path.sep);
      } else {
        dir = path.dirname(dest);
      }

      gracefulFs.exists(dir, dirExists => {
        if (dirExists) return ncp_1(src, dest, options, callback)
        mkdirs$1.mkdirs(dir, err => {
          if (err) return callback(err)
          ncp_1(src, dest, options, callback);
        });
      });
    });
  }

  var copy_1 = copy;

  var copy$1 = {
    copy: copy_1
  };

  const BUF_LENGTH = 64 * 1024;
  const _buff = new Buffer(BUF_LENGTH);

  function copyFileSync (srcFile, destFile, options) {
    const overwrite = options.overwrite;
    const errorOnExist = options.errorOnExist;
    const preserveTimestamps = options.preserveTimestamps;

    if (gracefulFs.existsSync(destFile)) {
      if (overwrite) {
        gracefulFs.unlinkSync(destFile);
      } else if (errorOnExist) {
        throw new Error(`${destFile} already exists`)
      } else return
    }

    const fdr = gracefulFs.openSync(srcFile, 'r');
    const stat = gracefulFs.fstatSync(fdr);
    const fdw = gracefulFs.openSync(destFile, 'w', stat.mode);
    let bytesRead = 1;
    let pos = 0;

    while (bytesRead > 0) {
      bytesRead = gracefulFs.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
      gracefulFs.writeSync(fdw, _buff, 0, bytesRead);
      pos += bytesRead;
    }

    if (preserveTimestamps) {
      gracefulFs.futimesSync(fdw, stat.atime, stat.mtime);
    }

    gracefulFs.closeSync(fdr);
    gracefulFs.closeSync(fdw);
  }

  var copyFileSync_1 = copyFileSync;

  function copySync (src, dest, options) {
    if (typeof options === 'function' || options instanceof RegExp) {
      options = {filter: options};
    }

    options = options || {};
    options.recursive = !!options.recursive;

    // default to true for now
    options.clobber = 'clobber' in options ? !!options.clobber : true;
    // overwrite falls back to clobber
    options.overwrite = 'overwrite' in options ? !!options.overwrite : options.clobber;
    options.dereference = 'dereference' in options ? !!options.dereference : false;
    options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false;

    options.filter = options.filter || function () { return true };

    // Warn about using preserveTimestamps on 32-bit node:
    if (options.preserveTimestamps && process.arch === 'ia32') {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }

    const stats = (options.recursive && !options.dereference) ? gracefulFs.lstatSync(src) : gracefulFs.statSync(src);
    const destFolder = path.dirname(dest);
    const destFolderExists = gracefulFs.existsSync(destFolder);
    let performCopy = false;

    if (options.filter instanceof RegExp) {
      console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function');
      performCopy = options.filter.test(src);
    } else if (typeof options.filter === 'function') performCopy = options.filter(src, dest);

    if (stats.isFile() && performCopy) {
      if (!destFolderExists) mkdirs$1.mkdirsSync(destFolder);
      copyFileSync_1(src, dest, {
        overwrite: options.overwrite,
        errorOnExist: options.errorOnExist,
        preserveTimestamps: options.preserveTimestamps
      });
    } else if (stats.isDirectory() && performCopy) {
      if (!gracefulFs.existsSync(dest)) mkdirs$1.mkdirsSync(dest);
      const contents = gracefulFs.readdirSync(src);
      contents.forEach(content => {
        const opts = options;
        opts.recursive = true;
        copySync(path.join(src, content), path.join(dest, content), opts);
      });
    } else if (options.recursive && stats.isSymbolicLink() && performCopy) {
      const srcPath = gracefulFs.readlinkSync(src);
      gracefulFs.symlinkSync(srcPath, dest);
    }
  }

  var copySync_1 = copySync;

  var copySync$1 = {
    copySync: copySync_1
  };

  const isWindows = (process.platform === 'win32');

  function defaults (options) {
    const methods = [
      'unlink',
      'chmod',
      'stat',
      'lstat',
      'rmdir',
      'readdir'
    ];
    methods.forEach(m => {
      options[m] = options[m] || gracefulFs[m];
      m = m + 'Sync';
      options[m] = options[m] || gracefulFs[m];
    });

    options.maxBusyTries = options.maxBusyTries || 3;
  }

  function rimraf (p, options, cb) {
    let busyTries = 0;

    if (typeof options === 'function') {
      cb = options;
      options = {};
    }

    assert(p, 'rimraf: missing path');
    assert.equal(typeof p, 'string', 'rimraf: path should be a string');
    assert.equal(typeof cb, 'function', 'rimraf: callback function required');
    assert(options, 'rimraf: invalid options argument provided');
    assert.equal(typeof options, 'object', 'rimraf: options should be object');

    defaults(options);

    rimraf_(p, options, function CB (er) {
      if (er) {
        if (isWindows && (er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') &&
            busyTries < options.maxBusyTries) {
          busyTries++;
          let time = busyTries * 100;
          // try again, with the same exact callback as this one.
          return setTimeout(() => rimraf_(p, options, CB), time)
        }

        // already gone
        if (er.code === 'ENOENT') er = null;
      }

      cb(er);
    });
  }

  // Two possible strategies.
  // 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
  // 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
  //
  // Both result in an extra syscall when you guess wrong.  However, there
  // are likely far more normal files in the world than directories.  This
  // is based on the assumption that a the average number of files per
  // directory is >= 1.
  //
  // If anyone ever complains about this, then I guess the strategy could
  // be made configurable somehow.  But until then, YAGNI.
  function rimraf_ (p, options, cb) {
    assert(p);
    assert(options);
    assert(typeof cb === 'function');

    // sunos lets the root user unlink directories, which is... weird.
    // so we have to lstat here and make sure it's not a dir.
    options.lstat(p, (er, st) => {
      if (er && er.code === 'ENOENT') {
        return cb(null)
      }

      // Windows can EPERM on stat.  Life is suffering.
      if (er && er.code === 'EPERM' && isWindows) {
        return fixWinEPERM(p, options, er, cb)
      }

      if (st && st.isDirectory()) {
        return rmdir(p, options, er, cb)
      }

      options.unlink(p, er => {
        if (er) {
          if (er.code === 'ENOENT') {
            return cb(null)
          }
          if (er.code === 'EPERM') {
            return (isWindows)
              ? fixWinEPERM(p, options, er, cb)
              : rmdir(p, options, er, cb)
          }
          if (er.code === 'EISDIR') {
            return rmdir(p, options, er, cb)
          }
        }
        return cb(er)
      });
    });
  }

  function fixWinEPERM (p, options, er, cb) {
    assert(p);
    assert(options);
    assert(typeof cb === 'function');
    if (er) {
      assert(er instanceof Error);
    }

    options.chmod(p, 666, er2 => {
      if (er2) {
        cb(er2.code === 'ENOENT' ? null : er);
      } else {
        options.stat(p, (er3, stats) => {
          if (er3) {
            cb(er3.code === 'ENOENT' ? null : er);
          } else if (stats.isDirectory()) {
            rmdir(p, options, er, cb);
          } else {
            options.unlink(p, cb);
          }
        });
      }
    });
  }

  function fixWinEPERMSync (p, options, er) {
    let stats;

    assert(p);
    assert(options);
    if (er) {
      assert(er instanceof Error);
    }

    try {
      options.chmodSync(p, 666);
    } catch (er2) {
      if (er2.code === 'ENOENT') {
        return
      } else {
        throw er
      }
    }

    try {
      stats = options.statSync(p);
    } catch (er3) {
      if (er3.code === 'ENOENT') {
        return
      } else {
        throw er
      }
    }

    if (stats.isDirectory()) {
      rmdirSync(p, options, er);
    } else {
      options.unlinkSync(p);
    }
  }

  function rmdir (p, options, originalEr, cb) {
    assert(p);
    assert(options);
    if (originalEr) {
      assert(originalEr instanceof Error);
    }
    assert(typeof cb === 'function');

    // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
    // if we guessed wrong, and it's not a directory, then
    // raise the original error.
    options.rmdir(p, er => {
      if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {
        rmkids(p, options, cb);
      } else if (er && er.code === 'ENOTDIR') {
        cb(originalEr);
      } else {
        cb(er);
      }
    });
  }

  function rmkids (p, options, cb) {
    assert(p);
    assert(options);
    assert(typeof cb === 'function');

    options.readdir(p, (er, files) => {
      if (er) return cb(er)

      let n = files.length;
      let errState;

      if (n === 0) return options.rmdir(p, cb)

      files.forEach(f => {
        rimraf(path.join(p, f), options, er => {
          if (errState) {
            return
          }
          if (er) return cb(errState = er)
          if (--n === 0) {
            options.rmdir(p, cb);
          }
        });
      });
    });
  }

  // this looks simpler, and is strictly *faster*, but will
  // tie up the JavaScript thread and fail on excessively
  // deep directory trees.
  function rimrafSync (p, options) {
    let st;

    options = options || {};
    defaults(options);

    assert(p, 'rimraf: missing path');
    assert.equal(typeof p, 'string', 'rimraf: path should be a string');
    assert(options, 'rimraf: missing options');
    assert.equal(typeof options, 'object', 'rimraf: options should be object');

    try {
      st = options.lstatSync(p);
    } catch (er) {
      if (er.code === 'ENOENT') {
        return
      }

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === 'EPERM' && isWindows) {
        fixWinEPERMSync(p, options, er);
      }
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory()) {
        rmdirSync(p, options, null);
      } else {
        options.unlinkSync(p);
      }
    } catch (er) {
      if (er.code === 'ENOENT') {
        return
      } else if (er.code === 'EPERM') {
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      } else if (er.code !== 'EISDIR') {
        throw er
      }
      rmdirSync(p, options, er);
    }
  }

  function rmdirSync (p, options, originalEr) {
    assert(p);
    assert(options);
    if (originalEr) {
      assert(originalEr instanceof Error);
    }

    try {
      options.rmdirSync(p);
    } catch (er) {
      if (er.code === 'ENOENT') {
        return
      } else if (er.code === 'ENOTDIR') {
        throw originalEr
      } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {
        rmkidsSync(p, options);
      }
    }
  }

  function rmkidsSync (p, options) {
    assert(p);
    assert(options);
    options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options));
    options.rmdirSync(p, options);
  }

  var rimraf_1 = rimraf;
  rimraf.sync = rimrafSync;

  function removeSync (dir) {
    return rimraf_1.sync(dir, {disableGlob: true})
  }

  function remove (dir, callback) {
    const options = {disableGlob: true};
    return callback ? rimraf_1(dir, options, callback) : rimraf_1(dir, options, function () {})
  }

  var remove_1 = {
    remove,
    removeSync
  };

  var _fs;
  try {
    _fs = gracefulFs;
  } catch (_) {
    _fs = fs;
  }

  function readFile (file, options, callback) {
    if (callback == null) {
      callback = options;
      options = {};
    }

    if (typeof options === 'string') {
      options = {encoding: options};
    }

    options = options || {};
    var fs$$1 = options.fs || _fs;

    var shouldThrow = true;
    // DO NOT USE 'passParsingErrors' THE NAME WILL CHANGE!!!, use 'throws' instead
    if ('passParsingErrors' in options) {
      shouldThrow = options.passParsingErrors;
    } else if ('throws' in options) {
      shouldThrow = options.throws;
    }

    fs$$1.readFile(file, options, function (err, data) {
      if (err) return callback(err)

      data = stripBom(data);

      var obj;
      try {
        obj = JSON.parse(data, options ? options.reviver : null);
      } catch (err2) {
        if (shouldThrow) {
          err2.message = file + ': ' + err2.message;
          return callback(err2)
        } else {
          return callback(null, null)
        }
      }

      callback(null, obj);
    });
  }

  function readFileSync (file, options) {
    options = options || {};
    if (typeof options === 'string') {
      options = {encoding: options};
    }

    var fs$$1 = options.fs || _fs;

    var shouldThrow = true;
    // DO NOT USE 'passParsingErrors' THE NAME WILL CHANGE!!!, use 'throws' instead
    if ('passParsingErrors' in options) {
      shouldThrow = options.passParsingErrors;
    } else if ('throws' in options) {
      shouldThrow = options.throws;
    }

    var content = fs$$1.readFileSync(file, options);
    content = stripBom(content);

    try {
      return JSON.parse(content, options.reviver)
    } catch (err) {
      if (shouldThrow) {
        err.message = file + ': ' + err.message;
        throw err
      } else {
        return null
      }
    }
  }

  function writeFile (file, obj, options, callback) {
    if (callback == null) {
      callback = options;
      options = {};
    }
    options = options || {};
    var fs$$1 = options.fs || _fs;

    var spaces = typeof options === 'object' && options !== null
      ? 'spaces' in options
      ? options.spaces : this.spaces
      : this.spaces;

    var str = '';
    try {
      str = JSON.stringify(obj, options ? options.replacer : null, spaces) + '\n';
    } catch (err) {
      if (callback) return callback(err, null)
    }

    fs$$1.writeFile(file, str, options, callback);
  }

  function writeFileSync (file, obj, options) {
    options = options || {};
    var fs$$1 = options.fs || _fs;

    var spaces = typeof options === 'object' && options !== null
      ? 'spaces' in options
      ? options.spaces : this.spaces
      : this.spaces;

    var str = JSON.stringify(obj, options.replacer, spaces) + '\n';
    // not sure if fs.writeFileSync returns anything, but just in case
    return fs$$1.writeFileSync(file, str, options)
  }

  function stripBom (content) {
    // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
    if (Buffer.isBuffer(content)) content = content.toString('utf8');
    content = content.replace(/^\uFEFF/, '');
    return content
  }

  var jsonfile = {
    spaces: null,
    readFile: readFile,
    readFileSync: readFileSync,
    writeFile: writeFile,
    writeFileSync: writeFileSync
  };

  var jsonfile_1 = jsonfile;

  var jsonfile$1 = {
    // jsonfile exports
    readJson: jsonfile_1.readFile,
    readJSON: jsonfile_1.readFile,
    readJsonSync: jsonfile_1.readFileSync,
    readJSONSync: jsonfile_1.readFileSync,
    writeJson: jsonfile_1.writeFile,
    writeJSON: jsonfile_1.writeFile,
    writeJsonSync: jsonfile_1.writeFileSync,
    writeJSONSync: jsonfile_1.writeFileSync,
    spaces: 2 // default in fs-extra
  };

  function outputJsonSync (file, data, options) {
    const dir = path.dirname(file);

    if (!gracefulFs.existsSync(dir)) {
      mkdirs$1.mkdirsSync(dir);
    }

    jsonfile$1.writeJsonSync(file, data, options);
  }

  var outputJsonSync_1 = outputJsonSync;

  function outputJson (file, data, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    const dir = path.dirname(file);

    gracefulFs.exists(dir, itDoes => {
      if (itDoes) return jsonfile$1.writeJson(file, data, options, callback)

      mkdirs$1.mkdirs(dir, err => {
        if (err) return callback(err)
        jsonfile$1.writeJson(file, data, options, callback);
      });
    });
  }

  var outputJson_1 = outputJson;

  jsonfile$1.outputJsonSync = outputJsonSync_1;
  jsonfile$1.outputJson = outputJson_1;
  // aliases
  jsonfile$1.outputJSONSync = outputJsonSync_1;
  jsonfile$1.outputJSON = outputJson_1;

  var json = jsonfile$1;

  // most of this code was written by Andrew Kelley
  // licensed under the BSD license: see
  // https://github.com/andrewrk/node-mv/blob/master/package.json

  // this needs a cleanup




  const remove$1 = remove_1.remove;
  const mkdirp = mkdirs$1.mkdirs;

  function move (source, dest, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    const shouldMkdirp = ('mkdirp' in options) ? options.mkdirp : true;
    const overwrite = options.overwrite || options.clobber || false;

    if (shouldMkdirp) {
      mkdirs();
    } else {
      doRename();
    }

    function mkdirs () {
      mkdirp(path.dirname(dest), err => {
        if (err) return callback(err)
        doRename();
      });
    }

    function doRename () {
      if (path.resolve(source) === path.resolve(dest)) {
        setImmediate(callback);
      } else if (overwrite) {
        gracefulFs.rename(source, dest, err => {
          if (!err) return callback()

          if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {
            remove$1(dest, err => {
              if (err) return callback(err)
              options.overwrite = false; // just overwriteed it, no need to do it again
              move(source, dest, options, callback);
            });
            return
          }

          // weird Windows shit
          if (err.code === 'EPERM') {
            setTimeout(() => {
              remove$1(dest, err => {
                if (err) return callback(err)
                options.overwrite = false;
                move(source, dest, options, callback);
              });
            }, 200);
            return
          }

          if (err.code !== 'EXDEV') return callback(err)
          moveAcrossDevice(source, dest, overwrite, callback);
        });
      } else {
        gracefulFs.link(source, dest, err => {
          if (err) {
            if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {
              moveAcrossDevice(source, dest, overwrite, callback);
              return
            }
            callback(err);
            return
          }
          gracefulFs.unlink(source, callback);
        });
      }
    }
  }

  function moveAcrossDevice (source, dest, overwrite, callback) {
    gracefulFs.stat(source, (err, stat) => {
      if (err) {
        callback(err);
        return
      }

      if (stat.isDirectory()) {
        moveDirAcrossDevice(source, dest, overwrite, callback);
      } else {
        moveFileAcrossDevice(source, dest, overwrite, callback);
      }
    });
  }

  function moveFileAcrossDevice (source, dest, overwrite, callback) {
    const flags = overwrite ? 'w' : 'wx';
    const ins = gracefulFs.createReadStream(source);
    const outs = gracefulFs.createWriteStream(dest, { flags });

    ins.on('error', err => {
      ins.destroy();
      outs.destroy();
      outs.removeListener('close', onClose);

      // may want to create a directory but `out` line above
      // creates an empty file for us: See #108
      // don't care about error here
      gracefulFs.unlink(dest, () => {
        // note: `err` here is from the input stream errror
        if (err.code === 'EISDIR' || err.code === 'EPERM') {
          moveDirAcrossDevice(source, dest, overwrite, callback);
        } else {
          callback(err);
        }
      });
    });

    outs.on('error', err => {
      ins.destroy();
      outs.destroy();
      outs.removeListener('close', onClose);
      callback(err);
    });

    outs.once('close', onClose);
    ins.pipe(outs);

    function onClose () {
      gracefulFs.unlink(source, callback);
    }
  }

  function moveDirAcrossDevice (source, dest, overwrite, callback) {
    const options = {
      overwrite: false
    };

    if (overwrite) {
      remove$1(dest, err => {
        if (err) return callback(err)
        startNcp();
      });
    } else {
      startNcp();
    }

    function startNcp () {
      ncp_1(source, dest, options, err => {
        if (err) return callback(err)
        remove$1(source, callback);
      });
    }
  }

  var move_1 = {
    move
  };

  const copySync$2 = copySync$1.copySync;
  const removeSync$1 = remove_1.removeSync;
  const mkdirpSync = mkdirs$1.mkdirsSync;

  function moveSync (src, dest, options) {
    options = options || {};
    const overwrite = options.overwrite || options.clobber || false;

    src = path.resolve(src);
    dest = path.resolve(dest);

    if (src === dest) return

    if (isSrcSubdir(src, dest)) throw new Error(`Cannot move '${src}' into itself '${dest}'.`)

    mkdirpSync(path.dirname(dest));
    tryRenameSync();

    function tryRenameSync () {
      if (overwrite) {
        try {
          return gracefulFs.renameSync(src, dest)
        } catch (err) {
          if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST' || err.code === 'EPERM') {
            removeSync$1(dest);
            options.overwrite = false; // just overwriteed it, no need to do it again
            return moveSync(src, dest, options)
          }

          if (err.code !== 'EXDEV') throw err
          return moveSyncAcrossDevice(src, dest, overwrite)
        }
      } else {
        try {
          gracefulFs.linkSync(src, dest);
          return gracefulFs.unlinkSync(src)
        } catch (err) {
          if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {
            return moveSyncAcrossDevice(src, dest, overwrite)
          }
          throw err
        }
      }
    }
  }

  function moveSyncAcrossDevice (src, dest, overwrite) {
    const stat = gracefulFs.statSync(src);

    if (stat.isDirectory()) {
      return moveDirSyncAcrossDevice(src, dest, overwrite)
    } else {
      return moveFileSyncAcrossDevice(src, dest, overwrite)
    }
  }

  function moveFileSyncAcrossDevice (src, dest, overwrite) {
    const BUF_LENGTH = 64 * 1024;
    const _buff = new Buffer(BUF_LENGTH);

    const flags = overwrite ? 'w' : 'wx';

    const fdr = gracefulFs.openSync(src, 'r');
    const stat = gracefulFs.fstatSync(fdr);
    const fdw = gracefulFs.openSync(dest, flags, stat.mode);
    let bytesRead = 1;
    let pos = 0;

    while (bytesRead > 0) {
      bytesRead = gracefulFs.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
      gracefulFs.writeSync(fdw, _buff, 0, bytesRead);
      pos += bytesRead;
    }

    gracefulFs.closeSync(fdr);
    gracefulFs.closeSync(fdw);
    return gracefulFs.unlinkSync(src)
  }

  function moveDirSyncAcrossDevice (src, dest, overwrite) {
    const options = {
      overwrite: false
    };

    if (overwrite) {
      removeSync$1(dest);
      tryCopySync();
    } else {
      tryCopySync();
    }

    function tryCopySync () {
      copySync$2(src, dest, options);
      return removeSync$1(src)
    }
  }

  // return true if dest is a subdir of src, otherwise false.
  // extract dest base dir and check if that is the same as src basename
  function isSrcSubdir (src, dest) {
    try {
      return gracefulFs.statSync(src).isDirectory() &&
             src !== dest &&
             dest.indexOf(src) > -1 &&
             dest.split(path.dirname(src) + path.sep)[1].split(path.sep)[0] === path.basename(src)
    } catch (e) {
      return false
    }
  }

  var moveSync_1 = {
    moveSync
  };

  function emptyDir (dir, callback) {
    callback = callback || function () {};
    fs.readdir(dir, (err, items) => {
      if (err) return mkdirs$1.mkdirs(dir, callback)

      items = items.map(item => path.join(dir, item));

      deleteItem();

      function deleteItem () {
        const item = items.pop();
        if (!item) return callback()
        remove_1.remove(item, err => {
          if (err) return callback(err)
          deleteItem();
        });
      }
    });
  }

  function emptyDirSync (dir) {
    let items;
    try {
      items = fs.readdirSync(dir);
    } catch (err) {
      return mkdirs$1.mkdirsSync(dir)
    }

    items.forEach(item => {
      item = path.join(dir, item);
      remove_1.removeSync(item);
    });
  }

  var empty = {
    emptyDirSync,
    emptydirSync: emptyDirSync,
    emptyDir,
    emptydir: emptyDir
  };

  function createFile (file, callback) {
    function makeFile () {
      gracefulFs.writeFile(file, '', err => {
        if (err) return callback(err)
        callback();
      });
    }

    gracefulFs.exists(file, fileExists => {
      if (fileExists) return callback()
      const dir = path.dirname(file);
      gracefulFs.exists(dir, dirExists => {
        if (dirExists) return makeFile()
        mkdirs$1.mkdirs(dir, err => {
          if (err) return callback(err)
          makeFile();
        });
      });
    });
  }

  function createFileSync (file) {
    if (gracefulFs.existsSync(file)) return

    const dir = path.dirname(file);
    if (!gracefulFs.existsSync(dir)) {
      mkdirs$1.mkdirsSync(dir);
    }

    gracefulFs.writeFileSync(file, '');
  }

  var file = {
    createFile,
    createFileSync,
    // alias
    ensureFile: createFile,
    ensureFileSync: createFileSync
  };

  function createLink (srcpath, dstpath, callback) {
    function makeLink (srcpath, dstpath) {
      gracefulFs.link(srcpath, dstpath, err => {
        if (err) return callback(err)
        callback(null);
      });
    }

    gracefulFs.exists(dstpath, destinationExists => {
      if (destinationExists) return callback(null)
      gracefulFs.lstat(srcpath, (err, stat) => {
        if (err) {
          err.message = err.message.replace('lstat', 'ensureLink');
          return callback(err)
        }

        const dir = path.dirname(dstpath);
        gracefulFs.exists(dir, dirExists => {
          if (dirExists) return makeLink(srcpath, dstpath)
          mkdirs$1.mkdirs(dir, err => {
            if (err) return callback(err)
            makeLink(srcpath, dstpath);
          });
        });
      });
    });
  }

  function createLinkSync (srcpath, dstpath, callback) {
    const destinationExists = gracefulFs.existsSync(dstpath);
    if (destinationExists) return undefined

    try {
      gracefulFs.lstatSync(srcpath);
    } catch (err) {
      err.message = err.message.replace('lstat', 'ensureLink');
      throw err
    }

    const dir = path.dirname(dstpath);
    const dirExists = gracefulFs.existsSync(dir);
    if (dirExists) return gracefulFs.linkSync(srcpath, dstpath)
    mkdirs$1.mkdirsSync(dir);

    return gracefulFs.linkSync(srcpath, dstpath)
  }

  var link = {
    createLink,
    createLinkSync,
    // alias
    ensureLink: createLink,
    ensureLinkSync: createLinkSync
  };

  /**
   * Function that returns two types of paths, one relative to symlink, and one
   * relative to the current working directory. Checks if path is absolute or
   * relative. If the path is relative, this function checks if the path is
   * relative to symlink or relative to current working directory. This is an
   * initiative to find a smarter `srcpath` to supply when building symlinks.
   * This allows you to determine which path to use out of one of three possible
   * types of source paths. The first is an absolute path. This is detected by
   * `path.isAbsolute()`. When an absolute path is provided, it is checked to
   * see if it exists. If it does it's used, if not an error is returned
   * (callback)/ thrown (sync). The other two options for `srcpath` are a
   * relative url. By default Node's `fs.symlink` works by creating a symlink
   * using `dstpath` and expects the `srcpath` to be relative to the newly
   * created symlink. If you provide a `srcpath` that does not exist on the file
   * system it results in a broken symlink. To minimize this, the function
   * checks to see if the 'relative to symlink' source file exists, and if it
   * does it will use it. If it does not, it checks if there's a file that
   * exists that is relative to the current working directory, if does its used.
   * This preserves the expectations of the original fs.symlink spec and adds
   * the ability to pass in `relative to current working direcotry` paths.
   */

  function symlinkPaths (srcpath, dstpath, callback) {
    if (path.isAbsolute(srcpath)) {
      return gracefulFs.lstat(srcpath, (err, stat) => {
        if (err) {
          err.message = err.message.replace('lstat', 'ensureSymlink');
          return callback(err)
        }
        return callback(null, {
          'toCwd': srcpath,
          'toDst': srcpath
        })
      })
    } else {
      const dstdir = path.dirname(dstpath);
      const relativeToDst = path.join(dstdir, srcpath);
      return gracefulFs.exists(relativeToDst, exists => {
        if (exists) {
          return callback(null, {
            'toCwd': relativeToDst,
            'toDst': srcpath
          })
        } else {
          return gracefulFs.lstat(srcpath, (err, stat) => {
            if (err) {
              err.message = err.message.replace('lstat', 'ensureSymlink');
              return callback(err)
            }
            return callback(null, {
              'toCwd': srcpath,
              'toDst': path.relative(dstdir, srcpath)
            })
          })
        }
      })
    }
  }

  function symlinkPathsSync (srcpath, dstpath) {
    let exists;
    if (path.isAbsolute(srcpath)) {
      exists = gracefulFs.existsSync(srcpath);
      if (!exists) throw new Error('absolute srcpath does not exist')
      return {
        'toCwd': srcpath,
        'toDst': srcpath
      }
    } else {
      const dstdir = path.dirname(dstpath);
      const relativeToDst = path.join(dstdir, srcpath);
      exists = gracefulFs.existsSync(relativeToDst);
      if (exists) {
        return {
          'toCwd': relativeToDst,
          'toDst': srcpath
        }
      } else {
        exists = gracefulFs.existsSync(srcpath);
        if (!exists) throw new Error('relative srcpath does not exist')
        return {
          'toCwd': srcpath,
          'toDst': path.relative(dstdir, srcpath)
        }
      }
    }
  }

  var symlinkPaths_1 = {
    symlinkPaths,
    symlinkPathsSync
  };

  function symlinkType (srcpath, type, callback) {
    callback = (typeof type === 'function') ? type : callback;
    type = (typeof type === 'function') ? false : type;
    if (type) return callback(null, type)
    gracefulFs.lstat(srcpath, (err, stats) => {
      if (err) return callback(null, 'file')
      type = (stats && stats.isDirectory()) ? 'dir' : 'file';
      callback(null, type);
    });
  }

  function symlinkTypeSync (srcpath, type) {
    let stats;

    if (type) return type
    try {
      stats = gracefulFs.lstatSync(srcpath);
    } catch (e) {
      return 'file'
    }
    return (stats && stats.isDirectory()) ? 'dir' : 'file'
  }

  var symlinkType_1 = {
    symlinkType,
    symlinkTypeSync
  };

  const mkdirs$2 = mkdirs$1.mkdirs;
  const mkdirsSync$1 = mkdirs$1.mkdirsSync;


  const symlinkPaths$1 = symlinkPaths_1.symlinkPaths;
  const symlinkPathsSync$1 = symlinkPaths_1.symlinkPathsSync;


  const symlinkType$1 = symlinkType_1.symlinkType;
  const symlinkTypeSync$1 = symlinkType_1.symlinkTypeSync;

  function createSymlink (srcpath, dstpath, type, callback) {
    callback = (typeof type === 'function') ? type : callback;
    type = (typeof type === 'function') ? false : type;

    gracefulFs.exists(dstpath, destinationExists => {
      if (destinationExists) return callback(null)
      symlinkPaths$1(srcpath, dstpath, (err, relative) => {
        if (err) return callback(err)
        srcpath = relative.toDst;
        symlinkType$1(relative.toCwd, type, (err, type) => {
          if (err) return callback(err)
          const dir = path.dirname(dstpath);
          gracefulFs.exists(dir, dirExists => {
            if (dirExists) return gracefulFs.symlink(srcpath, dstpath, type, callback)
            mkdirs$2(dir, err => {
              if (err) return callback(err)
              gracefulFs.symlink(srcpath, dstpath, type, callback);
            });
          });
        });
      });
    });
  }

  function createSymlinkSync (srcpath, dstpath, type, callback) {
    callback = (typeof type === 'function') ? type : callback;
    type = (typeof type === 'function') ? false : type;

    const destinationExists = gracefulFs.existsSync(dstpath);
    if (destinationExists) return undefined

    const relative = symlinkPathsSync$1(srcpath, dstpath);
    srcpath = relative.toDst;
    type = symlinkTypeSync$1(relative.toCwd, type);
    const dir = path.dirname(dstpath);
    const exists = gracefulFs.existsSync(dir);
    if (exists) return gracefulFs.symlinkSync(srcpath, dstpath, type)
    mkdirsSync$1(dir);
    return gracefulFs.symlinkSync(srcpath, dstpath, type)
  }

  var symlink = {
    createSymlink,
    createSymlinkSync,
    // alias
    ensureSymlink: createSymlink,
    ensureSymlinkSync: createSymlinkSync
  };

  var ensure = {
    // file
    createFile: file.createFile,
    createFileSync: file.createFileSync,
    ensureFile: file.createFile,
    ensureFileSync: file.createFileSync,
    // link
    createLink: link.createLink,
    createLinkSync: link.createLinkSync,
    ensureLink: link.createLink,
    ensureLinkSync: link.createLinkSync,
    // symlink
    createSymlink: symlink.createSymlink,
    createSymlinkSync: symlink.createSymlinkSync,
    ensureSymlink: symlink.createSymlink,
    ensureSymlinkSync: symlink.createSymlinkSync
  };

  function outputFile (file, data, encoding, callback) {
    if (typeof encoding === 'function') {
      callback = encoding;
      encoding = 'utf8';
    }

    const dir = path.dirname(file);
    gracefulFs.exists(dir, itDoes => {
      if (itDoes) return gracefulFs.writeFile(file, data, encoding, callback)

      mkdirs$1.mkdirs(dir, err => {
        if (err) return callback(err)

        gracefulFs.writeFile(file, data, encoding, callback);
      });
    });
  }

  function outputFileSync (file, data, encoding) {
    const dir = path.dirname(file);
    if (gracefulFs.existsSync(dir)) {
      return gracefulFs.writeFileSync.apply(gracefulFs, arguments)
    }
    mkdirs$1.mkdirsSync(dir);
    gracefulFs.writeFileSync.apply(gracefulFs, arguments);
  }

  var output = {
    outputFile,
    outputFileSync
  };

  const fse = {};


  // attach fs methods to fse
  Object.keys(gracefulFs).forEach(key => {
    fse[key] = gracefulFs[key];
  });

  const fs$1 = fse;

  assign_1(fs$1, copy$1);
  assign_1(fs$1, copySync$1);
  assign_1(fs$1, mkdirs$1);
  assign_1(fs$1, remove_1);
  assign_1(fs$1, json);
  assign_1(fs$1, move_1);
  assign_1(fs$1, moveSync_1);
  assign_1(fs$1, empty);
  assign_1(fs$1, ensure);
  assign_1(fs$1, output);

  var lib$2 = fs$1;

  // maintain backwards compatibility for awhile
  const jsonfile$2 = {};
  Object.defineProperty(jsonfile$2, 'spaces', {
    get: () => fs$1.spaces, // found in ./json
    set: val => {
      fs$1.spaces = val;
    }
  });

  var jsonfile_1$2 = jsonfile$2; // so users of fs-extra can modify jsonFile.spaces
  lib$2.jsonfile = jsonfile_1$2;

  var fsPromise = createCommonjsModule(function (module, exports) {

  // thenify-all for all fs-extra that make sense to be promises
  var fsExtraKeys = [
    'copy',
    'emptyDir',
    'ensureFile',
    'ensureDir',
    'ensureLink',
    'ensureSymlink',
    'mkdirs',
    'move',
    'outputFile',
    'outputJson',
    'readJson',
    'remove',
    'writeJson',
    // aliases
    'createFile',
    'createLink',
    'createSymlink',
    'emptydir',
    'mkdirp',
    'readJSON',
    'outputJSON',
    'writeJSON'
  ];
  thenifyAll_1.withCallback(lib$2, exports, fsExtraKeys);

  // Delegate all normal fs to mz/fs
  // (this overwrites anything proxies directly above)
  var mzKeys = [
    'rename',
    'ftruncate',
    'chown',
    'fchown',
    'lchown',
    'chmod',
    'fchmod',
    'stat',
    'lstat',
    'fstat',
    'link',
    'symlink',
    'readlink',
    'realpath',
    'unlink',
    'rmdir',
    'mkdir',
    'mkdtemp',
    'readdir',
    'close',
    'open',
    'utimes',
    'futimes',
    'fsync',
    'fdatasync',
    'write',
    'read',
    'readFile',
    'writeFile',
    'appendFile',
    'access',
    'truncate',
    'exists'
  ];

  mzKeys.forEach(function(key){
    exports[key] = fs_1$1[key];
  });
  });

  var es5 = createCommonjsModule(function (module) {
  var isES5 = (function(){
      return this === undefined;
  })();

  if (isES5) {
      module.exports = {
          freeze: Object.freeze,
          defineProperty: Object.defineProperty,
          getDescriptor: Object.getOwnPropertyDescriptor,
          keys: Object.keys,
          names: Object.getOwnPropertyNames,
          getPrototypeOf: Object.getPrototypeOf,
          isArray: Array.isArray,
          isES5: isES5,
          propertyIsWritable: function(obj, prop) {
              var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
              return !!(!descriptor || descriptor.writable || descriptor.set);
          }
      };
  } else {
      var has = {}.hasOwnProperty;
      var str = {}.toString;
      var proto = {}.constructor.prototype;

      var ObjectKeys = function (o) {
          var ret = [];
          for (var key in o) {
              if (has.call(o, key)) {
                  ret.push(key);
              }
          }
          return ret;
      };

      var ObjectGetDescriptor = function(o, key) {
          return {value: o[key]};
      };

      var ObjectDefineProperty = function (o, key, desc) {
          o[key] = desc.value;
          return o;
      };

      var ObjectFreeze = function (obj) {
          return obj;
      };

      var ObjectGetPrototypeOf = function (obj) {
          try {
              return Object(obj).constructor.prototype;
          }
          catch (e) {
              return proto;
          }
      };

      var ArrayIsArray = function (obj) {
          try {
              return str.call(obj) === "[object Array]";
          }
          catch(e) {
              return false;
          }
      };

      module.exports = {
          isArray: ArrayIsArray,
          keys: ObjectKeys,
          names: ObjectKeys,
          defineProperty: ObjectDefineProperty,
          getDescriptor: ObjectGetDescriptor,
          freeze: ObjectFreeze,
          getPrototypeOf: ObjectGetPrototypeOf,
          isES5: isES5,
          propertyIsWritable: function() {
              return true;
          }
      };
  }
  });
  var es5_1 = es5.freeze;
  var es5_2 = es5.defineProperty;
  var es5_3 = es5.getDescriptor;
  var es5_4 = es5.keys;
  var es5_5 = es5.names;
  var es5_6 = es5.getPrototypeOf;
  var es5_7 = es5.isArray;
  var es5_8 = es5.isES5;
  var es5_9 = es5.propertyIsWritable;

  var canEvaluate = typeof navigator == "undefined";

  var errorObj = {e: {}};
  var tryCatchTarget;
  var globalObject = typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window :
      typeof commonjsGlobal !== "undefined" ? commonjsGlobal :
      commonjsGlobal !== undefined ? commonjsGlobal : null;

  function tryCatcher() {
      try {
          var target = tryCatchTarget;
          tryCatchTarget = null;
          return target.apply(this, arguments);
      } catch (e) {
          errorObj.e = e;
          return errorObj;
      }
  }
  function tryCatch(fn) {
      tryCatchTarget = fn;
      return tryCatcher;
  }

  var inherits$1 = function(Child, Parent) {
      var hasProp = {}.hasOwnProperty;

      function T() {
          this.constructor = Child;
          this.constructor$ = Parent;
          for (var propertyName in Parent.prototype) {
              if (hasProp.call(Parent.prototype, propertyName) &&
                  propertyName.charAt(propertyName.length-1) !== "$"
             ) {
                  this[propertyName + "$"] = Parent.prototype[propertyName];
              }
          }
      }
      T.prototype = Parent.prototype;
      Child.prototype = new T();
      return Child.prototype;
  };


  function isPrimitive(val) {
      return val == null || val === true || val === false ||
          typeof val === "string" || typeof val === "number";

  }

  function isObject(value) {
      return typeof value === "function" ||
             typeof value === "object" && value !== null;
  }

  function maybeWrapAsError(maybeError) {
      if (!isPrimitive(maybeError)) return maybeError;

      return new Error(safeToString(maybeError));
  }

  function withAppended(target, appendee) {
      var len = target.length;
      var ret = new Array(len + 1);
      var i;
      for (i = 0; i < len; ++i) {
          ret[i] = target[i];
      }
      ret[i] = appendee;
      return ret;
  }

  function getDataPropertyOrDefault(obj, key, defaultValue) {
      if (es5.isES5) {
          var desc = Object.getOwnPropertyDescriptor(obj, key);

          if (desc != null) {
              return desc.get == null && desc.set == null
                      ? desc.value
                      : defaultValue;
          }
      } else {
          return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
      }
  }

  function notEnumerableProp(obj, name, value) {
      if (isPrimitive(obj)) return obj;
      var descriptor = {
          value: value,
          configurable: true,
          enumerable: false,
          writable: true
      };
      es5.defineProperty(obj, name, descriptor);
      return obj;
  }

  function thrower(r) {
      throw r;
  }

  var inheritedDataKeys = (function() {
      var excludedPrototypes = [
          Array.prototype,
          Object.prototype,
          Function.prototype
      ];

      var isExcludedProto = function(val) {
          for (var i = 0; i < excludedPrototypes.length; ++i) {
              if (excludedPrototypes[i] === val) {
                  return true;
              }
          }
          return false;
      };

      if (es5.isES5) {
          var getKeys = Object.getOwnPropertyNames;
          return function(obj) {
              var ret = [];
              var visitedKeys = Object.create(null);
              while (obj != null && !isExcludedProto(obj)) {
                  var keys;
                  try {
                      keys = getKeys(obj);
                  } catch (e) {
                      return ret;
                  }
                  for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key]) continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                          ret.push(key);
                      }
                  }
                  obj = es5.getPrototypeOf(obj);
              }
              return ret;
          };
      } else {
          var hasProp = {}.hasOwnProperty;
          return function(obj) {
              if (isExcludedProto(obj)) return [];
              var ret = [];

              /*jshint forin:false */
              enumeration: for (var key in obj) {
                  if (hasProp.call(obj, key)) {
                      ret.push(key);
                  } else {
                      for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                              continue enumeration;
                          }
                      }
                      ret.push(key);
                  }
              }
              return ret;
          };
      }

  })();

  var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
  function isClass(fn) {
      try {
          if (typeof fn === "function") {
              var keys = es5.names(fn.prototype);

              var hasMethods = es5.isES5 && keys.length > 1;
              var hasMethodsOtherThanConstructor = keys.length > 0 &&
                  !(keys.length === 1 && keys[0] === "constructor");
              var hasThisAssignmentAndStaticMethods =
                  thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

              if (hasMethods || hasMethodsOtherThanConstructor ||
                  hasThisAssignmentAndStaticMethods) {
                  return true;
              }
          }
          return false;
      } catch (e) {
          return false;
      }
  }

  function toFastProperties(obj) {
      return obj;
      eval(obj);
  }

  var rident = /^[a-z$_][a-z$_0-9]*$/i;
  function isIdentifier(str) {
      return rident.test(str);
  }

  function filledRange(count, prefix, suffix) {
      var ret = new Array(count);
      for(var i = 0; i < count; ++i) {
          ret[i] = prefix + i + suffix;
      }
      return ret;
  }

  function safeToString(obj) {
      try {
          return obj + "";
      } catch (e) {
          return "[no string representation]";
      }
  }

  function isError(obj) {
      return obj instanceof Error ||
          (obj !== null &&
             typeof obj === "object" &&
             typeof obj.message === "string" &&
             typeof obj.name === "string");
  }

  function markAsOriginatingFromRejection(e) {
      try {
          notEnumerableProp(e, "isOperational", true);
      }
      catch(ignore) {}
  }

  function originatesFromRejection(e) {
      if (e == null) return false;
      return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
          e["isOperational"] === true);
  }

  function canAttachTrace(obj) {
      return isError(obj) && es5.propertyIsWritable(obj, "stack");
  }

  var ensureErrorObject = (function() {
      if (!("stack" in new Error())) {
          return function(value) {
              if (canAttachTrace(value)) return value;
              try {throw new Error(safeToString(value));}
              catch(err) {return err;}
          };
      } else {
          return function(value) {
              if (canAttachTrace(value)) return value;
              return new Error(safeToString(value));
          };
      }
  })();

  function classString(obj) {
      return {}.toString.call(obj);
  }

  function copyDescriptors(from, to, filter) {
      var keys = es5.names(from);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (filter(key)) {
              try {
                  es5.defineProperty(to, key, es5.getDescriptor(from, key));
              } catch (ignore) {}
          }
      }
  }

  var asArray = function(v) {
      if (es5.isArray(v)) {
          return v;
      }
      return null;
  };

  if (typeof Symbol !== "undefined" && Symbol.iterator) {
      var ArrayFrom = typeof Array.from === "function" ? function(v) {
          return Array.from(v);
      } : function(v) {
          var ret = [];
          var it = v[Symbol.iterator]();
          var itResult;
          while (!((itResult = it.next()).done)) {
              ret.push(itResult.value);
          }
          return ret;
      };

      asArray = function(v) {
          if (es5.isArray(v)) {
              return v;
          } else if (v != null && typeof v[Symbol.iterator] === "function") {
              return ArrayFrom(v);
          }
          return null;
      };
  }

  var isNode = typeof process !== "undefined" &&
          classString(process).toLowerCase() === "[object process]";

  var hasEnvVariables = typeof process !== "undefined" &&
      typeof process.env !== "undefined";

  function env(key) {
      return hasEnvVariables ? process.env[key] : undefined;
  }

  function getNativePromise() {
      if (typeof Promise === "function") {
          try {
              var promise = new Promise(function(){});
              if ({}.toString.call(promise) === "[object Promise]") {
                  return Promise;
              }
          } catch (e) {}
      }
  }

  function domainBind(self, cb) {
      return self.bind(cb);
  }

  var ret = {
      isClass: isClass,
      isIdentifier: isIdentifier,
      inheritedDataKeys: inheritedDataKeys,
      getDataPropertyOrDefault: getDataPropertyOrDefault,
      thrower: thrower,
      isArray: es5.isArray,
      asArray: asArray,
      notEnumerableProp: notEnumerableProp,
      isPrimitive: isPrimitive,
      isObject: isObject,
      isError: isError,
      canEvaluate: canEvaluate,
      errorObj: errorObj,
      tryCatch: tryCatch,
      inherits: inherits$1,
      withAppended: withAppended,
      maybeWrapAsError: maybeWrapAsError,
      toFastProperties: toFastProperties,
      filledRange: filledRange,
      toString: safeToString,
      canAttachTrace: canAttachTrace,
      ensureErrorObject: ensureErrorObject,
      originatesFromRejection: originatesFromRejection,
      markAsOriginatingFromRejection: markAsOriginatingFromRejection,
      classString: classString,
      copyDescriptors: copyDescriptors,
      hasDevTools: typeof chrome !== "undefined" && chrome &&
                   typeof chrome.loadTimes === "function",
      isNode: isNode,
      hasEnvVariables: hasEnvVariables,
      env: env,
      global: globalObject,
      getNativePromise: getNativePromise,
      domainBind: domainBind
  };
  ret.isRecentNode = ret.isNode && (function() {
      var version = process.versions.node.split(".").map(Number);
      return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
  })();

  if (ret.isNode) ret.toFastProperties(process);

  try {throw new Error(); } catch (e) {ret.lastLineError = e;}
  var util$1 = ret;

  var schedule;
  var noAsyncScheduler = function() {
      throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  };
  var NativePromise = util$1.getNativePromise();
  if (util$1.isNode && typeof MutationObserver === "undefined") {
      var GlobalSetImmediate = commonjsGlobal.setImmediate;
      var ProcessNextTick = process.nextTick;
      schedule = util$1.isRecentNode
                  ? function(fn) { GlobalSetImmediate.call(commonjsGlobal, fn); }
                  : function(fn) { ProcessNextTick.call(process, fn); };
  } else if (typeof NativePromise === "function" &&
             typeof NativePromise.resolve === "function") {
      var nativePromise = NativePromise.resolve();
      schedule = function(fn) {
          nativePromise.then(fn);
      };
  } else if ((typeof MutationObserver !== "undefined") &&
            !(typeof window !== "undefined" &&
              window.navigator &&
              (window.navigator.standalone || window.cordova))) {
      schedule = (function() {
          var div = document.createElement("div");
          var opts = {attributes: true};
          var toggleScheduled = false;
          var div2 = document.createElement("div");
          var o2 = new MutationObserver(function() {
              div.classList.toggle("foo");
              toggleScheduled = false;
          });
          o2.observe(div2, opts);

          var scheduleToggle = function() {
              if (toggleScheduled) return;
              toggleScheduled = true;
              div2.classList.toggle("foo");
          };

          return function schedule(fn) {
              var o = new MutationObserver(function() {
                  o.disconnect();
                  fn();
              });
              o.observe(div, opts);
              scheduleToggle();
          };
      })();
  } else if (typeof setImmediate !== "undefined") {
      schedule = function (fn) {
          setImmediate(fn);
      };
  } else if (typeof setTimeout !== "undefined") {
      schedule = function (fn) {
          setTimeout(fn, 0);
      };
  } else {
      schedule = noAsyncScheduler;
  }
  var schedule_1 = schedule;

  function arrayMove(src, srcIndex, dst, dstIndex, len) {
      for (var j = 0; j < len; ++j) {
          dst[j + dstIndex] = src[j + srcIndex];
          src[j + srcIndex] = void 0;
      }
  }

  function Queue(capacity) {
      this._capacity = capacity;
      this._length = 0;
      this._front = 0;
  }

  Queue.prototype._willBeOverCapacity = function (size) {
      return this._capacity < size;
  };

  Queue.prototype._pushOne = function (arg) {
      var length = this.length();
      this._checkCapacity(length + 1);
      var i = (this._front + length) & (this._capacity - 1);
      this[i] = arg;
      this._length = length + 1;
  };

  Queue.prototype.push = function (fn, receiver, arg) {
      var length = this.length() + 3;
      if (this._willBeOverCapacity(length)) {
          this._pushOne(fn);
          this._pushOne(receiver);
          this._pushOne(arg);
          return;
      }
      var j = this._front + length - 3;
      this._checkCapacity(length);
      var wrapMask = this._capacity - 1;
      this[(j + 0) & wrapMask] = fn;
      this[(j + 1) & wrapMask] = receiver;
      this[(j + 2) & wrapMask] = arg;
      this._length = length;
  };

  Queue.prototype.shift = function () {
      var front = this._front,
          ret = this[front];

      this[front] = undefined;
      this._front = (front + 1) & (this._capacity - 1);
      this._length--;
      return ret;
  };

  Queue.prototype.length = function () {
      return this._length;
  };

  Queue.prototype._checkCapacity = function (size) {
      if (this._capacity < size) {
          this._resizeTo(this._capacity << 1);
      }
  };

  Queue.prototype._resizeTo = function (capacity) {
      var oldCapacity = this._capacity;
      this._capacity = capacity;
      var front = this._front;
      var length = this._length;
      var moveItemsCount = (front + length) & (oldCapacity - 1);
      arrayMove(this, 0, this, oldCapacity, moveItemsCount);
  };

  var queue = Queue;

  var firstLineError;
  try {throw new Error(); } catch (e) {firstLineError = e;}




  function Async() {
      this._customScheduler = false;
      this._isTickUsed = false;
      this._lateQueue = new queue(16);
      this._normalQueue = new queue(16);
      this._haveDrainedQueues = false;
      this._trampolineEnabled = true;
      var self = this;
      this.drainQueues = function () {
          self._drainQueues();
      };
      this._schedule = schedule_1;
  }

  Async.prototype.setScheduler = function(fn) {
      var prev = this._schedule;
      this._schedule = fn;
      this._customScheduler = true;
      return prev;
  };

  Async.prototype.hasCustomScheduler = function() {
      return this._customScheduler;
  };

  Async.prototype.enableTrampoline = function() {
      this._trampolineEnabled = true;
  };

  Async.prototype.disableTrampolineIfNecessary = function() {
      if (util$1.hasDevTools) {
          this._trampolineEnabled = false;
      }
  };

  Async.prototype.haveItemsQueued = function () {
      return this._isTickUsed || this._haveDrainedQueues;
  };


  Async.prototype.fatalError = function(e, isNode) {
      if (isNode) {
          process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
              "\n");
          process.exit(2);
      } else {
          this.throwLater(e);
      }
  };

  Async.prototype.throwLater = function(fn, arg) {
      if (arguments.length === 1) {
          arg = fn;
          fn = function () { throw arg; };
      }
      if (typeof setTimeout !== "undefined") {
          setTimeout(function() {
              fn(arg);
          }, 0);
      } else try {
          this._schedule(function() {
              fn(arg);
          });
      } catch (e) {
          throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
  };

  function AsyncInvokeLater(fn, receiver, arg) {
      this._lateQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncInvoke(fn, receiver, arg) {
      this._normalQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncSettlePromises(promise) {
      this._normalQueue._pushOne(promise);
      this._queueTick();
  }

  if (!util$1.hasDevTools) {
      Async.prototype.invokeLater = AsyncInvokeLater;
      Async.prototype.invoke = AsyncInvoke;
      Async.prototype.settlePromises = AsyncSettlePromises;
  } else {
      Async.prototype.invokeLater = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvokeLater.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  setTimeout(function() {
                      fn.call(receiver, arg);
                  }, 100);
              });
          }
      };

      Async.prototype.invoke = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvoke.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  fn.call(receiver, arg);
              });
          }
      };

      Async.prototype.settlePromises = function(promise) {
          if (this._trampolineEnabled) {
              AsyncSettlePromises.call(this, promise);
          } else {
              this._schedule(function() {
                  promise._settlePromises();
              });
          }
      };
  }

  Async.prototype._drainQueue = function(queue$$1) {
      while (queue$$1.length() > 0) {
          var fn = queue$$1.shift();
          if (typeof fn !== "function") {
              fn._settlePromises();
              continue;
          }
          var receiver = queue$$1.shift();
          var arg = queue$$1.shift();
          fn.call(receiver, arg);
      }
  };

  Async.prototype._drainQueues = function () {
      this._drainQueue(this._normalQueue);
      this._reset();
      this._haveDrainedQueues = true;
      this._drainQueue(this._lateQueue);
  };

  Async.prototype._queueTick = function () {
      if (!this._isTickUsed) {
          this._isTickUsed = true;
          this._schedule(this.drainQueues);
      }
  };

  Async.prototype._reset = function () {
      this._isTickUsed = false;
  };

  var async$1 = Async;
  var firstLineError_1 = firstLineError;
  async$1.firstLineError = firstLineError_1;

  var Objectfreeze = es5.freeze;

  var inherits$2 = util$1.inherits;
  var notEnumerableProp$1 = util$1.notEnumerableProp;

  function subError(nameProperty, defaultMessage) {
      function SubError(message) {
          if (!(this instanceof SubError)) return new SubError(message);
          notEnumerableProp$1(this, "message",
              typeof message === "string" ? message : defaultMessage);
          notEnumerableProp$1(this, "name", nameProperty);
          if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
          } else {
              Error.call(this);
          }
      }
      inherits$2(SubError, Error);
      return SubError;
  }

  var _TypeError, _RangeError;
  var Warning = subError("Warning", "warning");
  var CancellationError = subError("CancellationError", "cancellation error");
  var TimeoutError = subError("TimeoutError", "timeout error");
  var AggregateError = subError("AggregateError", "aggregate error");
  try {
      _TypeError = TypeError;
      _RangeError = RangeError;
  } catch(e) {
      _TypeError = subError("TypeError", "type error");
      _RangeError = subError("RangeError", "range error");
  }

  var methods$1 = ("join pop push shift unshift slice filter forEach some " +
      "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

  for (var i$1 = 0; i$1 < methods$1.length; ++i$1) {
      if (typeof Array.prototype[methods$1[i$1]] === "function") {
          AggregateError.prototype[methods$1[i$1]] = Array.prototype[methods$1[i$1]];
      }
  }

  es5.defineProperty(AggregateError.prototype, "length", {
      value: 0,
      configurable: false,
      writable: true,
      enumerable: true
  });
  AggregateError.prototype["isOperational"] = true;
  var level = 0;
  AggregateError.prototype.toString = function() {
      var indent = Array(level * 4 + 1).join(" ");
      var ret = "\n" + indent + "AggregateError of:" + "\n";
      level++;
      indent = Array(level * 4 + 1).join(" ");
      for (var i = 0; i < this.length; ++i) {
          var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
          var lines = str.split("\n");
          for (var j = 0; j < lines.length; ++j) {
              lines[j] = indent + lines[j];
          }
          str = lines.join("\n");
          ret += str + "\n";
      }
      level--;
      return ret;
  };

  function OperationalError(message) {
      if (!(this instanceof OperationalError))
          return new OperationalError(message);
      notEnumerableProp$1(this, "name", "OperationalError");
      notEnumerableProp$1(this, "message", message);
      this.cause = message;
      this["isOperational"] = true;

      if (message instanceof Error) {
          notEnumerableProp$1(this, "message", message.message);
          notEnumerableProp$1(this, "stack", message.stack);
      } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
      }

  }
  inherits$2(OperationalError, Error);

  var errorTypes = Error["__BluebirdErrorTypes__"];
  if (!errorTypes) {
      errorTypes = Objectfreeze({
          CancellationError: CancellationError,
          TimeoutError: TimeoutError,
          OperationalError: OperationalError,
          RejectionError: OperationalError,
          AggregateError: AggregateError
      });
      es5.defineProperty(Error, "__BluebirdErrorTypes__", {
          value: errorTypes,
          writable: false,
          enumerable: false,
          configurable: false
      });
  }

  var errors$10 = {
      Error: Error,
      TypeError: _TypeError,
      RangeError: _RangeError,
      CancellationError: errorTypes.CancellationError,
      OperationalError: errorTypes.OperationalError,
      TimeoutError: errorTypes.TimeoutError,
      AggregateError: errorTypes.AggregateError,
      Warning: Warning
  };

  var thenables = function(Promise, INTERNAL) {
  var util$$1 = util$1;
  var errorObj = util$$1.errorObj;
  var isObject = util$$1.isObject;

  function tryConvertToPromise(obj, context) {
      if (isObject(obj)) {
          if (obj instanceof Promise) return obj;
          var then = getThen(obj);
          if (then === errorObj) {
              if (context) context._pushContext();
              var ret = Promise.reject(then.e);
              if (context) context._popContext();
              return ret;
          } else if (typeof then === "function") {
              if (isAnyBluebirdPromise(obj)) {
                  var ret = new Promise(INTERNAL);
                  obj._then(
                      ret._fulfill,
                      ret._reject,
                      undefined,
                      ret,
                      null
                  );
                  return ret;
              }
              return doThenable(obj, then, context);
          }
      }
      return obj;
  }

  function doGetThen(obj) {
      return obj.then;
  }

  function getThen(obj) {
      try {
          return doGetThen(obj);
      } catch (e) {
          errorObj.e = e;
          return errorObj;
      }
  }

  var hasProp = {}.hasOwnProperty;
  function isAnyBluebirdPromise(obj) {
      try {
          return hasProp.call(obj, "_promise0");
      } catch (e) {
          return false;
      }
  }

  function doThenable(x, then, context) {
      var promise = new Promise(INTERNAL);
      var ret = promise;
      if (context) context._pushContext();
      promise._captureStackTrace();
      if (context) context._popContext();
      var synchronous = true;
      var result = util$$1.tryCatch(then).call(x, resolve, reject);
      synchronous = false;

      if (promise && result === errorObj) {
          promise._rejectCallback(result.e, true, true);
          promise = null;
      }

      function resolve(value) {
          if (!promise) return;
          promise._resolveCallback(value);
          promise = null;
      }

      function reject(reason) {
          if (!promise) return;
          promise._rejectCallback(reason, synchronous, true);
          promise = null;
      }
      return ret;
  }

  return tryConvertToPromise;
  };

  var promise_array = function(Promise, INTERNAL, tryConvertToPromise,
      apiRejection, Proxyable) {
  var util$$1 = util$1;

  function toResolutionValue(val) {
      switch(val) {
      case -2: return [];
      case -3: return {};
      case -6: return new Map();
      }
  }

  function PromiseArray(values) {
      var promise = this._promise = new Promise(INTERNAL);
      if (values instanceof Promise) {
          promise._propagateFrom(values, 3);
      }
      promise._setOnCancel(this);
      this._values = values;
      this._length = 0;
      this._totalResolved = 0;
      this._init(undefined, -2);
  }
  util$$1.inherits(PromiseArray, Proxyable);

  PromiseArray.prototype.length = function () {
      return this._length;
  };

  PromiseArray.prototype.promise = function () {
      return this._promise;
  };

  PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
      var values = tryConvertToPromise(this._values, this._promise);
      if (values instanceof Promise) {
          values = values._target();
          var bitField = values._bitField;
          this._values = values;

          if (((bitField & 50397184) === 0)) {
              this._promise._setAsyncGuaranteed();
              return values._then(
                  init,
                  this._reject,
                  undefined,
                  this,
                  resolveValueIfEmpty
             );
          } else if (((bitField & 33554432) !== 0)) {
              values = values._value();
          } else if (((bitField & 16777216) !== 0)) {
              return this._reject(values._reason());
          } else {
              return this._cancel();
          }
      }
      values = util$$1.asArray(values);
      if (values === null) {
          var err = apiRejection(
              "expecting an array or an iterable object but got " + util$$1.classString(values)).reason();
          this._promise._rejectCallback(err, false);
          return;
      }

      if (values.length === 0) {
          if (resolveValueIfEmpty === -5) {
              this._resolveEmptyArray();
          }
          else {
              this._resolve(toResolutionValue(resolveValueIfEmpty));
          }
          return;
      }
      this._iterate(values);
  };

  PromiseArray.prototype._iterate = function(values) {
      var len = this.getActualLength(values.length);
      this._length = len;
      this._values = this.shouldCopyValues() ? new Array(len) : this._values;
      var result = this._promise;
      var isResolved = false;
      var bitField = null;
      for (var i = 0; i < len; ++i) {
          var maybePromise = tryConvertToPromise(values[i], result);

          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              bitField = maybePromise._bitField;
          } else {
              bitField = null;
          }

          if (isResolved) {
              if (bitField !== null) {
                  maybePromise.suppressUnhandledRejections();
              }
          } else if (bitField !== null) {
              if (((bitField & 50397184) === 0)) {
                  maybePromise._proxy(this, i);
                  this._values[i] = maybePromise;
              } else if (((bitField & 33554432) !== 0)) {
                  isResolved = this._promiseFulfilled(maybePromise._value(), i);
              } else if (((bitField & 16777216) !== 0)) {
                  isResolved = this._promiseRejected(maybePromise._reason(), i);
              } else {
                  isResolved = this._promiseCancelled(i);
              }
          } else {
              isResolved = this._promiseFulfilled(maybePromise, i);
          }
      }
      if (!isResolved) result._setAsyncGuaranteed();
  };

  PromiseArray.prototype._isResolved = function () {
      return this._values === null;
  };

  PromiseArray.prototype._resolve = function (value) {
      this._values = null;
      this._promise._fulfill(value);
  };

  PromiseArray.prototype._cancel = function() {
      if (this._isResolved() || !this._promise._isCancellable()) return;
      this._values = null;
      this._promise._cancel();
  };

  PromiseArray.prototype._reject = function (reason) {
      this._values = null;
      this._promise._rejectCallback(reason, false);
  };

  PromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
          return true;
      }
      return false;
  };

  PromiseArray.prototype._promiseCancelled = function() {
      this._cancel();
      return true;
  };

  PromiseArray.prototype._promiseRejected = function (reason) {
      this._totalResolved++;
      this._reject(reason);
      return true;
  };

  PromiseArray.prototype._resultCancelled = function() {
      if (this._isResolved()) return;
      var values = this._values;
      this._cancel();
      if (values instanceof Promise) {
          values.cancel();
      } else {
          for (var i = 0; i < values.length; ++i) {
              if (values[i] instanceof Promise) {
                  values[i].cancel();
              }
          }
      }
  };

  PromiseArray.prototype.shouldCopyValues = function () {
      return true;
  };

  PromiseArray.prototype.getActualLength = function (len) {
      return len;
  };

  return PromiseArray;
  };

  var context = function(Promise) {
  var longStackTraces = false;
  var contextStack = [];

  Promise.prototype._promiseCreated = function() {};
  Promise.prototype._pushContext = function() {};
  Promise.prototype._popContext = function() {return null;};
  Promise._peekContext = Promise.prototype._peekContext = function() {};

  function Context() {
      this._trace = new Context.CapturedTrace(peekContext());
  }
  Context.prototype._pushContext = function () {
      if (this._trace !== undefined) {
          this._trace._promiseCreated = null;
          contextStack.push(this._trace);
      }
  };

  Context.prototype._popContext = function () {
      if (this._trace !== undefined) {
          var trace = contextStack.pop();
          var ret = trace._promiseCreated;
          trace._promiseCreated = null;
          return ret;
      }
      return null;
  };

  function createContext() {
      if (longStackTraces) return new Context();
  }

  function peekContext() {
      var lastIndex = contextStack.length - 1;
      if (lastIndex >= 0) {
          return contextStack[lastIndex];
      }
      return undefined;
  }
  Context.CapturedTrace = null;
  Context.create = createContext;
  Context.deactivateLongStackTraces = function() {};
  Context.activateLongStackTraces = function() {
      var Promise_pushContext = Promise.prototype._pushContext;
      var Promise_popContext = Promise.prototype._popContext;
      var Promise_PeekContext = Promise._peekContext;
      var Promise_peekContext = Promise.prototype._peekContext;
      var Promise_promiseCreated = Promise.prototype._promiseCreated;
      Context.deactivateLongStackTraces = function() {
          Promise.prototype._pushContext = Promise_pushContext;
          Promise.prototype._popContext = Promise_popContext;
          Promise._peekContext = Promise_PeekContext;
          Promise.prototype._peekContext = Promise_peekContext;
          Promise.prototype._promiseCreated = Promise_promiseCreated;
          longStackTraces = false;
      };
      longStackTraces = true;
      Promise.prototype._pushContext = Context.prototype._pushContext;
      Promise.prototype._popContext = Context.prototype._popContext;
      Promise._peekContext = Promise.prototype._peekContext = peekContext;
      Promise.prototype._promiseCreated = function() {
          var ctx = this._peekContext();
          if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
      };
  };
  return Context;
  };

  var debuggability = function(Promise, Context) {
  var getDomain = Promise._getDomain;
  var async = Promise._async;
  var Warning = errors$10.Warning;
  var util$$1 = util$1;
  var canAttachTrace = util$$1.canAttachTrace;
  var unhandledRejectionHandled;
  var possiblyUnhandledRejection;
  var bluebirdFramePattern =
      /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
  var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
  var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
  var stackFramePattern = null;
  var formatStack = null;
  var indentStackFrames = false;
  var printWarning;
  var debugging = !!(util$$1.env("BLUEBIRD_DEBUG") != 0 &&
                          (false ||
                           util$$1.env("BLUEBIRD_DEBUG") ||
                           util$$1.env("NODE_ENV") === "development"));

  var warnings = !!(util$$1.env("BLUEBIRD_WARNINGS") != 0 &&
      (debugging || util$$1.env("BLUEBIRD_WARNINGS")));

  var longStackTraces = !!(util$$1.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
      (debugging || util$$1.env("BLUEBIRD_LONG_STACK_TRACES")));

  var wForgottenReturn = util$$1.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
      (warnings || !!util$$1.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

  Promise.prototype.suppressUnhandledRejections = function() {
      var target = this._target();
      target._bitField = ((target._bitField & (~1048576)) |
                        524288);
  };

  Promise.prototype._ensurePossibleRejectionHandled = function () {
      if ((this._bitField & 524288) !== 0) return;
      this._setRejectionIsUnhandled();
      var self = this;
      setTimeout(function() {
          self._notifyUnhandledRejection();
      }, 1);
  };

  Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
      fireRejectionEvent("rejectionHandled",
                                    unhandledRejectionHandled, undefined, this);
  };

  Promise.prototype._setReturnedNonUndefined = function() {
      this._bitField = this._bitField | 268435456;
  };

  Promise.prototype._returnedNonUndefined = function() {
      return (this._bitField & 268435456) !== 0;
  };

  Promise.prototype._notifyUnhandledRejection = function () {
      if (this._isRejectionUnhandled()) {
          var reason = this._settledValue();
          this._setUnhandledRejectionIsNotified();
          fireRejectionEvent("unhandledRejection",
                                        possiblyUnhandledRejection, reason, this);
      }
  };

  Promise.prototype._setUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField | 262144;
  };

  Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField & (~262144);
  };

  Promise.prototype._isUnhandledRejectionNotified = function () {
      return (this._bitField & 262144) > 0;
  };

  Promise.prototype._setRejectionIsUnhandled = function () {
      this._bitField = this._bitField | 1048576;
  };

  Promise.prototype._unsetRejectionIsUnhandled = function () {
      this._bitField = this._bitField & (~1048576);
      if (this._isUnhandledRejectionNotified()) {
          this._unsetUnhandledRejectionIsNotified();
          this._notifyUnhandledRejectionIsHandled();
      }
  };

  Promise.prototype._isRejectionUnhandled = function () {
      return (this._bitField & 1048576) > 0;
  };

  Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
      return warn(message, shouldUseOwnTrace, promise || this);
  };

  Promise.onPossiblyUnhandledRejection = function (fn) {
      var domain = getDomain();
      possiblyUnhandledRejection =
          typeof fn === "function" ? (domain === null ?
                                              fn : util$$1.domainBind(domain, fn))
                                   : undefined;
  };

  Promise.onUnhandledRejectionHandled = function (fn) {
      var domain = getDomain();
      unhandledRejectionHandled =
          typeof fn === "function" ? (domain === null ?
                                              fn : util$$1.domainBind(domain, fn))
                                   : undefined;
  };

  var disableLongStackTraces = function() {};
  Promise.longStackTraces = function () {
      if (async.haveItemsQueued() && !config.longStackTraces) {
          throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      if (!config.longStackTraces && longStackTracesIsSupported()) {
          var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
          var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
          config.longStackTraces = true;
          disableLongStackTraces = function() {
              if (async.haveItemsQueued() && !config.longStackTraces) {
                  throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
              }
              Promise.prototype._captureStackTrace = Promise_captureStackTrace;
              Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
              Context.deactivateLongStackTraces();
              async.enableTrampoline();
              config.longStackTraces = false;
          };
          Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
          Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
          Context.activateLongStackTraces();
          async.disableTrampolineIfNecessary();
      }
  };

  Promise.hasLongStackTraces = function () {
      return config.longStackTraces && longStackTracesIsSupported();
  };

  var fireDomEvent = (function() {
      try {
          if (typeof CustomEvent === "function") {
              var event = new CustomEvent("CustomEvent");
              util$$1.global.dispatchEvent(event);
              return function(name, event) {
                  var domEvent = new CustomEvent(name.toLowerCase(), {
                      detail: event,
                      cancelable: true
                  });
                  return !util$$1.global.dispatchEvent(domEvent);
              };
          } else if (typeof Event === "function") {
              var event = new Event("CustomEvent");
              util$$1.global.dispatchEvent(event);
              return function(name, event) {
                  var domEvent = new Event(name.toLowerCase(), {
                      cancelable: true
                  });
                  domEvent.detail = event;
                  return !util$$1.global.dispatchEvent(domEvent);
              };
          } else {
              var event = document.createEvent("CustomEvent");
              event.initCustomEvent("testingtheevent", false, true, {});
              util$$1.global.dispatchEvent(event);
              return function(name, event) {
                  var domEvent = document.createEvent("CustomEvent");
                  domEvent.initCustomEvent(name.toLowerCase(), false, true,
                      event);
                  return !util$$1.global.dispatchEvent(domEvent);
              };
          }
      } catch (e) {}
      return function() {
          return false;
      };
  })();

  var fireGlobalEvent = (function() {
      if (util$$1.isNode) {
          return function() {
              return process.emit.apply(process, arguments);
          };
      } else {
          if (!util$$1.global) {
              return function() {
                  return false;
              };
          }
          return function(name) {
              var methodName = "on" + name.toLowerCase();
              var method = util$$1.global[methodName];
              if (!method) return false;
              method.apply(util$$1.global, [].slice.call(arguments, 1));
              return true;
          };
      }
  })();

  function generatePromiseLifecycleEventObject(name, promise) {
      return {promise: promise};
  }

  var eventToObjectGenerator = {
      promiseCreated: generatePromiseLifecycleEventObject,
      promiseFulfilled: generatePromiseLifecycleEventObject,
      promiseRejected: generatePromiseLifecycleEventObject,
      promiseResolved: generatePromiseLifecycleEventObject,
      promiseCancelled: generatePromiseLifecycleEventObject,
      promiseChained: function(name, promise, child) {
          return {promise: promise, child: child};
      },
      warning: function(name, warning) {
          return {warning: warning};
      },
      unhandledRejection: function (name, reason, promise) {
          return {reason: reason, promise: promise};
      },
      rejectionHandled: generatePromiseLifecycleEventObject
  };

  var activeFireEvent = function (name) {
      var globalEventFired = false;
      try {
          globalEventFired = fireGlobalEvent.apply(null, arguments);
      } catch (e) {
          async.throwLater(e);
          globalEventFired = true;
      }

      var domEventFired = false;
      try {
          domEventFired = fireDomEvent(name,
                      eventToObjectGenerator[name].apply(null, arguments));
      } catch (e) {
          async.throwLater(e);
          domEventFired = true;
      }

      return domEventFired || globalEventFired;
  };

  Promise.config = function(opts) {
      opts = Object(opts);
      if ("longStackTraces" in opts) {
          if (opts.longStackTraces) {
              Promise.longStackTraces();
          } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
              disableLongStackTraces();
          }
      }
      if ("warnings" in opts) {
          var warningsOption = opts.warnings;
          config.warnings = !!warningsOption;
          wForgottenReturn = config.warnings;

          if (util$$1.isObject(warningsOption)) {
              if ("wForgottenReturn" in warningsOption) {
                  wForgottenReturn = !!warningsOption.wForgottenReturn;
              }
          }
      }
      if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
          if (async.haveItemsQueued()) {
              throw new Error(
                  "cannot enable cancellation after promises are in use");
          }
          Promise.prototype._clearCancellationData =
              cancellationClearCancellationData;
          Promise.prototype._propagateFrom = cancellationPropagateFrom;
          Promise.prototype._onCancel = cancellationOnCancel;
          Promise.prototype._setOnCancel = cancellationSetOnCancel;
          Promise.prototype._attachCancellationCallback =
              cancellationAttachCancellationCallback;
          Promise.prototype._execute = cancellationExecute;
          propagateFromFunction = cancellationPropagateFrom;
          config.cancellation = true;
      }
      if ("monitoring" in opts) {
          if (opts.monitoring && !config.monitoring) {
              config.monitoring = true;
              Promise.prototype._fireEvent = activeFireEvent;
          } else if (!opts.monitoring && config.monitoring) {
              config.monitoring = false;
              Promise.prototype._fireEvent = defaultFireEvent;
          }
      }
      return Promise;
  };

  function defaultFireEvent() { return false; }

  Promise.prototype._fireEvent = defaultFireEvent;
  Promise.prototype._execute = function(executor, resolve, reject) {
      try {
          executor(resolve, reject);
      } catch (e) {
          return e;
      }
  };
  Promise.prototype._onCancel = function () {};
  Promise.prototype._setOnCancel = function (handler) { };
  Promise.prototype._attachCancellationCallback = function(onCancel) {
  };
  Promise.prototype._captureStackTrace = function () {};
  Promise.prototype._attachExtraTrace = function () {};
  Promise.prototype._clearCancellationData = function() {};
  Promise.prototype._propagateFrom = function (parent, flags) {
  };

  function cancellationExecute(executor, resolve, reject) {
      var promise = this;
      try {
          executor(resolve, reject, function(onCancel) {
              if (typeof onCancel !== "function") {
                  throw new TypeError("onCancel must be a function, got: " +
                                      util$$1.toString(onCancel));
              }
              promise._attachCancellationCallback(onCancel);
          });
      } catch (e) {
          return e;
      }
  }

  function cancellationAttachCancellationCallback(onCancel) {
      if (!this._isCancellable()) return this;

      var previousOnCancel = this._onCancel();
      if (previousOnCancel !== undefined) {
          if (util$$1.isArray(previousOnCancel)) {
              previousOnCancel.push(onCancel);
          } else {
              this._setOnCancel([previousOnCancel, onCancel]);
          }
      } else {
          this._setOnCancel(onCancel);
      }
  }

  function cancellationOnCancel() {
      return this._onCancelField;
  }

  function cancellationSetOnCancel(onCancel) {
      this._onCancelField = onCancel;
  }

  function cancellationClearCancellationData() {
      this._cancellationParent = undefined;
      this._onCancelField = undefined;
  }

  function cancellationPropagateFrom(parent, flags) {
      if ((flags & 1) !== 0) {
          this._cancellationParent = parent;
          var branchesRemainingToCancel = parent._branchesRemainingToCancel;
          if (branchesRemainingToCancel === undefined) {
              branchesRemainingToCancel = 0;
          }
          parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
      }
      if ((flags & 2) !== 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  }

  function bindingPropagateFrom(parent, flags) {
      if ((flags & 2) !== 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  }
  var propagateFromFunction = bindingPropagateFrom;

  function boundValueFunction() {
      var ret = this._boundTo;
      if (ret !== undefined) {
          if (ret instanceof Promise) {
              if (ret.isFulfilled()) {
                  return ret.value();
              } else {
                  return undefined;
              }
          }
      }
      return ret;
  }

  function longStackTracesCaptureStackTrace() {
      this._trace = new CapturedTrace(this._peekContext());
  }

  function longStackTracesAttachExtraTrace(error, ignoreSelf) {
      if (canAttachTrace(error)) {
          var trace = this._trace;
          if (trace !== undefined) {
              if (ignoreSelf) trace = trace._parent;
          }
          if (trace !== undefined) {
              trace.attachExtraTrace(error);
          } else if (!error.__stackCleaned__) {
              var parsed = parseStackAndMessage(error);
              util$$1.notEnumerableProp(error, "stack",
                  parsed.message + "\n" + parsed.stack.join("\n"));
              util$$1.notEnumerableProp(error, "__stackCleaned__", true);
          }
      }
  }

  function checkForgottenReturns(returnValue, promiseCreated, name, promise,
                                 parent) {
      if (returnValue === undefined && promiseCreated !== null &&
          wForgottenReturn) {
          if (parent !== undefined && parent._returnedNonUndefined()) return;
          if ((promise._bitField & 65535) === 0) return;

          if (name) name = name + " ";
          var handlerLine = "";
          var creatorLine = "";
          if (promiseCreated._trace) {
              var traceLines = promiseCreated._trace.stack.split("\n");
              var stack = cleanStack(traceLines);
              for (var i = stack.length - 1; i >= 0; --i) {
                  var line = stack[i];
                  if (!nodeFramePattern.test(line)) {
                      var lineMatches = line.match(parseLinePattern);
                      if (lineMatches) {
                          handlerLine  = "at " + lineMatches[1] +
                              ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
                      }
                      break;
                  }
              }

              if (stack.length > 0) {
                  var firstUserLine = stack[0];
                  for (var i = 0; i < traceLines.length; ++i) {

                      if (traceLines[i] === firstUserLine) {
                          if (i > 0) {
                              creatorLine = "\n" + traceLines[i - 1];
                          }
                          break;
                      }
                  }

              }
          }
          var msg = "a promise was created in a " + name +
              "handler " + handlerLine + "but was not returned from it, " +
              "see http://goo.gl/rRqMUw" +
              creatorLine;
          promise._warn(msg, true, promiseCreated);
      }
  }

  function deprecated(name, replacement) {
      var message = name +
          " is deprecated and will be removed in a future version.";
      if (replacement) message += " Use " + replacement + " instead.";
      return warn(message);
  }

  function warn(message, shouldUseOwnTrace, promise) {
      if (!config.warnings) return;
      var warning = new Warning(message);
      var ctx;
      if (shouldUseOwnTrace) {
          promise._attachExtraTrace(warning);
      } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
          ctx.attachExtraTrace(warning);
      } else {
          var parsed = parseStackAndMessage(warning);
          warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
      }

      if (!activeFireEvent("warning", warning)) {
          formatAndLogError(warning, "", true);
      }
  }

  function reconstructStack(message, stacks) {
      for (var i = 0; i < stacks.length - 1; ++i) {
          stacks[i].push("From previous event:");
          stacks[i] = stacks[i].join("\n");
      }
      if (i < stacks.length) {
          stacks[i] = stacks[i].join("\n");
      }
      return message + "\n" + stacks.join("\n");
  }

  function removeDuplicateOrEmptyJumps(stacks) {
      for (var i = 0; i < stacks.length; ++i) {
          if (stacks[i].length === 0 ||
              ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
              stacks.splice(i, 1);
              i--;
          }
      }
  }

  function removeCommonRoots(stacks) {
      var current = stacks[0];
      for (var i = 1; i < stacks.length; ++i) {
          var prev = stacks[i];
          var currentLastIndex = current.length - 1;
          var currentLastLine = current[currentLastIndex];
          var commonRootMeetPoint = -1;

          for (var j = prev.length - 1; j >= 0; --j) {
              if (prev[j] === currentLastLine) {
                  commonRootMeetPoint = j;
                  break;
              }
          }

          for (var j = commonRootMeetPoint; j >= 0; --j) {
              var line = prev[j];
              if (current[currentLastIndex] === line) {
                  current.pop();
                  currentLastIndex--;
              } else {
                  break;
              }
          }
          current = prev;
      }
  }

  function cleanStack(stack) {
      var ret = [];
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          var isTraceLine = "    (No stack trace)" === line ||
              stackFramePattern.test(line);
          var isInternalFrame = isTraceLine && shouldIgnore(line);
          if (isTraceLine && !isInternalFrame) {
              if (indentStackFrames && line.charAt(0) !== " ") {
                  line = "    " + line;
              }
              ret.push(line);
          }
      }
      return ret;
  }

  function stackFramesAsArray(error) {
      var stack = error.stack.replace(/\s+$/g, "").split("\n");
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
              break;
          }
      }
      if (i > 0 && error.name != "SyntaxError") {
          stack = stack.slice(i);
      }
      return stack;
  }

  function parseStackAndMessage(error) {
      var stack = error.stack;
      var message = error.toString();
      stack = typeof stack === "string" && stack.length > 0
                  ? stackFramesAsArray(error) : ["    (No stack trace)"];
      return {
          message: message,
          stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
      };
  }

  function formatAndLogError(error, title, isSoft) {
      if (typeof console !== "undefined") {
          var message;
          if (util$$1.isObject(error)) {
              var stack = error.stack;
              message = title + formatStack(stack, error);
          } else {
              message = title + String(error);
          }
          if (typeof printWarning === "function") {
              printWarning(message, isSoft);
          } else if (typeof console.log === "function" ||
              typeof console.log === "object") {
              console.log(message);
          }
      }
  }

  function fireRejectionEvent(name, localHandler, reason, promise) {
      var localEventFired = false;
      try {
          if (typeof localHandler === "function") {
              localEventFired = true;
              if (name === "rejectionHandled") {
                  localHandler(promise);
              } else {
                  localHandler(reason, promise);
              }
          }
      } catch (e) {
          async.throwLater(e);
      }

      if (name === "unhandledRejection") {
          if (!activeFireEvent(name, reason, promise) && !localEventFired) {
              formatAndLogError(reason, "Unhandled rejection ");
          }
      } else {
          activeFireEvent(name, promise);
      }
  }

  function formatNonError(obj) {
      var str;
      if (typeof obj === "function") {
          str = "[function " +
              (obj.name || "anonymous") +
              "]";
      } else {
          str = obj && typeof obj.toString === "function"
              ? obj.toString() : util$$1.toString(obj);
          var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
          if (ruselessToString.test(str)) {
              try {
                  var newStr = JSON.stringify(obj);
                  str = newStr;
              }
              catch(e) {

              }
          }
          if (str.length === 0) {
              str = "(empty array)";
          }
      }
      return ("(<" + snip(str) + ">, no stack trace)");
  }

  function snip(str) {
      var maxChars = 41;
      if (str.length < maxChars) {
          return str;
      }
      return str.substr(0, maxChars - 3) + "...";
  }

  function longStackTracesIsSupported() {
      return typeof captureStackTrace === "function";
  }

  var shouldIgnore = function() { return false; };
  var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
  function parseLineInfo(line) {
      var matches = line.match(parseLineInfoRegex);
      if (matches) {
          return {
              fileName: matches[1],
              line: parseInt(matches[2], 10)
          };
      }
  }

  function setBounds(firstLineError, lastLineError) {
      if (!longStackTracesIsSupported()) return;
      var firstStackLines = firstLineError.stack.split("\n");
      var lastStackLines = lastLineError.stack.split("\n");
      var firstIndex = -1;
      var lastIndex = -1;
      var firstFileName;
      var lastFileName;
      for (var i = 0; i < firstStackLines.length; ++i) {
          var result = parseLineInfo(firstStackLines[i]);
          if (result) {
              firstFileName = result.fileName;
              firstIndex = result.line;
              break;
          }
      }
      for (var i = 0; i < lastStackLines.length; ++i) {
          var result = parseLineInfo(lastStackLines[i]);
          if (result) {
              lastFileName = result.fileName;
              lastIndex = result.line;
              break;
          }
      }
      if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
          firstFileName !== lastFileName || firstIndex >= lastIndex) {
          return;
      }

      shouldIgnore = function(line) {
          if (bluebirdFramePattern.test(line)) return true;
          var info = parseLineInfo(line);
          if (info) {
              if (info.fileName === firstFileName &&
                  (firstIndex <= info.line && info.line <= lastIndex)) {
                  return true;
              }
          }
          return false;
      };
  }

  function CapturedTrace(parent) {
      this._parent = parent;
      this._promisesCreated = 0;
      var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
      captureStackTrace(this, CapturedTrace);
      if (length > 32) this.uncycle();
  }
  util$$1.inherits(CapturedTrace, Error);
  Context.CapturedTrace = CapturedTrace;

  CapturedTrace.prototype.uncycle = function() {
      var length = this._length;
      if (length < 2) return;
      var nodes = [];
      var stackToIndex = {};

      for (var i = 0, node = this; node !== undefined; ++i) {
          nodes.push(node);
          node = node._parent;
      }
      length = this._length = i;
      for (var i = length - 1; i >= 0; --i) {
          var stack = nodes[i].stack;
          if (stackToIndex[stack] === undefined) {
              stackToIndex[stack] = i;
          }
      }
      for (var i = 0; i < length; ++i) {
          var currentStack = nodes[i].stack;
          var index = stackToIndex[currentStack];
          if (index !== undefined && index !== i) {
              if (index > 0) {
                  nodes[index - 1]._parent = undefined;
                  nodes[index - 1]._length = 1;
              }
              nodes[i]._parent = undefined;
              nodes[i]._length = 1;
              var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

              if (index < length - 1) {
                  cycleEdgeNode._parent = nodes[index + 1];
                  cycleEdgeNode._parent.uncycle();
                  cycleEdgeNode._length =
                      cycleEdgeNode._parent._length + 1;
              } else {
                  cycleEdgeNode._parent = undefined;
                  cycleEdgeNode._length = 1;
              }
              var currentChildLength = cycleEdgeNode._length + 1;
              for (var j = i - 2; j >= 0; --j) {
                  nodes[j]._length = currentChildLength;
                  currentChildLength++;
              }
              return;
          }
      }
  };

  CapturedTrace.prototype.attachExtraTrace = function(error) {
      if (error.__stackCleaned__) return;
      this.uncycle();
      var parsed = parseStackAndMessage(error);
      var message = parsed.message;
      var stacks = [parsed.stack];

      var trace = this;
      while (trace !== undefined) {
          stacks.push(cleanStack(trace.stack.split("\n")));
          trace = trace._parent;
      }
      removeCommonRoots(stacks);
      removeDuplicateOrEmptyJumps(stacks);
      util$$1.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
      util$$1.notEnumerableProp(error, "__stackCleaned__", true);
  };

  var captureStackTrace = (function stackDetection() {
      var v8stackFramePattern = /^\s*at\s*/;
      var v8stackFormatter = function(stack, error) {
          if (typeof stack === "string") return stack;

          if (error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      if (typeof Error.stackTraceLimit === "number" &&
          typeof Error.captureStackTrace === "function") {
          Error.stackTraceLimit += 6;
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          var captureStackTrace = Error.captureStackTrace;

          shouldIgnore = function(line) {
              return bluebirdFramePattern.test(line);
          };
          return function(receiver, ignoreUntil) {
              Error.stackTraceLimit += 6;
              captureStackTrace(receiver, ignoreUntil);
              Error.stackTraceLimit -= 6;
          };
      }
      var err = new Error();

      if (typeof err.stack === "string" &&
          err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
          stackFramePattern = /@/;
          formatStack = v8stackFormatter;
          indentStackFrames = true;
          return function captureStackTrace(o) {
              o.stack = new Error().stack;
          };
      }

      var hasStackAfterThrow;
      try { throw new Error(); }
      catch(e) {
          hasStackAfterThrow = ("stack" in e);
      }
      if (!("stack" in err) && hasStackAfterThrow &&
          typeof Error.stackTraceLimit === "number") {
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          return function captureStackTrace(o) {
              Error.stackTraceLimit += 6;
              try { throw new Error(); }
              catch(e) { o.stack = e.stack; }
              Error.stackTraceLimit -= 6;
          };
      }

      formatStack = function(stack, error) {
          if (typeof stack === "string") return stack;

          if ((typeof error === "object" ||
              typeof error === "function") &&
              error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      return null;

  })([]);

  if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
      printWarning = function (message) {
          console.warn(message);
      };
      if (util$$1.isNode && process.stderr.isTTY) {
          printWarning = function(message, isSoft) {
              var color = isSoft ? "\u001b[33m" : "\u001b[31m";
              console.warn(color + message + "\u001b[0m\n");
          };
      } else if (!util$$1.isNode && typeof (new Error().stack) === "string") {
          printWarning = function(message, isSoft) {
              console.warn("%c" + message,
                          isSoft ? "color: darkorange" : "color: red");
          };
      }
  }

  var config = {
      warnings: warnings,
      longStackTraces: false,
      cancellation: false,
      monitoring: false
  };

  if (longStackTraces) Promise.longStackTraces();

  return {
      longStackTraces: function() {
          return config.longStackTraces;
      },
      warnings: function() {
          return config.warnings;
      },
      cancellation: function() {
          return config.cancellation;
      },
      monitoring: function() {
          return config.monitoring;
      },
      propagateFromFunction: function() {
          return propagateFromFunction;
      },
      boundValueFunction: function() {
          return boundValueFunction;
      },
      checkForgottenReturns: checkForgottenReturns,
      setBounds: setBounds,
      warn: warn,
      deprecated: deprecated,
      CapturedTrace: CapturedTrace,
      fireDomEvent: fireDomEvent,
      fireGlobalEvent: fireGlobalEvent
  };
  };

  var catch_filter = function(NEXT_FILTER) {
  var util$$1 = util$1;
  var getKeys = es5.keys;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;

  function catchFilter(instances, cb, promise) {
      return function(e) {
          var boundTo = promise._boundValue();
          predicateLoop: for (var i = 0; i < instances.length; ++i) {
              var item = instances[i];

              if (item === Error ||
                  (item != null && item.prototype instanceof Error)) {
                  if (e instanceof item) {
                      return tryCatch(cb).call(boundTo, e);
                  }
              } else if (typeof item === "function") {
                  var matchesPredicate = tryCatch(item).call(boundTo, e);
                  if (matchesPredicate === errorObj) {
                      return matchesPredicate;
                  } else if (matchesPredicate) {
                      return tryCatch(cb).call(boundTo, e);
                  }
              } else if (util$$1.isObject(e)) {
                  var keys = getKeys(item);
                  for (var j = 0; j < keys.length; ++j) {
                      var key = keys[j];
                      if (item[key] != e[key]) {
                          continue predicateLoop;
                      }
                  }
                  return tryCatch(cb).call(boundTo, e);
              }
          }
          return NEXT_FILTER;
      };
  }

  return catchFilter;
  };

  var _finally = function(Promise, tryConvertToPromise, NEXT_FILTER) {
  var util$$1 = util$1;
  var CancellationError = Promise.CancellationError;
  var errorObj = util$$1.errorObj;
  var catchFilter = catch_filter(NEXT_FILTER);

  function PassThroughHandlerContext(promise, type, handler) {
      this.promise = promise;
      this.type = type;
      this.handler = handler;
      this.called = false;
      this.cancelPromise = null;
  }

  PassThroughHandlerContext.prototype.isFinallyHandler = function() {
      return this.type === 0;
  };

  function FinallyHandlerCancelReaction(finallyHandler) {
      this.finallyHandler = finallyHandler;
  }

  FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
      checkCancel(this.finallyHandler);
  };

  function checkCancel(ctx, reason) {
      if (ctx.cancelPromise != null) {
          if (arguments.length > 1) {
              ctx.cancelPromise._reject(reason);
          } else {
              ctx.cancelPromise._cancel();
          }
          ctx.cancelPromise = null;
          return true;
      }
      return false;
  }

  function succeed() {
      return finallyHandler.call(this, this.promise._target()._settledValue());
  }
  function fail(reason) {
      if (checkCancel(this, reason)) return;
      errorObj.e = reason;
      return errorObj;
  }
  function finallyHandler(reasonOrValue) {
      var promise = this.promise;
      var handler = this.handler;

      if (!this.called) {
          this.called = true;
          var ret = this.isFinallyHandler()
              ? handler.call(promise._boundValue())
              : handler.call(promise._boundValue(), reasonOrValue);
          if (ret === NEXT_FILTER) {
              return ret;
          } else if (ret !== undefined) {
              promise._setReturnedNonUndefined();
              var maybePromise = tryConvertToPromise(ret, promise);
              if (maybePromise instanceof Promise) {
                  if (this.cancelPromise != null) {
                      if (maybePromise._isCancelled()) {
                          var reason =
                              new CancellationError("late cancellation observer");
                          promise._attachExtraTrace(reason);
                          errorObj.e = reason;
                          return errorObj;
                      } else if (maybePromise.isPending()) {
                          maybePromise._attachCancellationCallback(
                              new FinallyHandlerCancelReaction(this));
                      }
                  }
                  return maybePromise._then(
                      succeed, fail, undefined, this, undefined);
              }
          }
      }

      if (promise.isRejected()) {
          checkCancel(this);
          errorObj.e = reasonOrValue;
          return errorObj;
      } else {
          checkCancel(this);
          return reasonOrValue;
      }
  }

  Promise.prototype._passThrough = function(handler, type, success, fail) {
      if (typeof handler !== "function") return this.then();
      return this._then(success,
                        fail,
                        undefined,
                        new PassThroughHandlerContext(this, type, handler),
                        undefined);
  };

  Promise.prototype.lastly =
  Promise.prototype["finally"] = function (handler) {
      return this._passThrough(handler,
                               0,
                               finallyHandler,
                               finallyHandler);
  };


  Promise.prototype.tap = function (handler) {
      return this._passThrough(handler, 1, finallyHandler);
  };

  Promise.prototype.tapCatch = function (handlerOrPredicate) {
      var len = arguments.length;
      if(len === 1) {
          return this._passThrough(handlerOrPredicate,
                                   1,
                                   undefined,
                                   finallyHandler);
      } else {
           var catchInstances = new Array(len - 1),
              j = 0, i;
          for (i = 0; i < len - 1; ++i) {
              var item = arguments[i];
              if (util$$1.isObject(item)) {
                  catchInstances[j++] = item;
              } else {
                  return Promise.reject(new TypeError(
                      "tapCatch statement predicate: "
                      + "expecting an object but got " + util$$1.classString(item)
                  ));
              }
          }
          catchInstances.length = j;
          var handler = arguments[i];
          return this._passThrough(catchFilter(catchInstances, handler, this),
                                   1,
                                   undefined,
                                   finallyHandler);
      }

  };

  return PassThroughHandlerContext;
  };

  var maybeWrapAsError$1 = util$1.maybeWrapAsError;

  var OperationalError$1 = errors$10.OperationalError;


  function isUntypedError(obj) {
      return obj instanceof Error &&
          es5.getPrototypeOf(obj) === Error.prototype;
  }

  var rErrorKey = /^(?:name|message|stack|cause)$/;
  function wrapAsOperationalError(obj) {
      var ret;
      if (isUntypedError(obj)) {
          ret = new OperationalError$1(obj);
          ret.name = obj.name;
          ret.message = obj.message;
          ret.stack = obj.stack;
          var keys = es5.keys(obj);
          for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (!rErrorKey.test(key)) {
                  ret[key] = obj[key];
              }
          }
          return ret;
      }
      util$1.markAsOriginatingFromRejection(obj);
      return obj;
  }

  function nodebackForPromise(promise, multiArgs) {
      return function(err, value) {
          if (promise === null) return;
          if (err) {
              var wrapped = wrapAsOperationalError(maybeWrapAsError$1(err));
              promise._attachExtraTrace(wrapped);
              promise._reject(wrapped);
          } else if (!multiArgs) {
              promise._fulfill(value);
          } else {
              var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0)); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}            promise._fulfill(args);
          }
          promise = null;
      };
  }

  var nodeback = nodebackForPromise;

  var method =
  function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
  var util$$1 = util$1;
  var tryCatch = util$$1.tryCatch;

  Promise.method = function (fn) {
      if (typeof fn !== "function") {
          throw new Promise.TypeError("expecting a function but got " + util$$1.classString(fn));
      }
      return function () {
          var ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._pushContext();
          var value = tryCatch(fn).apply(this, arguments);
          var promiseCreated = ret._popContext();
          debug.checkForgottenReturns(
              value, promiseCreated, "Promise.method", ret);
          ret._resolveFromSyncValue(value);
          return ret;
      };
  };

  Promise.attempt = Promise["try"] = function (fn) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util$$1.classString(fn));
      }
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._pushContext();
      var value;
      if (arguments.length > 1) {
          debug.deprecated("calling Promise.try with more than 1 argument");
          var arg = arguments[1];
          var ctx = arguments[2];
          value = util$$1.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
                                    : tryCatch(fn).call(ctx, arg);
      } else {
          value = tryCatch(fn)();
      }
      var promiseCreated = ret._popContext();
      debug.checkForgottenReturns(
          value, promiseCreated, "Promise.try", ret);
      ret._resolveFromSyncValue(value);
      return ret;
  };

  Promise.prototype._resolveFromSyncValue = function (value) {
      if (value === util$$1.errorObj) {
          this._rejectCallback(value.e, false);
      } else {
          this._resolveCallback(value, true);
      }
  };
  };

  var bind = function(Promise, INTERNAL, tryConvertToPromise, debug) {
  var calledBind = false;
  var rejectThis = function(_, e) {
      this._reject(e);
  };

  var targetRejected = function(e, context) {
      context.promiseRejectionQueued = true;
      context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
  };

  var bindingResolved = function(thisArg, context) {
      if (((this._bitField & 50397184) === 0)) {
          this._resolveCallback(context.target);
      }
  };

  var bindingRejected = function(e, context) {
      if (!context.promiseRejectionQueued) this._reject(e);
  };

  Promise.prototype.bind = function (thisArg) {
      if (!calledBind) {
          calledBind = true;
          Promise.prototype._propagateFrom = debug.propagateFromFunction();
          Promise.prototype._boundValue = debug.boundValueFunction();
      }
      var maybePromise = tryConvertToPromise(thisArg);
      var ret = new Promise(INTERNAL);
      ret._propagateFrom(this, 1);
      var target = this._target();
      ret._setBoundTo(maybePromise);
      if (maybePromise instanceof Promise) {
          var context = {
              promiseRejectionQueued: false,
              promise: ret,
              target: target,
              bindingPromise: maybePromise
          };
          target._then(INTERNAL, targetRejected, undefined, ret, context);
          maybePromise._then(
              bindingResolved, bindingRejected, undefined, ret, context);
          ret._setOnCancel(maybePromise);
      } else {
          ret._resolveCallback(target);
      }
      return ret;
  };

  Promise.prototype._setBoundTo = function (obj) {
      if (obj !== undefined) {
          this._bitField = this._bitField | 2097152;
          this._boundTo = obj;
      } else {
          this._bitField = this._bitField & (~2097152);
      }
  };

  Promise.prototype._isBound = function () {
      return (this._bitField & 2097152) === 2097152;
  };

  Promise.bind = function (thisArg, value) {
      return Promise.resolve(value).bind(thisArg);
  };
  };

  var cancel = function(Promise, PromiseArray, apiRejection, debug) {
  var util$$1 = util$1;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  var async = Promise._async;

  Promise.prototype["break"] = Promise.prototype.cancel = function() {
      if (!debug.cancellation()) return this._warn("cancellation is disabled");

      var promise = this;
      var child = promise;
      while (promise._isCancellable()) {
          if (!promise._cancelBy(child)) {
              if (child._isFollowing()) {
                  child._followee().cancel();
              } else {
                  child._cancelBranched();
              }
              break;
          }

          var parent = promise._cancellationParent;
          if (parent == null || !parent._isCancellable()) {
              if (promise._isFollowing()) {
                  promise._followee().cancel();
              } else {
                  promise._cancelBranched();
              }
              break;
          } else {
              if (promise._isFollowing()) promise._followee().cancel();
              promise._setWillBeCancelled();
              child = promise;
              promise = parent;
          }
      }
  };

  Promise.prototype._branchHasCancelled = function() {
      this._branchesRemainingToCancel--;
  };

  Promise.prototype._enoughBranchesHaveCancelled = function() {
      return this._branchesRemainingToCancel === undefined ||
             this._branchesRemainingToCancel <= 0;
  };

  Promise.prototype._cancelBy = function(canceller) {
      if (canceller === this) {
          this._branchesRemainingToCancel = 0;
          this._invokeOnCancel();
          return true;
      } else {
          this._branchHasCancelled();
          if (this._enoughBranchesHaveCancelled()) {
              this._invokeOnCancel();
              return true;
          }
      }
      return false;
  };

  Promise.prototype._cancelBranched = function() {
      if (this._enoughBranchesHaveCancelled()) {
          this._cancel();
      }
  };

  Promise.prototype._cancel = function() {
      if (!this._isCancellable()) return;
      this._setCancelled();
      async.invoke(this._cancelPromises, this, undefined);
  };

  Promise.prototype._cancelPromises = function() {
      if (this._length() > 0) this._settlePromises();
  };

  Promise.prototype._unsetOnCancel = function() {
      this._onCancelField = undefined;
  };

  Promise.prototype._isCancellable = function() {
      return this.isPending() && !this._isCancelled();
  };

  Promise.prototype.isCancellable = function() {
      return this.isPending() && !this.isCancelled();
  };

  Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
      if (util$$1.isArray(onCancelCallback)) {
          for (var i = 0; i < onCancelCallback.length; ++i) {
              this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
          }
      } else if (onCancelCallback !== undefined) {
          if (typeof onCancelCallback === "function") {
              if (!internalOnly) {
                  var e = tryCatch(onCancelCallback).call(this._boundValue());
                  if (e === errorObj) {
                      this._attachExtraTrace(e.e);
                      async.throwLater(e.e);
                  }
              }
          } else {
              onCancelCallback._resultCancelled(this);
          }
      }
  };

  Promise.prototype._invokeOnCancel = function() {
      var onCancelCallback = this._onCancel();
      this._unsetOnCancel();
      async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
  };

  Promise.prototype._invokeInternalOnCancel = function() {
      if (this._isCancellable()) {
          this._doInvokeOnCancel(this._onCancel(), true);
          this._unsetOnCancel();
      }
  };

  Promise.prototype._resultCancelled = function() {
      this.cancel();
  };

  };

  var direct_resolve = function(Promise) {
  function returner() {
      return this.value;
  }
  function thrower() {
      throw this.reason;
  }

  Promise.prototype["return"] =
  Promise.prototype.thenReturn = function (value) {
      if (value instanceof Promise) value.suppressUnhandledRejections();
      return this._then(
          returner, undefined, undefined, {value: value}, undefined);
  };

  Promise.prototype["throw"] =
  Promise.prototype.thenThrow = function (reason) {
      return this._then(
          thrower, undefined, undefined, {reason: reason}, undefined);
  };

  Promise.prototype.catchThrow = function (reason) {
      if (arguments.length <= 1) {
          return this._then(
              undefined, thrower, undefined, {reason: reason}, undefined);
      } else {
          var _reason = arguments[1];
          var handler = function() {throw _reason;};
          return this.caught(reason, handler);
      }
  };

  Promise.prototype.catchReturn = function (value) {
      if (arguments.length <= 1) {
          if (value instanceof Promise) value.suppressUnhandledRejections();
          return this._then(
              undefined, returner, undefined, {value: value}, undefined);
      } else {
          var _value = arguments[1];
          if (_value instanceof Promise) _value.suppressUnhandledRejections();
          var handler = function() {return _value;};
          return this.caught(value, handler);
      }
  };
  };

  var synchronous_inspection = function(Promise) {
  function PromiseInspection(promise) {
      if (promise !== undefined) {
          promise = promise._target();
          this._bitField = promise._bitField;
          this._settledValueField = promise._isFateSealed()
              ? promise._settledValue() : undefined;
      }
      else {
          this._bitField = 0;
          this._settledValueField = undefined;
      }
  }

  PromiseInspection.prototype._settledValue = function() {
      return this._settledValueField;
  };

  var value = PromiseInspection.prototype.value = function () {
      if (!this.isFulfilled()) {
          throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      return this._settledValue();
  };

  var reason = PromiseInspection.prototype.error =
  PromiseInspection.prototype.reason = function () {
      if (!this.isRejected()) {
          throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      return this._settledValue();
  };

  var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
      return (this._bitField & 33554432) !== 0;
  };

  var isRejected = PromiseInspection.prototype.isRejected = function () {
      return (this._bitField & 16777216) !== 0;
  };

  var isPending = PromiseInspection.prototype.isPending = function () {
      return (this._bitField & 50397184) === 0;
  };

  var isResolved = PromiseInspection.prototype.isResolved = function () {
      return (this._bitField & 50331648) !== 0;
  };

  PromiseInspection.prototype.isCancelled = function() {
      return (this._bitField & 8454144) !== 0;
  };

  Promise.prototype.__isCancelled = function() {
      return (this._bitField & 65536) === 65536;
  };

  Promise.prototype._isCancelled = function() {
      return this._target().__isCancelled();
  };

  Promise.prototype.isCancelled = function() {
      return (this._target()._bitField & 8454144) !== 0;
  };

  Promise.prototype.isPending = function() {
      return isPending.call(this._target());
  };

  Promise.prototype.isRejected = function() {
      return isRejected.call(this._target());
  };

  Promise.prototype.isFulfilled = function() {
      return isFulfilled.call(this._target());
  };

  Promise.prototype.isResolved = function() {
      return isResolved.call(this._target());
  };

  Promise.prototype.value = function() {
      return value.call(this._target());
  };

  Promise.prototype.reason = function() {
      var target = this._target();
      target._unsetRejectionIsUnhandled();
      return reason.call(target);
  };

  Promise.prototype._value = function() {
      return this._settledValue();
  };

  Promise.prototype._reason = function() {
      this._unsetRejectionIsUnhandled();
      return this._settledValue();
  };

  Promise.PromiseInspection = PromiseInspection;
  };

  var join =
  function(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,
           getDomain) {
  var util$$1 = util$1;
  var canEvaluate = util$$1.canEvaluate;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  var reject;

  {
  if (canEvaluate) {
      var thenCallback = function(i) {
          return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
      };

      var promiseSetter = function(i) {
          return new Function("promise", "holder", "                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ".replace(/Index/g, i));
      };

      var generateHolderClass = function(total) {
          var props = new Array(total);
          for (var i = 0; i < props.length; ++i) {
              props[i] = "this.p" + (i+1);
          }
          var assignment = props.join(" = ") + " = null;";
          var cancellationCode= "var promise;\n" + props.map(function(prop) {
              return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) {                            \n\
                    promise.cancel();                                        \n\
                }                                                            \n\
            ";
          }).join("\n");
          var passedArguments = props.join(", ");
          var name = "Holder$" + total;


          var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
            'use strict';                                                    \n\
            function [TheName](fn) {                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.asyncNeeded = true;                                     \n\
                this.now = 0;                                                \n\
            }                                                                \n\
                                                                             \n\
            [TheName].prototype._callFunction = function(promise) {          \n\
                promise._pushContext();                                      \n\
                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
                promise._popContext();                                       \n\
                if (ret === errorObj) {                                      \n\
                    promise._rejectCallback(ret.e, false);                   \n\
                } else {                                                     \n\
                    promise._resolveCallback(ret);                           \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype.checkFulfillment = function(promise) {       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) {                                    \n\
                    if (this.asyncNeeded) {                                  \n\
                        async.invoke(this._callFunction, this, promise);     \n\
                    } else {                                                 \n\
                        this._callFunction(promise);                         \n\
                    }                                                        \n\
                                                                             \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() {              \n\
                [CancellationCode]                                           \n\
            };                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
        }(tryCatch, errorObj, Promise, async);                               \n\
        ";

          code = code.replace(/\[TheName\]/g, name)
              .replace(/\[TheTotal\]/g, total)
              .replace(/\[ThePassedArguments\]/g, passedArguments)
              .replace(/\[TheProperties\]/g, assignment)
              .replace(/\[CancellationCode\]/g, cancellationCode);

          return new Function("tryCatch", "errorObj", "Promise", "async", code)
                             (tryCatch, errorObj, Promise, async);
      };

      var holderClasses = [];
      var thenCallbacks = [];
      var promiseSetters = [];

      for (var i = 0; i < 8; ++i) {
          holderClasses.push(generateHolderClass(i + 1));
          thenCallbacks.push(thenCallback(i + 1));
          promiseSetters.push(promiseSetter(i + 1));
      }

      reject = function (reason) {
          this._reject(reason);
      };
  }}

  Promise.join = function () {
      var last = arguments.length - 1;
      var fn;
      if (last > 0 && typeof arguments[last] === "function") {
          fn = arguments[last];
          {
              if (last <= 8 && canEvaluate) {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  var HolderClass = holderClasses[last - 1];
                  var holder = new HolderClass(fn);
                  var callbacks = thenCallbacks;

                  for (var i = 0; i < last; ++i) {
                      var maybePromise = tryConvertToPromise(arguments[i], ret);
                      if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          var bitField = maybePromise._bitField;
                          if (((bitField & 50397184) === 0)) {
                              maybePromise._then(callbacks[i], reject,
                                                 undefined, ret, holder);
                              promiseSetters[i](maybePromise, holder);
                              holder.asyncNeeded = false;
                          } else if (((bitField & 33554432) !== 0)) {
                              callbacks[i].call(ret,
                                                maybePromise._value(), holder);
                          } else if (((bitField & 16777216) !== 0)) {
                              ret._reject(maybePromise._reason());
                          } else {
                              ret._cancel();
                          }
                      } else {
                          callbacks[i].call(ret, maybePromise, holder);
                      }
                  }

                  if (!ret._isFateSealed()) {
                      if (holder.asyncNeeded) {
                          var domain = getDomain();
                          if (domain !== null) {
                              holder.fn = util$$1.domainBind(domain, holder.fn);
                          }
                      }
                      ret._setAsyncGuaranteed();
                      ret._setOnCancel(holder);
                  }
                  return ret;
              }
          }
      }
      var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}    if (fn) args.pop();
      var ret = new PromiseArray(args).promise();
      return fn !== undefined ? ret.spread(fn) : ret;
  };

  };

  var map = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL,
                            debug) {
  var getDomain = Promise._getDomain;
  var util$$1 = util$1;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  var async = Promise._async;

  function MappingPromiseArray(promises, fn, limit, _filter) {
      this.constructor$(promises);
      this._promise._captureStackTrace();
      var domain = getDomain();
      this._callback = domain === null ? fn : util$$1.domainBind(domain, fn);
      this._preservedValues = _filter === INTERNAL
          ? new Array(this.length())
          : null;
      this._limit = limit;
      this._inFlight = 0;
      this._queue = [];
      async.invoke(this._asyncInit, this, undefined);
  }
  util$$1.inherits(MappingPromiseArray, PromiseArray);

  MappingPromiseArray.prototype._asyncInit = function() {
      this._init$(undefined, -2);
  };

  MappingPromiseArray.prototype._init = function () {};

  MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var values = this._values;
      var length = this.length();
      var preservedValues = this._preservedValues;
      var limit = this._limit;

      if (index < 0) {
          index = (index * -1) - 1;
          values[index] = value;
          if (limit >= 1) {
              this._inFlight--;
              this._drainQueue();
              if (this._isResolved()) return true;
          }
      } else {
          if (limit >= 1 && this._inFlight >= limit) {
              values[index] = value;
              this._queue.push(index);
              return false;
          }
          if (preservedValues !== null) preservedValues[index] = value;

          var promise = this._promise;
          var callback = this._callback;
          var receiver = promise._boundValue();
          promise._pushContext();
          var ret = tryCatch(callback).call(receiver, value, index, length);
          var promiseCreated = promise._popContext();
          debug.checkForgottenReturns(
              ret,
              promiseCreated,
              preservedValues !== null ? "Promise.filter" : "Promise.map",
              promise
          );
          if (ret === errorObj) {
              this._reject(ret.e);
              return true;
          }

          var maybePromise = tryConvertToPromise(ret, this._promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              var bitField = maybePromise._bitField;
              if (((bitField & 50397184) === 0)) {
                  if (limit >= 1) this._inFlight++;
                  values[index] = maybePromise;
                  maybePromise._proxy(this, (index + 1) * -1);
                  return false;
              } else if (((bitField & 33554432) !== 0)) {
                  ret = maybePromise._value();
              } else if (((bitField & 16777216) !== 0)) {
                  this._reject(maybePromise._reason());
                  return true;
              } else {
                  this._cancel();
                  return true;
              }
          }
          values[index] = ret;
      }
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= length) {
          if (preservedValues !== null) {
              this._filter(values, preservedValues);
          } else {
              this._resolve(values);
          }
          return true;
      }
      return false;
  };

  MappingPromiseArray.prototype._drainQueue = function () {
      var queue = this._queue;
      var limit = this._limit;
      var values = this._values;
      while (queue.length > 0 && this._inFlight < limit) {
          if (this._isResolved()) return;
          var index = queue.pop();
          this._promiseFulfilled(values[index], index);
      }
  };

  MappingPromiseArray.prototype._filter = function (booleans, values) {
      var len = values.length;
      var ret = new Array(len);
      var j = 0;
      for (var i = 0; i < len; ++i) {
          if (booleans[i]) ret[j++] = values[i];
      }
      ret.length = j;
      this._resolve(ret);
  };

  MappingPromiseArray.prototype.preservedValues = function () {
      return this._preservedValues;
  };

  function map(promises, fn, options, _filter) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util$$1.classString(fn));
      }

      var limit = 0;
      if (options !== undefined) {
          if (typeof options === "object" && options !== null) {
              if (typeof options.concurrency !== "number") {
                  return Promise.reject(
                      new TypeError("'concurrency' must be a number but it is " +
                                      util$$1.classString(options.concurrency)));
              }
              limit = options.concurrency;
          } else {
              return Promise.reject(new TypeError(
                              "options argument must be an object but it is " +
                               util$$1.classString(options)));
          }
      }
      limit = typeof limit === "number" &&
          isFinite(limit) && limit >= 1 ? limit : 0;
      return new MappingPromiseArray(promises, fn, limit, _filter).promise();
  }

  Promise.prototype.map = function (fn, options) {
      return map(this, fn, options, null);
  };

  Promise.map = function (promises, fn, options, _filter) {
      return map(promises, fn, options, _filter);
  };


  };

  var cr = Object.create;
  if (cr) {
      var callerCache = cr(null);
      var getterCache = cr(null);
      callerCache[" size"] = getterCache[" size"] = 0;
  }

  var call_get = function(Promise) {
  var util$$1 = util$1;
  var canEvaluate = util$$1.canEvaluate;
  var isIdentifier = util$$1.isIdentifier;

  var getMethodCaller;
  var getGetter;
  {
  var makeMethodCaller = function (methodName) {
      return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
  };

  var makeGetter = function (propertyName) {
      return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
  };

  var getCompiled = function(name, compiler, cache) {
      var ret = cache[name];
      if (typeof ret !== "function") {
          if (!isIdentifier(name)) {
              return null;
          }
          ret = compiler(name);
          cache[name] = ret;
          cache[" size"]++;
          if (cache[" size"] > 512) {
              var keys = Object.keys(cache);
              for (var i = 0; i < 256; ++i) delete cache[keys[i]];
              cache[" size"] = keys.length - 256;
          }
      }
      return ret;
  };

  getMethodCaller = function(name) {
      return getCompiled(name, makeMethodCaller, callerCache);
  };

  getGetter = function(name) {
      return getCompiled(name, makeGetter, getterCache);
  };
  }

  function ensureMethod(obj, methodName) {
      var fn;
      if (obj != null) fn = obj[methodName];
      if (typeof fn !== "function") {
          var message = "Object " + util$$1.classString(obj) + " has no method '" +
              util$$1.toString(methodName) + "'";
          throw new Promise.TypeError(message);
      }
      return fn;
  }

  function caller(obj) {
      var methodName = this.pop();
      var fn = ensureMethod(obj, methodName);
      return fn.apply(obj, this);
  }
  Promise.prototype.call = function (methodName) {
      var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0)); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}    {
          if (canEvaluate) {
              var maybeCaller = getMethodCaller(methodName);
              if (maybeCaller !== null) {
                  return this._then(
                      maybeCaller, undefined, undefined, args, undefined);
              }
          }
      }
      args.push(methodName);
      return this._then(caller, undefined, undefined, args, undefined);
  };

  function namedGetter(obj) {
      return obj[this];
  }
  function indexedGetter(obj) {
      var index = +this;
      if (index < 0) index = Math.max(0, index + obj.length);
      return obj[index];
  }
  Promise.prototype.get = function (propertyName) {
      var isIndex = (typeof propertyName === "number");
      var getter;
      if (!isIndex) {
          if (canEvaluate) {
              var maybeGetter = getGetter(propertyName);
              getter = maybeGetter !== null ? maybeGetter : namedGetter;
          } else {
              getter = namedGetter;
          }
      } else {
          getter = indexedGetter;
      }
      return this._then(getter, undefined, undefined, propertyName, undefined);
  };
  };

  var using = function (Promise, apiRejection, tryConvertToPromise,
      createContext, INTERNAL, debug) {
      var util$$1 = util$1;
      var TypeError = errors$10.TypeError;
      var inherits = util$1.inherits;
      var errorObj = util$$1.errorObj;
      var tryCatch = util$$1.tryCatch;
      var NULL = {};

      function thrower(e) {
          setTimeout(function(){throw e;}, 0);
      }

      function castPreservingDisposable(thenable) {
          var maybePromise = tryConvertToPromise(thenable);
          if (maybePromise !== thenable &&
              typeof thenable._isDisposable === "function" &&
              typeof thenable._getDisposer === "function" &&
              thenable._isDisposable()) {
              maybePromise._setDisposable(thenable._getDisposer());
          }
          return maybePromise;
      }
      function dispose(resources, inspection) {
          var i = 0;
          var len = resources.length;
          var ret = new Promise(INTERNAL);
          function iterator() {
              if (i >= len) return ret._fulfill();
              var maybePromise = castPreservingDisposable(resources[i++]);
              if (maybePromise instanceof Promise &&
                  maybePromise._isDisposable()) {
                  try {
                      maybePromise = tryConvertToPromise(
                          maybePromise._getDisposer().tryDispose(inspection),
                          resources.promise);
                  } catch (e) {
                      return thrower(e);
                  }
                  if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower,
                                                null, null, null);
                  }
              }
              iterator();
          }
          iterator();
          return ret;
      }

      function Disposer(data, promise, context) {
          this._data = data;
          this._promise = promise;
          this._context = context;
      }

      Disposer.prototype.data = function () {
          return this._data;
      };

      Disposer.prototype.promise = function () {
          return this._promise;
      };

      Disposer.prototype.resource = function () {
          if (this.promise().isFulfilled()) {
              return this.promise().value();
          }
          return NULL;
      };

      Disposer.prototype.tryDispose = function(inspection) {
          var resource = this.resource();
          var context = this._context;
          if (context !== undefined) context._pushContext();
          var ret = resource !== NULL
              ? this.doDispose(resource, inspection) : null;
          if (context !== undefined) context._popContext();
          this._promise._unsetDisposable();
          this._data = null;
          return ret;
      };

      Disposer.isDisposer = function (d) {
          return (d != null &&
                  typeof d.resource === "function" &&
                  typeof d.tryDispose === "function");
      };

      function FunctionDisposer(fn, promise, context) {
          this.constructor$(fn, promise, context);
      }
      inherits(FunctionDisposer, Disposer);

      FunctionDisposer.prototype.doDispose = function (resource, inspection) {
          var fn = this.data();
          return fn.call(resource, resource, inspection);
      };

      function maybeUnwrapDisposer(value) {
          if (Disposer.isDisposer(value)) {
              this.resources[this.index]._setDisposable(value);
              return value.promise();
          }
          return value;
      }

      function ResourceList(length) {
          this.length = length;
          this.promise = null;
          this[length-1] = null;
      }

      ResourceList.prototype._resultCancelled = function() {
          var len = this.length;
          for (var i = 0; i < len; ++i) {
              var item = this[i];
              if (item instanceof Promise) {
                  item.cancel();
              }
          }
      };

      Promise.using = function () {
          var len = arguments.length;
          if (len < 2) return apiRejection(
                          "you must pass at least 2 arguments to Promise.using");
          var fn = arguments[len - 1];
          if (typeof fn !== "function") {
              return apiRejection("expecting a function but got " + util$$1.classString(fn));
          }
          var input;
          var spreadArgs = true;
          if (len === 2 && Array.isArray(arguments[0])) {
              input = arguments[0];
              len = input.length;
              spreadArgs = false;
          } else {
              input = arguments;
              len--;
          }
          var resources = new ResourceList(len);
          for (var i = 0; i < len; ++i) {
              var resource = input[i];
              if (Disposer.isDisposer(resource)) {
                  var disposer = resource;
                  resource = resource.promise();
                  resource._setDisposable(disposer);
              } else {
                  var maybePromise = tryConvertToPromise(resource);
                  if (maybePromise instanceof Promise) {
                      resource =
                          maybePromise._then(maybeUnwrapDisposer, null, null, {
                              resources: resources,
                              index: i
                      }, undefined);
                  }
              }
              resources[i] = resource;
          }

          var reflectedResources = new Array(resources.length);
          for (var i = 0; i < reflectedResources.length; ++i) {
              reflectedResources[i] = Promise.resolve(resources[i]).reflect();
          }

          var resultPromise = Promise.all(reflectedResources)
              .then(function(inspections) {
                  for (var i = 0; i < inspections.length; ++i) {
                      var inspection = inspections[i];
                      if (inspection.isRejected()) {
                          errorObj.e = inspection.error();
                          return errorObj;
                      } else if (!inspection.isFulfilled()) {
                          resultPromise.cancel();
                          return;
                      }
                      inspections[i] = inspection.value();
                  }
                  promise._pushContext();

                  fn = tryCatch(fn);
                  var ret = spreadArgs
                      ? fn.apply(undefined, inspections) : fn(inspections);
                  var promiseCreated = promise._popContext();
                  debug.checkForgottenReturns(
                      ret, promiseCreated, "Promise.using", promise);
                  return ret;
              });

          var promise = resultPromise.lastly(function() {
              var inspection = new Promise.PromiseInspection(resultPromise);
              return dispose(resources, inspection);
          });
          resources.promise = promise;
          promise._setOnCancel(resources);
          return promise;
      };

      Promise.prototype._setDisposable = function (disposer) {
          this._bitField = this._bitField | 131072;
          this._disposer = disposer;
      };

      Promise.prototype._isDisposable = function () {
          return (this._bitField & 131072) > 0;
      };

      Promise.prototype._getDisposer = function () {
          return this._disposer;
      };

      Promise.prototype._unsetDisposable = function () {
          this._bitField = this._bitField & (~131072);
          this._disposer = undefined;
      };

      Promise.prototype.disposer = function (fn) {
          if (typeof fn === "function") {
              return new FunctionDisposer(fn, this, createContext());
          }
          throw new TypeError();
      };

  };

  var timers = function(Promise, INTERNAL, debug) {
  var util$$1 = util$1;
  var TimeoutError = Promise.TimeoutError;

  function HandleWrapper(handle)  {
      this.handle = handle;
  }

  HandleWrapper.prototype._resultCancelled = function() {
      clearTimeout(this.handle);
  };

  var afterValue = function(value) { return delay(+this).thenReturn(value); };
  var delay = Promise.delay = function (ms, value) {
      var ret;
      var handle;
      if (value !== undefined) {
          ret = Promise.resolve(value)
                  ._then(afterValue, null, null, ms, undefined);
          if (debug.cancellation() && value instanceof Promise) {
              ret._setOnCancel(value);
          }
      } else {
          ret = new Promise(INTERNAL);
          handle = setTimeout(function() { ret._fulfill(); }, +ms);
          if (debug.cancellation()) {
              ret._setOnCancel(new HandleWrapper(handle));
          }
          ret._captureStackTrace();
      }
      ret._setAsyncGuaranteed();
      return ret;
  };

  Promise.prototype.delay = function (ms) {
      return delay(ms, this);
  };

  var afterTimeout = function (promise, message, parent) {
      var err;
      if (typeof message !== "string") {
          if (message instanceof Error) {
              err = message;
          } else {
              err = new TimeoutError("operation timed out");
          }
      } else {
          err = new TimeoutError(message);
      }
      util$$1.markAsOriginatingFromRejection(err);
      promise._attachExtraTrace(err);
      promise._reject(err);

      if (parent != null) {
          parent.cancel();
      }
  };

  function successClear(value) {
      clearTimeout(this.handle);
      return value;
  }

  function failureClear(reason) {
      clearTimeout(this.handle);
      throw reason;
  }

  Promise.prototype.timeout = function (ms, message) {
      ms = +ms;
      var ret, parent;

      var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
          if (ret.isPending()) {
              afterTimeout(ret, message, parent);
          }
      }, ms));

      if (debug.cancellation()) {
          parent = this.then();
          ret = parent._then(successClear, failureClear,
                              undefined, handleWrapper, undefined);
          ret._setOnCancel(handleWrapper);
      } else {
          ret = this._then(successClear, failureClear,
                              undefined, handleWrapper, undefined);
      }

      return ret;
  };

  };

  var generators = function(Promise,
                            apiRejection,
                            INTERNAL,
                            tryConvertToPromise,
                            Proxyable,
                            debug) {
  var errors = errors$10;
  var TypeError = errors.TypeError;
  var util$$1 = util$1;
  var errorObj = util$$1.errorObj;
  var tryCatch = util$$1.tryCatch;
  var yieldHandlers = [];

  function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
      for (var i = 0; i < yieldHandlers.length; ++i) {
          traceParent._pushContext();
          var result = tryCatch(yieldHandlers[i])(value);
          traceParent._popContext();
          if (result === errorObj) {
              traceParent._pushContext();
              var ret = Promise.reject(errorObj.e);
              traceParent._popContext();
              return ret;
          }
          var maybePromise = tryConvertToPromise(result, traceParent);
          if (maybePromise instanceof Promise) return maybePromise;
      }
      return null;
  }

  function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
      if (debug.cancellation()) {
          var internal = new Promise(INTERNAL);
          var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
          this._promise = internal.lastly(function() {
              return _finallyPromise;
          });
          internal._captureStackTrace();
          internal._setOnCancel(this);
      } else {
          var promise = this._promise = new Promise(INTERNAL);
          promise._captureStackTrace();
      }
      this._stack = stack;
      this._generatorFunction = generatorFunction;
      this._receiver = receiver;
      this._generator = undefined;
      this._yieldHandlers = typeof yieldHandler === "function"
          ? [yieldHandler].concat(yieldHandlers)
          : yieldHandlers;
      this._yieldedPromise = null;
      this._cancellationPhase = false;
  }
  util$$1.inherits(PromiseSpawn, Proxyable);

  PromiseSpawn.prototype._isResolved = function() {
      return this._promise === null;
  };

  PromiseSpawn.prototype._cleanup = function() {
      this._promise = this._generator = null;
      if (debug.cancellation() && this._finallyPromise !== null) {
          this._finallyPromise._fulfill();
          this._finallyPromise = null;
      }
  };

  PromiseSpawn.prototype._promiseCancelled = function() {
      if (this._isResolved()) return;
      var implementsReturn = typeof this._generator["return"] !== "undefined";

      var result;
      if (!implementsReturn) {
          var reason = new Promise.CancellationError(
              "generator .return() sentinel");
          Promise.coroutine.returnSentinel = reason;
          this._promise._attachExtraTrace(reason);
          this._promise._pushContext();
          result = tryCatch(this._generator["throw"]).call(this._generator,
                                                           reason);
          this._promise._popContext();
      } else {
          this._promise._pushContext();
          result = tryCatch(this._generator["return"]).call(this._generator,
                                                            undefined);
          this._promise._popContext();
      }
      this._cancellationPhase = true;
      this._yieldedPromise = null;
      this._continue(result);
  };

  PromiseSpawn.prototype._promiseFulfilled = function(value) {
      this._yieldedPromise = null;
      this._promise._pushContext();
      var result = tryCatch(this._generator.next).call(this._generator, value);
      this._promise._popContext();
      this._continue(result);
  };

  PromiseSpawn.prototype._promiseRejected = function(reason) {
      this._yieldedPromise = null;
      this._promise._attachExtraTrace(reason);
      this._promise._pushContext();
      var result = tryCatch(this._generator["throw"])
          .call(this._generator, reason);
      this._promise._popContext();
      this._continue(result);
  };

  PromiseSpawn.prototype._resultCancelled = function() {
      if (this._yieldedPromise instanceof Promise) {
          var promise = this._yieldedPromise;
          this._yieldedPromise = null;
          promise.cancel();
      }
  };

  PromiseSpawn.prototype.promise = function () {
      return this._promise;
  };

  PromiseSpawn.prototype._run = function () {
      this._generator = this._generatorFunction.call(this._receiver);
      this._receiver =
          this._generatorFunction = undefined;
      this._promiseFulfilled(undefined);
  };

  PromiseSpawn.prototype._continue = function (result) {
      var promise = this._promise;
      if (result === errorObj) {
          this._cleanup();
          if (this._cancellationPhase) {
              return promise.cancel();
          } else {
              return promise._rejectCallback(result.e, false);
          }
      }

      var value = result.value;
      if (result.done === true) {
          this._cleanup();
          if (this._cancellationPhase) {
              return promise.cancel();
          } else {
              return promise._resolveCallback(value);
          }
      } else {
          var maybePromise = tryConvertToPromise(value, this._promise);
          if (!(maybePromise instanceof Promise)) {
              maybePromise =
                  promiseFromYieldHandler(maybePromise,
                                          this._yieldHandlers,
                                          this._promise);
              if (maybePromise === null) {
                  this._promiseRejected(
                      new TypeError(
                          "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", String(value)) +
                          "From coroutine:\u000a" +
                          this._stack.split("\n").slice(1, -7).join("\n")
                      )
                  );
                  return;
              }
          }
          maybePromise = maybePromise._target();
          var bitField = maybePromise._bitField;
          if (((bitField & 50397184) === 0)) {
              this._yieldedPromise = maybePromise;
              maybePromise._proxy(this, null);
          } else if (((bitField & 33554432) !== 0)) {
              Promise._async.invoke(
                  this._promiseFulfilled, this, maybePromise._value()
              );
          } else if (((bitField & 16777216) !== 0)) {
              Promise._async.invoke(
                  this._promiseRejected, this, maybePromise._reason()
              );
          } else {
              this._promiseCancelled();
          }
      }
  };

  Promise.coroutine = function (generatorFunction, options) {
      if (typeof generatorFunction !== "function") {
          throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var yieldHandler = Object(options).yieldHandler;
      var PromiseSpawn$ = PromiseSpawn;
      var stack = new Error().stack;
      return function () {
          var generator = generatorFunction.apply(this, arguments);
          var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                        stack);
          var ret = spawn.promise();
          spawn._generator = generator;
          spawn._promiseFulfilled(undefined);
          return ret;
      };
  };

  Promise.coroutine.addYieldHandler = function(fn) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util$$1.classString(fn));
      }
      yieldHandlers.push(fn);
  };

  Promise.spawn = function (generatorFunction) {
      debug.deprecated("Promise.spawn()", "Promise.coroutine()");
      if (typeof generatorFunction !== "function") {
          return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var spawn = new PromiseSpawn(generatorFunction, this);
      var ret = spawn.promise();
      spawn._run(Promise.spawn);
      return ret;
  };
  };

  var nodeify = function(Promise) {
  var util$$1 = util$1;
  var async = Promise._async;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;

  function spreadAdapter(val, nodeback) {
      var promise = this;
      if (!util$$1.isArray(val)) return successAdapter.call(promise, val, nodeback);
      var ret =
          tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }

  function successAdapter(val, nodeback) {
      var promise = this;
      var receiver = promise._boundValue();
      var ret = val === undefined
          ? tryCatch(nodeback).call(receiver, null)
          : tryCatch(nodeback).call(receiver, null, val);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }
  function errorAdapter(reason, nodeback) {
      var promise = this;
      if (!reason) {
          var newReason = new Error(reason + "");
          newReason.cause = reason;
          reason = newReason;
      }
      var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }

  Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                       options) {
      if (typeof nodeback == "function") {
          var adapter = successAdapter;
          if (options !== undefined && Object(options).spread) {
              adapter = spreadAdapter;
          }
          this._then(
              adapter,
              errorAdapter,
              undefined,
              this,
              nodeback
          );
      }
      return this;
  };
  };

  var promisify = function(Promise, INTERNAL) {
  var THIS = {};
  var util$$1 = util$1;
  var nodebackForPromise = nodeback;
  var withAppended = util$$1.withAppended;
  var maybeWrapAsError = util$$1.maybeWrapAsError;
  var canEvaluate = util$$1.canEvaluate;
  var TypeError = errors$10.TypeError;
  var defaultSuffix = "Async";
  var defaultPromisified = {__isPromisified__: true};
  var noCopyProps = [
      "arity",    "length",
      "name",
      "arguments",
      "caller",
      "callee",
      "prototype",
      "__isPromisified__"
  ];
  var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

  var defaultFilter = function(name) {
      return util$$1.isIdentifier(name) &&
          name.charAt(0) !== "_" &&
          name !== "constructor";
  };

  function propsFilter(key) {
      return !noCopyPropsPattern.test(key);
  }

  function isPromisified(fn) {
      try {
          return fn.__isPromisified__ === true;
      }
      catch (e) {
          return false;
      }
  }

  function hasPromisified(obj, key, suffix) {
      var val = util$$1.getDataPropertyOrDefault(obj, key + suffix,
                                              defaultPromisified);
      return val ? isPromisified(val) : false;
  }
  function checkValid(ret, suffix, suffixRegexp) {
      for (var i = 0; i < ret.length; i += 2) {
          var key = ret[i];
          if (suffixRegexp.test(key)) {
              var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
              for (var j = 0; j < ret.length; j += 2) {
                  if (ret[j] === keyWithoutAsyncSuffix) {
                      throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
                          .replace("%s", suffix));
                  }
              }
          }
      }
  }

  function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
      var keys = util$$1.inheritedDataKeys(obj);
      var ret = [];
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var value = obj[key];
          var passesDefaultFilter = filter === defaultFilter
              ? true : defaultFilter(key, value, obj);
          if (typeof value === "function" &&
              !isPromisified(value) &&
              !hasPromisified(obj, key, suffix) &&
              filter(key, value, obj, passesDefaultFilter)) {
              ret.push(key, value);
          }
      }
      checkValid(ret, suffix, suffixRegexp);
      return ret;
  }

  var escapeIdentRegex = function(str) {
      return str.replace(/([$])/, "\\$");
  };

  var makeNodePromisifiedEval;
  {
  var switchCaseArgumentOrder = function(likelyArgumentCount) {
      var ret = [likelyArgumentCount];
      var min = Math.max(0, likelyArgumentCount - 1 - 3);
      for(var i = likelyArgumentCount - 1; i >= min; --i) {
          ret.push(i);
      }
      for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
          ret.push(i);
      }
      return ret;
  };

  var argumentSequence = function(argumentCount) {
      return util$$1.filledRange(argumentCount, "_arg", "");
  };

  var parameterDeclaration = function(parameterCount) {
      return util$$1.filledRange(
          Math.max(parameterCount, 3), "_arg", "");
  };

  var parameterCount = function(fn) {
      if (typeof fn.length === "number") {
          return Math.max(Math.min(fn.length, 1023 + 1), 0);
      }
      return 0;
  };

  makeNodePromisifiedEval =
  function(callback, receiver, originalName, fn, _, multiArgs) {
      var newParameterCount = Math.max(0, parameterCount(fn) - 1);
      var argumentOrder = switchCaseArgumentOrder(newParameterCount);
      var shouldProxyThis = typeof callback === "string" || receiver === THIS;

      function generateCallForArgumentCount(count) {
          var args = argumentSequence(count).join(", ");
          var comma = count > 0 ? ", " : "";
          var ret;
          if (shouldProxyThis) {
              ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
          } else {
              ret = receiver === undefined
                  ? "ret = callback({{args}}, nodeback); break;\n"
                  : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
          }
          return ret.replace("{{args}}", args).replace(", ", comma);
      }

      function generateArgumentSwitchCase() {
          var ret = "";
          for (var i = 0; i < argumentOrder.length; ++i) {
              ret += "case " + argumentOrder[i] +":" +
                  generateCallForArgumentCount(argumentOrder[i]);
          }

          ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                  ? "ret = callback.apply(this, args);\n"
                                  : "ret = callback.apply(receiver, args);\n"));
          return ret;
      }

      var getFunctionCode = typeof callback === "string"
                                  ? ("this != null ? this['"+callback+"'] : fn")
                                  : "fn";
      var body = "'use strict';                                                \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
          .replace("[GetFunctionCode]", getFunctionCode);
      body = body.replace("Parameters", parameterDeclaration(newParameterCount));
      return new Function("Promise",
                          "fn",
                          "receiver",
                          "withAppended",
                          "maybeWrapAsError",
                          "nodebackForPromise",
                          "tryCatch",
                          "errorObj",
                          "notEnumerableProp",
                          "INTERNAL",
                          body)(
                      Promise,
                      fn,
                      receiver,
                      withAppended,
                      maybeWrapAsError,
                      nodebackForPromise,
                      util$$1.tryCatch,
                      util$$1.errorObj,
                      util$$1.notEnumerableProp,
                      INTERNAL);
  };
  }

  function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
      var defaultThis = (function() {return this;})();
      var method = callback;
      if (typeof method === "string") {
          callback = fn;
      }
      function promisified() {
          var _receiver = receiver;
          if (receiver === THIS) _receiver = this;
          var promise = new Promise(INTERNAL);
          promise._captureStackTrace();
          var cb = typeof method === "string" && this !== defaultThis
              ? this[method] : callback;
          var fn = nodebackForPromise(promise, multiArgs);
          try {
              cb.apply(_receiver, withAppended(arguments, fn));
          } catch(e) {
              promise._rejectCallback(maybeWrapAsError(e), true, true);
          }
          if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
          return promise;
      }
      util$$1.notEnumerableProp(promisified, "__isPromisified__", true);
      return promisified;
  }

  var makeNodePromisified = canEvaluate
      ? makeNodePromisifiedEval
      : makeNodePromisifiedClosure;

  function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
      var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
      var methods =
          promisifiableMethods(obj, suffix, suffixRegexp, filter);

      for (var i = 0, len = methods.length; i < len; i+= 2) {
          var key = methods[i];
          var fn = methods[i+1];
          var promisifiedKey = key + suffix;
          if (promisifier === makeNodePromisified) {
              obj[promisifiedKey] =
                  makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
          } else {
              var promisified = promisifier(fn, function() {
                  return makeNodePromisified(key, THIS, key,
                                             fn, suffix, multiArgs);
              });
              util$$1.notEnumerableProp(promisified, "__isPromisified__", true);
              obj[promisifiedKey] = promisified;
          }
      }
      util$$1.toFastProperties(obj);
      return obj;
  }

  function promisify(callback, receiver, multiArgs) {
      return makeNodePromisified(callback, receiver, undefined,
                                  callback, null, multiArgs);
  }

  Promise.promisify = function (fn, options) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util$$1.classString(fn));
      }
      if (isPromisified(fn)) {
          return fn;
      }
      options = Object(options);
      var receiver = options.context === undefined ? THIS : options.context;
      var multiArgs = !!options.multiArgs;
      var ret = promisify(fn, receiver, multiArgs);
      util$$1.copyDescriptors(fn, ret, propsFilter);
      return ret;
  };

  Promise.promisifyAll = function (target, options) {
      if (typeof target !== "function" && typeof target !== "object") {
          throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      options = Object(options);
      var multiArgs = !!options.multiArgs;
      var suffix = options.suffix;
      if (typeof suffix !== "string") suffix = defaultSuffix;
      var filter = options.filter;
      if (typeof filter !== "function") filter = defaultFilter;
      var promisifier = options.promisifier;
      if (typeof promisifier !== "function") promisifier = makeNodePromisified;

      if (!util$$1.isIdentifier(suffix)) {
          throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }

      var keys = util$$1.inheritedDataKeys(target);
      for (var i = 0; i < keys.length; ++i) {
          var value = target[keys[i]];
          if (keys[i] !== "constructor" &&
              util$$1.isClass(value)) {
              promisifyAll(value.prototype, suffix, filter, promisifier,
                  multiArgs);
              promisifyAll(value, suffix, filter, promisifier, multiArgs);
          }
      }

      return promisifyAll(target, suffix, filter, promisifier, multiArgs);
  };
  };

  var props = function(
      Promise, PromiseArray, tryConvertToPromise, apiRejection) {
  var util$$1 = util$1;
  var isObject = util$$1.isObject;
  var es5$$1 = es5;
  var Es6Map;
  if (typeof Map === "function") Es6Map = Map;

  var mapToEntries = (function() {
      var index = 0;
      var size = 0;

      function extractEntry(value, key) {
          this[index] = value;
          this[index + size] = key;
          index++;
      }

      return function mapToEntries(map) {
          size = map.size;
          index = 0;
          var ret = new Array(map.size * 2);
          map.forEach(extractEntry, ret);
          return ret;
      };
  })();

  var entriesToMap = function(entries) {
      var ret = new Es6Map();
      var length = entries.length / 2 | 0;
      for (var i = 0; i < length; ++i) {
          var key = entries[length + i];
          var value = entries[i];
          ret.set(key, value);
      }
      return ret;
  };

  function PropertiesPromiseArray(obj) {
      var isMap = false;
      var entries;
      if (Es6Map !== undefined && obj instanceof Es6Map) {
          entries = mapToEntries(obj);
          isMap = true;
      } else {
          var keys = es5$$1.keys(obj);
          var len = keys.length;
          entries = new Array(len * 2);
          for (var i = 0; i < len; ++i) {
              var key = keys[i];
              entries[i] = obj[key];
              entries[i + len] = key;
          }
      }
      this.constructor$(entries);
      this._isMap = isMap;
      this._init$(undefined, isMap ? -6 : -3);
  }
  util$$1.inherits(PropertiesPromiseArray, PromiseArray);

  PropertiesPromiseArray.prototype._init = function () {};

  PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          var val;
          if (this._isMap) {
              val = entriesToMap(this._values);
          } else {
              val = {};
              var keyOffset = this.length();
              for (var i = 0, len = this.length(); i < len; ++i) {
                  val[this._values[i + keyOffset]] = this._values[i];
              }
          }
          this._resolve(val);
          return true;
      }
      return false;
  };

  PropertiesPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };

  PropertiesPromiseArray.prototype.getActualLength = function (len) {
      return len >> 1;
  };

  function props(promises) {
      var ret;
      var castValue = tryConvertToPromise(promises);

      if (!isObject(castValue)) {
          return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      } else if (castValue instanceof Promise) {
          ret = castValue._then(
              Promise.props, undefined, undefined, undefined, undefined);
      } else {
          ret = new PropertiesPromiseArray(castValue).promise();
      }

      if (castValue instanceof Promise) {
          ret._propagateFrom(castValue, 2);
      }
      return ret;
  }

  Promise.prototype.props = function () {
      return props(this);
  };

  Promise.props = function (promises) {
      return props(promises);
  };
  };

  var race = function(
      Promise, INTERNAL, tryConvertToPromise, apiRejection) {
  var util$$1 = util$1;

  var raceLater = function (promise) {
      return promise.then(function(array) {
          return race(array, promise);
      });
  };

  function race(promises, parent) {
      var maybePromise = tryConvertToPromise(promises);

      if (maybePromise instanceof Promise) {
          return raceLater(maybePromise);
      } else {
          promises = util$$1.asArray(promises);
          if (promises === null)
              return apiRejection("expecting an array or an iterable object but got " + util$$1.classString(promises));
      }

      var ret = new Promise(INTERNAL);
      if (parent !== undefined) {
          ret._propagateFrom(parent, 3);
      }
      var fulfill = ret._fulfill;
      var reject = ret._reject;
      for (var i = 0, len = promises.length; i < len; ++i) {
          var val = promises[i];

          if (val === undefined && !(i in promises)) {
              continue;
          }

          Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
      }
      return ret;
  }

  Promise.race = function (promises) {
      return race(promises, undefined);
  };

  Promise.prototype.race = function () {
      return race(this, undefined);
  };

  };

  var reduce = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL,
                            debug) {
  var getDomain = Promise._getDomain;
  var util$$1 = util$1;
  var tryCatch = util$$1.tryCatch;

  function ReductionPromiseArray(promises, fn, initialValue, _each) {
      this.constructor$(promises);
      var domain = getDomain();
      this._fn = domain === null ? fn : util$$1.domainBind(domain, fn);
      if (initialValue !== undefined) {
          initialValue = Promise.resolve(initialValue);
          initialValue._attachCancellationCallback(this);
      }
      this._initialValue = initialValue;
      this._currentCancellable = null;
      if(_each === INTERNAL) {
          this._eachValues = Array(this._length);
      } else if (_each === 0) {
          this._eachValues = null;
      } else {
          this._eachValues = undefined;
      }
      this._promise._captureStackTrace();
      this._init$(undefined, -5);
  }
  util$$1.inherits(ReductionPromiseArray, PromiseArray);

  ReductionPromiseArray.prototype._gotAccum = function(accum) {
      if (this._eachValues !== undefined && 
          this._eachValues !== null && 
          accum !== INTERNAL) {
          this._eachValues.push(accum);
      }
  };

  ReductionPromiseArray.prototype._eachComplete = function(value) {
      if (this._eachValues !== null) {
          this._eachValues.push(value);
      }
      return this._eachValues;
  };

  ReductionPromiseArray.prototype._init = function() {};

  ReductionPromiseArray.prototype._resolveEmptyArray = function() {
      this._resolve(this._eachValues !== undefined ? this._eachValues
                                                   : this._initialValue);
  };

  ReductionPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };

  ReductionPromiseArray.prototype._resolve = function(value) {
      this._promise._resolveCallback(value);
      this._values = null;
  };

  ReductionPromiseArray.prototype._resultCancelled = function(sender) {
      if (sender === this._initialValue) return this._cancel();
      if (this._isResolved()) return;
      this._resultCancelled$();
      if (this._currentCancellable instanceof Promise) {
          this._currentCancellable.cancel();
      }
      if (this._initialValue instanceof Promise) {
          this._initialValue.cancel();
      }
  };

  ReductionPromiseArray.prototype._iterate = function (values) {
      this._values = values;
      var value;
      var i;
      var length = values.length;
      if (this._initialValue !== undefined) {
          value = this._initialValue;
          i = 0;
      } else {
          value = Promise.resolve(values[0]);
          i = 1;
      }

      this._currentCancellable = value;

      if (!value.isRejected()) {
          for (; i < length; ++i) {
              var ctx = {
                  accum: null,
                  value: values[i],
                  index: i,
                  length: length,
                  array: this
              };
              value = value._then(gotAccum, undefined, undefined, ctx, undefined);
          }
      }

      if (this._eachValues !== undefined) {
          value = value
              ._then(this._eachComplete, undefined, undefined, this, undefined);
      }
      value._then(completed, completed, undefined, value, this);
  };

  Promise.prototype.reduce = function (fn, initialValue) {
      return reduce(this, fn, initialValue, null);
  };

  Promise.reduce = function (promises, fn, initialValue, _each) {
      return reduce(promises, fn, initialValue, _each);
  };

  function completed(valueOrReason, array) {
      if (this.isFulfilled()) {
          array._resolve(valueOrReason);
      } else {
          array._reject(valueOrReason);
      }
  }

  function reduce(promises, fn, initialValue, _each) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util$$1.classString(fn));
      }
      var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
      return array.promise();
  }

  function gotAccum(accum) {
      this.accum = accum;
      this.array._gotAccum(accum);
      var value = tryConvertToPromise(this.value, this.array._promise);
      if (value instanceof Promise) {
          this.array._currentCancellable = value;
          return value._then(gotValue, undefined, undefined, this, undefined);
      } else {
          return gotValue.call(this, value);
      }
  }

  function gotValue(value) {
      var array = this.array;
      var promise = array._promise;
      var fn = tryCatch(array._fn);
      promise._pushContext();
      var ret;
      if (array._eachValues !== undefined) {
          ret = fn.call(promise._boundValue(), value, this.index, this.length);
      } else {
          ret = fn.call(promise._boundValue(),
                                this.accum, value, this.index, this.length);
      }
      if (ret instanceof Promise) {
          array._currentCancellable = ret;
      }
      var promiseCreated = promise._popContext();
      debug.checkForgottenReturns(
          ret,
          promiseCreated,
          array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
          promise
      );
      return ret;
  }
  };

  var settle =
      function(Promise, PromiseArray, debug) {
  var PromiseInspection = Promise.PromiseInspection;
  var util$$1 = util$1;

  function SettledPromiseArray(values) {
      this.constructor$(values);
  }
  util$$1.inherits(SettledPromiseArray, PromiseArray);

  SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
      this._values[index] = inspection;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
          return true;
      }
      return false;
  };

  SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var ret = new PromiseInspection();
      ret._bitField = 33554432;
      ret._settledValueField = value;
      return this._promiseResolved(index, ret);
  };
  SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
      var ret = new PromiseInspection();
      ret._bitField = 16777216;
      ret._settledValueField = reason;
      return this._promiseResolved(index, ret);
  };

  Promise.settle = function (promises) {
      debug.deprecated(".settle()", ".reflect()");
      return new SettledPromiseArray(promises).promise();
  };

  Promise.prototype.settle = function () {
      return Promise.settle(this);
  };
  };

  var some =
  function(Promise, PromiseArray, apiRejection) {
  var util$$1 = util$1;
  var RangeError = errors$10.RangeError;
  var AggregateError = errors$10.AggregateError;
  var isArray = util$$1.isArray;
  var CANCELLATION = {};


  function SomePromiseArray(values) {
      this.constructor$(values);
      this._howMany = 0;
      this._unwrap = false;
      this._initialized = false;
  }
  util$$1.inherits(SomePromiseArray, PromiseArray);

  SomePromiseArray.prototype._init = function () {
      if (!this._initialized) {
          return;
      }
      if (this._howMany === 0) {
          this._resolve([]);
          return;
      }
      this._init$(undefined, -5);
      var isArrayResolved = isArray(this._values);
      if (!this._isResolved() &&
          isArrayResolved &&
          this._howMany > this._canPossiblyFulfill()) {
          this._reject(this._getRangeError(this.length()));
      }
  };

  SomePromiseArray.prototype.init = function () {
      this._initialized = true;
      this._init();
  };

  SomePromiseArray.prototype.setUnwrap = function () {
      this._unwrap = true;
  };

  SomePromiseArray.prototype.howMany = function () {
      return this._howMany;
  };

  SomePromiseArray.prototype.setHowMany = function (count) {
      this._howMany = count;
  };

  SomePromiseArray.prototype._promiseFulfilled = function (value) {
      this._addFulfilled(value);
      if (this._fulfilled() === this.howMany()) {
          this._values.length = this.howMany();
          if (this.howMany() === 1 && this._unwrap) {
              this._resolve(this._values[0]);
          } else {
              this._resolve(this._values);
          }
          return true;
      }
      return false;

  };
  SomePromiseArray.prototype._promiseRejected = function (reason) {
      this._addRejected(reason);
      return this._checkOutcome();
  };

  SomePromiseArray.prototype._promiseCancelled = function () {
      if (this._values instanceof Promise || this._values == null) {
          return this._cancel();
      }
      this._addRejected(CANCELLATION);
      return this._checkOutcome();
  };

  SomePromiseArray.prototype._checkOutcome = function() {
      if (this.howMany() > this._canPossiblyFulfill()) {
          var e = new AggregateError();
          for (var i = this.length(); i < this._values.length; ++i) {
              if (this._values[i] !== CANCELLATION) {
                  e.push(this._values[i]);
              }
          }
          if (e.length > 0) {
              this._reject(e);
          } else {
              this._cancel();
          }
          return true;
      }
      return false;
  };

  SomePromiseArray.prototype._fulfilled = function () {
      return this._totalResolved;
  };

  SomePromiseArray.prototype._rejected = function () {
      return this._values.length - this.length();
  };

  SomePromiseArray.prototype._addRejected = function (reason) {
      this._values.push(reason);
  };

  SomePromiseArray.prototype._addFulfilled = function (value) {
      this._values[this._totalResolved++] = value;
  };

  SomePromiseArray.prototype._canPossiblyFulfill = function () {
      return this.length() - this._rejected();
  };

  SomePromiseArray.prototype._getRangeError = function (count) {
      var message = "Input array must contain at least " +
              this._howMany + " items but contains only " + count + " items";
      return new RangeError(message);
  };

  SomePromiseArray.prototype._resolveEmptyArray = function () {
      this._reject(this._getRangeError(0));
  };

  function some(promises, howMany) {
      if ((howMany | 0) !== howMany || howMany < 0) {
          return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(howMany);
      ret.init();
      return promise;
  }

  Promise.some = function (promises, howMany) {
      return some(promises, howMany);
  };

  Promise.prototype.some = function (howMany) {
      return some(this, howMany);
  };

  Promise._SomePromiseArray = SomePromiseArray;
  };

  var filter = function(Promise, INTERNAL) {
  var PromiseMap = Promise.map;

  Promise.prototype.filter = function (fn, options) {
      return PromiseMap(this, fn, options, INTERNAL);
  };

  Promise.filter = function (promises, fn, options) {
      return PromiseMap(promises, fn, options, INTERNAL);
  };
  };

  var each = function(Promise, INTERNAL) {
  var PromiseReduce = Promise.reduce;
  var PromiseAll = Promise.all;

  function promiseAllThis() {
      return PromiseAll(this);
  }

  function PromiseMapSeries(promises, fn) {
      return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
  }

  Promise.prototype.each = function (fn) {
      return PromiseReduce(this, fn, INTERNAL, 0)
                ._then(promiseAllThis, undefined, undefined, this, undefined);
  };

  Promise.prototype.mapSeries = function (fn) {
      return PromiseReduce(this, fn, INTERNAL, INTERNAL);
  };

  Promise.each = function (promises, fn) {
      return PromiseReduce(promises, fn, INTERNAL, 0)
                ._then(promiseAllThis, undefined, undefined, promises, undefined);
  };

  Promise.mapSeries = PromiseMapSeries;
  };

  var any = function(Promise) {
  var SomePromiseArray = Promise._SomePromiseArray;
  function any(promises) {
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(1);
      ret.setUnwrap();
      ret.init();
      return promise;
  }

  Promise.any = function (promises) {
      return any(promises);
  };

  Promise.prototype.any = function () {
      return any(this);
  };

  };

  var promise = createCommonjsModule(function (module) {
  module.exports = function() {
  var makeSelfResolutionError = function () {
      return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  };
  var reflectHandler = function() {
      return new Promise.PromiseInspection(this._target());
  };
  var apiRejection = function(msg) {
      return Promise.reject(new TypeError(msg));
  };
  function Proxyable() {}
  var UNDEFINED_BINDING = {};
  var util$$1 = util$1;

  var getDomain;
  if (util$$1.isNode) {
      getDomain = function() {
          var ret = process.domain;
          if (ret === undefined) ret = null;
          return ret;
      };
  } else {
      getDomain = function() {
          return null;
      };
  }
  util$$1.notEnumerableProp(Promise, "_getDomain", getDomain);

  var es5$$1 = es5;
  var Async = async$1;
  var async = new Async();
  es5$$1.defineProperty(Promise, "_async", {value: async});
  var errors = errors$10;
  var TypeError = Promise.TypeError = errors.TypeError;
  Promise.RangeError = errors.RangeError;
  var CancellationError = Promise.CancellationError = errors.CancellationError;
  Promise.TimeoutError = errors.TimeoutError;
  Promise.OperationalError = errors.OperationalError;
  Promise.RejectionError = errors.OperationalError;
  Promise.AggregateError = errors.AggregateError;
  var INTERNAL = function(){};
  var APPLY = {};
  var NEXT_FILTER = {};
  var tryConvertToPromise = thenables(Promise, INTERNAL);
  var PromiseArray =
      promise_array(Promise, INTERNAL,
                                 tryConvertToPromise, apiRejection, Proxyable);
  var Context = context(Promise);
   /*jshint unused:false*/
  var createContext = Context.create;
  var debug = debuggability(Promise, Context);
  var PassThroughHandlerContext =
      _finally(Promise, tryConvertToPromise, NEXT_FILTER);
  var catchFilter = catch_filter(NEXT_FILTER);
  var nodebackForPromise = nodeback;
  var errorObj = util$$1.errorObj;
  var tryCatch = util$$1.tryCatch;
  function check(self, executor) {
      if (self == null || self.constructor !== Promise) {
          throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      if (typeof executor !== "function") {
          throw new TypeError("expecting a function but got " + util$$1.classString(executor));
      }

  }

  function Promise(executor) {
      if (executor !== INTERNAL) {
          check(this, executor);
      }
      this._bitField = 0;
      this._fulfillmentHandler0 = undefined;
      this._rejectionHandler0 = undefined;
      this._promise0 = undefined;
      this._receiver0 = undefined;
      this._resolveFromExecutor(executor);
      this._promiseCreated();
      this._fireEvent("promiseCreated", this);
  }

  Promise.prototype.toString = function () {
      return "[object Promise]";
  };

  Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
      var len = arguments.length;
      if (len > 1) {
          var catchInstances = new Array(len - 1),
              j = 0, i;
          for (i = 0; i < len - 1; ++i) {
              var item = arguments[i];
              if (util$$1.isObject(item)) {
                  catchInstances[j++] = item;
              } else {
                  return apiRejection("Catch statement predicate: " +
                      "expecting an object but got " + util$$1.classString(item));
              }
          }
          catchInstances.length = j;
          fn = arguments[i];
          return this.then(undefined, catchFilter(catchInstances, fn, this));
      }
      return this.then(undefined, fn);
  };

  Promise.prototype.reflect = function () {
      return this._then(reflectHandler,
          reflectHandler, undefined, this, undefined);
  };

  Promise.prototype.then = function (didFulfill, didReject) {
      if (debug.warnings() && arguments.length > 0 &&
          typeof didFulfill !== "function" &&
          typeof didReject !== "function") {
          var msg = ".then() only accepts functions but was passed: " +
                  util$$1.classString(didFulfill);
          if (arguments.length > 1) {
              msg += ", " + util$$1.classString(didReject);
          }
          this._warn(msg);
      }
      return this._then(didFulfill, didReject, undefined, undefined, undefined);
  };

  Promise.prototype.done = function (didFulfill, didReject) {
      var promise =
          this._then(didFulfill, didReject, undefined, undefined, undefined);
      promise._setIsFinal();
  };

  Promise.prototype.spread = function (fn) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util$$1.classString(fn));
      }
      return this.all()._then(fn, undefined, undefined, APPLY, undefined);
  };

  Promise.prototype.toJSON = function () {
      var ret = {
          isFulfilled: false,
          isRejected: false,
          fulfillmentValue: undefined,
          rejectionReason: undefined
      };
      if (this.isFulfilled()) {
          ret.fulfillmentValue = this.value();
          ret.isFulfilled = true;
      } else if (this.isRejected()) {
          ret.rejectionReason = this.reason();
          ret.isRejected = true;
      }
      return ret;
  };

  Promise.prototype.all = function () {
      if (arguments.length > 0) {
          this._warn(".all() was passed arguments but it does not take any");
      }
      return new PromiseArray(this).promise();
  };

  Promise.prototype.error = function (fn) {
      return this.caught(util$$1.originatesFromRejection, fn);
  };

  Promise.getNewLibraryCopy = module.exports;

  Promise.is = function (val) {
      return val instanceof Promise;
  };

  Promise.fromNode = Promise.fromCallback = function(fn) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
                                           : false;
      var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
      if (result === errorObj) {
          ret._rejectCallback(result.e, true);
      }
      if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
      return ret;
  };

  Promise.all = function (promises) {
      return new PromiseArray(promises).promise();
  };

  Promise.cast = function (obj) {
      var ret = tryConvertToPromise(obj);
      if (!(ret instanceof Promise)) {
          ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._setFulfilled();
          ret._rejectionHandler0 = obj;
      }
      return ret;
  };

  Promise.resolve = Promise.fulfilled = Promise.cast;

  Promise.reject = Promise.rejected = function (reason) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._rejectCallback(reason, true);
      return ret;
  };

  Promise.setScheduler = function(fn) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util$$1.classString(fn));
      }
      return async.setScheduler(fn);
  };

  Promise.prototype._then = function (
      didFulfill,
      didReject,
      _,    receiver,
      internalData
  ) {
      var haveInternalData = internalData !== undefined;
      var promise = haveInternalData ? internalData : new Promise(INTERNAL);
      var target = this._target();
      var bitField = target._bitField;

      if (!haveInternalData) {
          promise._propagateFrom(this, 3);
          promise._captureStackTrace();
          if (receiver === undefined &&
              ((this._bitField & 2097152) !== 0)) {
              if (!((bitField & 50397184) === 0)) {
                  receiver = this._boundValue();
              } else {
                  receiver = target === this ? undefined : this._boundTo;
              }
          }
          this._fireEvent("promiseChained", this, promise);
      }

      var domain = getDomain();
      if (!((bitField & 50397184) === 0)) {
          var handler, value, settler = target._settlePromiseCtx;
          if (((bitField & 33554432) !== 0)) {
              value = target._rejectionHandler0;
              handler = didFulfill;
          } else if (((bitField & 16777216) !== 0)) {
              value = target._fulfillmentHandler0;
              handler = didReject;
              target._unsetRejectionIsUnhandled();
          } else {
              settler = target._settlePromiseLateCancellationObserver;
              value = new CancellationError("late cancellation observer");
              target._attachExtraTrace(value);
              handler = didReject;
          }

          async.invoke(settler, target, {
              handler: domain === null ? handler
                  : (typeof handler === "function" &&
                      util$$1.domainBind(domain, handler)),
              promise: promise,
              receiver: receiver,
              value: value
          });
      } else {
          target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
      }

      return promise;
  };

  Promise.prototype._length = function () {
      return this._bitField & 65535;
  };

  Promise.prototype._isFateSealed = function () {
      return (this._bitField & 117506048) !== 0;
  };

  Promise.prototype._isFollowing = function () {
      return (this._bitField & 67108864) === 67108864;
  };

  Promise.prototype._setLength = function (len) {
      this._bitField = (this._bitField & -65536) |
          (len & 65535);
  };

  Promise.prototype._setFulfilled = function () {
      this._bitField = this._bitField | 33554432;
      this._fireEvent("promiseFulfilled", this);
  };

  Promise.prototype._setRejected = function () {
      this._bitField = this._bitField | 16777216;
      this._fireEvent("promiseRejected", this);
  };

  Promise.prototype._setFollowing = function () {
      this._bitField = this._bitField | 67108864;
      this._fireEvent("promiseResolved", this);
  };

  Promise.prototype._setIsFinal = function () {
      this._bitField = this._bitField | 4194304;
  };

  Promise.prototype._isFinal = function () {
      return (this._bitField & 4194304) > 0;
  };

  Promise.prototype._unsetCancelled = function() {
      this._bitField = this._bitField & (~65536);
  };

  Promise.prototype._setCancelled = function() {
      this._bitField = this._bitField | 65536;
      this._fireEvent("promiseCancelled", this);
  };

  Promise.prototype._setWillBeCancelled = function() {
      this._bitField = this._bitField | 8388608;
  };

  Promise.prototype._setAsyncGuaranteed = function() {
      if (async.hasCustomScheduler()) return;
      this._bitField = this._bitField | 134217728;
  };

  Promise.prototype._receiverAt = function (index) {
      var ret = index === 0 ? this._receiver0 : this[
              index * 4 - 4 + 3];
      if (ret === UNDEFINED_BINDING) {
          return undefined;
      } else if (ret === undefined && this._isBound()) {
          return this._boundValue();
      }
      return ret;
  };

  Promise.prototype._promiseAt = function (index) {
      return this[
              index * 4 - 4 + 2];
  };

  Promise.prototype._fulfillmentHandlerAt = function (index) {
      return this[
              index * 4 - 4 + 0];
  };

  Promise.prototype._rejectionHandlerAt = function (index) {
      return this[
              index * 4 - 4 + 1];
  };

  Promise.prototype._boundValue = function() {};

  Promise.prototype._migrateCallback0 = function (follower) {
      var bitField = follower._bitField;
      var fulfill = follower._fulfillmentHandler0;
      var reject = follower._rejectionHandler0;
      var promise = follower._promise0;
      var receiver = follower._receiverAt(0);
      if (receiver === undefined) receiver = UNDEFINED_BINDING;
      this._addCallbacks(fulfill, reject, promise, receiver, null);
  };

  Promise.prototype._migrateCallbackAt = function (follower, index) {
      var fulfill = follower._fulfillmentHandlerAt(index);
      var reject = follower._rejectionHandlerAt(index);
      var promise = follower._promiseAt(index);
      var receiver = follower._receiverAt(index);
      if (receiver === undefined) receiver = UNDEFINED_BINDING;
      this._addCallbacks(fulfill, reject, promise, receiver, null);
  };

  Promise.prototype._addCallbacks = function (
      fulfill,
      reject,
      promise,
      receiver,
      domain
  ) {
      var index = this._length();

      if (index >= 65535 - 4) {
          index = 0;
          this._setLength(0);
      }

      if (index === 0) {
          this._promise0 = promise;
          this._receiver0 = receiver;
          if (typeof fulfill === "function") {
              this._fulfillmentHandler0 =
                  domain === null ? fulfill : util$$1.domainBind(domain, fulfill);
          }
          if (typeof reject === "function") {
              this._rejectionHandler0 =
                  domain === null ? reject : util$$1.domainBind(domain, reject);
          }
      } else {
          var base = index * 4 - 4;
          this[base + 2] = promise;
          this[base + 3] = receiver;
          if (typeof fulfill === "function") {
              this[base + 0] =
                  domain === null ? fulfill : util$$1.domainBind(domain, fulfill);
          }
          if (typeof reject === "function") {
              this[base + 1] =
                  domain === null ? reject : util$$1.domainBind(domain, reject);
          }
      }
      this._setLength(index + 1);
      return index;
  };

  Promise.prototype._proxy = function (proxyable, arg) {
      this._addCallbacks(undefined, undefined, arg, proxyable, null);
  };

  Promise.prototype._resolveCallback = function(value, shouldBind) {
      if (((this._bitField & 117506048) !== 0)) return;
      if (value === this)
          return this._rejectCallback(makeSelfResolutionError(), false);
      var maybePromise = tryConvertToPromise(value, this);
      if (!(maybePromise instanceof Promise)) return this._fulfill(value);

      if (shouldBind) this._propagateFrom(maybePromise, 2);

      var promise = maybePromise._target();

      if (promise === this) {
          this._reject(makeSelfResolutionError());
          return;
      }

      var bitField = promise._bitField;
      if (((bitField & 50397184) === 0)) {
          var len = this._length();
          if (len > 0) promise._migrateCallback0(this);
          for (var i = 1; i < len; ++i) {
              promise._migrateCallbackAt(this, i);
          }
          this._setFollowing();
          this._setLength(0);
          this._setFollowee(promise);
      } else if (((bitField & 33554432) !== 0)) {
          this._fulfill(promise._value());
      } else if (((bitField & 16777216) !== 0)) {
          this._reject(promise._reason());
      } else {
          var reason = new CancellationError("late cancellation observer");
          promise._attachExtraTrace(reason);
          this._reject(reason);
      }
  };

  Promise.prototype._rejectCallback =
  function(reason, synchronous, ignoreNonErrorWarnings) {
      var trace = util$$1.ensureErrorObject(reason);
      var hasStack = trace === reason;
      if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
          var message = "a promise was rejected with a non-error: " +
              util$$1.classString(reason);
          this._warn(message, true);
      }
      this._attachExtraTrace(trace, synchronous ? hasStack : false);
      this._reject(reason);
  };

  Promise.prototype._resolveFromExecutor = function (executor) {
      if (executor === INTERNAL) return;
      var promise = this;
      this._captureStackTrace();
      this._pushContext();
      var synchronous = true;
      var r = this._execute(executor, function(value) {
          promise._resolveCallback(value);
      }, function (reason) {
          promise._rejectCallback(reason, synchronous);
      });
      synchronous = false;
      this._popContext();

      if (r !== undefined) {
          promise._rejectCallback(r, true);
      }
  };

  Promise.prototype._settlePromiseFromHandler = function (
      handler, receiver, value, promise
  ) {
      var bitField = promise._bitField;
      if (((bitField & 65536) !== 0)) return;
      promise._pushContext();
      var x;
      if (receiver === APPLY) {
          if (!value || typeof value.length !== "number") {
              x = errorObj;
              x.e = new TypeError("cannot .spread() a non-array: " +
                                      util$$1.classString(value));
          } else {
              x = tryCatch(handler).apply(this._boundValue(), value);
          }
      } else {
          x = tryCatch(handler).call(receiver, value);
      }
      var promiseCreated = promise._popContext();
      bitField = promise._bitField;
      if (((bitField & 65536) !== 0)) return;

      if (x === NEXT_FILTER) {
          promise._reject(value);
      } else if (x === errorObj) {
          promise._rejectCallback(x.e, false);
      } else {
          debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
          promise._resolveCallback(x);
      }
  };

  Promise.prototype._target = function() {
      var ret = this;
      while (ret._isFollowing()) ret = ret._followee();
      return ret;
  };

  Promise.prototype._followee = function() {
      return this._rejectionHandler0;
  };

  Promise.prototype._setFollowee = function(promise) {
      this._rejectionHandler0 = promise;
  };

  Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
      var isPromise = promise instanceof Promise;
      var bitField = this._bitField;
      var asyncGuaranteed = ((bitField & 134217728) !== 0);
      if (((bitField & 65536) !== 0)) {
          if (isPromise) promise._invokeInternalOnCancel();

          if (receiver instanceof PassThroughHandlerContext &&
              receiver.isFinallyHandler()) {
              receiver.cancelPromise = promise;
              if (tryCatch(handler).call(receiver, value) === errorObj) {
                  promise._reject(errorObj.e);
              }
          } else if (handler === reflectHandler) {
              promise._fulfill(reflectHandler.call(receiver));
          } else if (receiver instanceof Proxyable) {
              receiver._promiseCancelled(promise);
          } else if (isPromise || promise instanceof PromiseArray) {
              promise._cancel();
          } else {
              receiver.cancel();
          }
      } else if (typeof handler === "function") {
          if (!isPromise) {
              handler.call(receiver, value, promise);
          } else {
              if (asyncGuaranteed) promise._setAsyncGuaranteed();
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (receiver instanceof Proxyable) {
          if (!receiver._isResolved()) {
              if (((bitField & 33554432) !== 0)) {
                  receiver._promiseFulfilled(value, promise);
              } else {
                  receiver._promiseRejected(value, promise);
              }
          }
      } else if (isPromise) {
          if (asyncGuaranteed) promise._setAsyncGuaranteed();
          if (((bitField & 33554432) !== 0)) {
              promise._fulfill(value);
          } else {
              promise._reject(value);
          }
      }
  };

  Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
      var handler = ctx.handler;
      var promise = ctx.promise;
      var receiver = ctx.receiver;
      var value = ctx.value;
      if (typeof handler === "function") {
          if (!(promise instanceof Promise)) {
              handler.call(receiver, value, promise);
          } else {
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (promise instanceof Promise) {
          promise._reject(value);
      }
  };

  Promise.prototype._settlePromiseCtx = function(ctx) {
      this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
  };

  Promise.prototype._settlePromise0 = function(handler, value, bitField) {
      var promise = this._promise0;
      var receiver = this._receiverAt(0);
      this._promise0 = undefined;
      this._receiver0 = undefined;
      this._settlePromise(promise, handler, receiver, value);
  };

  Promise.prototype._clearCallbackDataAtIndex = function(index) {
      var base = index * 4 - 4;
      this[base + 2] =
      this[base + 3] =
      this[base + 0] =
      this[base + 1] = undefined;
  };

  Promise.prototype._fulfill = function (value) {
      var bitField = this._bitField;
      if (((bitField & 117506048) >>> 16)) return;
      if (value === this) {
          var err = makeSelfResolutionError();
          this._attachExtraTrace(err);
          return this._reject(err);
      }
      this._setFulfilled();
      this._rejectionHandler0 = value;

      if ((bitField & 65535) > 0) {
          if (((bitField & 134217728) !== 0)) {
              this._settlePromises();
          } else {
              async.settlePromises(this);
          }
      }
  };

  Promise.prototype._reject = function (reason) {
      var bitField = this._bitField;
      if (((bitField & 117506048) >>> 16)) return;
      this._setRejected();
      this._fulfillmentHandler0 = reason;

      if (this._isFinal()) {
          return async.fatalError(reason, util$$1.isNode);
      }

      if ((bitField & 65535) > 0) {
          async.settlePromises(this);
      } else {
          this._ensurePossibleRejectionHandled();
      }
  };

  Promise.prototype._fulfillPromises = function (len, value) {
      for (var i = 1; i < len; i++) {
          var handler = this._fulfillmentHandlerAt(i);
          var promise = this._promiseAt(i);
          var receiver = this._receiverAt(i);
          this._clearCallbackDataAtIndex(i);
          this._settlePromise(promise, handler, receiver, value);
      }
  };

  Promise.prototype._rejectPromises = function (len, reason) {
      for (var i = 1; i < len; i++) {
          var handler = this._rejectionHandlerAt(i);
          var promise = this._promiseAt(i);
          var receiver = this._receiverAt(i);
          this._clearCallbackDataAtIndex(i);
          this._settlePromise(promise, handler, receiver, reason);
      }
  };

  Promise.prototype._settlePromises = function () {
      var bitField = this._bitField;
      var len = (bitField & 65535);

      if (len > 0) {
          if (((bitField & 16842752) !== 0)) {
              var reason = this._fulfillmentHandler0;
              this._settlePromise0(this._rejectionHandler0, reason, bitField);
              this._rejectPromises(len, reason);
          } else {
              var value = this._rejectionHandler0;
              this._settlePromise0(this._fulfillmentHandler0, value, bitField);
              this._fulfillPromises(len, value);
          }
          this._setLength(0);
      }
      this._clearCancellationData();
  };

  Promise.prototype._settledValue = function() {
      var bitField = this._bitField;
      if (((bitField & 33554432) !== 0)) {
          return this._rejectionHandler0;
      } else if (((bitField & 16777216) !== 0)) {
          return this._fulfillmentHandler0;
      }
  };

  function deferResolve(v) {this.promise._resolveCallback(v);}
  function deferReject(v) {this.promise._rejectCallback(v, false);}

  Promise.defer = Promise.pending = function() {
      debug.deprecated("Promise.defer", "new Promise");
      var promise = new Promise(INTERNAL);
      return {
          promise: promise,
          resolve: deferResolve,
          reject: deferReject
      };
  };

  util$$1.notEnumerableProp(Promise,
                         "_makeSelfResolutionError",
                         makeSelfResolutionError);

  method(Promise, INTERNAL, tryConvertToPromise, apiRejection,
      debug);
  bind(Promise, INTERNAL, tryConvertToPromise, debug);
  cancel(Promise, PromiseArray, apiRejection, debug);
  direct_resolve(Promise);
  synchronous_inspection(Promise);
  join(
      Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
  Promise.Promise = Promise;
  Promise.version = "3.5.1";
  map(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
  call_get(Promise);
  using(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
  timers(Promise, INTERNAL, debug);
  generators(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
  nodeify(Promise);
  promisify(Promise, INTERNAL);
  props(Promise, PromiseArray, tryConvertToPromise, apiRejection);
  race(Promise, INTERNAL, tryConvertToPromise, apiRejection);
  reduce(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
  settle(Promise, PromiseArray, debug);
  some(Promise, PromiseArray, apiRejection);
  filter(Promise, INTERNAL);
  each(Promise, INTERNAL);
  any(Promise);
                                                           
      util$$1.toFastProperties(Promise);                                          
      util$$1.toFastProperties(Promise.prototype);                                
      function fillTypes(value) {                                              
          var p = new Promise(INTERNAL);                                       
          p._fulfillmentHandler0 = value;                                      
          p._rejectionHandler0 = value;                                        
          p._promise0 = value;                                                 
          p._receiver0 = value;                                                
      }                                                                        
      // Complete slack tracking, opt out of field-type tracking and           
      // stabilize map                                                         
      fillTypes({a: 1});                                                       
      fillTypes({b: 2});                                                       
      fillTypes({c: 3});                                                       
      fillTypes(1);                                                            
      fillTypes(function(){});                                                 
      fillTypes(undefined);                                                    
      fillTypes(false);                                                        
      fillTypes(new Promise(INTERNAL));                                        
      debug.setBounds(Async.firstLineError, util$$1.lastLineError);               
      return Promise;                                                          

  };
  });

  var old;
  if (typeof Promise !== "undefined") old = Promise;
  function noConflict() {
      try { if (Promise === bluebird) Promise = old; }
      catch (e) {}
      return bluebird;
  }
  var bluebird = promise();
  bluebird.noConflict = noConflict;
  var bluebird_1 = bluebird;

  var _0777 = parseInt('0777', 8);

  var mkdirp$1 = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;

  function mkdirP (p, opts, f, made) {
      if (typeof opts === 'function') {
          f = opts;
          opts = {};
      }
      else if (!opts || typeof opts !== 'object') {
          opts = { mode: opts };
      }
      
      var mode = opts.mode;
      var xfs = opts.fs || fs;
      
      if (mode === undefined) {
          mode = _0777 & (~process.umask());
      }
      if (!made) made = null;
      
      var cb = f || function () {};
      p = path.resolve(p);
      
      xfs.mkdir(p, mode, function (er) {
          if (!er) {
              made = made || p;
              return cb(null, made);
          }
          switch (er.code) {
              case 'ENOENT':
                  mkdirP(path.dirname(p), opts, function (er, made) {
                      if (er) cb(er, made);
                      else mkdirP(p, opts, cb, made);
                  });
                  break;

              // In the case of any other error, just see if there's a dir
              // there already.  If so, then hooray!  If not, then something
              // is borked.
              default:
                  xfs.stat(p, function (er2, stat) {
                      // if the stat fails, then that's super weird.
                      // let the original error be the failure reason.
                      if (er2 || !stat.isDirectory()) cb(er, made);
                      else cb(null, made);
                  });
                  break;
          }
      });
  }

  mkdirP.sync = function sync (p, opts, made) {
      if (!opts || typeof opts !== 'object') {
          opts = { mode: opts };
      }
      
      var mode = opts.mode;
      var xfs = opts.fs || fs;
      
      if (mode === undefined) {
          mode = _0777 & (~process.umask());
      }
      if (!made) made = null;

      p = path.resolve(p);

      try {
          xfs.mkdirSync(p, mode);
          made = made || p;
      }
      catch (err0) {
          switch (err0.code) {
              case 'ENOENT' :
                  made = sync(path.dirname(p), opts, made);
                  sync(p, opts, made);
                  break;

              // In the case of any other error, just see if there's a dir
              // there already.  If so, then hooray!  If not, then something
              // is borked.
              default:
                  var stat;
                  try {
                      stat = xfs.statSync(p);
                  }
                  catch (err1) {
                      throw err0;
                  }
                  if (!stat.isDirectory()) throw err0;
                  break;
          }
      }

      return made;
  };

  var lib$3 = function (dir, opts) {
    return new Promise((resolve, reject) => {
      mkdirp$1(dir, opts, (err, made) => err === null ? resolve(made) : reject(err));
    })
  };

  // the parent class for all fstreams.

  var abstract_1 = Abstract;

  var Stream$1 = require$$0.Stream;


  function Abstract () {
    Stream$1.call(this);
  }

  inherits(Abstract, Stream$1);

  Abstract.prototype.on = function (ev, fn) {
    if (ev === 'ready' && this.ready) {
      process.nextTick(fn.bind(this));
    } else {
      Stream$1.prototype.on.call(this, ev, fn);
    }
    return this
  };

  Abstract.prototype.abort = function () {
    this._aborted = true;
    this.emit('abort');
  };

  Abstract.prototype.destroy = function () {};

  Abstract.prototype.warn = function (msg, code) {
    var self = this;
    var er = decorate(msg, code, self);
    if (!self.listeners('warn')) {
      console.error('%s %s\n' +
      'path = %s\n' +
      'syscall = %s\n' +
      'fstream_type = %s\n' +
      'fstream_path = %s\n' +
      'fstream_unc_path = %s\n' +
      'fstream_class = %s\n' +
      'fstream_stack =\n%s\n',
        code || 'UNKNOWN',
        er.stack,
        er.path,
        er.syscall,
        er.fstream_type,
        er.fstream_path,
        er.fstream_unc_path,
        er.fstream_class,
        er.fstream_stack.join('\n'));
    } else {
      self.emit('warn', er);
    }
  };

  Abstract.prototype.info = function (msg, code) {
    this.emit('info', msg, code);
  };

  Abstract.prototype.error = function (msg, code, th) {
    var er = decorate(msg, code, this);
    if (th) throw er
    else this.emit('error', er);
  };

  function decorate (er, code, self) {
    if (!(er instanceof Error)) er = new Error(er);
    er.code = er.code || code;
    er.path = er.path || self.path;
    er.fstream_type = er.fstream_type || self.type;
    er.fstream_path = er.fstream_path || self.path;
    if (self._path !== self.path) {
      er.fstream_unc_path = er.fstream_unc_path || self._path;
    }
    if (self.linkpath) {
      er.fstream_linkpath = er.fstream_linkpath || self.linkpath;
    }
    er.fstream_class = er.fstream_class || self.constructor.name;
    er.fstream_stack = er.fstream_stack ||
      new Error().stack.split(/\n/).slice(3).map(function (s) {
        return s.replace(/^ {4}at /, '')
      });

    return er
  }

  var getType_1 = getType;

  function getType (st) {
    var types = [
      'Directory',
      'File',
      'SymbolicLink',
      'Link', // special for hardlinks from tarballs
      'BlockDevice',
      'CharacterDevice',
      'FIFO',
      'Socket'
    ];
    var type;

    if (st.type && types.indexOf(st.type) !== -1) {
      st[st.type] = true;
      return st.type
    }

    for (var i = 0, l = types.length; i < l; i++) {
      type = types[i];
      var is = st[type] || st['is' + type];
      if (typeof is === 'function') is = is.call(st);
      if (is) {
        st[type] = true;
        st.type = type;
        return type
      }
    }

    return null
  }

  // Basically just a wrapper around an fs.readlink
  //
  // XXX: Enhance this to support the Link type, by keeping
  // a lookup table of {<dev+inode>:<path>}, so that hardlinks
  // can be preserved in tarballs.

  var linkReader = LinkReader;





  inherits(LinkReader, reader$1);

  function LinkReader (props) {
    var self = this;
    if (!(self instanceof LinkReader)) {
      throw new Error('LinkReader must be called as constructor.')
    }

    if (!((props.type === 'Link' && props.Link) ||
      (props.type === 'SymbolicLink' && props.SymbolicLink))) {
      throw new Error('Non-link type ' + props.type)
    }

    reader$1.call(self, props);
  }

  // When piping a LinkReader into a LinkWriter, we have to
  // already have the linkpath property set, so that has to
  // happen *before* the "ready" event, which means we need to
  // override the _stat method.
  LinkReader.prototype._stat = function (currentStat) {
    var self = this;
    gracefulFs.readlink(self._path, function (er, linkpath) {
      if (er) return self.error(er)
      self.linkpath = self.props.linkpath = linkpath;
      self.emit('linkpath', linkpath);
      reader$1.prototype._stat.call(self, currentStat);
    });
  };

  LinkReader.prototype._read = function () {
    var self = this;
    if (self._paused) return
    // basically just a no-op, since we got all the info we need
    // from the _stat method
    if (!self._ended) {
      self.emit('end');
      self.emit('close');
      self._ended = true;
    }
  };

  // A thing that emits "entry" events with Reader objects
  // Pausing it causes it to stop emitting entry events, and also
  // pauses the current entry if there is one.

  var dirReader = DirReader;





  var assert$11 = assert.ok;

  inherits(DirReader, reader$1);

  function DirReader (props) {
    var self = this;
    if (!(self instanceof DirReader)) {
      throw new Error('DirReader must be called as constructor.')
    }

    // should already be established as a Directory type
    if (props.type !== 'Directory' || !props.Directory) {
      throw new Error('Non-directory type ' + props.type)
    }

    self.entries = null;
    self._index = -1;
    self._paused = false;
    self._length = -1;

    if (props.sort) {
      this.sort = props.sort;
    }

    reader$1.call(this, props);
  }

  DirReader.prototype._getEntries = function () {
    var self = this;

    // race condition.  might pause() before calling _getEntries,
    // and then resume, and try to get them a second time.
    if (self._gotEntries) return
    self._gotEntries = true;

    gracefulFs.readdir(self._path, function (er, entries) {
      if (er) return self.error(er)

      self.entries = entries;

      self.emit('entries', entries);
      if (self._paused) self.once('resume', processEntries);
      else processEntries();

      function processEntries () {
        self._length = self.entries.length;
        if (typeof self.sort === 'function') {
          self.entries = self.entries.sort(self.sort.bind(self));
        }
        self._read();
      }
    });
  };

  // start walking the dir, and emit an "entry" event for each one.
  DirReader.prototype._read = function () {
    var self = this;

    if (!self.entries) return self._getEntries()

    if (self._paused || self._currentEntry || self._aborted) {
      // console.error('DR paused=%j, current=%j, aborted=%j', self._paused, !!self._currentEntry, self._aborted)
      return
    }

    self._index++;
    if (self._index >= self.entries.length) {
      if (!self._ended) {
        self._ended = true;
        self.emit('end');
        self.emit('close');
      }
      return
    }

    // ok, handle this one, then.

    // save creating a proxy, by stat'ing the thing now.
    var p = path.resolve(self._path, self.entries[self._index]);
    assert$11(p !== self._path);
    assert$11(self.entries[self._index]);

    // set this to prevent trying to _read() again in the stat time.
    self._currentEntry = p;
    gracefulFs[ self.props.follow ? 'stat' : 'lstat' ](p, function (er, stat) {
      if (er) return self.error(er)

      var who = self._proxy || self;

      stat.path = p;
      stat.basename = path.basename(p);
      stat.dirname = path.dirname(p);
      var childProps = self.getChildProps.call(who, stat);
      childProps.path = p;
      childProps.basename = path.basename(p);
      childProps.dirname = path.dirname(p);

      var entry = reader$1(childProps, stat);

      // console.error("DR Entry", p, stat.size)

      self._currentEntry = entry;

      // "entry" events are for direct entries in a specific dir.
      // "child" events are for any and all children at all levels.
      // This nomenclature is not completely final.

      entry.on('pause', function (who) {
        if (!self._paused && !entry._disowned) {
          self.pause(who);
        }
      });

      entry.on('resume', function (who) {
        if (self._paused && !entry._disowned) {
          self.resume(who);
        }
      });

      entry.on('stat', function (props) {
        self.emit('_entryStat', entry, props);
        if (entry._aborted) return
        if (entry._paused) {
          entry.once('resume', function () {
            self.emit('entryStat', entry, props);
          });
        } else self.emit('entryStat', entry, props);
      });

      entry.on('ready', function EMITCHILD () {
        // console.error("DR emit child", entry._path)
        if (self._paused) {
          // console.error("  DR emit child - try again later")
          // pause the child, and emit the "entry" event once we drain.
          // console.error("DR pausing child entry")
          entry.pause(self);
          return self.once('resume', EMITCHILD)
        }

        // skip over sockets.  they can't be piped around properly,
        // so there's really no sense even acknowledging them.
        // if someone really wants to see them, they can listen to
        // the "socket" events.
        if (entry.type === 'Socket') {
          self.emit('socket', entry);
        } else {
          self.emitEntry(entry);
        }
      });

      var ended = false;
      entry.on('close', onend);
      entry.on('disown', onend);
      function onend () {
        if (ended) return
        ended = true;
        self.emit('childEnd', entry);
        self.emit('entryEnd', entry);
        self._currentEntry = null;
        if (!self._paused) {
          self._read();
        }
      }

      // XXX Remove this.  Works in node as of 0.6.2 or so.
      // Long filenames should not break stuff.
      entry.on('error', function (er) {
        if (entry._swallowErrors) {
          self.warn(er);
          entry.emit('end');
          entry.emit('close');
        } else {
          self.emit('error', er);
        }
      })

      // proxy up some events.
      ;[
        'child',
        'childEnd',
        'warn'
      ].forEach(function (ev) {
        entry.on(ev, self.emit.bind(self, ev));
      });
    });
  };

  DirReader.prototype.disown = function (entry) {
    entry.emit('beforeDisown');
    entry._disowned = true;
    entry.parent = entry.root = null;
    if (entry === this._currentEntry) {
      this._currentEntry = null;
    }
    entry.emit('disown');
  };

  DirReader.prototype.getChildProps = function () {
    return {
      depth: this.depth + 1,
      root: this.root || this,
      parent: this,
      follow: this.follow,
      filter: this.filter,
      sort: this.props.sort,
      hardlinks: this.props.hardlinks
    }
  };

  DirReader.prototype.pause = function (who) {
    var self = this;
    if (self._paused) return
    who = who || self;
    self._paused = true;
    if (self._currentEntry && self._currentEntry.pause) {
      self._currentEntry.pause(who);
    }
    self.emit('pause', who);
  };

  DirReader.prototype.resume = function (who) {
    var self = this;
    if (!self._paused) return
    who = who || self;

    self._paused = false;
    // console.error('DR Emit Resume', self._path)
    self.emit('resume', who);
    if (self._paused) {
      // console.error('DR Re-paused', self._path)
      return
    }

    if (self._currentEntry) {
      if (self._currentEntry.resume) self._currentEntry.resume(who);
    } else self._read();
  };

  DirReader.prototype.emitEntry = function (entry) {
    this.emit('entry', entry);
    this.emit('child', entry);
  };

  // Basically just a wrapper around an fs.ReadStream

  var fileReader = FileReader$1;




  var EOF = {EOF: true};
  var CLOSE = {CLOSE: true};

  inherits(FileReader$1, reader$1);

  function FileReader$1 (props) {
    // console.error("    FR create", props.path, props.size, new Error().stack)
    var self = this;
    if (!(self instanceof FileReader$1)) {
      throw new Error('FileReader must be called as constructor.')
    }

    // should already be established as a File type
    // XXX Todo: preserve hardlinks by tracking dev+inode+nlink,
    // with a HardLinkReader class.
    if (!((props.type === 'Link' && props.Link) ||
      (props.type === 'File' && props.File))) {
      throw new Error('Non-file type ' + props.type)
    }

    self._buffer = [];
    self._bytesEmitted = 0;
    reader$1.call(self, props);
  }

  FileReader$1.prototype._getStream = function () {
    var self = this;
    var stream = self._stream = gracefulFs.createReadStream(self._path, self.props);

    if (self.props.blksize) {
      stream.bufferSize = self.props.blksize;
    }

    stream.on('open', self.emit.bind(self, 'open'));

    stream.on('data', function (c) {
      // console.error('\t\t%d %s', c.length, self.basename)
      self._bytesEmitted += c.length;
      // no point saving empty chunks
      if (!c.length) {
        return
      } else if (self._paused || self._buffer.length) {
        self._buffer.push(c);
        self._read();
      } else self.emit('data', c);
    });

    stream.on('end', function () {
      if (self._paused || self._buffer.length) {
        // console.error('FR Buffering End', self._path)
        self._buffer.push(EOF);
        self._read();
      } else {
        self.emit('end');
      }

      if (self._bytesEmitted !== self.props.size) {
        self.error("Didn't get expected byte count\n" +
          'expect: ' + self.props.size + '\n' +
          'actual: ' + self._bytesEmitted);
      }
    });

    stream.on('close', function () {
      if (self._paused || self._buffer.length) {
        // console.error('FR Buffering Close', self._path)
        self._buffer.push(CLOSE);
        self._read();
      } else {
        // console.error('FR close 1', self._path)
        self.emit('close');
      }
    });

    stream.on('error', function (e) {
      self.emit('error', e);
    });

    self._read();
  };

  FileReader$1.prototype._read = function () {
    var self = this;
    // console.error('FR _read', self._path)
    if (self._paused) {
      // console.error('FR _read paused', self._path)
      return
    }

    if (!self._stream) {
      // console.error('FR _getStream calling', self._path)
      return self._getStream()
    }

    // clear out the buffer, if there is one.
    if (self._buffer.length) {
      // console.error('FR _read has buffer', self._buffer.length, self._path)
      var buf = self._buffer;
      for (var i = 0, l = buf.length; i < l; i++) {
        var c = buf[i];
        if (c === EOF) {
          // console.error('FR Read emitting buffered end', self._path)
          self.emit('end');
        } else if (c === CLOSE) {
          // console.error('FR Read emitting buffered close', self._path)
          self.emit('close');
        } else {
          // console.error('FR Read emitting buffered data', self._path)
          self.emit('data', c);
        }

        if (self._paused) {
          // console.error('FR Read Re-pausing at '+i, self._path)
          self._buffer = buf.slice(i);
          return
        }
      }
      self._buffer.length = 0;
    }
  // console.error("FR _read done")
  // that's about all there is to it.
  };

  FileReader$1.prototype.pause = function (who) {
    var self = this;
    // console.error('FR Pause', self._path)
    if (self._paused) return
    who = who || self;
    self._paused = true;
    if (self._stream) self._stream.pause();
    self.emit('pause', who);
  };

  FileReader$1.prototype.resume = function (who) {
    var self = this;
    // console.error('FR Resume', self._path)
    if (!self._paused) return
    who = who || self;
    self.emit('resume', who);
    self._paused = false;
    if (self._stream) self._stream.resume();
    self._read();
  };

  // Just get the stats, and then don't do anything.
  // You can't really "read" from a socket.  You "connect" to it.
  // Mostly, this is here so that reading a dir with a socket in it
  // doesn't blow up.

  var socketReader = SocketReader;




  inherits(SocketReader, reader$1);

  function SocketReader (props) {
    var self = this;
    if (!(self instanceof SocketReader)) {
      throw new Error('SocketReader must be called as constructor.')
    }

    if (!(props.type === 'Socket' && props.Socket)) {
      throw new Error('Non-socket type ' + props.type)
    }

    reader$1.call(self, props);
  }

  SocketReader.prototype._read = function () {
    var self = this;
    if (self._paused) return
    // basically just a no-op, since we got all the info we have
    // from the _stat method
    if (!self._ended) {
      self.emit('end');
      self.emit('close');
      self._ended = true;
    }
  };

  // A reader for when we don't yet know what kind of thing
  // the thing is.

  var proxyReader = ProxyReader;






  inherits(ProxyReader, reader$1);

  function ProxyReader (props) {
    var self = this;
    if (!(self instanceof ProxyReader)) {
      throw new Error('ProxyReader must be called as constructor.')
    }

    self.props = props;
    self._buffer = [];
    self.ready = false;

    reader$1.call(self, props);
  }

  ProxyReader.prototype._stat = function () {
    var self = this;
    var props = self.props;
    // stat the thing to see what the proxy should be.
    var stat = props.follow ? 'stat' : 'lstat';

    gracefulFs[stat](props.path, function (er, current) {
      var type;
      if (er || !current) {
        type = 'File';
      } else {
        type = getType_1(current);
      }

      props[type] = true;
      props.type = self.type = type;

      self._old = current;
      self._addProxy(reader$1(props, current));
    });
  };

  ProxyReader.prototype._addProxy = function (proxy) {
    var self = this;
    if (self._proxyTarget) {
      return self.error('proxy already set')
    }

    self._proxyTarget = proxy;
    proxy._proxy = self

    ;[
      'error',
      'data',
      'end',
      'close',
      'linkpath',
      'entry',
      'entryEnd',
      'child',
      'childEnd',
      'warn',
      'stat'
    ].forEach(function (ev) {
      // console.error('~~ proxy event', ev, self.path)
      proxy.on(ev, self.emit.bind(self, ev));
    });

    self.emit('proxy', proxy);

    proxy.on('ready', function () {
      // console.error("~~ proxy is ready!", self.path)
      self.ready = true;
      self.emit('ready');
    });

    var calls = self._buffer;
    self._buffer.length = 0;
    calls.forEach(function (c) {
      proxy[c[0]].apply(proxy, c[1]);
    });
  };

  ProxyReader.prototype.pause = function () {
    return this._proxyTarget ? this._proxyTarget.pause() : false
  };

  ProxyReader.prototype.resume = function () {
    return this._proxyTarget ? this._proxyTarget.resume() : false
  };

  var reader$1 = Reader$1;


  var Stream$2 = require$$0.Stream;



  var hardLinks = Reader$1.hardLinks = {};


  // Must do this *before* loading the child classes
  inherits(Reader$1, abstract_1);



  function Reader$1 (props, currentStat) {
    var self = this;
    if (!(self instanceof Reader$1)) return new Reader$1(props, currentStat)

    if (typeof props === 'string') {
      props = { path: props };
    }

    // polymorphism.
    // call fstream.Reader(dir) to get a DirReader object, etc.
    // Note that, unlike in the Writer case, ProxyReader is going
    // to be the *normal* state of affairs, since we rarely know
    // the type of a file prior to reading it.

    var type;
    var ClassType;

    if (props.type && typeof props.type === 'function') {
      type = props.type;
      ClassType = type;
    } else {
      type = getType_1(props);
      ClassType = Reader$1;
    }

    if (currentStat && !type) {
      type = getType_1(currentStat);
      props[type] = true;
      props.type = type;
    }

    switch (type) {
      case 'Directory':
        ClassType = dirReader;
        break

      case 'Link':
      // XXX hard links are just files.
      // However, it would be good to keep track of files' dev+inode
      // and nlink values, and create a HardLinkReader that emits
      // a linkpath value of the original copy, so that the tar
      // writer can preserve them.
      // ClassType = HardLinkReader
      // break

      case 'File':
        ClassType = fileReader;
        break

      case 'SymbolicLink':
        ClassType = linkReader;
        break

      case 'Socket':
        ClassType = socketReader;
        break

      case null:
        ClassType = proxyReader;
        break
    }

    if (!(self instanceof ClassType)) {
      return new ClassType(props)
    }

    abstract_1.call(self);

    if (!props.path) {
      self.error('Must provide a path', null, true);
    }

    self.readable = true;
    self.writable = false;

    self.type = type;
    self.props = props;
    self.depth = props.depth = props.depth || 0;
    self.parent = props.parent || null;
    self.root = props.root || (props.parent && props.parent.root) || self;

    self._path = self.path = path.resolve(props.path);
    if (process.platform === 'win32') {
      self.path = self._path = self.path.replace(/\?/g, '_');
      if (self._path.length >= 260) {
        // how DOES one create files on the moon?
        // if the path has spaces in it, then UNC will fail.
        self._swallowErrors = true;
        // if (self._path.indexOf(" ") === -1) {
        self._path = '\\\\?\\' + self.path.replace(/\//g, '\\');
      // }
      }
    }
    self.basename = props.basename = path.basename(self.path);
    self.dirname = props.dirname = path.dirname(self.path);

    // these have served their purpose, and are now just noisy clutter
    props.parent = props.root = null;

    // console.error("\n\n\n%s setting size to", props.path, props.size)
    self.size = props.size;
    self.filter = typeof props.filter === 'function' ? props.filter : null;
    if (props.sort === 'alpha') props.sort = alphasort;

    // start the ball rolling.
    // this will stat the thing, and then call self._read()
    // to start reading whatever it is.
    // console.error("calling stat", props.path, currentStat)
    self._stat(currentStat);
  }

  function alphasort (a, b) {
    return a === b ? 0
      : a.toLowerCase() > b.toLowerCase() ? 1
        : a.toLowerCase() < b.toLowerCase() ? -1
          : a > b ? 1
            : -1
  }

  Reader$1.prototype._stat = function (currentStat) {
    var self = this;
    var props = self.props;
    var stat = props.follow ? 'stat' : 'lstat';
    // console.error("Reader._stat", self._path, currentStat)
    if (currentStat) process.nextTick(statCb.bind(null, null, currentStat));
    else gracefulFs[stat](self._path, statCb);

    function statCb (er, props_) {
      // console.error("Reader._stat, statCb", self._path, props_, props_.nlink)
      if (er) return self.error(er)

      Object.keys(props_).forEach(function (k) {
        props[k] = props_[k];
      });

      // if it's not the expected size, then abort here.
      if (undefined !== self.size && props.size !== self.size) {
        return self.error('incorrect size')
      }
      self.size = props.size;

      var type = getType_1(props);
      var handleHardlinks = props.hardlinks !== false;

      // special little thing for handling hardlinks.
      if (handleHardlinks && type !== 'Directory' && props.nlink && props.nlink > 1) {
        var k = props.dev + ':' + props.ino;
        // console.error("Reader has nlink", self._path, k)
        if (hardLinks[k] === self._path || !hardLinks[k]) {
          hardLinks[k] = self._path;
        } else {
          // switch into hardlink mode.
          type = self.type = self.props.type = 'Link';
          self.Link = self.props.Link = true;
          self.linkpath = self.props.linkpath = hardLinks[k];
          // console.error("Hardlink detected, switching mode", self._path, self.linkpath)
          // Setting __proto__ would arguably be the "correct"
          // approach here, but that just seems too wrong.
          self._stat = self._read = linkReader.prototype._read;
        }
      }

      if (self.type && self.type !== type) {
        self.error('Unexpected type: ' + type);
      }

      // if the filter doesn't pass, then just skip over this one.
      // still have to emit end so that dir-walking can move on.
      if (self.filter) {
        var who = self._proxy || self;
        // special handling for ProxyReaders
        if (!self.filter.call(who, who, props)) {
          if (!self._disowned) {
            self.abort();
            self.emit('end');
            self.emit('close');
          }
          return
        }
      }

      // last chance to abort or disown before the flow starts!
      var events$$1 = ['_stat', 'stat', 'ready'];
      var e = 0
      ;(function go () {
        if (self._aborted) {
          self.emit('end');
          self.emit('close');
          return
        }

        if (self._paused && self.type !== 'Directory') {
          self.once('resume', go);
          return
        }

        var ev = events$$1[e++];
        if (!ev) {
          return self._read()
        }
        self.emit(ev, props);
        go();
      })();
    }
  };

  Reader$1.prototype.pipe = function (dest) {
    var self = this;
    if (typeof dest.add === 'function') {
      // piping to a multi-compatible, and we've got directory entries.
      self.on('entry', function (entry) {
        var ret = dest.add(entry);
        if (ret === false) {
          self.pause();
        }
      });
    }

    // console.error("R Pipe apply Stream Pipe")
    return Stream$2.prototype.pipe.apply(this, arguments)
  };

  Reader$1.prototype.pause = function (who) {
    this._paused = true;
    who = who || this;
    this.emit('pause', who);
    if (this._stream) this._stream.pause(who);
  };

  Reader$1.prototype.resume = function (who) {
    this._paused = false;
    who = who || this;
    this.emit('resume', who);
    if (this._stream) this._stream.resume(who);
    this._read();
  };

  Reader$1.prototype._read = function () {
    this.error('Cannot read unknown type: ' + this.type);
  };

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  var isWindows$1 = process.platform === 'win32';


  // JavaScript implementation of realpath, ported from node pre-v6

  var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);

  function rethrow() {
    // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and
    // is fairly slow to generate.
    var callback;
    if (DEBUG) {
      var backtrace = new Error;
      callback = debugCallback;
    } else
      callback = missingCallback;

    return callback;

    function debugCallback(err) {
      if (err) {
        backtrace.message = err.message;
        err = backtrace;
        missingCallback(err);
      }
    }

    function missingCallback(err) {
      if (err) {
        if (process.throwDeprecation)
          throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs
        else if (!process.noDeprecation) {
          var msg = 'fs: missing callback ' + (err.stack || err.message);
          if (process.traceDeprecation)
            console.trace(msg);
          else
            console.error(msg);
        }
      }
    }
  }

  function maybeCallback(cb) {
    return typeof cb === 'function' ? cb : rethrow();
  }

  var normalize = path.normalize;

  // Regexp that finds the next partion of a (partial) path
  // result is [base_with_slash, base], e.g. ['somedir/', 'somedir']
  if (isWindows$1) {
    var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
  } else {
    var nextPartRe = /(.*?)(?:[\/]+|$)/g;
  }

  // Regex to find the device root, including trailing slash. E.g. 'c:\\'.
  if (isWindows$1) {
    var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
  } else {
    var splitRootRe = /^[\/]*/;
  }

  var realpathSync = function realpathSync(p, cache) {
    // make p is absolute
    p = path.resolve(p);

    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
      return cache[p];
    }

    var original = p,
        seenLinks = {},
        knownHard = {};

    // current character position in p
    var pos;
    // the partial path so far, including a trailing slash if any
    var current;
    // the partial path without a trailing slash (except when pointing at a root)
    var base;
    // the partial path scanned in the previous round, with slash
    var previous;

    start();

    function start() {
      // Skip over roots
      var m = splitRootRe.exec(p);
      pos = m[0].length;
      current = m[0];
      base = m[0];
      previous = '';

      // On windows, check that the root exists. On unix there is no need.
      if (isWindows$1 && !knownHard[base]) {
        fs.lstatSync(base);
        knownHard[base] = true;
      }
    }

    // walk down the path, swapping out linked pathparts for their real
    // values
    // NB: p.length changes.
    while (pos < p.length) {
      // find the next part
      nextPartRe.lastIndex = pos;
      var result = nextPartRe.exec(p);
      previous = current;
      current += result[0];
      base = previous + result[1];
      pos = nextPartRe.lastIndex;

      // continue if not a symlink
      if (knownHard[base] || (cache && cache[base] === base)) {
        continue;
      }

      var resolvedLink;
      if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
        // some known symbolic link.  no need to stat again.
        resolvedLink = cache[base];
      } else {
        var stat = fs.lstatSync(base);
        if (!stat.isSymbolicLink()) {
          knownHard[base] = true;
          if (cache) cache[base] = base;
          continue;
        }

        // read the link if it wasn't read before
        // dev/ino always return 0 on windows, so skip the check.
        var linkTarget = null;
        if (!isWindows$1) {
          var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
          if (seenLinks.hasOwnProperty(id)) {
            linkTarget = seenLinks[id];
          }
        }
        if (linkTarget === null) {
          fs.statSync(base);
          linkTarget = fs.readlinkSync(base);
        }
        resolvedLink = path.resolve(previous, linkTarget);
        // track this, if given a cache.
        if (cache) cache[base] = resolvedLink;
        if (!isWindows$1) seenLinks[id] = linkTarget;
      }

      // resolve the link, then start over
      p = path.resolve(resolvedLink, p.slice(pos));
      start();
    }

    if (cache) cache[original] = p;

    return p;
  };


  var realpath = function realpath(p, cache, cb) {
    if (typeof cb !== 'function') {
      cb = maybeCallback(cache);
      cache = null;
    }

    // make p is absolute
    p = path.resolve(p);

    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
      return process.nextTick(cb.bind(null, null, cache[p]));
    }

    var original = p,
        seenLinks = {},
        knownHard = {};

    // current character position in p
    var pos;
    // the partial path so far, including a trailing slash if any
    var current;
    // the partial path without a trailing slash (except when pointing at a root)
    var base;
    // the partial path scanned in the previous round, with slash
    var previous;

    start();

    function start() {
      // Skip over roots
      var m = splitRootRe.exec(p);
      pos = m[0].length;
      current = m[0];
      base = m[0];
      previous = '';

      // On windows, check that the root exists. On unix there is no need.
      if (isWindows$1 && !knownHard[base]) {
        fs.lstat(base, function(err) {
          if (err) return cb(err);
          knownHard[base] = true;
          LOOP();
        });
      } else {
        process.nextTick(LOOP);
      }
    }

    // walk down the path, swapping out linked pathparts for their real
    // values
    function LOOP() {
      // stop if scanned past end of path
      if (pos >= p.length) {
        if (cache) cache[original] = p;
        return cb(null, p);
      }

      // find the next part
      nextPartRe.lastIndex = pos;
      var result = nextPartRe.exec(p);
      previous = current;
      current += result[0];
      base = previous + result[1];
      pos = nextPartRe.lastIndex;

      // continue if not a symlink
      if (knownHard[base] || (cache && cache[base] === base)) {
        return process.nextTick(LOOP);
      }

      if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
        // known symbolic link.  no need to stat again.
        return gotResolvedLink(cache[base]);
      }

      return fs.lstat(base, gotStat);
    }

    function gotStat(err, stat) {
      if (err) return cb(err);

      // if not a symlink, skip to the next path part
      if (!stat.isSymbolicLink()) {
        knownHard[base] = true;
        if (cache) cache[base] = base;
        return process.nextTick(LOOP);
      }

      // stat & read the link if not read before
      // call gotTarget as soon as the link target is known
      // dev/ino always return 0 on windows, so skip the check.
      if (!isWindows$1) {
        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
        if (seenLinks.hasOwnProperty(id)) {
          return gotTarget(null, seenLinks[id], base);
        }
      }
      fs.stat(base, function(err) {
        if (err) return cb(err);

        fs.readlink(base, function(err, target) {
          if (!isWindows$1) seenLinks[id] = target;
          gotTarget(err, target);
        });
      });
    }

    function gotTarget(err, target, base) {
      if (err) return cb(err);

      var resolvedLink = path.resolve(previous, target);
      if (cache) cache[base] = resolvedLink;
      gotResolvedLink(resolvedLink);
    }

    function gotResolvedLink(resolvedLink) {
      // resolve the link, then start over
      p = path.resolve(resolvedLink, p.slice(pos));
      start();
    }
  };

  var old$1 = {
  	realpathSync: realpathSync,
  	realpath: realpath
  };

  var fs_realpath = realpath$1;
  realpath$1.realpath = realpath$1;
  realpath$1.sync = realpathSync$1;
  realpath$1.realpathSync = realpathSync$1;
  realpath$1.monkeypatch = monkeypatch;
  realpath$1.unmonkeypatch = unmonkeypatch;


  var origRealpath = fs.realpath;
  var origRealpathSync = fs.realpathSync;

  var version$2 = process.version;
  var ok = /^v[0-5]\./.test(version$2);


  function newError (er) {
    return er && er.syscall === 'realpath' && (
      er.code === 'ELOOP' ||
      er.code === 'ENOMEM' ||
      er.code === 'ENAMETOOLONG'
    )
  }

  function realpath$1 (p, cache, cb) {
    if (ok) {
      return origRealpath(p, cache, cb)
    }

    if (typeof cache === 'function') {
      cb = cache;
      cache = null;
    }
    origRealpath(p, cache, function (er, result) {
      if (newError(er)) {
        old$1.realpath(p, cache, cb);
      } else {
        cb(er, result);
      }
    });
  }

  function realpathSync$1 (p, cache) {
    if (ok) {
      return origRealpathSync(p, cache)
    }

    try {
      return origRealpathSync(p, cache)
    } catch (er) {
      if (newError(er)) {
        return old$1.realpathSync(p, cache)
      } else {
        throw er
      }
    }
  }

  function monkeypatch () {
    fs.realpath = realpath$1;
    fs.realpathSync = realpathSync$1;
  }

  function unmonkeypatch () {
    fs.realpath = origRealpath;
    fs.realpathSync = origRealpathSync;
  }

  var concatMap = function (xs, fn) {
      var res = [];
      for (var i = 0; i < xs.length; i++) {
          var x = fn(xs[i], i);
          if (isArray(x)) res.push.apply(res, x);
          else res.push(x);
      }
      return res;
  };

  var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
  };

  var balancedMatch = balanced;
  function balanced(a, b, str) {
    if (a instanceof RegExp) a = maybeMatch(a, str);
    if (b instanceof RegExp) b = maybeMatch(b, str);

    var r = range(a, b, str);

    return r && {
      start: r[0],
      end: r[1],
      pre: str.slice(0, r[0]),
      body: str.slice(r[0] + a.length, r[1]),
      post: str.slice(r[1] + b.length)
    };
  }

  function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
  }

  balanced.range = range;
  function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;

    if (ai >= 0 && bi > 0) {
      begs = [];
      left = str.length;

      while (i >= 0 && !result) {
        if (i == ai) {
          begs.push(i);
          ai = str.indexOf(a, i + 1);
        } else if (begs.length == 1) {
          result = [ begs.pop(), bi ];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }

          bi = str.indexOf(b, i + 1);
        }

        i = ai < bi && ai >= 0 ? ai : bi;
      }

      if (begs.length) {
        result = [ left, right ];
      }
    }

    return result;
  }

  var braceExpansion = expandTop;

  var escSlash = '\0SLASH'+Math.random()+'\0';
  var escOpen = '\0OPEN'+Math.random()+'\0';
  var escClose = '\0CLOSE'+Math.random()+'\0';
  var escComma = '\0COMMA'+Math.random()+'\0';
  var escPeriod = '\0PERIOD'+Math.random()+'\0';

  function numeric(str) {
    return parseInt(str, 10) == str
      ? parseInt(str, 10)
      : str.charCodeAt(0);
  }

  function escapeBraces(str) {
    return str.split('\\\\').join(escSlash)
              .split('\\{').join(escOpen)
              .split('\\}').join(escClose)
              .split('\\,').join(escComma)
              .split('\\.').join(escPeriod);
  }

  function unescapeBraces(str) {
    return str.split(escSlash).join('\\')
              .split(escOpen).join('{')
              .split(escClose).join('}')
              .split(escComma).join(',')
              .split(escPeriod).join('.');
  }


  // Basically just str.split(","), but handling cases
  // where we have nested braced sections, which should be
  // treated as individual members, like {a,{b,c},d}
  function parseCommaParts(str) {
    if (!str)
      return [''];

    var parts = [];
    var m = balancedMatch('{', '}', str);

    if (!m)
      return str.split(',');

    var pre = m.pre;
    var body = m.body;
    var post = m.post;
    var p = pre.split(',');

    p[p.length-1] += '{' + body + '}';
    var postParts = parseCommaParts(post);
    if (post.length) {
      p[p.length-1] += postParts.shift();
      p.push.apply(p, postParts);
    }

    parts.push.apply(parts, p);

    return parts;
  }

  function expandTop(str) {
    if (!str)
      return [];

    // I don't know why Bash 4.3 does this, but it does.
    // Anything starting with {} will have the first two bytes preserved
    // but *only* at the top level, so {},a}b will not expand to anything,
    // but a{},b}c will be expanded to [a}c,abc].
    // One could argue that this is a bug in Bash, but since the goal of
    // this module is to match Bash's rules, we escape a leading {}
    if (str.substr(0, 2) === '{}') {
      str = '\\{\\}' + str.substr(2);
    }

    return expand(escapeBraces(str), true).map(unescapeBraces);
  }

  function embrace(str) {
    return '{' + str + '}';
  }
  function isPadded(el) {
    return /^-?0\d/.test(el);
  }

  function lte(i, y) {
    return i <= y;
  }
  function gte(i, y) {
    return i >= y;
  }

  function expand(str, isTop) {
    var expansions = [];

    var m = balancedMatch('{', '}', str);
    if (!m || /\$$/.test(m.pre)) return [str];

    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = m.body.indexOf(',') >= 0;
    if (!isSequence && !isOptions) {
      // {a},b}
      if (m.post.match(/,.*\}/)) {
        str = m.pre + '{' + m.body + escClose + m.post;
        return expand(str);
      }
      return [str];
    }

    var n;
    if (isSequence) {
      n = m.body.split(/\.\./);
    } else {
      n = parseCommaParts(m.body);
      if (n.length === 1) {
        // x{{a,b}}y ==> x{a}y x{b}y
        n = expand(n[0], false).map(embrace);
        if (n.length === 1) {
          var post = m.post.length
            ? expand(m.post, false)
            : [''];
          return post.map(function(p) {
            return m.pre + n[0] + p;
          });
        }
      }
    }

    // at this point, n is the parts, and we know it's not a comma set
    // with a single entry.

    // no need to expand pre, since it is guaranteed to be free of brace-sets
    var pre = m.pre;
    var post = m.post.length
      ? expand(m.post, false)
      : [''];

    var N;

    if (isSequence) {
      var x = numeric(n[0]);
      var y = numeric(n[1]);
      var width = Math.max(n[0].length, n[1].length);
      var incr = n.length == 3
        ? Math.abs(numeric(n[2]))
        : 1;
      var test = lte;
      var reverse = y < x;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad = n.some(isPadded);

      N = [];

      for (var i = x; test(i, y); i += incr) {
        var c;
        if (isAlphaSequence) {
          c = String.fromCharCode(i);
          if (c === '\\')
            c = '';
        } else {
          c = String(i);
          if (pad) {
            var need = width - c.length;
            if (need > 0) {
              var z = new Array(need + 1).join('0');
              if (i < 0)
                c = '-' + z + c.slice(1);
              else
                c = z + c;
            }
          }
        }
        N.push(c);
      }
    } else {
      N = concatMap(n, function(el) { return expand(el, false) });
    }

    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }

    return expansions;
  }

  var minimatch_1 = minimatch;
  minimatch.Minimatch = Minimatch;

  var path$1 = { sep: '/' };
  try {
    path$1 = path;
  } catch (er) {}

  var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};


  var plTypes = {
    '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
    '?': { open: '(?:', close: ')?' },
    '+': { open: '(?:', close: ')+' },
    '*': { open: '(?:', close: ')*' },
    '@': { open: '(?:', close: ')' }
  };

  // any single thing other than /
  // don't need to escape / when using new RegExp()
  var qmark = '[^/]';

  // * => any number of characters
  var star = qmark + '*?';

  // ** when dots are allowed.  Anything goes, except .. and .
  // not (^ or / followed by one or two dots followed by $ or /),
  // followed by anything, any number of times.
  var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?';

  // not a ^ or / followed by a dot,
  // followed by anything, any number of times.
  var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?';

  // characters that need to be escaped in RegExp.
  var reSpecials = charSet('().*{}+?[]^$\\!');

  // "abc" -> { a:true, b:true, c:true }
  function charSet (s) {
    return s.split('').reduce(function (set, c) {
      set[c] = true;
      return set
    }, {})
  }

  // normalizes slashes.
  var slashSplit = /\/+/;

  minimatch.filter = filter$1;
  function filter$1 (pattern, options) {
    options = options || {};
    return function (p, i, list) {
      return minimatch(p, pattern, options)
    }
  }

  function ext (a, b) {
    a = a || {};
    b = b || {};
    var t = {};
    Object.keys(b).forEach(function (k) {
      t[k] = b[k];
    });
    Object.keys(a).forEach(function (k) {
      t[k] = a[k];
    });
    return t
  }

  minimatch.defaults = function (def) {
    if (!def || !Object.keys(def).length) return minimatch

    var orig = minimatch;

    var m = function minimatch (p, pattern, options) {
      return orig.minimatch(p, pattern, ext(def, options))
    };

    m.Minimatch = function Minimatch (pattern, options) {
      return new orig.Minimatch(pattern, ext(def, options))
    };

    return m
  };

  Minimatch.defaults = function (def) {
    if (!def || !Object.keys(def).length) return Minimatch
    return minimatch.defaults(def).Minimatch
  };

  function minimatch (p, pattern, options) {
    if (typeof pattern !== 'string') {
      throw new TypeError('glob pattern string required')
    }

    if (!options) options = {};

    // shortcut: comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === '#') {
      return false
    }

    // "" only matches ""
    if (pattern.trim() === '') return p === ''

    return new Minimatch(pattern, options).match(p)
  }

  function Minimatch (pattern, options) {
    if (!(this instanceof Minimatch)) {
      return new Minimatch(pattern, options)
    }

    if (typeof pattern !== 'string') {
      throw new TypeError('glob pattern string required')
    }

    if (!options) options = {};
    pattern = pattern.trim();

    // windows support: need to use /, not \
    if (path$1.sep !== '/') {
      pattern = pattern.split(path$1.sep).join('/');
    }

    this.options = options;
    this.set = [];
    this.pattern = pattern;
    this.regexp = null;
    this.negate = false;
    this.comment = false;
    this.empty = false;

    // make the set of regexps etc.
    this.make();
  }

  Minimatch.prototype.debug = function () {};

  Minimatch.prototype.make = make;
  function make () {
    // don't do it more than once.
    if (this._made) return

    var pattern = this.pattern;
    var options = this.options;

    // empty patterns and comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === '#') {
      this.comment = true;
      return
    }
    if (!pattern) {
      this.empty = true;
      return
    }

    // step 1: figure out negation, etc.
    this.parseNegate();

    // step 2: expand braces
    var set = this.globSet = this.braceExpand();

    if (options.debug) this.debug = console.error;

    this.debug(this.pattern, set);

    // step 3: now we have a set, so turn each one into a series of path-portion
    // matching patterns.
    // These will be regexps, except in the case of "**", which is
    // set to the GLOBSTAR object for globstar behavior,
    // and will not contain any / characters
    set = this.globParts = set.map(function (s) {
      return s.split(slashSplit)
    });

    this.debug(this.pattern, set);

    // glob --> regexps
    set = set.map(function (s, si, set) {
      return s.map(this.parse, this)
    }, this);

    this.debug(this.pattern, set);

    // filter out everything that didn't compile properly.
    set = set.filter(function (s) {
      return s.indexOf(false) === -1
    });

    this.debug(this.pattern, set);

    this.set = set;
  }

  Minimatch.prototype.parseNegate = parseNegate;
  function parseNegate () {
    var pattern = this.pattern;
    var negate = false;
    var options = this.options;
    var negateOffset = 0;

    if (options.nonegate) return

    for (var i = 0, l = pattern.length
      ; i < l && pattern.charAt(i) === '!'
      ; i++) {
      negate = !negate;
      negateOffset++;
    }

    if (negateOffset) this.pattern = pattern.substr(negateOffset);
    this.negate = negate;
  }

  // Brace expansion:
  // a{b,c}d -> abd acd
  // a{b,}c -> abc ac
  // a{0..3}d -> a0d a1d a2d a3d
  // a{b,c{d,e}f}g -> abg acdfg acefg
  // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
  //
  // Invalid sets are not expanded.
  // a{2..}b -> a{2..}b
  // a{b}c -> a{b}c
  minimatch.braceExpand = function (pattern, options) {
    return braceExpand(pattern, options)
  };

  Minimatch.prototype.braceExpand = braceExpand;

  function braceExpand (pattern, options) {
    if (!options) {
      if (this instanceof Minimatch) {
        options = this.options;
      } else {
        options = {};
      }
    }

    pattern = typeof pattern === 'undefined'
      ? this.pattern : pattern;

    if (typeof pattern === 'undefined') {
      throw new TypeError('undefined pattern')
    }

    if (options.nobrace ||
      !pattern.match(/\{.*\}/)) {
      // shortcut. no need to expand.
      return [pattern]
    }

    return braceExpansion(pattern)
  }

  // parse a component of the expanded set.
  // At this point, no pattern may contain "/" in it
  // so we're going to return a 2d array, where each entry is the full
  // pattern, split on '/', and then turned into a regular expression.
  // A regexp is made at the end which joins each array with an
  // escaped /, and another full one which joins each regexp with |.
  //
  // Following the lead of Bash 4.1, note that "**" only has special meaning
  // when it is the *only* thing in a path portion.  Otherwise, any series
  // of * is equivalent to a single *.  Globstar behavior is enabled by
  // default, and can be disabled by setting options.noglobstar.
  Minimatch.prototype.parse = parse$1;
  var SUBPARSE = {};
  function parse$1 (pattern, isSub) {
    if (pattern.length > 1024 * 64) {
      throw new TypeError('pattern is too long')
    }

    var options = this.options;

    // shortcuts
    if (!options.noglobstar && pattern === '**') return GLOBSTAR
    if (pattern === '') return ''

    var re = '';
    var hasMagic = !!options.nocase;
    var escaping = false;
    // ? => one single character
    var patternListStack = [];
    var negativeLists = [];
    var stateChar;
    var inClass = false;
    var reClassStart = -1;
    var classStart = -1;
    // . and .. never match anything that doesn't start with .,
    // even when options.dot is set.
    var patternStart = pattern.charAt(0) === '.' ? '' // anything
    // not (start or / followed by . or .. followed by / or end)
    : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
    : '(?!\\.)';
    var self = this;

    function clearStateChar () {
      if (stateChar) {
        // we had some state-tracking character
        // that wasn't consumed by this pass.
        switch (stateChar) {
          case '*':
            re += star;
            hasMagic = true;
          break
          case '?':
            re += qmark;
            hasMagic = true;
          break
          default:
            re += '\\' + stateChar;
          break
        }
        self.debug('clearStateChar %j %j', stateChar, re);
        stateChar = false;
      }
    }

    for (var i = 0, len = pattern.length, c
      ; (i < len) && (c = pattern.charAt(i))
      ; i++) {
      this.debug('%s\t%s %s %j', pattern, i, re, c);

      // skip over any that are escaped.
      if (escaping && reSpecials[c]) {
        re += '\\' + c;
        escaping = false;
        continue
      }

      switch (c) {
        case '/':
          // completely not allowed, even escaped.
          // Should already be path-split by now.
          return false

        case '\\':
          clearStateChar();
          escaping = true;
        continue

        // the various stateChar values
        // for the "extglob" stuff.
        case '?':
        case '*':
        case '+':
        case '@':
        case '!':
          this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c);

          // all of those are literals inside a class, except that
          // the glob [!a] means [^a] in regexp
          if (inClass) {
            this.debug('  in class');
            if (c === '!' && i === classStart + 1) c = '^';
            re += c;
            continue
          }

          // if we already have a stateChar, then it means
          // that there was something like ** or +? in there.
          // Handle the stateChar, then proceed with this one.
          self.debug('call clearStateChar %j', stateChar);
          clearStateChar();
          stateChar = c;
          // if extglob is disabled, then +(asdf|foo) isn't a thing.
          // just clear the statechar *now*, rather than even diving into
          // the patternList stuff.
          if (options.noext) clearStateChar();
        continue

        case '(':
          if (inClass) {
            re += '(';
            continue
          }

          if (!stateChar) {
            re += '\\(';
            continue
          }

          patternListStack.push({
            type: stateChar,
            start: i - 1,
            reStart: re.length,
            open: plTypes[stateChar].open,
            close: plTypes[stateChar].close
          });
          // negation is (?:(?!js)[^/]*)
          re += stateChar === '!' ? '(?:(?!(?:' : '(?:';
          this.debug('plType %j %j', stateChar, re);
          stateChar = false;
        continue

        case ')':
          if (inClass || !patternListStack.length) {
            re += '\\)';
            continue
          }

          clearStateChar();
          hasMagic = true;
          var pl = patternListStack.pop();
          // negation is (?:(?!js)[^/]*)
          // The others are (?:<pattern>)<type>
          re += pl.close;
          if (pl.type === '!') {
            negativeLists.push(pl);
          }
          pl.reEnd = re.length;
        continue

        case '|':
          if (inClass || !patternListStack.length || escaping) {
            re += '\\|';
            escaping = false;
            continue
          }

          clearStateChar();
          re += '|';
        continue

        // these are mostly the same in regexp and glob
        case '[':
          // swallow any state-tracking char before the [
          clearStateChar();

          if (inClass) {
            re += '\\' + c;
            continue
          }

          inClass = true;
          classStart = i;
          reClassStart = re.length;
          re += c;
        continue

        case ']':
          //  a right bracket shall lose its special
          //  meaning and represent itself in
          //  a bracket expression if it occurs
          //  first in the list.  -- POSIX.2 2.8.3.2
          if (i === classStart + 1 || !inClass) {
            re += '\\' + c;
            escaping = false;
            continue
          }

          // handle the case where we left a class open.
          // "[z-a]" is valid, equivalent to "\[z-a\]"
          if (inClass) {
            // split where the last [ was, make sure we don't have
            // an invalid re. if so, re-walk the contents of the
            // would-be class to re-translate any characters that
            // were passed through as-is
            // TODO: It would probably be faster to determine this
            // without a try/catch and a new RegExp, but it's tricky
            // to do safely.  For now, this is safe and works.
            var cs = pattern.substring(classStart + 1, i);
            try {
            } catch (er) {
              // not a valid class!
              var sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]';
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue
            }
          }

          // finish up the class.
          hasMagic = true;
          inClass = false;
          re += c;
        continue

        default:
          // swallow any state char that wasn't consumed
          clearStateChar();

          if (escaping) {
            // no need
            escaping = false;
          } else if (reSpecials[c]
            && !(c === '^' && inClass)) {
            re += '\\';
          }

          re += c;

      } // switch
    } // for

    // handle the case where we left a class open.
    // "[abc" is valid, equivalent to "\[abc"
    if (inClass) {
      // split where the last [ was, and escape it
      // this is a huge pita.  We now have to re-walk
      // the contents of the would-be class to re-translate
      // any characters that were passed through as-is
      cs = pattern.substr(classStart + 1);
      sp = this.parse(cs, SUBPARSE);
      re = re.substr(0, reClassStart) + '\\[' + sp[0];
      hasMagic = hasMagic || sp[1];
    }

    // handle the case where we had a +( thing at the *end*
    // of the pattern.
    // each pattern list stack adds 3 chars, and we need to go through
    // and escape any | chars that were passed through as-is for the regexp.
    // Go through and escape them, taking care not to double-escape any
    // | chars that were already escaped.
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
      var tail = re.slice(pl.reStart + pl.open.length);
      this.debug('setting tail', re, pl);
      // maybe some even number of \, then maybe 1 \, followed by a |
      tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
        if (!$2) {
          // the | isn't already escaped, so escape it.
          $2 = '\\';
        }

        // need to escape all those slashes *again*, without escaping the
        // one that we need for escaping the | character.  As it works out,
        // escaping an even number of slashes can be done by simply repeating
        // it exactly after itself.  That's why this trick works.
        //
        // I am sorry that you have to see this.
        return $1 + $1 + $2 + '|'
      });

      this.debug('tail=%j\n   %s', tail, tail, pl, re);
      var t = pl.type === '*' ? star
        : pl.type === '?' ? qmark
        : '\\' + pl.type;

      hasMagic = true;
      re = re.slice(0, pl.reStart) + t + '\\(' + tail;
    }

    // handle trailing things that only matter at the very end.
    clearStateChar();
    if (escaping) {
      // trailing \\
      re += '\\\\';
    }

    // only need to apply the nodot start if the re starts with
    // something that could conceivably capture a dot
    var addPatternStart = false;
    switch (re.charAt(0)) {
      case '.':
      case '[':
      case '(': addPatternStart = true;
    }

    // Hack to work around lack of negative lookbehind in JS
    // A pattern like: *.!(x).!(y|z) needs to ensure that a name
    // like 'a.xyz.yz' doesn't match.  So, the first negative
    // lookahead, has to look ALL the way ahead, to the end of
    // the pattern.
    for (var n = negativeLists.length - 1; n > -1; n--) {
      var nl = negativeLists[n];

      var nlBefore = re.slice(0, nl.reStart);
      var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
      var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
      var nlAfter = re.slice(nl.reEnd);

      nlLast += nlAfter;

      // Handle nested stuff like *(*.js|!(*.json)), where open parens
      // mean that we should *not* include the ) in the bit that is considered
      // "after" the negated section.
      var openParensBefore = nlBefore.split('(').length - 1;
      var cleanAfter = nlAfter;
      for (i = 0; i < openParensBefore; i++) {
        cleanAfter = cleanAfter.replace(/\)[+*?]?/, '');
      }
      nlAfter = cleanAfter;

      var dollar = '';
      if (nlAfter === '' && isSub !== SUBPARSE) {
        dollar = '$';
      }
      var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
      re = newRe;
    }

    // if the re is not "" at this point, then we need to make sure
    // it doesn't match against an empty path part.
    // Otherwise a/* will match a/, which it should not.
    if (re !== '' && hasMagic) {
      re = '(?=.)' + re;
    }

    if (addPatternStart) {
      re = patternStart + re;
    }

    // parsing just a piece of a larger pattern.
    if (isSub === SUBPARSE) {
      return [re, hasMagic]
    }

    // skip the regexp for non-magical patterns
    // unescape anything in it, though, so that it'll be
    // an exact match against a file etc.
    if (!hasMagic) {
      return globUnescape(pattern)
    }

    var flags = options.nocase ? 'i' : '';
    try {
      var regExp = new RegExp('^' + re + '$', flags);
    } catch (er) {
      // If it was an invalid regular expression, then it can't match
      // anything.  This trick looks for a character after the end of
      // the string, which is of course impossible, except in multi-line
      // mode, but it's not a /m regex.
      return new RegExp('$.')
    }

    regExp._glob = pattern;
    regExp._src = re;

    return regExp
  }

  minimatch.makeRe = function (pattern, options) {
    return new Minimatch(pattern, options || {}).makeRe()
  };

  Minimatch.prototype.makeRe = makeRe;
  function makeRe () {
    if (this.regexp || this.regexp === false) return this.regexp

    // at this point, this.set is a 2d array of partial
    // pattern strings, or "**".
    //
    // It's better to use .match().  This function shouldn't
    // be used, really, but it's pretty convenient sometimes,
    // when you just want to work with a regex.
    var set = this.set;

    if (!set.length) {
      this.regexp = false;
      return this.regexp
    }
    var options = this.options;

    var twoStar = options.noglobstar ? star
      : options.dot ? twoStarDot
      : twoStarNoDot;
    var flags = options.nocase ? 'i' : '';

    var re = set.map(function (pattern) {
      return pattern.map(function (p) {
        return (p === GLOBSTAR) ? twoStar
        : (typeof p === 'string') ? regExpEscape(p)
        : p._src
      }).join('\\\/')
    }).join('|');

    // must match entire pattern
    // ending in a * or ** will make it less strict.
    re = '^(?:' + re + ')$';

    // can match anything, as long as it's not this.
    if (this.negate) re = '^(?!' + re + ').*$';

    try {
      this.regexp = new RegExp(re, flags);
    } catch (ex) {
      this.regexp = false;
    }
    return this.regexp
  }

  minimatch.match = function (list, pattern, options) {
    options = options || {};
    var mm = new Minimatch(pattern, options);
    list = list.filter(function (f) {
      return mm.match(f)
    });
    if (mm.options.nonull && !list.length) {
      list.push(pattern);
    }
    return list
  };

  Minimatch.prototype.match = match;
  function match (f, partial) {
    this.debug('match', f, this.pattern);
    // short-circuit in the case of busted things.
    // comments, etc.
    if (this.comment) return false
    if (this.empty) return f === ''

    if (f === '/' && partial) return true

    var options = this.options;

    // windows: need to use /, not \
    if (path$1.sep !== '/') {
      f = f.split(path$1.sep).join('/');
    }

    // treat the test path as a set of pathparts.
    f = f.split(slashSplit);
    this.debug(this.pattern, 'split', f);

    // just ONE of the pattern sets in this.set needs to match
    // in order for it to be valid.  If negating, then just one
    // match means that we have failed.
    // Either way, return on the first hit.

    var set = this.set;
    this.debug(this.pattern, 'set', set);

    // Find the basename of the path by looking for the last non-empty segment
    var filename;
    var i;
    for (i = f.length - 1; i >= 0; i--) {
      filename = f[i];
      if (filename) break
    }

    for (i = 0; i < set.length; i++) {
      var pattern = set[i];
      var file = f;
      if (options.matchBase && pattern.length === 1) {
        file = [filename];
      }
      var hit = this.matchOne(file, pattern, partial);
      if (hit) {
        if (options.flipNegate) return true
        return !this.negate
      }
    }

    // didn't get any hits.  this is success if it's a negative
    // pattern, failure otherwise.
    if (options.flipNegate) return false
    return this.negate
  }

  // set partial to true to test if, for example,
  // "/a/b" matches the start of "/*/b/*/d"
  // Partial means, if you run out of file before you run
  // out of pattern, then that's fine, as long as all
  // the parts match.
  Minimatch.prototype.matchOne = function (file, pattern, partial) {
    var options = this.options;

    this.debug('matchOne',
      { 'this': this, file: file, pattern: pattern });

    this.debug('matchOne', file.length, pattern.length);

    for (var fi = 0,
        pi = 0,
        fl = file.length,
        pl = pattern.length
        ; (fi < fl) && (pi < pl)
        ; fi++, pi++) {
      this.debug('matchOne loop');
      var p = pattern[pi];
      var f = file[fi];

      this.debug(pattern, p, f);

      // should be impossible.
      // some invalid regexp stuff in the set.
      if (p === false) return false

      if (p === GLOBSTAR) {
        this.debug('GLOBSTAR', [pattern, p, f]);

        // "**"
        // a/**/b/**/c would match the following:
        // a/b/x/y/z/c
        // a/x/y/z/b/c
        // a/b/x/b/x/c
        // a/b/c
        // To do this, take the rest of the pattern after
        // the **, and see if it would match the file remainder.
        // If so, return success.
        // If not, the ** "swallows" a segment, and try again.
        // This is recursively awful.
        //
        // a/**/b/**/c matching a/b/x/y/z/c
        // - a matches a
        // - doublestar
        //   - matchOne(b/x/y/z/c, b/**/c)
        //     - b matches b
        //     - doublestar
        //       - matchOne(x/y/z/c, c) -> no
        //       - matchOne(y/z/c, c) -> no
        //       - matchOne(z/c, c) -> no
        //       - matchOne(c, c) yes, hit
        var fr = fi;
        var pr = pi + 1;
        if (pr === pl) {
          this.debug('** at the end');
          // a ** at the end will just swallow the rest.
          // We have found a match.
          // however, it will not swallow /.x, unless
          // options.dot is set.
          // . and .. are *never* matched by **, for explosively
          // exponential reasons.
          for (; fi < fl; fi++) {
            if (file[fi] === '.' || file[fi] === '..' ||
              (!options.dot && file[fi].charAt(0) === '.')) return false
          }
          return true
        }

        // ok, let's see if we can swallow whatever we can.
        while (fr < fl) {
          var swallowee = file[fr];

          this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);

          // XXX remove this slice.  Just pass the start index.
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug('globstar found match!', fr, fl, swallowee);
            // found a match.
            return true
          } else {
            // can't swallow "." or ".." ever.
            // can only swallow ".foo" when explicitly asked.
            if (swallowee === '.' || swallowee === '..' ||
              (!options.dot && swallowee.charAt(0) === '.')) {
              this.debug('dot detected!', file, fr, pattern, pr);
              break
            }

            // ** swallows a segment, and continue.
            this.debug('globstar swallow a segment, and continue');
            fr++;
          }
        }

        // no match was found.
        // However, in partial mode, we can't say this is necessarily over.
        // If there's more *pattern* left, then
        if (partial) {
          // ran out of file
          this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
          if (fr === fl) return true
        }
        return false
      }

      // something other than **
      // non-magic patterns just have to match exactly
      // patterns with magic have been turned into regexps.
      var hit;
      if (typeof p === 'string') {
        if (options.nocase) {
          hit = f.toLowerCase() === p.toLowerCase();
        } else {
          hit = f === p;
        }
        this.debug('string match', p, f, hit);
      } else {
        hit = f.match(p);
        this.debug('pattern match', p, f, hit);
      }

      if (!hit) return false
    }

    // Note: ending in / means that we'll get a final ""
    // at the end of the pattern.  This can only match a
    // corresponding "" at the end of the file.
    // If the file ends in /, then it can only match a
    // a pattern that ends in /, unless the pattern just
    // doesn't have any more for it. But, a/b/ should *not*
    // match "a/b/*", even though "" matches against the
    // [^/]*? pattern, except in partial mode, where it might
    // simply not be reached yet.
    // However, a/b/ should still satisfy a/*

    // now either we fell off the end of the pattern, or we're done.
    if (fi === fl && pi === pl) {
      // ran out of pattern and filename at the same time.
      // an exact hit!
      return true
    } else if (fi === fl) {
      // ran out of file, but still had pattern left.
      // this is ok if we're doing the match as part of
      // a glob fs traversal.
      return partial
    } else if (pi === pl) {
      // ran out of pattern, still have file left.
      // this is only acceptable if we're on the very last
      // empty segment of a file with a trailing slash.
      // a/* should match a/b/
      var emptyFileEnd = (fi === fl - 1) && (file[fi] === '');
      return emptyFileEnd
    }

    // should be unreachable.
    throw new Error('wtf?')
  };

  // replace stuff like \* with *
  function globUnescape (s) {
    return s.replace(/\\(.)/g, '$1')
  }

  function regExpEscape (s) {
    return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  }

  function posix(path$$1) {
  	return path$$1.charAt(0) === '/';
  }

  function win32$1(path$$1) {
  	// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
  	var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
  	var result = splitDeviceRe.exec(path$$1);
  	var device = result[1] || '';
  	var isUnc = Boolean(device && device.charAt(1) !== ':');

  	// UNC paths are always absolute
  	return Boolean(result[2] || isUnc);
  }

  var pathIsAbsolute = process.platform === 'win32' ? win32$1 : posix;
  var posix_1 = posix;
  var win32_1$1 = win32$1;
  pathIsAbsolute.posix = posix_1;
  pathIsAbsolute.win32 = win32_1$1;

  var alphasort_1 = alphasort$1;
  var alphasorti_1 = alphasorti;
  var setopts_1 = setopts;
  var ownProp_1 = ownProp;
  var makeAbs_1 = makeAbs;
  var finish_1 = finish;
  var mark_1 = mark;
  var isIgnored_1 = isIgnored;
  var childrenIgnored_1 = childrenIgnored;

  function ownProp (obj, field) {
    return Object.prototype.hasOwnProperty.call(obj, field)
  }




  var Minimatch$1 = minimatch_1.Minimatch;

  function alphasorti (a, b) {
    return a.toLowerCase().localeCompare(b.toLowerCase())
  }

  function alphasort$1 (a, b) {
    return a.localeCompare(b)
  }

  function setupIgnores (self, options) {
    self.ignore = options.ignore || [];

    if (!Array.isArray(self.ignore))
      self.ignore = [self.ignore];

    if (self.ignore.length) {
      self.ignore = self.ignore.map(ignoreMap);
    }
  }

  // ignore patterns are always in dot:true mode.
  function ignoreMap (pattern) {
    var gmatcher = null;
    if (pattern.slice(-3) === '/**') {
      var gpattern = pattern.replace(/(\/\*\*)+$/, '');
      gmatcher = new Minimatch$1(gpattern, { dot: true });
    }

    return {
      matcher: new Minimatch$1(pattern, { dot: true }),
      gmatcher: gmatcher
    }
  }

  function setopts (self, pattern, options) {
    if (!options)
      options = {};

    // base-matching: just use globstar for that.
    if (options.matchBase && -1 === pattern.indexOf("/")) {
      if (options.noglobstar) {
        throw new Error("base matching requires globstar")
      }
      pattern = "**/" + pattern;
    }

    self.silent = !!options.silent;
    self.pattern = pattern;
    self.strict = options.strict !== false;
    self.realpath = !!options.realpath;
    self.realpathCache = options.realpathCache || Object.create(null);
    self.follow = !!options.follow;
    self.dot = !!options.dot;
    self.mark = !!options.mark;
    self.nodir = !!options.nodir;
    if (self.nodir)
      self.mark = true;
    self.sync = !!options.sync;
    self.nounique = !!options.nounique;
    self.nonull = !!options.nonull;
    self.nosort = !!options.nosort;
    self.nocase = !!options.nocase;
    self.stat = !!options.stat;
    self.noprocess = !!options.noprocess;
    self.absolute = !!options.absolute;

    self.maxLength = options.maxLength || Infinity;
    self.cache = options.cache || Object.create(null);
    self.statCache = options.statCache || Object.create(null);
    self.symlinks = options.symlinks || Object.create(null);

    setupIgnores(self, options);

    self.changedCwd = false;
    var cwd = process.cwd();
    if (!ownProp(options, "cwd"))
      self.cwd = cwd;
    else {
      self.cwd = path.resolve(options.cwd);
      self.changedCwd = self.cwd !== cwd;
    }

    self.root = options.root || path.resolve(self.cwd, "/");
    self.root = path.resolve(self.root);
    if (process.platform === "win32")
      self.root = self.root.replace(/\\/g, "/");

    // TODO: is an absolute `cwd` supposed to be resolved against `root`?
    // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')
    self.cwdAbs = pathIsAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd);
    if (process.platform === "win32")
      self.cwdAbs = self.cwdAbs.replace(/\\/g, "/");
    self.nomount = !!options.nomount;

    // disable comments and negation in Minimatch.
    // Note that they are not supported in Glob itself anyway.
    options.nonegate = true;
    options.nocomment = true;

    self.minimatch = new Minimatch$1(pattern, options);
    self.options = self.minimatch.options;
  }

  function finish (self) {
    var nou = self.nounique;
    var all = nou ? [] : Object.create(null);

    for (var i = 0, l = self.matches.length; i < l; i ++) {
      var matches = self.matches[i];
      if (!matches || Object.keys(matches).length === 0) {
        if (self.nonull) {
          // do like the shell, and spit out the literal glob
          var literal = self.minimatch.globSet[i];
          if (nou)
            all.push(literal);
          else
            all[literal] = true;
        }
      } else {
        // had matches
        var m = Object.keys(matches);
        if (nou)
          all.push.apply(all, m);
        else
          m.forEach(function (m) {
            all[m] = true;
          });
      }
    }

    if (!nou)
      all = Object.keys(all);

    if (!self.nosort)
      all = all.sort(self.nocase ? alphasorti : alphasort$1);

    // at *some* point we statted all of these
    if (self.mark) {
      for (var i = 0; i < all.length; i++) {
        all[i] = self._mark(all[i]);
      }
      if (self.nodir) {
        all = all.filter(function (e) {
          var notDir = !(/\/$/.test(e));
          var c = self.cache[e] || self.cache[makeAbs(self, e)];
          if (notDir && c)
            notDir = c !== 'DIR' && !Array.isArray(c);
          return notDir
        });
      }
    }

    if (self.ignore.length)
      all = all.filter(function(m) {
        return !isIgnored(self, m)
      });

    self.found = all;
  }

  function mark (self, p) {
    var abs = makeAbs(self, p);
    var c = self.cache[abs];
    var m = p;
    if (c) {
      var isDir = c === 'DIR' || Array.isArray(c);
      var slash = p.slice(-1) === '/';

      if (isDir && !slash)
        m += '/';
      else if (!isDir && slash)
        m = m.slice(0, -1);

      if (m !== p) {
        var mabs = makeAbs(self, m);
        self.statCache[mabs] = self.statCache[abs];
        self.cache[mabs] = self.cache[abs];
      }
    }

    return m
  }

  // lotta situps...
  function makeAbs (self, f) {
    var abs = f;
    if (f.charAt(0) === '/') {
      abs = path.join(self.root, f);
    } else if (pathIsAbsolute(f) || f === '') {
      abs = f;
    } else if (self.changedCwd) {
      abs = path.resolve(self.cwd, f);
    } else {
      abs = path.resolve(f);
    }

    if (process.platform === 'win32')
      abs = abs.replace(/\\/g, '/');

    return abs
  }


  // Return true, if pattern ends with globstar '**', for the accompanying parent directory.
  // Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents
  function isIgnored (self, path$$1) {
    if (!self.ignore.length)
      return false

    return self.ignore.some(function(item) {
      return item.matcher.match(path$$1) || !!(item.gmatcher && item.gmatcher.match(path$$1))
    })
  }

  function childrenIgnored (self, path$$1) {
    if (!self.ignore.length)
      return false

    return self.ignore.some(function(item) {
      return !!(item.gmatcher && item.gmatcher.match(path$$1))
    })
  }

  var common$2 = {
  	alphasort: alphasort_1,
  	alphasorti: alphasorti_1,
  	setopts: setopts_1,
  	ownProp: ownProp_1,
  	makeAbs: makeAbs_1,
  	finish: finish_1,
  	mark: mark_1,
  	isIgnored: isIgnored_1,
  	childrenIgnored: childrenIgnored_1
  };

  var sync$1 = globSync;
  globSync.GlobSync = GlobSync;
  var setopts$1 = common$2.setopts;
  var ownProp$1 = common$2.ownProp;
  var childrenIgnored$1 = common$2.childrenIgnored;
  var isIgnored$1 = common$2.isIgnored;

  function globSync (pattern, options) {
    if (typeof options === 'function' || arguments.length === 3)
      throw new TypeError('callback provided to sync glob\n'+
                          'See: https://github.com/isaacs/node-glob/issues/167')

    return new GlobSync(pattern, options).found
  }

  function GlobSync (pattern, options) {
    if (!pattern)
      throw new Error('must provide pattern')

    if (typeof options === 'function' || arguments.length === 3)
      throw new TypeError('callback provided to sync glob\n'+
                          'See: https://github.com/isaacs/node-glob/issues/167')

    if (!(this instanceof GlobSync))
      return new GlobSync(pattern, options)

    setopts$1(this, pattern, options);

    if (this.noprocess)
      return this

    var n = this.minimatch.set.length;
    this.matches = new Array(n);
    for (var i = 0; i < n; i ++) {
      this._process(this.minimatch.set[i], i, false);
    }
    this._finish();
  }

  GlobSync.prototype._finish = function () {
    assert(this instanceof GlobSync);
    if (this.realpath) {
      var self = this;
      this.matches.forEach(function (matchset, index) {
        var set = self.matches[index] = Object.create(null);
        for (var p in matchset) {
          try {
            p = self._makeAbs(p);
            var real = fs_realpath.realpathSync(p, self.realpathCache);
            set[real] = true;
          } catch (er) {
            if (er.syscall === 'stat')
              set[self._makeAbs(p)] = true;
            else
              throw er
          }
        }
      });
    }
    common$2.finish(this);
  };


  GlobSync.prototype._process = function (pattern, index, inGlobStar) {
    assert(this instanceof GlobSync);

    // Get the first [n] parts of pattern that are all strings.
    var n = 0;
    while (typeof pattern[n] === 'string') {
      n ++;
    }
    // now n is the index of the first one that is *not* a string.

    // See if there's anything else
    var prefix;
    switch (n) {
      // if not, then this is rather simple
      case pattern.length:
        this._processSimple(pattern.join('/'), index);
        return

      case 0:
        // pattern *starts* with some non-trivial item.
        // going to readdir(cwd), but not include the prefix in matches.
        prefix = null;
        break

      default:
        // pattern has some string bits in the front.
        // whatever it starts with, whether that's 'absolute' like /foo/bar,
        // or 'relative' like '../baz'
        prefix = pattern.slice(0, n).join('/');
        break
    }

    var remain = pattern.slice(n);

    // get the list of entries.
    var read;
    if (prefix === null)
      read = '.';
    else if (pathIsAbsolute(prefix) || pathIsAbsolute(pattern.join('/'))) {
      if (!prefix || !pathIsAbsolute(prefix))
        prefix = '/' + prefix;
      read = prefix;
    } else
      read = prefix;

    var abs = this._makeAbs(read);

    //if ignored, skip processing
    if (childrenIgnored$1(this, read))
      return

    var isGlobStar = remain[0] === minimatch_1.GLOBSTAR;
    if (isGlobStar)
      this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);
    else
      this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
  };


  GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {
    var entries = this._readdir(abs, inGlobStar);

    // if the abs isn't a dir, then nothing can match!
    if (!entries)
      return

    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === '.';

    var matchedEntries = [];
    for (var i = 0; i < entries.length; i++) {
      var e = entries[i];
      if (e.charAt(0) !== '.' || dotOk) {
        var m;
        if (negate && !prefix) {
          m = !e.match(pn);
        } else {
          m = e.match(pn);
        }
        if (m)
          matchedEntries.push(e);
      }
    }

    var len = matchedEntries.length;
    // If there are no matched entries, then nothing matches.
    if (len === 0)
      return

    // if this is the last remaining pattern bit, then no need for
    // an additional stat *unless* the user has specified mark or
    // stat explicitly.  We know they exist, since readdir returned
    // them.

    if (remain.length === 1 && !this.mark && !this.stat) {
      if (!this.matches[index])
        this.matches[index] = Object.create(null);

      for (var i = 0; i < len; i ++) {
        var e = matchedEntries[i];
        if (prefix) {
          if (prefix.slice(-1) !== '/')
            e = prefix + '/' + e;
          else
            e = prefix + e;
        }

        if (e.charAt(0) === '/' && !this.nomount) {
          e = path.join(this.root, e);
        }
        this._emitMatch(index, e);
      }
      // This was the last one, and no stats were needed
      return
    }

    // now test all matched entries as stand-ins for that part
    // of the pattern.
    remain.shift();
    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i];
      var newPattern;
      if (prefix)
        newPattern = [prefix, e];
      else
        newPattern = [e];
      this._process(newPattern.concat(remain), index, inGlobStar);
    }
  };


  GlobSync.prototype._emitMatch = function (index, e) {
    if (isIgnored$1(this, e))
      return

    var abs = this._makeAbs(e);

    if (this.mark)
      e = this._mark(e);

    if (this.absolute) {
      e = abs;
    }

    if (this.matches[index][e])
      return

    if (this.nodir) {
      var c = this.cache[abs];
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true;

    if (this.stat)
      this._stat(e);
  };


  GlobSync.prototype._readdirInGlobStar = function (abs) {
    // follow all symlinked directories forever
    // just proceed as if this is a non-globstar situation
    if (this.follow)
      return this._readdir(abs, false)

    var entries;
    var lstat;
    try {
      lstat = fs.lstatSync(abs);
    } catch (er) {
      if (er.code === 'ENOENT') {
        // lstat failed, doesn't exist
        return null
      }
    }

    var isSym = lstat && lstat.isSymbolicLink();
    this.symlinks[abs] = isSym;

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory())
      this.cache[abs] = 'FILE';
    else
      entries = this._readdir(abs, false);

    return entries
  };

  GlobSync.prototype._readdir = function (abs, inGlobStar) {

    if (inGlobStar && !ownProp$1(this.symlinks, abs))
      return this._readdirInGlobStar(abs)

    if (ownProp$1(this.cache, abs)) {
      var c = this.cache[abs];
      if (!c || c === 'FILE')
        return null

      if (Array.isArray(c))
        return c
    }

    try {
      return this._readdirEntries(abs, fs.readdirSync(abs))
    } catch (er) {
      this._readdirError(abs, er);
      return null
    }
  };

  GlobSync.prototype._readdirEntries = function (abs, entries) {
    // if we haven't asked to stat everything, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.
    if (!this.mark && !this.stat) {
      for (var i = 0; i < entries.length; i ++) {
        var e = entries[i];
        if (abs === '/')
          e = abs + e;
        else
          e = abs + '/' + e;
        this.cache[e] = true;
      }
    }

    this.cache[abs] = entries;

    // mark and cache dir-ness
    return entries
  };

  GlobSync.prototype._readdirError = function (f, er) {
    // handle errors, and cache the information
    switch (er.code) {
      case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
      case 'ENOTDIR': // totally normal. means it *does* exist.
        var abs = this._makeAbs(f);
        this.cache[abs] = 'FILE';
        if (abs === this.cwdAbs) {
          var error = new Error(er.code + ' invalid cwd ' + this.cwd);
          error.path = this.cwd;
          error.code = er.code;
          throw error
        }
        break

      case 'ENOENT': // not terribly unusual
      case 'ELOOP':
      case 'ENAMETOOLONG':
      case 'UNKNOWN':
        this.cache[this._makeAbs(f)] = false;
        break

      default: // some unusual error.  Treat as failure.
        this.cache[this._makeAbs(f)] = false;
        if (this.strict)
          throw er
        if (!this.silent)
          console.error('glob error', er);
        break
    }
  };

  GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {

    var entries = this._readdir(abs, inGlobStar);

    // no entries means not a dir, so it can never have matches
    // foo.txt/** doesn't match foo.txt
    if (!entries)
      return

    // test without the globstar, and with every child both below
    // and replacing the globstar.
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [ prefix ] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);

    // the noGlobStar pattern exits the inGlobStar state
    this._process(noGlobStar, index, false);

    var len = entries.length;
    var isSym = this.symlinks[abs];

    // If it's a symlink, and we're in a globstar, then stop
    if (isSym && inGlobStar)
      return

    for (var i = 0; i < len; i++) {
      var e = entries[i];
      if (e.charAt(0) === '.' && !this.dot)
        continue

      // these two cases enter the inGlobStar state
      var instead = gspref.concat(entries[i], remainWithoutGlobStar);
      this._process(instead, index, true);

      var below = gspref.concat(entries[i], remain);
      this._process(below, index, true);
    }
  };

  GlobSync.prototype._processSimple = function (prefix, index) {
    // XXX review this.  Shouldn't it be doing the mounting etc
    // before doing stat?  kinda weird?
    var exists = this._stat(prefix);

    if (!this.matches[index])
      this.matches[index] = Object.create(null);

    // If it doesn't exist, then just mark the lack of results
    if (!exists)
      return

    if (prefix && pathIsAbsolute(prefix) && !this.nomount) {
      var trail = /[\/\\]$/.test(prefix);
      if (prefix.charAt(0) === '/') {
        prefix = path.join(this.root, prefix);
      } else {
        prefix = path.resolve(this.root, prefix);
        if (trail)
          prefix += '/';
      }
    }

    if (process.platform === 'win32')
      prefix = prefix.replace(/\\/g, '/');

    // Mark this as a match
    this._emitMatch(index, prefix);
  };

  // Returns either 'DIR', 'FILE', or false
  GlobSync.prototype._stat = function (f) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === '/';

    if (f.length > this.maxLength)
      return false

    if (!this.stat && ownProp$1(this.cache, abs)) {
      var c = this.cache[abs];

      if (Array.isArray(c))
        c = 'DIR';

      // It exists, but maybe not how we need it
      if (!needDir || c === 'DIR')
        return c

      if (needDir && c === 'FILE')
        return false

      // otherwise we have to stat, because maybe c=true
      // if we know it exists, but not what it is.
    }
    var stat = this.statCache[abs];
    if (!stat) {
      var lstat;
      try {
        lstat = fs.lstatSync(abs);
      } catch (er) {
        if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
          this.statCache[abs] = false;
          return false
        }
      }

      if (lstat && lstat.isSymbolicLink()) {
        try {
          stat = fs.statSync(abs);
        } catch (er) {
          stat = lstat;
        }
      } else {
        stat = lstat;
      }
    }

    this.statCache[abs] = stat;

    var c = true;
    if (stat)
      c = stat.isDirectory() ? 'DIR' : 'FILE';

    this.cache[abs] = this.cache[abs] || c;

    if (needDir && c === 'FILE')
      return false

    return c
  };

  GlobSync.prototype._mark = function (p) {
    return common$2.mark(this, p)
  };

  GlobSync.prototype._makeAbs = function (f) {
    return common$2.makeAbs(this, f)
  };

  // Returns a wrapper function that returns a wrapped callback
  // The wrapper function should do some stuff, and return a
  // presumably different callback function.
  // This makes sure that own properties are retained, so that
  // decorations and such are not lost along the way.
  var wrappy_1 = wrappy;
  function wrappy (fn, cb) {
    if (fn && cb) return wrappy(fn)(cb)

    if (typeof fn !== 'function')
      throw new TypeError('need wrapper function')

    Object.keys(fn).forEach(function (k) {
      wrapper[k] = fn[k];
    });

    return wrapper

    function wrapper() {
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      var ret = fn.apply(this, args);
      var cb = args[args.length-1];
      if (typeof ret === 'function' && ret !== cb) {
        Object.keys(cb).forEach(function (k) {
          ret[k] = cb[k];
        });
      }
      return ret
    }
  }

  var once_1 = wrappy_1(once);
  var strict = wrappy_1(onceStrict);

  once.proto = once(function () {
    Object.defineProperty(Function.prototype, 'once', {
      value: function () {
        return once(this)
      },
      configurable: true
    });

    Object.defineProperty(Function.prototype, 'onceStrict', {
      value: function () {
        return onceStrict(this)
      },
      configurable: true
    });
  });

  function once (fn) {
    var f = function () {
      if (f.called) return f.value
      f.called = true;
      return f.value = fn.apply(this, arguments)
    };
    f.called = false;
    return f
  }

  function onceStrict (fn) {
    var f = function () {
      if (f.called)
        throw new Error(f.onceError)
      f.called = true;
      return f.value = fn.apply(this, arguments)
    };
    var name = fn.name || 'Function wrapped with `once`';
    f.onceError = name + " shouldn't be called more than once";
    f.called = false;
    return f
  }
  once_1.strict = strict;

  var reqs = Object.create(null);


  var inflight_1 = wrappy_1(inflight);

  function inflight (key, cb) {
    if (reqs[key]) {
      reqs[key].push(cb);
      return null
    } else {
      reqs[key] = [cb];
      return makeres(key)
    }
  }

  function makeres (key) {
    return once_1(function RES () {
      var cbs = reqs[key];
      var len = cbs.length;
      var args = slice$1(arguments);

      // XXX It's somewhat ambiguous whether a new callback added in this
      // pass should be queued for later execution if something in the
      // list of callbacks throws, or if it should just be discarded.
      // However, it's such an edge case that it hardly matters, and either
      // choice is likely as surprising as the other.
      // As it happens, we do go ahead and schedule it for later execution.
      try {
        for (var i = 0; i < len; i++) {
          cbs[i].apply(null, args);
        }
      } finally {
        if (cbs.length > len) {
          // added more in the interim.
          // de-zalgo, just in case, but don't call again.
          cbs.splice(0, len);
          process.nextTick(function () {
            RES.apply(null, args);
          });
        } else {
          delete reqs[key];
        }
      }
    })
  }

  function slice$1 (args) {
    var length = args.length;
    var array = [];

    for (var i = 0; i < length; i++) array[i] = args[i];
    return array
  }

  // Approach:
  //
  // 1. Get the minimatch set
  // 2. For each pattern in the set, PROCESS(pattern, false)
  // 3. Store matches per-set, then uniq them
  //
  // PROCESS(pattern, inGlobStar)
  // Get the first [n] items from pattern that are all strings
  // Join these together.  This is PREFIX.
  //   If there is no more remaining, then stat(PREFIX) and
  //   add to matches if it succeeds.  END.
  //
  // If inGlobStar and PREFIX is symlink and points to dir
  //   set ENTRIES = []
  // else readdir(PREFIX) as ENTRIES
  //   If fail, END
  //
  // with ENTRIES
  //   If pattern[n] is GLOBSTAR
  //     // handle the case where the globstar match is empty
  //     // by pruning it out, and testing the resulting pattern
  //     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
  //     // handle other cases.
  //     for ENTRY in ENTRIES (not dotfiles)
  //       // attach globstar + tail onto the entry
  //       // Mark that this entry is a globstar match
  //       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
  //
  //   else // not globstar
  //     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
  //       Test ENTRY against pattern[n]
  //       If fails, continue
  //       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
  //
  // Caveat:
  //   Cache all stats and readdirs results to minimize syscall.  Since all
  //   we ever care about is existence and directory-ness, we can just keep
  //   `true` for files, and [children,...] for directories, or `false` for
  //   things that don't exist.

  var glob_1 = glob;

  var EE = events.EventEmitter;
  var setopts$2 = common$2.setopts;
  var ownProp$2 = common$2.ownProp;


  var childrenIgnored$2 = common$2.childrenIgnored;
  var isIgnored$2 = common$2.isIgnored;



  function glob (pattern, options, cb) {
    if (typeof options === 'function') cb = options, options = {};
    if (!options) options = {};

    if (options.sync) {
      if (cb)
        throw new TypeError('callback provided to sync glob')
      return sync$1(pattern, options)
    }

    return new Glob$1(pattern, options, cb)
  }

  glob.sync = sync$1;
  var GlobSync$1 = glob.GlobSync = sync$1.GlobSync;

  // old api surface
  glob.glob = glob;

  function extend$1 (origin, add) {
    if (add === null || typeof add !== 'object') {
      return origin
    }

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin
  }

  glob.hasMagic = function (pattern, options_) {
    var options = extend$1({}, options_);
    options.noprocess = true;

    var g = new Glob$1(pattern, options);
    var set = g.minimatch.set;

    if (!pattern)
      return false

    if (set.length > 1)
      return true

    for (var j = 0; j < set[0].length; j++) {
      if (typeof set[0][j] !== 'string')
        return true
    }

    return false
  };

  glob.Glob = Glob$1;
  inherits(Glob$1, EE);
  function Glob$1 (pattern, options, cb) {
    if (typeof options === 'function') {
      cb = options;
      options = null;
    }

    if (options && options.sync) {
      if (cb)
        throw new TypeError('callback provided to sync glob')
      return new GlobSync$1(pattern, options)
    }

    if (!(this instanceof Glob$1))
      return new Glob$1(pattern, options, cb)

    setopts$2(this, pattern, options);
    this._didRealPath = false;

    // process each pattern in the minimatch set
    var n = this.minimatch.set.length;

    // The matches are stored as {<filename>: true,...} so that
    // duplicates are automagically pruned.
    // Later, we do an Object.keys() on these.
    // Keep them as a list so we can fill in when nonull is set.
    this.matches = new Array(n);

    if (typeof cb === 'function') {
      cb = once_1(cb);
      this.on('error', cb);
      this.on('end', function (matches) {
        cb(null, matches);
      });
    }

    var self = this;
    this._processing = 0;

    this._emitQueue = [];
    this._processQueue = [];
    this.paused = false;

    if (this.noprocess)
      return this

    if (n === 0)
      return done()

    var sync = true;
    for (var i = 0; i < n; i ++) {
      this._process(this.minimatch.set[i], i, false, done);
    }
    sync = false;

    function done () {
      --self._processing;
      if (self._processing <= 0) {
        if (sync) {
          process.nextTick(function () {
            self._finish();
          });
        } else {
          self._finish();
        }
      }
    }
  }

  Glob$1.prototype._finish = function () {
    assert(this instanceof Glob$1);
    if (this.aborted)
      return

    if (this.realpath && !this._didRealpath)
      return this._realpath()

    common$2.finish(this);
    this.emit('end', this.found);
  };

  Glob$1.prototype._realpath = function () {
    if (this._didRealpath)
      return

    this._didRealpath = true;

    var n = this.matches.length;
    if (n === 0)
      return this._finish()

    var self = this;
    for (var i = 0; i < this.matches.length; i++)
      this._realpathSet(i, next);

    function next () {
      if (--n === 0)
        self._finish();
    }
  };

  Glob$1.prototype._realpathSet = function (index, cb) {
    var matchset = this.matches[index];
    if (!matchset)
      return cb()

    var found = Object.keys(matchset);
    var self = this;
    var n = found.length;

    if (n === 0)
      return cb()

    var set = this.matches[index] = Object.create(null);
    found.forEach(function (p, i) {
      // If there's a problem with the stat, then it means that
      // one or more of the links in the realpath couldn't be
      // resolved.  just return the abs value in that case.
      p = self._makeAbs(p);
      fs_realpath.realpath(p, self.realpathCache, function (er, real) {
        if (!er)
          set[real] = true;
        else if (er.syscall === 'stat')
          set[p] = true;
        else
          self.emit('error', er); // srsly wtf right here

        if (--n === 0) {
          self.matches[index] = set;
          cb();
        }
      });
    });
  };

  Glob$1.prototype._mark = function (p) {
    return common$2.mark(this, p)
  };

  Glob$1.prototype._makeAbs = function (f) {
    return common$2.makeAbs(this, f)
  };

  Glob$1.prototype.abort = function () {
    this.aborted = true;
    this.emit('abort');
  };

  Glob$1.prototype.pause = function () {
    if (!this.paused) {
      this.paused = true;
      this.emit('pause');
    }
  };

  Glob$1.prototype.resume = function () {
    if (this.paused) {
      this.emit('resume');
      this.paused = false;
      if (this._emitQueue.length) {
        var eq = this._emitQueue.slice(0);
        this._emitQueue.length = 0;
        for (var i = 0; i < eq.length; i ++) {
          var e = eq[i];
          this._emitMatch(e[0], e[1]);
        }
      }
      if (this._processQueue.length) {
        var pq = this._processQueue.slice(0);
        this._processQueue.length = 0;
        for (var i = 0; i < pq.length; i ++) {
          var p = pq[i];
          this._processing--;
          this._process(p[0], p[1], p[2], p[3]);
        }
      }
    }
  };

  Glob$1.prototype._process = function (pattern, index, inGlobStar, cb) {
    assert(this instanceof Glob$1);
    assert(typeof cb === 'function');

    if (this.aborted)
      return

    this._processing++;
    if (this.paused) {
      this._processQueue.push([pattern, index, inGlobStar, cb]);
      return
    }

    //console.error('PROCESS %d', this._processing, pattern)

    // Get the first [n] parts of pattern that are all strings.
    var n = 0;
    while (typeof pattern[n] === 'string') {
      n ++;
    }
    // now n is the index of the first one that is *not* a string.

    // see if there's anything else
    var prefix;
    switch (n) {
      // if not, then this is rather simple
      case pattern.length:
        this._processSimple(pattern.join('/'), index, cb);
        return

      case 0:
        // pattern *starts* with some non-trivial item.
        // going to readdir(cwd), but not include the prefix in matches.
        prefix = null;
        break

      default:
        // pattern has some string bits in the front.
        // whatever it starts with, whether that's 'absolute' like /foo/bar,
        // or 'relative' like '../baz'
        prefix = pattern.slice(0, n).join('/');
        break
    }

    var remain = pattern.slice(n);

    // get the list of entries.
    var read;
    if (prefix === null)
      read = '.';
    else if (pathIsAbsolute(prefix) || pathIsAbsolute(pattern.join('/'))) {
      if (!prefix || !pathIsAbsolute(prefix))
        prefix = '/' + prefix;
      read = prefix;
    } else
      read = prefix;

    var abs = this._makeAbs(read);

    //if ignored, skip _processing
    if (childrenIgnored$2(this, read))
      return cb()

    var isGlobStar = remain[0] === minimatch_1.GLOBSTAR;
    if (isGlobStar)
      this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);
    else
      this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
  };

  Glob$1.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
    var self = this;
    this._readdir(abs, inGlobStar, function (er, entries) {
      return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
    });
  };

  Glob$1.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

    // if the abs isn't a dir, then nothing can match!
    if (!entries)
      return cb()

    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === '.';

    var matchedEntries = [];
    for (var i = 0; i < entries.length; i++) {
      var e = entries[i];
      if (e.charAt(0) !== '.' || dotOk) {
        var m;
        if (negate && !prefix) {
          m = !e.match(pn);
        } else {
          m = e.match(pn);
        }
        if (m)
          matchedEntries.push(e);
      }
    }

    //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

    var len = matchedEntries.length;
    // If there are no matched entries, then nothing matches.
    if (len === 0)
      return cb()

    // if this is the last remaining pattern bit, then no need for
    // an additional stat *unless* the user has specified mark or
    // stat explicitly.  We know they exist, since readdir returned
    // them.

    if (remain.length === 1 && !this.mark && !this.stat) {
      if (!this.matches[index])
        this.matches[index] = Object.create(null);

      for (var i = 0; i < len; i ++) {
        var e = matchedEntries[i];
        if (prefix) {
          if (prefix !== '/')
            e = prefix + '/' + e;
          else
            e = prefix + e;
        }

        if (e.charAt(0) === '/' && !this.nomount) {
          e = path.join(this.root, e);
        }
        this._emitMatch(index, e);
      }
      // This was the last one, and no stats were needed
      return cb()
    }

    // now test all matched entries as stand-ins for that part
    // of the pattern.
    remain.shift();
    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i];
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e;
        else
          e = prefix + e;
      }
      this._process([e].concat(remain), index, inGlobStar, cb);
    }
    cb();
  };

  Glob$1.prototype._emitMatch = function (index, e) {
    if (this.aborted)
      return

    if (isIgnored$2(this, e))
      return

    if (this.paused) {
      this._emitQueue.push([index, e]);
      return
    }

    var abs = pathIsAbsolute(e) ? e : this._makeAbs(e);

    if (this.mark)
      e = this._mark(e);

    if (this.absolute)
      e = abs;

    if (this.matches[index][e])
      return

    if (this.nodir) {
      var c = this.cache[abs];
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true;

    var st = this.statCache[abs];
    if (st)
      this.emit('stat', e, st);

    this.emit('match', e);
  };

  Glob$1.prototype._readdirInGlobStar = function (abs, cb) {
    if (this.aborted)
      return

    // follow all symlinked directories forever
    // just proceed as if this is a non-globstar situation
    if (this.follow)
      return this._readdir(abs, false, cb)

    var lstatkey = 'lstat\0' + abs;
    var self = this;
    var lstatcb = inflight_1(lstatkey, lstatcb_);

    if (lstatcb)
      fs.lstat(abs, lstatcb);

    function lstatcb_ (er, lstat) {
      if (er && er.code === 'ENOENT')
        return cb()

      var isSym = lstat && lstat.isSymbolicLink();
      self.symlinks[abs] = isSym;

      // If it's not a symlink or a dir, then it's definitely a regular file.
      // don't bother doing a readdir in that case.
      if (!isSym && lstat && !lstat.isDirectory()) {
        self.cache[abs] = 'FILE';
        cb();
      } else
        self._readdir(abs, false, cb);
    }
  };

  Glob$1.prototype._readdir = function (abs, inGlobStar, cb) {
    if (this.aborted)
      return

    cb = inflight_1('readdir\0'+abs+'\0'+inGlobStar, cb);
    if (!cb)
      return

    //console.error('RD %j %j', +inGlobStar, abs)
    if (inGlobStar && !ownProp$2(this.symlinks, abs))
      return this._readdirInGlobStar(abs, cb)

    if (ownProp$2(this.cache, abs)) {
      var c = this.cache[abs];
      if (!c || c === 'FILE')
        return cb()

      if (Array.isArray(c))
        return cb(null, c)
    }
    fs.readdir(abs, readdirCb(this, abs, cb));
  };

  function readdirCb (self, abs, cb) {
    return function (er, entries) {
      if (er)
        self._readdirError(abs, er, cb);
      else
        self._readdirEntries(abs, entries, cb);
    }
  }

  Glob$1.prototype._readdirEntries = function (abs, entries, cb) {
    if (this.aborted)
      return

    // if we haven't asked to stat everything, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.
    if (!this.mark && !this.stat) {
      for (var i = 0; i < entries.length; i ++) {
        var e = entries[i];
        if (abs === '/')
          e = abs + e;
        else
          e = abs + '/' + e;
        this.cache[e] = true;
      }
    }

    this.cache[abs] = entries;
    return cb(null, entries)
  };

  Glob$1.prototype._readdirError = function (f, er, cb) {
    if (this.aborted)
      return

    // handle errors, and cache the information
    switch (er.code) {
      case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
      case 'ENOTDIR': // totally normal. means it *does* exist.
        var abs = this._makeAbs(f);
        this.cache[abs] = 'FILE';
        if (abs === this.cwdAbs) {
          var error = new Error(er.code + ' invalid cwd ' + this.cwd);
          error.path = this.cwd;
          error.code = er.code;
          this.emit('error', error);
          this.abort();
        }
        break

      case 'ENOENT': // not terribly unusual
      case 'ELOOP':
      case 'ENAMETOOLONG':
      case 'UNKNOWN':
        this.cache[this._makeAbs(f)] = false;
        break

      default: // some unusual error.  Treat as failure.
        this.cache[this._makeAbs(f)] = false;
        if (this.strict) {
          this.emit('error', er);
          // If the error is handled, then we abort
          // if not, we threw out of here
          this.abort();
        }
        if (!this.silent)
          console.error('glob error', er);
        break
    }

    return cb()
  };

  Glob$1.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
    var self = this;
    this._readdir(abs, inGlobStar, function (er, entries) {
      self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
    });
  };


  Glob$1.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
    //console.error('pgs2', prefix, remain[0], entries)

    // no entries means not a dir, so it can never have matches
    // foo.txt/** doesn't match foo.txt
    if (!entries)
      return cb()

    // test without the globstar, and with every child both below
    // and replacing the globstar.
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [ prefix ] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);

    // the noGlobStar pattern exits the inGlobStar state
    this._process(noGlobStar, index, false, cb);

    var isSym = this.symlinks[abs];
    var len = entries.length;

    // If it's a symlink, and we're in a globstar, then stop
    if (isSym && inGlobStar)
      return cb()

    for (var i = 0; i < len; i++) {
      var e = entries[i];
      if (e.charAt(0) === '.' && !this.dot)
        continue

      // these two cases enter the inGlobStar state
      var instead = gspref.concat(entries[i], remainWithoutGlobStar);
      this._process(instead, index, true, cb);

      var below = gspref.concat(entries[i], remain);
      this._process(below, index, true, cb);
    }

    cb();
  };

  Glob$1.prototype._processSimple = function (prefix, index, cb) {
    // XXX review this.  Shouldn't it be doing the mounting etc
    // before doing stat?  kinda weird?
    var self = this;
    this._stat(prefix, function (er, exists) {
      self._processSimple2(prefix, index, er, exists, cb);
    });
  };
  Glob$1.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

    //console.error('ps2', prefix, exists)

    if (!this.matches[index])
      this.matches[index] = Object.create(null);

    // If it doesn't exist, then just mark the lack of results
    if (!exists)
      return cb()

    if (prefix && pathIsAbsolute(prefix) && !this.nomount) {
      var trail = /[\/\\]$/.test(prefix);
      if (prefix.charAt(0) === '/') {
        prefix = path.join(this.root, prefix);
      } else {
        prefix = path.resolve(this.root, prefix);
        if (trail)
          prefix += '/';
      }
    }

    if (process.platform === 'win32')
      prefix = prefix.replace(/\\/g, '/');

    // Mark this as a match
    this._emitMatch(index, prefix);
    cb();
  };

  // Returns either 'DIR', 'FILE', or false
  Glob$1.prototype._stat = function (f, cb) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === '/';

    if (f.length > this.maxLength)
      return cb()

    if (!this.stat && ownProp$2(this.cache, abs)) {
      var c = this.cache[abs];

      if (Array.isArray(c))
        c = 'DIR';

      // It exists, but maybe not how we need it
      if (!needDir || c === 'DIR')
        return cb(null, c)

      if (needDir && c === 'FILE')
        return cb()

      // otherwise we have to stat, because maybe c=true
      // if we know it exists, but not what it is.
    }
    var stat = this.statCache[abs];
    if (stat !== undefined) {
      if (stat === false)
        return cb(null, stat)
      else {
        var type = stat.isDirectory() ? 'DIR' : 'FILE';
        if (needDir && type === 'FILE')
          return cb()
        else
          return cb(null, type, stat)
      }
    }

    var self = this;
    var statcb = inflight_1('stat\0' + abs, lstatcb_);
    if (statcb)
      fs.lstat(abs, statcb);

    function lstatcb_ (er, lstat) {
      if (lstat && lstat.isSymbolicLink()) {
        // If it's a symlink, then treat it as the target, unless
        // the target does not exist, then treat it as a file.
        return fs.stat(abs, function (er, stat) {
          if (er)
            self._stat2(f, abs, null, lstat, cb);
          else
            self._stat2(f, abs, er, stat, cb);
        })
      } else {
        self._stat2(f, abs, er, lstat, cb);
      }
    }
  };

  Glob$1.prototype._stat2 = function (f, abs, er, stat, cb) {
    if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
      this.statCache[abs] = false;
      return cb()
    }

    var needDir = f.slice(-1) === '/';
    this.statCache[abs] = stat;

    if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
      return cb(null, false, stat)

    var c = true;
    if (stat)
      c = stat.isDirectory() ? 'DIR' : 'FILE';
    this.cache[abs] = this.cache[abs] || c;

    if (needDir && c === 'FILE')
      return cb()

    return cb(null, c, stat)
  };

  var rimraf_1$1 = rimraf$1;
  rimraf$1.sync = rimrafSync$1;





  var _0666 = parseInt('666', 8);

  var defaultGlobOpts = {
    nosort: true,
    silent: true
  };

  // for EMFILE handling
  var timeout = 0;

  var isWindows$2 = (process.platform === "win32");

  function defaults$1 (options) {
    var methods = [
      'unlink',
      'chmod',
      'stat',
      'lstat',
      'rmdir',
      'readdir'
    ];
    methods.forEach(function(m) {
      options[m] = options[m] || fs[m];
      m = m + 'Sync';
      options[m] = options[m] || fs[m];
    });

    options.maxBusyTries = options.maxBusyTries || 3;
    options.emfileWait = options.emfileWait || 1000;
    if (options.glob === false) {
      options.disableGlob = true;
    }
    options.disableGlob = options.disableGlob || false;
    options.glob = options.glob || defaultGlobOpts;
  }

  function rimraf$1 (p, options, cb) {
    if (typeof options === 'function') {
      cb = options;
      options = {};
    }

    assert(p, 'rimraf: missing path');
    assert.equal(typeof p, 'string', 'rimraf: path should be a string');
    assert.equal(typeof cb, 'function', 'rimraf: callback function required');
    assert(options, 'rimraf: invalid options argument provided');
    assert.equal(typeof options, 'object', 'rimraf: options should be object');

    defaults$1(options);

    var busyTries = 0;
    var errState = null;
    var n = 0;

    if (options.disableGlob || !glob_1.hasMagic(p))
      return afterGlob(null, [p])

    options.lstat(p, function (er, stat) {
      if (!er)
        return afterGlob(null, [p])

      glob_1(p, options.glob, afterGlob);
    });

    function next (er) {
      errState = errState || er;
      if (--n === 0)
        cb(errState);
    }

    function afterGlob (er, results) {
      if (er)
        return cb(er)

      n = results.length;
      if (n === 0)
        return cb()

      results.forEach(function (p) {
        rimraf_$1(p, options, function CB (er) {
          if (er) {
            if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
                busyTries < options.maxBusyTries) {
              busyTries ++;
              var time = busyTries * 100;
              // try again, with the same exact callback as this one.
              return setTimeout(function () {
                rimraf_$1(p, options, CB);
              }, time)
            }

            // this one won't happen if graceful-fs is used.
            if (er.code === "EMFILE" && timeout < options.emfileWait) {
              return setTimeout(function () {
                rimraf_$1(p, options, CB);
              }, timeout ++)
            }

            // already gone
            if (er.code === "ENOENT") er = null;
          }

          timeout = 0;
          next(er);
        });
      });
    }
  }

  // Two possible strategies.
  // 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
  // 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
  //
  // Both result in an extra syscall when you guess wrong.  However, there
  // are likely far more normal files in the world than directories.  This
  // is based on the assumption that a the average number of files per
  // directory is >= 1.
  //
  // If anyone ever complains about this, then I guess the strategy could
  // be made configurable somehow.  But until then, YAGNI.
  function rimraf_$1 (p, options, cb) {
    assert(p);
    assert(options);
    assert(typeof cb === 'function');

    // sunos lets the root user unlink directories, which is... weird.
    // so we have to lstat here and make sure it's not a dir.
    options.lstat(p, function (er, st) {
      if (er && er.code === "ENOENT")
        return cb(null)

      // Windows can EPERM on stat.  Life is suffering.
      if (er && er.code === "EPERM" && isWindows$2)
        fixWinEPERM$1(p, options, er, cb);

      if (st && st.isDirectory())
        return rmdir$1(p, options, er, cb)

      options.unlink(p, function (er) {
        if (er) {
          if (er.code === "ENOENT")
            return cb(null)
          if (er.code === "EPERM")
            return (isWindows$2)
              ? fixWinEPERM$1(p, options, er, cb)
              : rmdir$1(p, options, er, cb)
          if (er.code === "EISDIR")
            return rmdir$1(p, options, er, cb)
        }
        return cb(er)
      });
    });
  }

  function fixWinEPERM$1 (p, options, er, cb) {
    assert(p);
    assert(options);
    assert(typeof cb === 'function');
    if (er)
      assert(er instanceof Error);

    options.chmod(p, _0666, function (er2) {
      if (er2)
        cb(er2.code === "ENOENT" ? null : er);
      else
        options.stat(p, function(er3, stats) {
          if (er3)
            cb(er3.code === "ENOENT" ? null : er);
          else if (stats.isDirectory())
            rmdir$1(p, options, er, cb);
          else
            options.unlink(p, cb);
        });
    });
  }

  function fixWinEPERMSync$1 (p, options, er) {
    assert(p);
    assert(options);
    if (er)
      assert(er instanceof Error);

    try {
      options.chmodSync(p, _0666);
    } catch (er2) {
      if (er2.code === "ENOENT")
        return
      else
        throw er
    }

    try {
      var stats = options.statSync(p);
    } catch (er3) {
      if (er3.code === "ENOENT")
        return
      else
        throw er
    }

    if (stats.isDirectory())
      rmdirSync$1(p, options, er);
    else
      options.unlinkSync(p);
  }

  function rmdir$1 (p, options, originalEr, cb) {
    assert(p);
    assert(options);
    if (originalEr)
      assert(originalEr instanceof Error);
    assert(typeof cb === 'function');

    // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
    // if we guessed wrong, and it's not a directory, then
    // raise the original error.
    options.rmdir(p, function (er) {
      if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
        rmkids$1(p, options, cb);
      else if (er && er.code === "ENOTDIR")
        cb(originalEr);
      else
        cb(er);
    });
  }

  function rmkids$1(p, options, cb) {
    assert(p);
    assert(options);
    assert(typeof cb === 'function');

    options.readdir(p, function (er, files) {
      if (er)
        return cb(er)
      var n = files.length;
      if (n === 0)
        return options.rmdir(p, cb)
      var errState;
      files.forEach(function (f) {
        rimraf$1(path.join(p, f), options, function (er) {
          if (errState)
            return
          if (er)
            return cb(errState = er)
          if (--n === 0)
            options.rmdir(p, cb);
        });
      });
    });
  }

  // this looks simpler, and is strictly *faster*, but will
  // tie up the JavaScript thread and fail on excessively
  // deep directory trees.
  function rimrafSync$1 (p, options) {
    options = options || {};
    defaults$1(options);

    assert(p, 'rimraf: missing path');
    assert.equal(typeof p, 'string', 'rimraf: path should be a string');
    assert(options, 'rimraf: missing options');
    assert.equal(typeof options, 'object', 'rimraf: options should be object');

    var results;

    if (options.disableGlob || !glob_1.hasMagic(p)) {
      results = [p];
    } else {
      try {
        options.lstatSync(p);
        results = [p];
      } catch (er) {
        results = glob_1.sync(p, options.glob);
      }
    }

    if (!results.length)
      return

    for (var i = 0; i < results.length; i++) {
      var p = results[i];

      try {
        var st = options.lstatSync(p);
      } catch (er) {
        if (er.code === "ENOENT")
          return

        // Windows can EPERM on stat.  Life is suffering.
        if (er.code === "EPERM" && isWindows$2)
          fixWinEPERMSync$1(p, options, er);
      }

      try {
        // sunos lets the root user unlink directories, which is... weird.
        if (st && st.isDirectory())
          rmdirSync$1(p, options, null);
        else
          options.unlinkSync(p);
      } catch (er) {
        if (er.code === "ENOENT")
          return
        if (er.code === "EPERM")
          return isWindows$2 ? fixWinEPERMSync$1(p, options, er) : rmdirSync$1(p, options, er)
        if (er.code !== "EISDIR")
          throw er

        rmdirSync$1(p, options, er);
      }
    }
  }

  function rmdirSync$1 (p, options, originalEr) {
    assert(p);
    assert(options);
    if (originalEr)
      assert(originalEr instanceof Error);

    try {
      options.rmdirSync(p);
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "ENOTDIR")
        throw originalEr
      if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
        rmkidsSync$1(p, options);
    }
  }

  function rmkidsSync$1 (p, options) {
    assert(p);
    assert(options);
    options.readdirSync(p).forEach(function (f) {
      rimrafSync$1(path.join(p, f), options);
    });

    // We only end up here once we got ENOTEMPTY at least once, and
    // at this point, we are guaranteed to have removed all the kids.
    // So, we know that it won't be ENOENT or ENOTDIR or anything else.
    // try really hard to delete stuff on windows, because it has a
    // PROFOUNDLY annoying habit of not closing handles promptly when
    // files are deleted, resulting in spurious ENOTEMPTY errors.
    var retries = isWindows$2 ? 100 : 1;
    var i = 0;
    do {
      var threw = true;
      try {
        var ret = options.rmdirSync(p, options);
        threw = false;
        return ret
      } finally {
        if (++i < retries && threw)
          continue
      }
    } while (true)
  }

  var collect_1 = collect;

  function collect (stream) {
    if (stream._collected) return

    if (stream._paused) return stream.on('resume', collect.bind(null, stream))

    stream._collected = true;
    stream.pause();

    stream.on('data', save);
    stream.on('end', save);
    var buf = [];
    function save (b) {
      if (typeof b === 'string') b = new Buffer(b);
      if (Buffer.isBuffer(b) && !b.length) return
      buf.push(b);
    }

    stream.on('entry', saveEntry);
    var entryBuffer = [];
    function saveEntry (e) {
      collect(e);
      entryBuffer.push(e);
    }

    stream.on('proxy', proxyPause);
    function proxyPause (p) {
      p.pause();
    }

    // replace the pipe method with a new version that will
    // unlock the buffered stuff.  if you just call .pipe()
    // without a destination, then it'll re-play the events.
    stream.pipe = (function (orig) {
      return function (dest) {
        // console.error(' === open the pipes', dest && dest.path)

        // let the entries flow through one at a time.
        // Once they're all done, then we can resume completely.
        var e = 0
        ;(function unblockEntry () {
          var entry = entryBuffer[e++];
          // console.error(" ==== unblock entry", entry && entry.path)
          if (!entry) return resume()
          entry.on('end', unblockEntry);
          if (dest) dest.add(entry);
          else stream.emit('entry', entry);
        })();

        function resume () {
          stream.removeListener('entry', saveEntry);
          stream.removeListener('data', save);
          stream.removeListener('end', save);

          stream.pipe = orig;
          if (dest) stream.pipe(dest);

          buf.forEach(function (b) {
            if (b) stream.emit('data', b);
            else stream.emit('end');
          });

          stream.resume();
        }

        return dest
      }
    })(stream.pipe);
  }

  // It is expected that, when .add() returns false, the consumer
  // of the DirWriter will pause until a "drain" event occurs. Note
  // that this is *almost always going to be the case*, unless the
  // thing being written is some sort of unsupported type, and thus
  // skipped over.

  var dirWriter = DirWriter;







  inherits(DirWriter, writer$1);

  function DirWriter (props) {
    var self = this;
    if (!(self instanceof DirWriter)) {
      self.error('DirWriter must be called as constructor.', null, true);
    }

    // should already be established as a Directory type
    if (props.type !== 'Directory' || !props.Directory) {
      self.error('Non-directory type ' + props.type + ' ' +
        JSON.stringify(props), null, true);
    }

    writer$1.call(this, props);
  }

  DirWriter.prototype._create = function () {
    var self = this;
    mkdirp$1(self._path, writer$1.dirmode, function (er) {
      if (er) return self.error(er)
      // ready to start getting entries!
      self.ready = true;
      self.emit('ready');
      self._process();
    });
  };

  // a DirWriter has an add(entry) method, but its .write() doesn't
  // do anything.  Why a no-op rather than a throw?  Because this
  // leaves open the door for writing directory metadata for
  // gnu/solaris style dumpdirs.
  DirWriter.prototype.write = function () {
    return true
  };

  DirWriter.prototype.end = function () {
    this._ended = true;
    this._process();
  };

  DirWriter.prototype.add = function (entry) {
    var self = this;

    // console.error('\tadd', entry._path, '->', self._path)
    collect_1(entry);
    if (!self.ready || self._currentEntry) {
      self._buffer.push(entry);
      return false
    }

    // create a new writer, and pipe the incoming entry into it.
    if (self._ended) {
      return self.error('add after end')
    }

    self._buffer.push(entry);
    self._process();

    return this._buffer.length === 0
  };

  DirWriter.prototype._process = function () {
    var self = this;

    // console.error('DW Process p=%j', self._processing, self.basename)

    if (self._processing) return

    var entry = self._buffer.shift();
    if (!entry) {
      // console.error("DW Drain")
      self.emit('drain');
      if (self._ended) self._finish();
      return
    }

    self._processing = true;
    // console.error("DW Entry", entry._path)

    self.emit('entry', entry);

    // ok, add this entry
    //
    // don't allow recursive copying
    var p = entry;
    var pp;
    do {
      pp = p._path || p.path;
      if (pp === self.root._path || pp === self._path ||
        (pp && pp.indexOf(self._path) === 0)) {
        // console.error('DW Exit (recursive)', entry.basename, self._path)
        self._processing = false;
        if (entry._collected) entry.pipe();
        return self._process()
      }
      p = p.parent;
    } while (p)

    // console.error("DW not recursive")

    // chop off the entry's root dir, replace with ours
    var props = {
      parent: self,
      root: self.root || self,
      type: entry.type,
      depth: self.depth + 1
    };

    pp = entry._path || entry.path || entry.props.path;
    if (entry.parent) {
      pp = pp.substr(entry.parent._path.length + 1);
    }
    // get rid of any ../../ shenanigans
    props.path = path.join(self.path, path.join('/', pp));

    // if i have a filter, the child should inherit it.
    props.filter = self.filter;

    // all the rest of the stuff, copy over from the source.
    Object.keys(entry.props).forEach(function (k) {
      if (!props.hasOwnProperty(k)) {
        props[k] = entry.props[k];
      }
    });

    // not sure at this point what kind of writer this is.
    var child = self._currentChild = new writer$1(props);
    child.on('ready', function () {
      // console.error("DW Child Ready", child.type, child._path)
      // console.error("  resuming", entry._path)
      entry.pipe(child);
      entry.resume();
    });

    // XXX Make this work in node.
    // Long filenames should not break stuff.
    child.on('error', function (er) {
      if (child._swallowErrors) {
        self.warn(er);
        child.emit('end');
        child.emit('close');
      } else {
        self.emit('error', er);
      }
    });

    // we fire _end internally *after* end, so that we don't move on
    // until any "end" listeners have had their chance to do stuff.
    child.on('close', onend);
    var ended = false;
    function onend () {
      if (ended) return
      ended = true;
      // console.error("* DW Child end", child.basename)
      self._currentChild = null;
      self._processing = false;
      self._process();
    }
  };

  var linkWriter = LinkWriter;







  inherits(LinkWriter, writer$1);

  function LinkWriter (props) {
    var self = this;
    if (!(self instanceof LinkWriter)) {
      throw new Error('LinkWriter must be called as constructor.')
    }

    // should already be established as a Link type
    if (!((props.type === 'Link' && props.Link) ||
      (props.type === 'SymbolicLink' && props.SymbolicLink))) {
      throw new Error('Non-link type ' + props.type)
    }

    if (props.linkpath === '') props.linkpath = '.';
    if (!props.linkpath) {
      self.error('Need linkpath property to create ' + props.type);
    }

    writer$1.call(this, props);
  }

  LinkWriter.prototype._create = function () {
    // console.error(" LW _create")
    var self = this;
    var hard = self.type === 'Link' || process.platform === 'win32';
    var link = hard ? 'link' : 'symlink';
    var lp = hard ? path.resolve(self.dirname, self.linkpath) : self.linkpath;

    // can only change the link path by clobbering
    // For hard links, let's just assume that's always the case, since
    // there's no good way to read them if we don't already know.
    if (hard) return clobber(self, lp, link)

    gracefulFs.readlink(self._path, function (er, p) {
      // only skip creation if it's exactly the same link
      if (p && p === lp) return finish$1(self)
      clobber(self, lp, link);
    });
  };

  function clobber (self, lp, link) {
    rimraf_1$1(self._path, function (er) {
      if (er) return self.error(er)
      create$1(self, lp, link);
    });
  }

  function create$1 (self, lp, link) {
    gracefulFs[link](lp, self._path, function (er) {
      // if this is a hard link, and we're in the process of writing out a
      // directory, it's very possible that the thing we're linking to
      // doesn't exist yet (especially if it was intended as a symlink),
      // so swallow ENOENT errors here and just soldier in.
      // Additionally, an EPERM or EACCES can happen on win32 if it's trying
      // to make a link to a directory.  Again, just skip it.
      // A better solution would be to have fs.symlink be supported on
      // windows in some nice fashion.
      if (er) {
        if ((er.code === 'ENOENT' ||
          er.code === 'EACCES' ||
          er.code === 'EPERM') && process.platform === 'win32') {
          self.ready = true;
          self.emit('ready');
          self.emit('end');
          self.emit('close');
          self.end = self._finish = function () {};
        } else return self.error(er)
      }
      finish$1(self);
    });
  }

  function finish$1 (self) {
    self.ready = true;
    self.emit('ready');
    if (self._ended && !self._finished) self._finish();
  }

  LinkWriter.prototype.end = function () {
    // console.error("LW finish in end")
    this._ended = true;
    if (this.ready) {
      this._finished = true;
      this._finish();
    }
  };

  var fileWriter = FileWriter;




  var EOF$1 = {};

  inherits(FileWriter, writer$1);

  function FileWriter (props) {
    var self = this;
    if (!(self instanceof FileWriter)) {
      throw new Error('FileWriter must be called as constructor.')
    }

    // should already be established as a File type
    if (props.type !== 'File' || !props.File) {
      throw new Error('Non-file type ' + props.type)
    }

    self._buffer = [];
    self._bytesWritten = 0;

    writer$1.call(this, props);
  }

  FileWriter.prototype._create = function () {
    var self = this;
    if (self._stream) return

    var so = {};
    if (self.props.flags) so.flags = self.props.flags;
    so.mode = writer$1.filemode;
    if (self._old && self._old.blksize) so.bufferSize = self._old.blksize;

    self._stream = gracefulFs.createWriteStream(self._path, so);

    self._stream.on('open', function () {
      // console.error("FW open", self._buffer, self._path)
      self.ready = true;
      self._buffer.forEach(function (c) {
        if (c === EOF$1) self._stream.end();
        else self._stream.write(c);
      });
      self.emit('ready');
      // give this a kick just in case it needs it.
      self.emit('drain');
    });

    self._stream.on('error', function (er) { self.emit('error', er); });

    self._stream.on('drain', function () { self.emit('drain'); });

    self._stream.on('close', function () {
      // console.error('\n\nFW Stream Close', self._path, self.size)
      self._finish();
    });
  };

  FileWriter.prototype.write = function (c) {
    var self = this;

    self._bytesWritten += c.length;

    if (!self.ready) {
      if (!Buffer.isBuffer(c) && typeof c !== 'string') {
        throw new Error('invalid write data')
      }
      self._buffer.push(c);
      return false
    }

    var ret = self._stream.write(c);
    // console.error('\t-- fw wrote, _stream says', ret, self._stream._queue.length)

    // allow 2 buffered writes, because otherwise there's just too
    // much stop and go bs.
    if (ret === false && self._stream._queue) {
      return self._stream._queue.length <= 2
    } else {
      return ret
    }
  };

  FileWriter.prototype.end = function (c) {
    var self = this;

    if (c) self.write(c);

    if (!self.ready) {
      self._buffer.push(EOF$1);
      return false
    }

    return self._stream.end()
  };

  FileWriter.prototype._finish = function () {
    var self = this;
    if (typeof self.size === 'number' && self._bytesWritten !== self.size) {
      self.error(
        'Did not get expected byte count.\n' +
        'expect: ' + self.size + '\n' +
        'actual: ' + self._bytesWritten);
    }
    writer$1.prototype._finish.call(self);
  };

  // A writer for when we don't know what kind of thing
  // the thing is.  That is, it's not explicitly set,
  // so we're going to make it whatever the thing already
  // is, or "File"
  //
  // Until then, collect all events.

  var proxyWriter = ProxyWriter;







  inherits(ProxyWriter, writer$1);

  function ProxyWriter (props) {
    var self = this;
    if (!(self instanceof ProxyWriter)) {
      throw new Error('ProxyWriter must be called as constructor.')
    }

    self.props = props;
    self._needDrain = false;

    writer$1.call(self, props);
  }

  ProxyWriter.prototype._stat = function () {
    var self = this;
    var props = self.props;
    // stat the thing to see what the proxy should be.
    var stat = props.follow ? 'stat' : 'lstat';

    fs[stat](props.path, function (er, current) {
      var type;
      if (er || !current) {
        type = 'File';
      } else {
        type = getType_1(current);
      }

      props[type] = true;
      props.type = self.type = type;

      self._old = current;
      self._addProxy(writer$1(props, current));
    });
  };

  ProxyWriter.prototype._addProxy = function (proxy) {
    // console.error("~~ set proxy", this.path)
    var self = this;
    if (self._proxy) {
      return self.error('proxy already set')
    }

    self._proxy = proxy
    ;[
      'ready',
      'error',
      'close',
      'pipe',
      'drain',
      'warn'
    ].forEach(function (ev) {
      proxy.on(ev, self.emit.bind(self, ev));
    });

    self.emit('proxy', proxy);

    var calls = self._buffer;
    calls.forEach(function (c) {
      // console.error("~~ ~~ proxy buffered call", c[0], c[1])
      proxy[c[0]].apply(proxy, c[1]);
    });
    self._buffer.length = 0;
    if (self._needsDrain) self.emit('drain');
  };

  ProxyWriter.prototype.add = function (entry) {
    // console.error("~~ proxy add")
    collect_1(entry);

    if (!this._proxy) {
      this._buffer.push(['add', [entry]]);
      this._needDrain = true;
      return false
    }
    return this._proxy.add(entry)
  };

  ProxyWriter.prototype.write = function (c) {
    // console.error('~~ proxy write')
    if (!this._proxy) {
      this._buffer.push(['write', [c]]);
      this._needDrain = true;
      return false
    }
    return this._proxy.write(c)
  };

  ProxyWriter.prototype.end = function (c) {
    // console.error('~~ proxy end')
    if (!this._proxy) {
      this._buffer.push(['end', [c]]);
      return false
    }
    return this._proxy.end(c)
  };

  var writer$1 = Writer$1;






  var umask = process.platform === 'win32' ? 0 : process.umask();



  // Must do this *before* loading the child classes
  inherits(Writer$1, abstract_1);

  Writer$1.dirmode = parseInt('0777', 8) & (~umask);
  Writer$1.filemode = parseInt('0666', 8) & (~umask);






  // props is the desired state.  current is optionally the current stat,
  // provided here so that subclasses can avoid statting the target
  // more than necessary.
  function Writer$1 (props, current) {
    var self = this;

    if (typeof props === 'string') {
      props = { path: props };
    }

    // polymorphism.
    // call fstream.Writer(dir) to get a DirWriter object, etc.
    var type = getType_1(props);
    var ClassType = Writer$1;

    switch (type) {
      case 'Directory':
        ClassType = dirWriter;
        break
      case 'File':
        ClassType = fileWriter;
        break
      case 'Link':
      case 'SymbolicLink':
        ClassType = linkWriter;
        break
      case null:
      default:
        // Don't know yet what type to create, so we wrap in a proxy.
        ClassType = proxyWriter;
        break
    }

    if (!(self instanceof ClassType)) return new ClassType(props)

    // now get down to business.

    abstract_1.call(self);

    if (!props.path) self.error('Must provide a path', null, true);

    // props is what we want to set.
    // set some convenience properties as well.
    self.type = props.type;
    self.props = props;
    self.depth = props.depth || 0;
    self.clobber = props.clobber === false ? props.clobber : true;
    self.parent = props.parent || null;
    self.root = props.root || (props.parent && props.parent.root) || self;

    self._path = self.path = path.resolve(props.path);
    if (process.platform === 'win32') {
      self.path = self._path = self.path.replace(/\?/g, '_');
      if (self._path.length >= 260) {
        self._swallowErrors = true;
        self._path = '\\\\?\\' + self.path.replace(/\//g, '\\');
      }
    }
    self.basename = path.basename(props.path);
    self.dirname = path.dirname(props.path);
    self.linkpath = props.linkpath || null;

    props.parent = props.root = null;

    // console.error("\n\n\n%s setting size to", props.path, props.size)
    self.size = props.size;

    if (typeof props.mode === 'string') {
      props.mode = parseInt(props.mode, 8);
    }

    self.readable = false;
    self.writable = true;

    // buffer until ready, or while handling another entry
    self._buffer = [];
    self.ready = false;

    self.filter = typeof props.filter === 'function' ? props.filter : null;

    // start the ball rolling.
    // this checks what's there already, and then calls
    // self._create() to call the impl-specific creation stuff.
    self._stat(current);
  }

  // Calling this means that it's something we can't create.
  // Just assert that it's already there, otherwise raise a warning.
  Writer$1.prototype._create = function () {
    var self = this;
    gracefulFs[self.props.follow ? 'stat' : 'lstat'](self._path, function (er) {
      if (er) {
        return self.warn('Cannot create ' + self._path + '\n' +
          'Unsupported type: ' + self.type, 'ENOTSUP')
      }
      self._finish();
    });
  };

  Writer$1.prototype._stat = function (current) {
    var self = this;
    var props = self.props;
    var stat = props.follow ? 'stat' : 'lstat';
    var who = self._proxy || self;

    if (current) statCb(null, current);
    else gracefulFs[stat](self._path, statCb);

    function statCb (er, current) {
      if (self.filter && !self.filter.call(who, who, current)) {
        self._aborted = true;
        self.emit('end');
        self.emit('close');
        return
      }

      // if it's not there, great.  We'll just create it.
      // if it is there, then we'll need to change whatever differs
      if (er || !current) {
        return create$2(self)
      }

      self._old = current;
      var currentType = getType_1(current);

      // if it's a type change, then we need to clobber or error.
      // if it's not a type change, then let the impl take care of it.
      if (currentType !== self.type) {
        return rimraf_1$1(self._path, function (er) {
          if (er) return self.error(er)
          self._old = null;
          create$2(self);
        })
      }

      // otherwise, just handle in the app-specific way
      // this creates a fs.WriteStream, or mkdir's, or whatever
      create$2(self);
    }
  };

  function create$2 (self) {
    // console.error("W create", self._path, Writer.dirmode)

    // XXX Need to clobber non-dirs that are in the way,
    // unless { clobber: false } in the props.
    mkdirp$1(path.dirname(self._path), Writer$1.dirmode, function (er, made) {
      // console.error("W created", path.dirname(self._path), er)
      if (er) return self.error(er)

      // later on, we have to set the mode and owner for these
      self._madeDir = made;
      return self._create()
    });
  }

  function endChmod (self, want, current, path$$1, cb) {
    var wantMode = want.mode;
    var chmod = want.follow || self.type !== 'SymbolicLink'
      ? 'chmod' : 'lchmod';

    if (!gracefulFs[chmod]) return cb()
    if (typeof wantMode !== 'number') return cb()

    var curMode = current.mode & parseInt('0777', 8);
    wantMode = wantMode & parseInt('0777', 8);
    if (wantMode === curMode) return cb()

    gracefulFs[chmod](path$$1, wantMode, cb);
  }

  function endChown (self, want, current, path$$1, cb) {
    // Don't even try it unless root.  Too easy to EPERM.
    if (process.platform === 'win32') return cb()
    if (!process.getuid || process.getuid() !== 0) return cb()
    if (typeof want.uid !== 'number' &&
      typeof want.gid !== 'number') return cb()

    if (current.uid === want.uid &&
      current.gid === want.gid) return cb()

    var chown = (self.props.follow || self.type !== 'SymbolicLink')
      ? 'chown' : 'lchown';
    if (!gracefulFs[chown]) return cb()

    if (typeof want.uid !== 'number') want.uid = current.uid;
    if (typeof want.gid !== 'number') want.gid = current.gid;

    gracefulFs[chown](path$$1, want.uid, want.gid, cb);
  }

  function endUtimes (self, want, current, path$$1, cb) {
    if (!gracefulFs.utimes || process.platform === 'win32') return cb()

    var utimes = (want.follow || self.type !== 'SymbolicLink')
      ? 'utimes' : 'lutimes';

    if (utimes === 'lutimes' && !gracefulFs[utimes]) {
      utimes = 'utimes';
    }

    if (!gracefulFs[utimes]) return cb()

    var curA = current.atime;
    var curM = current.mtime;
    var meA = want.atime;
    var meM = want.mtime;

    if (meA === undefined) meA = curA;
    if (meM === undefined) meM = curM;

    if (!isDate(meA)) meA = new Date(meA);
    if (!isDate(meM)) meA = new Date(meM);

    if (meA.getTime() === curA.getTime() &&
      meM.getTime() === curM.getTime()) return cb()

    gracefulFs[utimes](path$$1, meA, meM, cb);
  }

  // XXX This function is beastly.  Break it up!
  Writer$1.prototype._finish = function () {
    var self = this;

    if (self._finishing) return
    self._finishing = true;

    // console.error(" W Finish", self._path, self.size)

    // set up all the things.
    // At this point, we're already done writing whatever we've gotta write,
    // adding files to the dir, etc.
    var todo = 0;
    var errState = null;
    var done = false;

    if (self._old) {
      // the times will almost *certainly* have changed.
      // adds the utimes syscall, but remove another stat.
      self._old.atime = new Date(0);
      self._old.mtime = new Date(0);
      // console.error(" W Finish Stale Stat", self._path, self.size)
      setProps(self._old);
    } else {
      var stat = self.props.follow ? 'stat' : 'lstat';
      // console.error(" W Finish Stating", self._path, self.size)
      gracefulFs[stat](self._path, function (er, current) {
        // console.error(" W Finish Stated", self._path, self.size, current)
        if (er) {
          // if we're in the process of writing out a
          // directory, it's very possible that the thing we're linking to
          // doesn't exist yet (especially if it was intended as a symlink),
          // so swallow ENOENT errors here and just soldier on.
          if (er.code === 'ENOENT' &&
            (self.type === 'Link' || self.type === 'SymbolicLink') &&
            process.platform === 'win32') {
            self.ready = true;
            self.emit('ready');
            self.emit('end');
            self.emit('close');
            self.end = self._finish = function () {};
            return
          } else return self.error(er)
        }
        setProps(self._old = current);
      });
    }

    return

    function setProps (current) {
      todo += 3;
      endChmod(self, self.props, current, self._path, next('chmod'));
      endChown(self, self.props, current, self._path, next('chown'));
      endUtimes(self, self.props, current, self._path, next('utimes'));
    }

    function next (what) {
      return function (er) {
        // console.error("   W Finish", what, todo)
        if (errState) return
        if (er) {
          er.fstream_finish_call = what;
          return self.error(errState = er)
        }
        if (--todo > 0) return
        if (done) return
        done = true;

        // we may still need to set the mode/etc. on some parent dirs
        // that were created previously.  delay end/close until then.
        if (!self._madeDir) return end()
        else endMadeDir(self, self._path, end);

        function end (er) {
          if (er) {
            er.fstream_finish_call = 'setupMadeDir';
            return self.error(er)
          }
          // all the props have been set, so we're completely done.
          self.emit('end');
          self.emit('close');
        }
      }
    }
  };

  function endMadeDir (self, p, cb) {
    var made = self._madeDir;
    // everything *between* made and path.dirname(self._path)
    // needs to be set up.  Note that this may just be one dir.
    var d = path.dirname(p);

    endMadeDir_(self, d, function (er) {
      if (er) return cb(er)
      if (d === made) {
        return cb()
      }
      endMadeDir(self, d, cb);
    });
  }

  function endMadeDir_ (self, p, cb) {
    var dirProps = {};
    Object.keys(self.props).forEach(function (k) {
      dirProps[k] = self.props[k];

      // only make non-readable dirs if explicitly requested.
      if (k === 'mode' && self.type !== 'Directory') {
        dirProps[k] = dirProps[k] | parseInt('0111', 8);
      }
    });

    var todo = 3;
    var errState = null;
    gracefulFs.stat(p, function (er, current) {
      if (er) return cb(errState = er)
      endChmod(self, dirProps, current, p, next);
      endChown(self, dirProps, current, p, next);
      endUtimes(self, dirProps, current, p, next);
    });

    function next (er) {
      if (errState) return
      if (er) return cb(errState = er)
      if (--todo === 0) return cb()
    }
  }

  Writer$1.prototype.pipe = function () {
    this.error("Can't pipe from writable stream");
  };

  Writer$1.prototype.add = function () {
    this.error("Can't add to non-Directory type");
  };

  Writer$1.prototype.write = function () {
    return true
  };

  function objectToString (d) {
    return Object.prototype.toString.call(d)
  }

  function isDate (d) {
    return typeof d === 'object' && objectToString(d) === '[object Date]'
  }

  var fstream = createCommonjsModule(function (module, exports) {
  exports.Abstract = abstract_1;
  exports.Reader = reader$1;
  exports.Writer = writer$1;

  exports.File = {
    Reader: fileReader,
    Writer: fileWriter
  };

  exports.Dir = {
    Reader: dirReader,
    Writer: dirWriter
  };

  exports.Link = {
    Reader: linkReader,
    Writer: linkWriter
  };

  exports.Proxy = {
    Reader: proxyReader,
    Writer: proxyWriter
  };

  exports.Reader.Dir = exports.DirReader = exports.Dir.Reader;
  exports.Reader.File = exports.FileReader = exports.File.Reader;
  exports.Reader.Link = exports.LinkReader = exports.Link.Reader;
  exports.Reader.Proxy = exports.ProxyReader = exports.Proxy.Reader;

  exports.Writer.Dir = exports.DirWriter = exports.Dir.Writer;
  exports.Writer.File = exports.FileWriter = exports.File.Writer;
  exports.Writer.Link = exports.LinkWriter = exports.Link.Writer;
  exports.Writer.Proxy = exports.ProxyWriter = exports.Proxy.Writer;

  exports.collect = collect_1;
  });
  var fstream_1 = fstream.Abstract;
  var fstream_2 = fstream.Reader;
  var fstream_3 = fstream.Writer;
  var fstream_4 = fstream.File;
  var fstream_5 = fstream.Dir;
  var fstream_6 = fstream.Link;
  var fstream_7 = fstream.Proxy;
  var fstream_8 = fstream.DirReader;
  var fstream_9 = fstream.FileReader;
  var fstream_10 = fstream.LinkReader;
  var fstream_11 = fstream.ProxyReader;
  var fstream_12 = fstream.DirWriter;
  var fstream_13 = fstream.FileWriter;
  var fstream_14 = fstream.LinkWriter;
  var fstream_15 = fstream.ProxyWriter;
  var fstream_16 = fstream.collect;

  /**
       * Appends an array to the end of another.
       * The first array will be modified.
       */
      function append(arr1, arr2) {
          if (arr2 == null) {
              return arr1;
          }

          var pad = arr1.length,
              i = -1,
              len = arr2.length;
          while (++i < len) {
              arr1[pad + i] = arr2[i];
          }
          return arr1;
      }
      var append_1 = append;

  /**
       * Returns the first argument provided to it.
       */
      function identity$1(val){
          return val;
      }

      var identity_1 = identity$1;

  /**
       * Returns a function that gets a property of the passed object
       */
      function prop(name){
          return function(obj){
              return obj[name];
          };
      }

      var prop_1 = prop;

  /**
       * Safer Object.hasOwnProperty
       */
       function hasOwn(obj, prop){
           return Object.prototype.hasOwnProperty.call(obj, prop);
       }

       var hasOwn_1 = hasOwn;

  var _hasDontEnumBug,
          _dontEnums;

      function checkDontEnum(){
          _dontEnums = [
                  'toString',
                  'toLocaleString',
                  'valueOf',
                  'hasOwnProperty',
                  'isPrototypeOf',
                  'propertyIsEnumerable',
                  'constructor'
              ];

          _hasDontEnumBug = true;

          for (var key in {'toString': null}) {
              _hasDontEnumBug = false;
          }
      }

      /**
       * Similar to Array/forEach but works over object properties and fixes Don't
       * Enum bug on IE.
       * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
       */
      function forIn(obj, fn, thisObj){
          var key, i = 0;
          // no need to check if argument is a real object that way we can use
          // it for arrays, functions, date, etc.

          //post-pone check till needed
          if (_hasDontEnumBug == null) checkDontEnum();

          for (key in obj) {
              if (exec(fn, obj, key, thisObj) === false) {
                  break;
              }
          }


          if (_hasDontEnumBug) {
              var ctor = obj.constructor,
                  isProto = !!ctor && obj === ctor.prototype;

              while (key = _dontEnums[i++]) {
                  // For constructor, if it is a prototype object the constructor
                  // is always non-enumerable unless defined otherwise (and
                  // enumerated above).  For non-prototype objects, it will have
                  // to be defined on this object, since it cannot be defined on
                  // any prototype objects.
                  //
                  // For other [[DontEnum]] properties, check if the value is
                  // different than Object prototype value.
                  if (
                      (key !== 'constructor' ||
                          (!isProto && hasOwn_1(obj, key))) &&
                      obj[key] !== Object.prototype[key]
                  ) {
                      if (exec(fn, obj, key, thisObj) === false) {
                          break;
                      }
                  }
              }
          }
      }

      function exec(fn, obj, key, thisObj){
          return fn.call(thisObj, obj[key], key, obj);
      }

      var forIn_1 = forIn;

  /**
       * Similar to Array/forEach but works over object properties and fixes Don't
       * Enum bug on IE.
       * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
       */
      function forOwn(obj, fn, thisObj){
          forIn_1(obj, function(val, key){
              if (hasOwn_1(obj, key)) {
                  return fn.call(thisObj, obj[key], key, obj);
              }
          });
      }

      var forOwn_1 = forOwn;

  var _rKind = /^\[object (.*)\]$/,
          _toString = Object.prototype.toString,
          UNDEF;

      /**
       * Gets the "kind" of value. (e.g. "String", "Number", etc)
       */
      function kindOf(val) {
          if (val === null) {
              return 'Null';
          } else if (val === UNDEF) {
              return 'Undefined';
          } else {
              return _rKind.exec( _toString.call(val) )[1];
          }
      }
      var kindOf_1 = kindOf;

  /**
       * Check if value is from a specific "kind".
       */
      function isKind(val, kind){
          return kindOf_1(val) === kind;
      }
      var isKind_1 = isKind;

  /**
       */
      var isArray$1 = Array.isArray || function (val) {
          return isKind_1(val, 'Array');
      };
      var isArray_1 = isArray$1;

  function containsMatch(array, pattern) {
          var i = -1, length = array.length;
          while (++i < length) {
              if (deepMatches(array[i], pattern)) {
                  return true;
              }
          }

          return false;
      }

      function matchArray(target, pattern) {
          var i = -1, patternLength = pattern.length;
          while (++i < patternLength) {
              if (!containsMatch(target, pattern[i])) {
                  return false;
              }
          }

          return true;
      }

      function matchObject(target, pattern) {
          var result = true;
          forOwn_1(pattern, function(val, key) {
              if (!deepMatches(target[key], val)) {
                  // Return false to break out of forOwn early
                  return (result = false);
              }
          });

          return result;
      }

      /**
       * Recursively check if the objects match.
       */
      function deepMatches(target, pattern){
          if (target && typeof target === 'object') {
              if (isArray_1(target) && isArray_1(pattern)) {
                  return matchArray(target, pattern);
              } else {
                  return matchObject(target, pattern);
              }
          } else {
              return target === pattern;
          }
      }

      var deepMatches_1 = deepMatches;

  /**
       * Converts argument into a valid iterator.
       * Used internally on most array/object/collection methods that receives a
       * callback/iterator providing a shortcut syntax.
       */
      function makeIterator(src, thisObj){
          if (src == null) {
              return identity_1;
          }
          switch(typeof src) {
              case 'function':
                  // function is the first to improve perf (most common case)
                  // also avoid using `Function#call` if not needed, which boosts
                  // perf a lot in some cases
                  return (typeof thisObj !== 'undefined')? function(val, i, arr){
                      return src.call(thisObj, val, i, arr);
                  } : src;
              case 'object':
                  return function(val){
                      return deepMatches_1(val, src);
                  };
              case 'string':
              case 'number':
                  return prop_1(src);
          }
      }

      var makeIterator_ = makeIterator;

  /**
       * Maps the items in the array and concatenates the result arrays.
       */
      function collect$1(arr, callback, thisObj){
          callback = makeIterator_(callback, thisObj);
          var results = [];
          if (arr == null) {
              return results;
          }

          var i = -1, len = arr.length;
          while (++i < len) {
              var value = callback(arr[i], i, arr);
              if (value != null) {
                  append_1(results, value);
              }
          }

          return results;
      }

      var collect_1$1 = collect$1;

  /**
       * Array.indexOf
       */
      function indexOf(arr, item, fromIndex) {
          fromIndex = fromIndex || 0;
          if (arr == null) {
              return -1;
          }

          var len = arr.length,
              i = fromIndex < 0 ? len + fromIndex : fromIndex;
          while (i < len) {
              // we iterate over sparse items since there is no way to make it
              // work properly on IE 7-8. see #64
              if (arr[i] === item) {
                  return i;
              }

              i++;
          }

          return -1;
      }

      var indexOf_1 = indexOf;

  /**
       * Combines an array with all the items of another.
       * Does not allow duplicates and is case and type sensitive.
       */
      function combine(arr1, arr2) {
          if (arr2 == null) {
              return arr1;
          }

          var i = -1, len = arr2.length;
          while (++i < len) {
              if (indexOf_1(arr1, arr2[i]) === -1) {
                  arr1.push(arr2[i]);
              }
          }

          return arr1;
      }
      var combine_1 = combine;

  /**
       * Array filter
       */
      function filter$2(arr, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var results = [];
          if (arr == null) {
              return results;
          }

          var i = -1, len = arr.length, value;
          while (++i < len) {
              value = arr[i];
              if (callback(value, i, arr)) {
                  results.push(value);
              }
          }

          return results;
      }

      var filter_1 = filter$2;

  /**
       * Remove all null/undefined items from array.
       */
      function compact(arr) {
          return filter_1(arr, function(val){
              return (val != null);
          });
      }

      var compact_1 = compact;

  /**
       * If array contains values.
       */
      function contains(arr, val) {
          return indexOf_1(arr, val) !== -1;
      }
      var contains_1 = contains;

  /**
       * @return {array} Array of unique items
       */
      function unique(arr, compare){
          compare = compare || isEqual;
          return filter_1(arr, function(item, i, arr){
              var n = arr.length;
              while (++i < n) {
                  if ( compare(item, arr[i]) ) {
                      return false;
                  }
              }
              return true;
          });
      }

      function isEqual(a, b){
          return a === b;
      }

      var unique_1 = unique;

  /**
       * Array some
       */
      function some$1(arr, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var result = false;
          if (arr == null) {
              return result;
          }

          var i = -1, len = arr.length;
          while (++i < len) {
              // we iterate over sparse items since there is no way to make it
              // work properly on IE 7-8. see #64
              if ( callback(arr[i], i, arr) ) {
                  result = true;
                  break;
              }
          }

          return result;
      }

      var some_1 = some$1;

  /**
       * Create slice of source array or array-like object
       */
      function slice$2(arr, start, end){
          var len = arr.length;

          if (start == null) {
              start = 0;
          } else if (start < 0) {
              start = Math.max(len + start, 0);
          } else {
              start = Math.min(start, len);
          }

          if (end == null) {
              end = len;
          } else if (end < 0) {
              end = Math.max(len + end, 0);
          } else {
              end = Math.min(end, len);
          }

          var result = [];
          while (start < end) {
              result.push(arr[start++]);
          }

          return result;
      }

      var slice_1 = slice$2;

  /**
       * Return a new Array with elements that aren't present in the other Arrays.
       */
      function difference(arr) {
          var arrs = slice_1(arguments, 1),
              result = filter_1(unique_1(arr), function(needle){
                  return !some_1(arrs, function(haystack){
                      return contains_1(haystack, needle);
                  });
              });
          return result;
      }

      var difference_1 = difference;

  /**
       * Check if both arguments are egal.
       */
      function is(x, y){
          // implementation borrowed from harmony:egal spec
          if (x === y) {
            // 0 === -0, but they are not identical
            return x !== 0 || 1 / x === 1 / y;
          }

          // NaN !== NaN, but they are identical.
          // NaNs are the only non-reflexive value, i.e., if x !== x,
          // then x is a NaN.
          // isNaN is broken: it converts its argument to number, so
          // isNaN("foo") => true
          return x !== x && y !== y;
      }

      var is_1 = is;

  /**
       * Array every
       */
      function every(arr, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var result = true;
          if (arr == null) {
              return result;
          }

          var i = -1, len = arr.length;
          while (++i < len) {
              // we iterate over sparse items since there is no way to make it
              // work properly on IE 7-8. see #64
              if (!callback(arr[i], i, arr) ) {
                  result = false;
                  break;
              }
          }

          return result;
      }

      var every_1 = every;

  /**
       * Compares if both arrays have the same elements
       */
      function equals(a, b, callback){
          callback = callback || is_1;

          if (!isArray_1(a) || !isArray_1(b)) {
              return callback(a, b);
          }

          if (a.length !== b.length) {
              return false;
          }

          return every_1(a, makeCompare(callback), b);
      }

      function makeCompare(callback) {
          return function(value, i) {
              return i in this && callback(value, this[i]);
          };
      }

      var equals_1 = equals;

  /**
       * Returns the index of the first item that matches criteria
       */
      function findIndex(arr, iterator, thisObj){
          iterator = makeIterator_(iterator, thisObj);
          if (arr == null) {
              return -1;
          }

          var i = -1, len = arr.length;
          while (++i < len) {
              if (iterator(arr[i], i, arr)) {
                  return i;
              }
          }

          return -1;
      }

      var findIndex_1 = findIndex;

  /**
       * Returns first item that matches criteria
       */
      function find(arr, iterator, thisObj){
          var idx = findIndex_1(arr, iterator, thisObj);
          return idx >= 0? arr[idx] : void(0);
      }

      var find_1 = find;

  /**
       * Returns the index of the last item that matches criteria
       */
      function findLastIndex(arr, iterator, thisObj){
          iterator = makeIterator_(iterator, thisObj);
          if (arr == null) {
              return -1;
          }

          var n = arr.length;
          while (--n >= 0) {
              if (iterator(arr[n], n, arr)) {
                  return n;
              }
          }

          return -1;
      }

      var findLastIndex_1 = findLastIndex;

  /**
       * Returns last item that matches criteria
       */
      function findLast(arr, iterator, thisObj){
          var idx = findLastIndex_1(arr, iterator, thisObj);
          return idx >= 0? arr[idx] : void(0);
      }

      var findLast_1 = findLast;

  /*
       * Helper function to flatten to a destination array.
       * Used to remove the need to create intermediate arrays while flattening.
       */
      function flattenTo(arr, result, level) {
          if (level === 0) {
              append_1(result, arr);
              return result;
          }

          var value,
              i = -1,
              len = arr.length;
          while (++i < len) {
              value = arr[i];
              if (isArray_1(value)) {
                  flattenTo(value, result, level - 1);
              } else {
                  result.push(value);
              }
          }
          return result;
      }

      /**
       * Recursively flattens an array.
       * A new array containing all the elements is returned.
       * If level is specified, it will only flatten up to that level.
       */
      function flatten$2(arr, level) {
          if (arr == null) {
              return [];
          }

          level = level == null ? -1 : level;
          return flattenTo(arr, [], level);
      }

      var flatten_1 = flatten$2;

  /**
       * Array forEach
       */
      function forEach(arr, callback, thisObj) {
          if (arr == null) {
              return;
          }
          var i = -1,
              len = arr.length;
          while (++i < len) {
              // we iterate over sparse items since there is no way to make it
              // work properly on IE 7-8. see #64
              if ( callback.call(thisObj, arr[i], i, arr) === false ) {
                  break;
              }
          }
      }

      var forEach_1 = forEach;

  /**
       * Bucket the array values.
       */
      function groupBy(arr, categorize, thisObj) {
          if (categorize) {
              categorize = makeIterator_(categorize, thisObj);
          } else {
              // Default to identity function.
              categorize = identity_1;
          }

          var buckets = {};
          forEach_1(arr, function(element) {
              var bucket = categorize(element);
              if (!(bucket in buckets)) {
                  buckets[bucket] = [];
              }

              buckets[bucket].push(element);
          });

          return buckets;
      }

      var groupBy_1 = groupBy;

  /**
       * Insert item into array if not already present.
       */
      function insert(arr, rest_items) {
          var diff = difference_1(slice_1(arguments, 1), arr);
          if (diff.length) {
              Array.prototype.push.apply(arr, diff);
          }
          return arr.length;
      }
      var insert_1 = insert;

  /**
       * Return a new Array with elements common to all Arrays.
       * - based on underscore.js implementation
       */
      function intersection(arr) {
          var arrs = slice_1(arguments, 1),
              result = filter_1(unique_1(arr), function(needle){
                  return every_1(arrs, function(haystack){
                      return contains_1(haystack, needle);
                  });
              });
          return result;
      }

      var intersection_1 = intersection;

  /**
       * Call `methodName` on each item of the array passing custom arguments if
       * needed.
       */
      function invoke(arr, methodName, var_args){
          if (arr == null) {
              return arr;
          }

          var args = slice_1(arguments, 2);
          var i = -1, len = arr.length, value;
          while (++i < len) {
              value = arr[i];
              value[methodName].apply(value, args);
          }

          return arr;
      }

      var invoke_1 = invoke;

  function isValidString(val) {
          return (val != null && val !== '');
      }

      /**
       * Joins strings with the specified separator inserted between each value.
       * Null values and empty strings will be excluded.
       */
      function join$1(items, separator) {
          separator = separator || '';
          return filter_1(items, isValidString).join(separator);
      }

      var join_1 = join$1;

  /**
       * Returns last element of array.
       */
      function last(arr){
          if (arr == null || arr.length < 1) {
              return undefined;
          }

          return arr[arr.length - 1];
      }

      var last_1 = last;

  /**
       * Array lastIndexOf
       */
      function lastIndexOf(arr, item, fromIndex) {
          if (arr == null) {
              return -1;
          }

          var len = arr.length;
          fromIndex = (fromIndex == null || fromIndex >= len)? len - 1 : fromIndex;
          fromIndex = (fromIndex < 0)? len + fromIndex : fromIndex;

          while (fromIndex >= 0) {
              // we iterate over sparse items since there is no way to make it
              // work properly on IE 7-8. see #64
              if (arr[fromIndex] === item) {
                  return fromIndex;
              }
              fromIndex--;
          }

          return -1;
      }

      var lastIndexOf_1 = lastIndexOf;

  /**
       * Array map
       */
      function map$1(arr, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var results = [];
          if (arr == null){
              return results;
          }

          var i = -1, len = arr.length;
          while (++i < len) {
              results[i] = callback(arr[i], i, arr);
          }

          return results;
      }

       var map_1 = map$1;

  /**
       * Return maximum value inside array
       */
      function max(arr, iterator, thisObj){
          if (arr == null || !arr.length) {
              return Infinity;
          } else if (arr.length && !iterator) {
              return Math.max.apply(Math, arr);
          } else {
              iterator = makeIterator_(iterator, thisObj);
              var result,
                  compare = -Infinity,
                  value,
                  temp;

              var i = -1, len = arr.length;
              while (++i < len) {
                  value = arr[i];
                  temp = iterator(value, i, arr);
                  if (temp > compare) {
                      compare = temp;
                      result = value;
                  }
              }

              return result;
          }
      }

      var max_1 = max;

  /**
       * Return minimum value inside array
       */
      function min(arr, iterator, thisObj){
          if (arr == null || !arr.length) {
              return -Infinity;
          } else if (arr.length && !iterator) {
              return Math.min.apply(Math, arr);
          } else {
              iterator = makeIterator_(iterator, thisObj);
              var result,
                  compare = Infinity,
                  value,
                  temp;

              var i = -1, len = arr.length;
              while (++i < len) {
                  value = arr[i];
                  temp = iterator(value, i, arr);
                  if (temp < compare) {
                      compare = temp;
                      result = value;
                  }
              }

              return result;
          }
      }

      var min_1 = min;

  /**
   * @constant Minimum 32-bit signed integer value (-2^31).
   */

      var MIN_INT = -2147483648;

  /**
   * @constant Maximum 32-bit signed integer value. (2^31 - 1)
   */

      var MAX_INT = 2147483647;

  /**
       * Just a wrapper to Math.random. No methods inside mout/random should call
       * Math.random() directly so we can inject the pseudo-random number
       * generator if needed (ie. in case we need a seeded random or a better
       * algorithm than the native one)
       */
      function random$1(){
          return random$1.get();
      }

      // we expose the method so it can be swapped if needed
      random$1.get = Math.random;

      var random_1 = random$1;

  /**
       * Returns random number inside range
       */
      function rand(min, max){
          min = min == null? MIN_INT : min;
          max = max == null? MAX_INT : max;
          return min + (max - min) * random_1();
      }

      var rand_1 = rand;

  /**
       * Gets random integer inside range or snap to min/max values.
       */
      function randInt(min, max){
          min = min == null? MIN_INT : ~~min;
          max = max == null? MAX_INT : ~~max;
          // can't be max + 0.5 otherwise it will round up if `rand`
          // returns `max` causing it to overflow range.
          // -0.5 and + 0.49 are required to avoid bias caused by rounding
          return Math.round( rand_1(min - 0.5, max + 0.499999999999) );
      }

      var randInt_1 = randInt;

  /**
       * Remove random item(s) from the Array and return it.
       * Returns an Array of items if [nItems] is provided or a single item if
       * it isn't specified.
       */
      function pick(arr, nItems){
          if (nItems != null) {
              var result = [];
              if (nItems > 0 && arr && arr.length) {
                  nItems = nItems > arr.length? arr.length : nItems;
                  while (nItems--) {
                      result.push( pickOne(arr) );
                  }
              }
              return result;
          }
          return (arr && arr.length)? pickOne(arr) : void(0);
      }


      function pickOne(arr){
          var idx = randInt_1(0, arr.length - 1);
          return arr.splice(idx, 1)[0];
      }


      var pick_1 = pick;

  /**
       * Extract a list of property values.
       */
      function pluck(arr, propName){
          return map_1(arr, propName);
      }

      var pluck_1 = pluck;

  /**
      * Count number of full steps.
      */
      function countSteps(val, step, overflow){
          val = Math.floor(val / step);

          if (overflow) {
              return val % overflow;
          }

          return val;
      }

      var countSteps_1 = countSteps;

  /**
       * Returns an Array of numbers inside range.
       */
      function range$1(start, stop, step) {
          if (stop == null) {
              stop = start;
              start = 0;
          }
          step = step || 1;

          var result = [],
              nSteps = countSteps_1(stop - start, step),
              i = start;

          while (i <= stop) {
              result.push(i);
              i += step;
          }

          return result;
      }

      var range_1 = range$1;

  /**
       * Array reduce
       */
      function reduce$1(arr, fn, initVal) {
          // check for args.length since initVal might be "undefined" see #gh-57
          var hasInit = arguments.length > 2,
              result = initVal;

          if (arr == null || !arr.length) {
              if (!hasInit) {
                  throw new Error('reduce of empty array with no initial value');
              } else {
                  return initVal;
              }
          }

          var i = -1, len = arr.length;
          while (++i < len) {
              if (!hasInit) {
                  result = arr[i];
                  hasInit = true;
              } else {
                  result = fn(result, arr[i], i, arr);
              }
          }

          return result;
      }

      var reduce_1 = reduce$1;

  /**
       * Array reduceRight
       */
      function reduceRight(arr, fn, initVal) {
          // check for args.length since initVal might be "undefined" see #gh-57
          var hasInit = arguments.length > 2;

          if (arr == null || !arr.length) {
              if (hasInit) {
                  return initVal;
              } else {
                  throw new Error('reduce of empty array with no initial value');
              }
          }

          var i = arr.length, result = initVal, value;
          while (--i >= 0) {
              // we iterate over sparse items since there is no way to make it
              // work properly on IE 7-8. see #64
              value = arr[i];
              if (!hasInit) {
                  result = value;
                  hasInit = true;
              } else {
                  result = fn(result, value, i, arr);
              }
          }
          return result;
      }

      var reduceRight_1 = reduceRight;

  /**
       * Array reject
       */
      function reject(arr, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var results = [];
          if (arr == null) {
              return results;
          }

          var i = -1, len = arr.length, value;
          while (++i < len) {
              value = arr[i];
              if (!callback(value, i, arr)) {
                  results.push(value);
              }
          }

          return results;
      }

      var reject_1 = reject;

  /**
       * Remove a single item from the array.
       * (it won't remove duplicates, just a single item)
       */
      function remove$2(arr, item){
          var idx = indexOf_1(arr, item);
          if (idx !== -1) arr.splice(idx, 1);
      }

      var remove_1$1 = remove$2;

  /**
       * Remove all instances of an item from array.
       */
      function removeAll(arr, item){
          var idx = indexOf_1(arr, item);
          while (idx !== -1) {
              arr.splice(idx, 1);
              idx = indexOf_1(arr, item, idx);
          }
      }

      var removeAll_1 = removeAll;

  /**
       * Returns a copy of the array in reversed order.
       */
      function reverse$1(array) {
          var copy = array.slice();
          copy.reverse();
          return copy;
      }

      var reverse_1 = reverse$1;

  /**
       * Shuffle array items.
       */
      function shuffle(arr) {
          var results = [],
              rnd;
          if (arr == null) {
              return results;
          }

          var i = -1, len = arr.length;
          while (++i < len) {
              if (!i) {
                  results[0] = arr[0];
              } else {
                  rnd = randInt_1(0, i);
                  results[i] = results[rnd];
                  results[rnd] = arr[i];
              }
          }

          return results;
      }

      var shuffle_1 = shuffle;

  /**
       * Merge sort (http://en.wikipedia.org/wiki/Merge_sort)
       */
      function mergeSort(arr, compareFn) {
          if (arr == null) {
              return [];
          } else if (arr.length < 2) {
              return arr;
          }

          if (compareFn == null) {
              compareFn = defaultCompare;
          }

          var mid, left, right;

          mid   = ~~(arr.length / 2);
          left  = mergeSort( arr.slice(0, mid), compareFn );
          right = mergeSort( arr.slice(mid, arr.length), compareFn );

          return merge$1(left, right, compareFn);
      }

      function defaultCompare(a, b) {
          return a < b ? -1 : (a > b? 1 : 0);
      }

      function merge$1(left, right, compareFn) {
          var result = [];

          while (left.length && right.length) {
              if (compareFn(left[0], right[0]) <= 0) {
                  // if 0 it should preserve same order (stable)
                  result.push(left.shift());
              } else {
                  result.push(right.shift());
              }
          }

          if (left.length) {
              result.push.apply(result, left);
          }

          if (right.length) {
              result.push.apply(result, right);
          }

          return result;
      }

      var sort = mergeSort;

  /*
       * Sort array by the result of the callback
       */
      function sortBy(arr, callback, context){
          callback = makeIterator_(callback, context);

          return sort(arr, function(a, b) {
              a = callback(a);
              b = callback(b);
              return (a < b) ? -1 : ((a > b) ? 1 : 0);
          });
      }

      var sortBy_1 = sortBy;

  /**
       * Split array into a fixed number of segments.
       */
      function split(array, segments) {
          segments = segments || 2;
          var results = [];
          if (array == null) {
              return results;
          }

          var minLength = Math.floor(array.length / segments),
              remainder = array.length % segments,
              i = 0,
              len = array.length,
              segmentIndex = 0,
              segmentLength;

          while (i < len) {
              segmentLength = minLength;
              if (segmentIndex < remainder) {
                  segmentLength++;
              }

              results.push(array.slice(i, i + segmentLength));

              segmentIndex++;
              i += segmentLength;
          }

          return results;
      }
      var split_1 = split;

  /**
       * Iterates over a callback a set amount of times
       * returning the results
       */
      function take(n, callback, thisObj){
          var i = -1;
          var arr = [];
          if( !thisObj ){
              while(++i < n){
                  arr[i] = callback(i, n);
              }
          } else {
              while(++i < n){
                  arr[i] = callback.call(thisObj, i, n);
              }
          }
          return arr;
      }

      var take_1 = take;

  /**
       */
      function isFunction(val) {
          return isKind_1(val, 'Function');
      }
      var isFunction_1 = isFunction;

  /**
       * Creates an object that holds a lookup for the objects in the array.
       */
      function toLookup(arr, key) {
          var result = {};
          if (arr == null) {
              return result;
          }

          var i = -1, len = arr.length, value;
          if (isFunction_1(key)) {
              while (++i < len) {
                  value = arr[i];
                  result[key(value)] = value;
              }
          } else {
              while (++i < len) {
                  value = arr[i];
                  result[value[key]] = value;
              }
          }

          return result;
      }
      var toLookup_1 = toLookup;

  /**
       * Concat multiple arrays and remove duplicates
       */
      function union(arrs) {
          var results = [];
          var i = -1, len = arguments.length;
          while (++i < len) {
              append_1(results, arguments[i]);
          }

          return unique_1(results);
      }

      var union_1 = union;

  /**
       * Exclusive OR. Returns items that are present in a single array.
       * - like ptyhon's `symmetric_difference`
       */
      function xor$1(arr1, arr2) {
          arr1 = unique_1(arr1);
          arr2 = unique_1(arr2);

          var a1 = filter_1(arr1, function(item){
                  return !contains_1(arr2, item);
              }),
              a2 = filter_1(arr2, function(item){
                  return !contains_1(arr1, item);
              });

          return a1.concat(a2);
      }

      var xor_1 = xor$1;

  function getLength$1(arr) {
          return arr == null ? 0 : arr.length;
      }

      /**
       * Merges together the values of each of the arrays with the values at the
       * corresponding position.
       */
      function zip(arr){
          var len = arr ? max_1(map_1(arguments, getLength$1)) : 0,
              results = [],
              i = -1;
          while (++i < len) {
              // jshint loopfunc: true
              results.push(map_1(arguments, function(item) {
                  return item == null ? undefined : item[i];
              }));
          }

          return results;
      }

      var zip_1 = zip;

  //automatically generated, do not edit!
  //run `node build` instead
  var array$1 = {
      'append' : append_1,
      'collect' : collect_1$1,
      'combine' : combine_1,
      'compact' : compact_1,
      'contains' : contains_1,
      'difference' : difference_1,
      'equals' : equals_1,
      'every' : every_1,
      'filter' : filter_1,
      'find' : find_1,
      'findIndex' : findIndex_1,
      'findLast' : findLast_1,
      'findLastIndex' : findLastIndex_1,
      'flatten' : flatten_1,
      'forEach' : forEach_1,
      'groupBy' : groupBy_1,
      'indexOf' : indexOf_1,
      'insert' : insert_1,
      'intersection' : intersection_1,
      'invoke' : invoke_1,
      'join' : join_1,
      'last' : last_1,
      'lastIndexOf' : lastIndexOf_1,
      'map' : map_1,
      'max' : max_1,
      'min' : min_1,
      'pick' : pick_1,
      'pluck' : pluck_1,
      'range' : range_1,
      'reduce' : reduce_1,
      'reduceRight' : reduceRight_1,
      'reject' : reject_1,
      'remove' : remove_1$1,
      'removeAll' : removeAll_1,
      'reverse' : reverse_1,
      'shuffle' : shuffle_1,
      'slice' : slice_1,
      'some' : some_1,
      'sort' : sort,
      'sortBy' : sortBy_1,
      'split' : split_1,
      'take' : take_1,
      'toLookup' : toLookup_1,
      'union' : union_1,
      'unique' : unique_1,
      'xor' : xor_1,
      'zip' : zip_1
  };

  /**
       * internal method used to create other collection modules.
       */
      function makeCollectionMethod(arrMethod, objMethod, defaultReturn) {
          return function(){
              var args = slice_1(arguments);
              if (args[0] == null) {
                  return defaultReturn;
              }
              // array-like is treated as array
              return (typeof args[0].length === 'number')? arrMethod.apply(null, args) : objMethod.apply(null, args);
          };
      }

      var make_ = makeCollectionMethod;

  /**
       * Object some
       */
      function some$2(obj, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var result = false;
          forOwn_1(obj, function(val, key) {
              if (callback(val, key, obj)) {
                  result = true;
                  return false; // break
              }
          });
          return result;
      }

      var some_1$1 = some$2;

  /**
       * Check if object contains value
       */
      function contains$1(obj, needle) {
          return some_1$1(obj, function(val) {
              return (val === needle);
          });
      }
      var contains_1$1 = contains$1;

  /**
       */
      var contains$2 = make_(contains_1, contains_1$1);

  /**
       * Object every
       */
      function every$1(obj, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var result = true;
          forOwn_1(obj, function(val, key) {
              // we consider any falsy values as "false" on purpose so shorthand
              // syntax can be used to check property existence
              if (!callback(val, key, obj)) {
                  result = false;
                  return false; // break
              }
          });
          return result;
      }

      var every_1$1 = every$1;

  /**
       */
      var every$2 = make_(every_1, every_1$1);

  /**
       */
      var forEach$1 = make_(forEach_1, forOwn_1);

  /**
       * filter collection values, returns array.
       */
      function filter$3(list, iterator, thisObj) {
          iterator = makeIterator_(iterator, thisObj);
          var results = [];
          if (!list) {
              return results;
          }
          forEach$1(list, function(value, index, list) {
              if (iterator(value, index, list)) {
                  results[results.length] = value;
              }
          });
          return results;
      }

      var filter_1$1 = filter$3;

  /**
       * Returns first item that matches criteria
       */
      function find$1(obj, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var result;
          some_1$1(obj, function(value, key, obj) {
              if (callback(value, key, obj)) {
                  result = value;
                  return true; //break
              }
          });
          return result;
      }

      var find_1$1 = find$1;

  /**
       * Find value that returns true on iterator check.
       */
      var find$2 = make_(find_1, find_1$1);

  /**
       */
      function isObject$1(val) {
          return isKind_1(val, 'Object');
      }
      var isObject_1 = isObject$1;

  /**
       * Get object values
       */
      function values(obj) {
          var vals = [];
          forOwn_1(obj, function(val, key){
              vals.push(val);
          });
          return vals;
      }

      var values_1 = values;

  /**
       * Map collection values, returns Array.
       */
      function map$2(list, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          // list.length to check array-like object, if not array-like
          // we simply map all the object values
          if( isObject_1(list) && list.length == null ){
              list = values_1(list);
          }
          return map_1(list, function (val, key, list) {
              return callback(val, key, list);
          });
      }

      var map_1$1 = map$2;

  /**
       * Returns maximum value inside object.
       */
      function max$1(obj, compareFn) {
          return max_1(values_1(obj), compareFn);
      }

      var max_1$1 = max$1;

  /**
       * Get maximum value inside collection
       */
      var max$2 = make_(max_1, max_1$1);

  /**
       * Returns minimum value inside object.
       */
      function min$1(obj, iterator) {
          return min_1(values_1(obj), iterator);
      }

      var min_1$1 = min$1;

  /**
       * Get minimum value inside collection.
       */
      var min$2 = make_(min_1, min_1$1);

  /**
       * Extract a list of property values.
       */
      function pluck$1(list, key) {
          return map_1$1(list, function(value) {
              return value[key];
          });
      }

      var pluck_1$1 = pluck$1;

  /**
       * Get object size
       */
      function size(obj) {
          var count = 0;
          forOwn_1(obj, function(){
              count++;
          });
          return count;
      }

      var size_1 = size;

  /**
       * Object reduce
       */
      function reduce$2(obj, callback, memo, thisObj) {
          var initial = arguments.length > 2;

          if (!size_1(obj) && !initial) {
              throw new Error('reduce of empty object with no initial value');
          }

          forOwn_1(obj, function(value, key, list) {
              if (!initial) {
                  memo = value;
                  initial = true;
              }
              else {
                  memo = callback.call(thisObj, memo, value, key, list);
              }
          });

          return memo;
      }

      var reduce_1$1 = reduce$2;

  /**
       */
      var reduce$3 = make_(reduce_1, reduce_1$1);

  /**
       * Inverse or collection/filter
       */
      function reject$1(list, iterator, thisObj) {
          iterator = makeIterator_(iterator, thisObj);
          return filter_1$1(list, function(value, index, list) {
              return !iterator(value, index, list);
          }, thisObj);
      }

      var reject_1$1 = reject$1;

  /**
       * Get collection size
       */
      function size$1(list) {
          if (!list) {
              return 0;
          }
          if (isArray_1(list)) {
              return list.length;
          }
          return size_1(list);
      }

      var size_1$1 = size$1;

  /**
       */
      var some$3 = make_(some_1, some_1$1);

  //automatically generated, do not edit!
  //run `node build` instead
  var collection = {
      'contains' : contains$2,
      'every' : every$2,
      'filter' : filter_1$1,
      'find' : find$2,
      'forEach' : forEach$1,
      'make_' : make_,
      'map' : map_1$1,
      'max' : max$2,
      'min' : min$2,
      'pluck' : pluck_1$1,
      'reduce' : reduce$3,
      'reject' : reject_1$1,
      'size' : size_1$1,
      'some' : some$3
  };

  /**
       */
      function isDate$1(val) {
          return isKind_1(val, 'Date');
      }
      var isDate_1 = isDate$1;

  /**
       * return the day of the year (1..366)
       */
      function dayOfTheYear(date){
          return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) -
                  Date.UTC(date.getFullYear(), 0, 1)) / 86400000 + 1;
      }

      var dayOfTheYear_1 = dayOfTheYear;

  /**
       * checks if it's a leap year
       */
      function isLeapYear(fullYear){
          if (isDate_1(fullYear)) {
              fullYear = fullYear.getFullYear();
          }
          return fullYear % 400 === 0 || (fullYear % 100 !== 0 && fullYear % 4 === 0);
      }

      var isLeapYear_1 = isLeapYear;

  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

      /**
       * returns the total amount of days in the month (considering leap years)
       */
      function totalDaysInMonth(fullYear, monthIndex){
          if (isDate_1(fullYear)) {
              monthIndex = fullYear.getMonth();
          }

          if (monthIndex === 1 && isLeapYear_1(fullYear)) {
              return 29;
          } else {
              return DAYS_IN_MONTH[monthIndex];
          }
      }

      var totalDaysInMonth_1 = totalDaysInMonth;

  /**
       * return the amount of days in the year following the gregorian calendar
       * and leap years
       */
      function totalDaysInYear(fullYear){
          return isLeapYear_1(fullYear)? 366 : 365;
      }

      var totalDaysInYear_1 = totalDaysInYear;

  /**
       * convert time into another unit
       */
      function convert(val, sourceUnitName, destinationUnitName){
          destinationUnitName = destinationUnitName || 'ms';
          return (val * getUnit(sourceUnitName)) / getUnit(destinationUnitName);
      }


      //TODO: maybe extract to a separate module
      function getUnit(unitName){
          switch(unitName){
              case 'ms':
              case 'millisecond':
                  return 1;
              case 's':
              case 'second':
                   return 1000;
              case 'm':
              case 'minute':
                   return 60000;
              case 'h':
              case 'hour':
                   return 3600000;
              case 'd':
              case 'day':
                   return 86400000;
              case 'w':
              case 'week':
                   return 604800000;
              default:
                  throw new Error('"'+ unitName + '" is not a valid unit');
          }
      }


      var convert_1 = convert;

  /**
       * calculate the difference between dates (range)
       */
      function diff(start, end, unitName){
          // sort the dates to make it easier to process (specially year/month)
          if (start > end) {
              var swap = start;
              start = end;
              end = swap;
          }

          var output;

          if (unitName === 'month') {
              output = getMonthsDiff(start, end);
          } else if (unitName === 'year'){
              output = getYearsDiff(start, end);
          } else if (unitName != null) {
              if (unitName === 'day') {
                  // ignore timezone difference because of daylight savings time
                  start = toUtc(start);
                  end = toUtc(end);
              }
              output = convert_1(end - start, 'ms', unitName);
          } else {
              output = end - start;
          }

          return output;
      }


      function toUtc(d){
          // we ignore timezone differences on purpose because of daylight
          // savings time, otherwise it would return fractional days/weeks even
          // if a full day elapsed. eg:
          // Wed Feb 12 2014 00:00:00 GMT-0200 (BRST)
          // Sun Feb 16 2014 00:00:00 GMT-0300 (BRT)
          // diff should be 4 days and not 4.041666666666667
          return Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(),
                          d.getHours(), d.getMinutes(), d.getSeconds(),
                          d.getMilliseconds());
      }


      function getMonthsDiff(start, end){
          return getElapsedMonths(start, end) +
                 getElapsedYears(start, end) * 12 +
                 getFractionalMonth(start, end);
      }


      function getYearsDiff(start, end){
          var elapsedYears = getElapsedYears(start, end);
          return elapsedYears + getFractionalYear(start, end, elapsedYears);
      }


      function getElapsedMonths(start, end){
          var monthDiff = end.getMonth() - start.getMonth();
          if (monthDiff < 0) {
              monthDiff += 12;
          }
          // less than a full month
          if (start.getDate() > end.getDate()) {
              monthDiff -= 1;
          }
          return monthDiff;
      }


      function getElapsedYears(start, end){
          var yearDiff = end.getFullYear() - start.getFullYear();
          // less than a full year
          if (start.getMonth() > end.getMonth()) {
              yearDiff -= 1;
          }
          return yearDiff;
      }


      function getFractionalMonth(start, end){
          var fractionalDiff = 0;
          var startDay = start.getDate();
          var endDay = end.getDate();

          if (startDay !== endDay) {
              var startTotalDays = totalDaysInMonth_1(start);
              var endTotalDays = totalDaysInMonth_1(end);
              var totalDays;
              var daysElapsed;

              if (startDay > endDay) {
                  // eg: Jan 29 - Feb 27 (29 days elapsed but not a full month)
                  var baseDay = startTotalDays - startDay;
                  daysElapsed = endDay + baseDay;
                  // total days should be relative to 1st day of next month if
                  // startDay > endTotalDays
                  totalDays = (startDay > endTotalDays)?
                      endTotalDays + baseDay + 1 : startDay + baseDay;
              } else {
                  // fractional is only based on endMonth eg: Jan 12 - Feb 18
                  // (6 fractional days, 28 days until next full month)
                  daysElapsed = endDay - startDay;
                  totalDays = endTotalDays;
              }

              fractionalDiff = daysElapsed / totalDays;
          }

          return fractionalDiff;
      }


      function getFractionalYear(start, end, elapsedYears){
          var base = elapsedYears?
              new Date(end.getFullYear(), start.getMonth(), start.getDate()) :
              start;
          var elapsedDays = diff(base, end, 'day');
          return elapsedDays / totalDaysInYear_1(end);
      }


      var diff_1 = diff;

  /**
      * Combine properties from all the objects into first one.
      * - This method affects target object in place, if you want to create a new Object pass an empty object as first param.
      * @param {object} target    Target Object
      * @param {...object} objects    Objects to be combined (0...n objects).
      * @return {object} Target Object.
      */
      function mixIn(target, objects){
          var i = 0,
              n = arguments.length,
              obj;
          while(++i < n){
              obj = arguments[i];
              if (obj != null) {
                  forOwn_1(obj, copyProp, target);
              }
          }
          return target;
      }

      function copyProp(val, key){
          this[key] = val;
      }

      var mixIn_1 = mixIn;

  // en-US (English, United States)
      var enUS = {
          "am" : "AM",
          "pm" : "PM",

          "x": "%m/%d/%y",
          "X": "%H:%M:%S",
          "c": "%a %d %b %Y %I:%M:%S %p %Z",

          "months" : [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
          ],

          "months_abbr" : [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec"
          ],

          "days" : [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
          ],

          "days_abbr" : [
              "Sun",
              "Mon",
              "Tue",
              "Wed",
              "Thu",
              "Fri",
              "Sat"
          ]
      };

  // we also use mixIn to make sure we don't affect the original locale
      var activeLocale = mixIn_1({}, enUS, {
          // we expose a "set" method to allow overriding the global locale
          set : function(localeData){
              mixIn_1(activeLocale, localeData);
          }
      });

      var i18n_ = activeLocale;

  /**
       * Checks if the value is created by the `Object` constructor.
       */
      function isPlainObject(value) {
          return (!!value && typeof value === 'object' &&
              value.constructor === Object);
      }

      var isPlainObject_1 = isPlainObject;

  /**
       * Clone native types.
       */
      function clone$1(val){
          switch (kindOf_1(val)) {
              case 'Object':
                  return cloneObject(val);
              case 'Array':
                  return cloneArray(val);
              case 'RegExp':
                  return cloneRegExp(val);
              case 'Date':
                  return cloneDate(val);
              default:
                  return val;
          }
      }

      function cloneObject(source) {
          if (isPlainObject_1(source)) {
              return mixIn_1({}, source);
          } else {
              return source;
          }
      }

      function cloneRegExp(r) {
          var flags = '';
          flags += r.multiline ? 'm' : '';
          flags += r.global ? 'g' : '';
          flags += r.ignoreCase ? 'i' : '';
          return new RegExp(r.source, flags);
      }

      function cloneDate(date) {
          return new Date(+date);
      }

      function cloneArray(arr) {
          return arr.slice();
      }

      var clone_1 = clone$1;

  /**
       * get a new Date object representing start of period
       */
      function startOf(date, period){
          date = clone_1(date);

          // intentionally removed "break" from switch since start of
          // month/year/etc should also reset the following periods
          switch (period) {
              case 'year':
                  date.setMonth(0);
              /* falls through */
              case 'month':
                  date.setDate(1);
              /* falls through */
              case 'week':
              case 'day':
                  date.setHours(0);
              /* falls through */
              case 'hour':
                  date.setMinutes(0);
              /* falls through */
              case 'minute':
                  date.setSeconds(0);
              /* falls through */
              case 'second':
                  date.setMilliseconds(0);
                  break;
              default:
                  throw new Error('"'+ period +'" is not a valid period');
          }

          // week is the only case that should reset the weekDay and maybe even
          // overflow to previous month
          if (period === 'week') {
              var weekDay = date.getDay();
              var baseDate = date.getDate();
              if (weekDay) {
                  if (weekDay >= baseDate) {
                      //start of the week is on previous month
                      date.setDate(0);
                  }
                  date.setDate(date.getDate() - date.getDay());
              }
          }

          return date;
      }

      var startOf_1 = startOf;

  /**
       * Check if date is "same" with optional period
       */
      function isSame(date1, date2, period){
          if (period) {
              date1 = startOf_1(date1, period);
              date2 = startOf_1(date2, period);
          }
          return Number(date1) === Number(date2);
      }

      var isSame_1 = isSame;

  var datePatterns = [
          /^([0-9]{4})$/,                        // YYYY
          /^([0-9]{4})-([0-9]{2})$/,             // YYYY-MM (YYYYMM not allowed)
          /^([0-9]{4})-?([0-9]{2})-?([0-9]{2})$/ // YYYY-MM-DD or YYYYMMDD
      ];
      var ORD_DATE = /^([0-9]{4})-?([0-9]{3})$/; // YYYY-DDD

      var timePatterns = [
          /^([0-9]{2}(?:\.[0-9]*)?)$/,                      // HH.hh
          /^([0-9]{2}):?([0-9]{2}(?:\.[0-9]*)?)$/,          // HH:MM.mm
          /^([0-9]{2}):?([0-9]{2}):?([0-9]{2}(\.[0-9]*)?)$/ // HH:MM:SS.ss
      ];

      var DATE_TIME = /^(.+)T(.+)$/;
      var TIME_ZONE = /^(.+)([+\-])([0-9]{2}):?([0-9]{2})$/;

      function matchAll(str, patterns) {
          var match;
          var found = some_1(patterns, function(pattern) {
              return !!(match = pattern.exec(str));
          });

          return found ? match : null;
      }

      function getDate(year, month, day) {
          var date = new Date(Date.UTC(year, month, day));

          // Explicitly set year to avoid Date.UTC making dates < 100 relative to
          // 1900
          date.setUTCFullYear(year);

          var valid =
              date.getUTCFullYear() === year &&
              date.getUTCMonth() === month &&
              date.getUTCDate() === day;
          return valid ? +date : NaN;
      }

      function parseOrdinalDate(str) {
          var match = ORD_DATE.exec(str);
          if (match ) {
              var year = +match[1],
                  day = +match[2],
                  date = new Date(Date.UTC(year, 0, day));

              if (date.getUTCFullYear() === year) {
                  return +date;
              }
          }

          return NaN;
      }

      function parseDate(str) {
          var match, year, month, day;

          match = matchAll(str, datePatterns);
          if (match === null) {
              // Ordinal dates are verified differently.
              return parseOrdinalDate(str);
          }

          year = (match[1] === void 0) ? 0 : +match[1];
          month = (match[2] === void 0) ? 0 : +match[2] - 1;
          day = (match[3] === void 0) ? 1 : +match[3];

          return getDate(year, month, day);
      }

      function getTime(hr, min, sec) {
          var valid =
              (hr < 24 && hr >= 0 &&
               min < 60 && min >= 0 &&
               sec < 60 && min >= 0) ||
              (hr === 24 && min === 0 && sec === 0);
          if (!valid) {
              return NaN;
          }

          return ((hr * 60 + min) * 60 + sec) * 1000;
      }

      function parseOffset(str) {
          var match;
          if (str.charAt(str.length - 1) === 'Z') {
              str = str.substring(0, str.length - 1);
          } else {
              match = TIME_ZONE.exec(str);
              if (match) {
                  var hours = +match[3],
                      minutes = (match[4] === void 0) ? 0 : +match[4],
                      offset = getTime(hours, minutes, 0);

                  if (match[2] === '-') {
                      offset *= -1;
                  }

                  return { offset: offset, time: match[1] };
              }
          }

          // No time zone specified, assume UTC
          return { offset: 0, time: str };
      }

      function parseTime(str) {
          var match;
          var offset = parseOffset(str);

          str = offset.time;
          offset = offset.offset;
          if (isNaN(offset)) {
              return NaN;
          }

          match = matchAll(str, timePatterns);
          if (match === null) {
              return NaN;
          }

          var hours = (match[1] === void 0) ? 0 : +match[1],
              minutes = (match[2] === void 0) ? 0 : +match[2],
              seconds = (match[3] === void 0) ? 0 : +match[3];

          return getTime(hours, minutes, seconds) - offset;
      }

      /**
       * Parse an ISO8601 formatted date string, and return a Date object.
       */
      function parseISO8601(str){
          var match = DATE_TIME.exec(str);
          if (!match) {
              // No time specified
              return parseDate(str);
          }

          return parseDate(match[1]) + parseTime(match[2]);
      }

      var parseIso = parseISO8601;

  /**
       * gets date quarter
       */
      function quarter(date){
          var month = date.getMonth();
          if (month < 3) return 1;
          if (month < 6) return 2;
          if (month < 9) return 3;
          return 4;
      }

      var quarter_1 = quarter;

  /**
       * Typecast a value to a String, using an empty string value for null or
       * undefined.
       */
      function toString$2(val){
          return val == null ? '' : val.toString();
      }

      var toString_1 = toString$2;

  /**
       * "Convert" value into an 32-bit integer.
       * Works like `Math.floor` if val > 0 and `Math.ceil` if val < 0.
       * IMPORTANT: val will wrap at 2^31 and -2^31.
       * Perf tests: http://jsperf.com/vs-vs-parseint-bitwise-operators/7
       */
      function toInt(val){
          // we do not use lang/toNumber because of perf and also because it
          // doesn't break the functionality
          return ~~val;
      }

      var toInt_1 = toInt;

  /**
       * Repeat string n times
       */
       function repeat(str, n){
           var result = '';
           str = toString_1(str);
           n = toInt_1(n);
          if (n < 1) {
              return '';
          }
          while (n > 0) {
              if (n % 2) {
                  result += str;
              }
              n = Math.floor(n / 2);
              str += str;
          }
          return result;
       }

       var repeat_1 = repeat;

  /**
       * Pad string with `char` if its' length is smaller than `minLen`
       */
      function lpad(str, minLen, ch) {
          str = toString_1(str);
          ch = ch || ' ';

          return (str.length < minLen) ?
              repeat_1(ch, minLen - str.length) + str : str;
      }

      var lpad_1 = lpad;

  /**
       * covert value into number if numeric
       */
      function toNumber$2(val){
          // numberic values should come first because of -0
          if (typeof val === 'number') return val;
          // we want all falsy values (besides -0) to return zero to avoid
          // headaches
          if (!val) return 0;
          if (typeof val === 'string') return parseFloat(val);
          // arrays are edge cases. `Number([4]) === 4`
          if (isArray_1(val)) return NaN;
          return Number(val);
      }

      var toNumber_1 = toNumber$2;

  /**
       * Add padding zeros if n.length < minLength.
       */
      function pad$1(n, minLength, char){
          n = toNumber_1(n);
          return lpad_1(''+ n, minLength, char || '0');
      }

      var pad_1 = pad$1;

  /**
       * time zone as hour and minute offset from UTC (e.g. +0900)
       */
      function timezoneOffset(date){
          var offset = date.getTimezoneOffset();
          var abs = Math.abs(offset);
          var h = pad_1(Math.floor(abs / 60), 2);
          var m = pad_1(abs % 60, 2);
          return (offset > 0? '-' : '+') + h + m;
      }

      var timezoneOffset_1 = timezoneOffset;

  /**
       * Abbreviated time zone name or similar information.
       */
      function timezoneAbbr(date){
          // Date.toString gives different results depending on the
          // browser/system so we fallback to timezone offset
          // chrome: 'Mon Apr 08 2013 09:02:04 GMT-0300 (BRT)'
          // IE: 'Mon Apr 8 09:02:04 UTC-0300 2013'
          var tz = /\(([A-Z]{3,4})\)/.exec(date.toString());
          return tz? tz[1] : timezoneOffset_1(date);
      }

      var timezoneAbbr_1 = timezoneAbbr;

  /**
       * Return the week of the year based on given firstDayOfWeek
       */
      function weekOfTheYear(date, firstDayOfWeek){
          firstDayOfWeek = firstDayOfWeek == null? 0 : firstDayOfWeek;
          var doy = dayOfTheYear_1(date);
          var dow = (7 + date.getDay() - firstDayOfWeek) % 7;
          var relativeWeekDay = 6 - firstDayOfWeek - dow;
          return Math.floor((doy + relativeWeekDay) / 7);
      }

      var weekOfTheYear_1 = weekOfTheYear;

  var _combinations = {
          'D': '%m/%d/%y',
          'F': '%Y-%m-%d',
          'r': '%I:%M:%S %p',
          'R': '%H:%M',
          'T': '%H:%M:%S',
          'x': 'locale',
          'X': 'locale',
          'c': 'locale'
      };


      /**
       * format date based on strftime format
       */
      function strftime(date, format, localeData){
          localeData = localeData  || i18n_;
          var reToken = /%([a-z%])/gi;

          function makeIterator(fn) {
              return function(match, token){
                  return fn(date, token, localeData);
              };
          }

          return format
              .replace(reToken, makeIterator(expandCombinations))
              .replace(reToken, makeIterator(convertToken));
      }


      function expandCombinations(date, token, l10n){
          if (token in _combinations) {
              var expanded = _combinations[token];
              return expanded === 'locale'? l10n[token] : expanded;
          } else {
              return '%'+ token;
          }
      }


      function convertToken(date, token, l10n){
          switch (token){
              case 'a':
                  return l10n.days_abbr[date.getDay()];
              case 'A':
                  return l10n.days[date.getDay()];
              case 'h':
              case 'b':
                  return l10n.months_abbr[date.getMonth()];
              case 'B':
                  return l10n.months[date.getMonth()];
              case 'C':
                  return pad_1(Math.floor(date.getFullYear() / 100), 2);
              case 'd':
                  return pad_1(date.getDate(), 2);
              case 'e':
                  return pad_1(date.getDate(), 2, ' ');
              case 'H':
                  return pad_1(date.getHours(), 2);
              case 'I':
                  return pad_1(date.getHours() % 12, 2);
              case 'j':
                  return pad_1(dayOfTheYear_1(date), 3);
              case 'l':
                  return lpad_1(date.getHours() % 12, 2);
              case 'L':
                  return pad_1(date.getMilliseconds(), 3);
              case 'm':
                  return pad_1(date.getMonth() + 1, 2);
              case 'M':
                  return pad_1(date.getMinutes(), 2);
              case 'n':
                  return '\n';
              case 'p':
                  return date.getHours() >= 12? l10n.pm : l10n.am;
              case 'P':
                  return convertToken(date, 'p', l10n).toLowerCase();
              case 's':
                  return date.getTime() / 1000;
              case 'S':
                  return pad_1(date.getSeconds(), 2);
              case 't':
                  return '\t';
              case 'u':
                  var day = date.getDay();
                  return day === 0? 7 : day;
              case 'U':
                  return pad_1(weekOfTheYear_1(date), 2);
              case 'w':
                  return date.getDay();
              case 'W':
                  return pad_1(weekOfTheYear_1(date, 1), 2);
              case 'y':
                  return pad_1(date.getFullYear() % 100, 2);
              case 'Y':
                  return pad_1(date.getFullYear(), 4);
              case 'z':
                  return timezoneOffset_1(date);
              case 'Z':
                  return timezoneAbbr_1(date);
              case '%':
                  return '%';
              default:
                  // keep unrecognized tokens
                  return '%'+ token;
          }
      }


      var strftime_1 = strftime;

  //automatically generated, do not edit!
  //run `node build` instead
  var date = {
      'dayOfTheYear' : dayOfTheYear_1,
      'diff' : diff_1,
      'i18n_' : i18n_,
      'isLeapYear' : isLeapYear_1,
      'isSame' : isSame_1,
      'parseIso' : parseIso,
      'quarter' : quarter_1,
      'startOf' : startOf_1,
      'strftime' : strftime_1,
      'timezoneAbbr' : timezoneAbbr_1,
      'timezoneOffset' : timezoneOffset_1,
      'totalDaysInMonth' : totalDaysInMonth_1,
      'totalDaysInYear' : totalDaysInYear_1,
      'weekOfTheYear' : weekOfTheYear_1
  };

  /**
       * Get current time in miliseconds
       */
      function now(){
          // yes, we defer the work to another function to allow mocking it
          // during the tests
          return now.get();
      }

      now.get = (typeof Date.now === 'function')? Date.now : function(){
          return +(new Date());
      };

      var now_1 = now;

  /**
       * Delays the call of a function within a given context.
       */
      function timeout$1(fn, millis, context){

          var args = slice_1(arguments, 3);

          return setTimeout(function() {
              fn.apply(context, args);
          }, millis);
      }

      var timeout_1 = timeout$1;

  /**
       * Ensure a minimum delay for callbacks
       */
      function awaitDelay( callback, delay ){
          var baseTime = now_1() + delay;
          return function() {
              // ensure all browsers will execute it asynchronously (avoid hard
              // to catch errors) not using "0" because of old browsers and also
              // since new browsers increase the value to be at least "4"
              // http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout
              var ms = Math.max(baseTime - now_1(), 4);
              return timeout_1.apply(this, append_1([callback, ms, this], arguments));
          };
      }

      var awaitDelay_1 = awaitDelay;

  /**
       * Return a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.
       * @param {Function} fn  Function.
       * @param {object} context   Execution context.
       * @param {rest} args    Arguments (0...n arguments).
       * @return {Function} Wrapped Function.
       */
      function bind$1(fn, context, args){
          var argsArr = slice_1(arguments, 2); //curried args
          return function(){
              return fn.apply(context, argsArr.concat(slice_1(arguments)));
          };
      }

      var bind_1 = bind$1;

  /**
       * Returns a function that composes multiple functions, passing results to
       * each other.
       */
      function compose() {
          var fns = arguments;
          return function(arg){
              // only cares about the first argument since the chain can only
              // deal with a single return value anyway. It should start from
              // the last fn.
              var n = fns.length;
              while (n--) {
                  arg = fns[n].call(this, arg);
              }
              return arg;
           };
       }

       var compose_1 = compose;

  /**
       * Returns a new function that will return the value
       */
      function constant(value){
          return function() {
              return value;
          };
      }

      var constant_1 = constant;

  /**
       * Debounce callback execution
       */
      function debounce(fn, threshold, isAsap){
          var timeout, result;
          function debounced(){
              var args = arguments, context = this;
              function delayed(){
                  if (! isAsap) {
                      result = fn.apply(context, args);
                  }
                  timeout = null;
              }
              if (timeout) {
                  clearTimeout(timeout);
              } else if (isAsap) {
                  result = fn.apply(context, args);
              }
              timeout = setTimeout(delayed, threshold);
              return result;
          }
          debounced.cancel = function(){
              clearTimeout(timeout);
          };
          return debounced;
      }

      var debounce_1 = debounce;

  /**
       * Returns a function that call a method on the passed object
       */
      function func(name){
          return function(obj){
              return obj[name]();
          };
      }

      var func_1 = func;

  /**
       * Creates a partially applied function.
       */
      function partial(f) {
          var as = slice_1(arguments, 1);
          return function() {
              var args = as.concat(slice_1(arguments));
              for (var i = args.length; i--;) {
                  if (args[i] === partial._) {
                      args[i] = args.splice(-1)[0];
                  }
              }
              return f.apply(this, args);
          };
      }

      partial._ = {};

      var partial_1 = partial;

  /**
       * Returns a function that will execute a list of functions in sequence
       * passing the same arguments to each one. (useful for batch processing
       * items during a forEach loop)
       */
      function series(){
          var fns = arguments;
          return function(){
              var i = 0,
                  n = fns.length;
              while (i < n) {
                  fns[i].apply(this, arguments);
                  i += 1;
              }
          };
      }

      var series_1 = series;

  /**
       */
      function throttle(fn, delay){
          var context, timeout, result, args,
              diff, prevCall = 0;
          function delayed(){
              prevCall = now_1();
              timeout = null;
              result = fn.apply(context, args);
          }
          function throttled(){
              context = this;
              args = arguments;
              diff = delay - (now_1() - prevCall);
              if (diff <= 0) {
                  clearTimeout(timeout);
                  delayed();
              } else if (! timeout) {
                  timeout = setTimeout(delayed, diff);
              }
              return result;
          }
          throttled.cancel = function(){
              clearTimeout(timeout);
          };
          return throttled;
      }

      var throttle_1 = throttle;

  /**
       * Iterates over a callback a set amount of times
       */
      function times(n, callback, thisObj){
          var i = -1;
          while (++i < n) {
              if ( callback.call(thisObj, i) === false ) {
                  break;
              }
          }
      }

      var times_1 = times;

  /**
       * Returns the first function passed as an argument to the second,
       * allowing you to adjust arguments, run code before and after, and
       * conditionally execute the original function.
       */
      function wrap(fn, wrapper){
          return partial_1(wrapper, fn);
      }

      var wrap_1 = wrap;

  //automatically generated, do not edit!
  //run `node build` instead
  var _function = {
      'awaitDelay' : awaitDelay_1,
      'bind' : bind_1,
      'compose' : compose_1,
      'constant' : constant_1,
      'debounce' : debounce_1,
      'func' : func_1,
      'identity' : identity_1,
      'makeIterator_' : makeIterator_,
      'partial' : partial_1,
      'prop' : prop_1,
      'series' : series_1,
      'throttle' : throttle_1,
      'timeout' : timeout_1,
      'times' : times_1,
      'wrap' : wrap_1
  };

  // Reference to the global context (works on ES3 and ES5-strict mode)
      //jshint -W061, -W064
      var GLOBAL = Function('return this')();

  /**
       * Create Object using prototypal inheritance and setting custom properties.
       * - Mix between Douglas Crockford Prototypal Inheritance <http://javascript.crockford.com/prototypal.html> and the EcmaScript 5 `Object.create()` method.
       * @param {object} parent    Parent Object.
       * @param {object} [props] Object properties.
       * @return {object} Created object.
       */
      function createObject(parent, props){
          function F(){}
          F.prototype = parent;
          return mixIn_1(new F(), props);

      }
      var createObject_1 = createObject;

  function F(){}

      /**
       * Do fn.apply on a constructor.
       */
      function ctorApply(ctor, args) {
          F.prototype = ctor.prototype;
          var instance = new F();
          ctor.apply(instance, args);
          return instance;
      }

      var ctorApply_1 = ctorApply;

  /**
       * Recursively clone native types.
       */
      function deepClone(val, instanceClone) {
          switch ( kindOf_1(val) ) {
              case 'Object':
                  return cloneObject$1(val, instanceClone);
              case 'Array':
                  return cloneArray$1(val, instanceClone);
              default:
                  return clone_1(val);
          }
      }

      function cloneObject$1(source, instanceClone) {
          if (isPlainObject_1(source)) {
              var out = {};
              forOwn_1(source, function(val, key) {
                  this[key] = deepClone(val, instanceClone);
              }, out);
              return out;
          } else if (instanceClone) {
              return instanceClone(source);
          } else {
              return source;
          }
      }

      function cloneArray$1(arr, instanceClone) {
          var out = [],
              i = -1,
              n = arr.length;
          while (++i < n) {
              out[i] = deepClone(arr[i], instanceClone);
          }
          return out;
      }

      var deepClone_1 = deepClone;

  // Makes a function to compare the object values from the specified compare
      // operation callback.
      function makeCompare$1(callback) {
          return function(value, key) {
              return hasOwn_1(this, key) && callback(value, this[key]);
          };
      }

      function checkProperties(value, key) {
          return hasOwn_1(this, key);
      }

      /**
       * Checks if two objects have the same keys and values.
       */
      function equals$1(a, b, callback) {
          callback = callback || is_1;

          if (!isObject_1(a) || !isObject_1(b)) {
              return callback(a, b);
          }

          return (every_1$1(a, makeCompare$1(callback), b) &&
                  every_1$1(b, checkProperties, a));
      }

      var equals_1$1 = equals$1;

  /**
       * Recursively checks for same properties and values.
       */
      function deepEquals(a, b, callback){
          callback = callback || is_1;

          var bothObjects = isObject_1(a) && isObject_1(b);
          var bothArrays = !bothObjects && isArray_1(a) && isArray_1(b);

          if (!bothObjects && !bothArrays) {
              return callback(a, b);
          }

          function compare(a, b){
              return deepEquals(a, b, callback);
          }

          var method = bothObjects ? equals_1$1 : equals_1;
          return method(a, b, compare);
      }

      var deepEquals_1 = deepEquals;

  /**
       * Convert array-like object into array
       */
      function toArray$2(val){
          var ret = [],
              kind = kindOf_1(val),
              n;

          if (val != null) {
              if ( val.length == null || kind === 'String' || kind === 'Function' || kind === 'RegExp' || val === GLOBAL ) {
                  //string, regexp, function have .length but user probably just want
                  //to wrap value into an array..
                  ret[ret.length] = val;
              } else {
                  //window returns true on isObject in IE7 and may have length
                  //property. `typeof NodeList` returns `function` on Safari so
                  //we can't use it (#58)
                  n = val.length;
                  while (n--) {
                      ret[n] = val[n];
                  }
              }
          }
          return ret;
      }
      var toArray_1$1 = toArray$2;

  /**
       * Return first non void argument
       */
      function defaults$2(var_args){
          return find_1(toArray_1$1(arguments), nonVoid);
      }

      function nonVoid(val){
          return val != null;
      }

      var defaults_1 = defaults$2;

  /**
      * Inherit prototype from another Object.
      * - inspired by Nicholas Zackas <http://nczonline.net> Solution
      * @param {object} child Child object
      * @param {object} parent    Parent Object
      */
      function inheritPrototype(child, parent){
          var p = createObject_1(parent.prototype);
          p.constructor = child;
          child.prototype = p;
          child.super_ = parent;
          return p;
      }

      var inheritPrototype_1 = inheritPrototype;

  /**
       */
      var isArgs = isKind_1(arguments, 'Arguments')?
              function(val){
                  return isKind_1(val, 'Arguments');
              } :
              function(val){
                  // Arguments is an Object on IE7
                  return !!(val && Object.prototype.hasOwnProperty.call(val, 'callee'));
              };

      var isArguments = isArgs;

  /**
       */
      function isBoolean(val) {
          return isKind_1(val, 'Boolean');
      }
      var isBoolean_1 = isBoolean;

  function isEmpty(val){
          if (val == null) {
              // typeof null == 'object' so we check it first
              return true;
          } else if ( typeof val === 'string' || isArray_1(val) ) {
              return !val.length;
          } else if ( typeof val === 'object' ) {
              var result = true;
              forOwn_1(val, function(){
                  result = false;
                  return false; // break loop
              });
              return result;
          } else {
              return true;
          }
      }

      var isEmpty_1 = isEmpty;

  /**
       */
      function isNumber(val) {
          return isKind_1(val, 'Number');
      }
      var isNumber_1 = isNumber;

  /**
       * Check if value is finite
       */
      function isFinite$1(val){
          var is = false;
          if (typeof val === 'string' && val !== '') {
              is = GLOBAL.isFinite( parseFloat(val) );
          } else if (isNumber_1(val)){
              // need to use isNumber because of Number constructor
              is = GLOBAL.isFinite( val );
          }
          return is;
      }

      var _isFinite = isFinite$1;

  /**
       * Check if value is an integer
       */
      function isInteger(val){
          return isNumber_1(val) && (val % 1 === 0);
      }

      var isInteger_1 = isInteger;

  /**
       * ES6 Number.isNaN
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
       */
      function isNaN$1(val){
          // jshint eqeqeq:false
          return typeof val === 'number' && val != val;
      }

      var _isNaN = isNaN$1;

  /**
       * Check if value is NaN for realz
       */
      function isNaN$2(val){
          // based on the fact that NaN !== NaN
          // need to check if it's a number to avoid conflicts with host objects
          // also need to coerce ToNumber to avoid edge case `new Number(NaN)`
          return !isNumber_1(val) || _isNaN(Number(val));
      }

      var _isNaN$1 = isNaN$2;

  /**
       */
      function isNull(val){
          return val === null;
      }
      var isNull_1 = isNull;

  /**
       * Checks if the object is a primitive
       */
      function isPrimitive$1(value) {
          // Using switch fallthrough because it's simple to read and is
          // generally fast: http://jsperf.com/testing-value-is-primitive/5
          switch (typeof value) {
              case "string":
              case "number":
              case "boolean":
                  return true;
          }

          return value == null;
      }

      var isPrimitive_1 = isPrimitive$1;

  /**
       */
      function isRegExp(val) {
          return isKind_1(val, 'RegExp');
      }
      var isRegExp_1 = isRegExp;

  /**
       */
      function isString(val) {
          return isKind_1(val, 'String');
      }
      var isString_1 = isString;

  var UNDEF$1;

      /**
       */
      function isUndef(val){
          return val === UNDEF$1;
      }
      var isUndefined = isUndef;

  /**
       * Check if both values are not identical/egal
       */
      function isnt(x, y){
          return !is_1(x, y);
      }

      var isnt_1 = isnt;

  //automatically generated, do not edit!
  //run `node build` instead
  var lang = {
      'GLOBAL' : GLOBAL,
      'clone' : clone_1,
      'createObject' : createObject_1,
      'ctorApply' : ctorApply_1,
      'deepClone' : deepClone_1,
      'deepEquals' : deepEquals_1,
      'defaults' : defaults_1,
      'inheritPrototype' : inheritPrototype_1,
      'is' : is_1,
      'isArguments' : isArguments,
      'isArray' : isArray_1,
      'isBoolean' : isBoolean_1,
      'isDate' : isDate_1,
      'isEmpty' : isEmpty_1,
      'isFinite' : _isFinite,
      'isFunction' : isFunction_1,
      'isInteger' : isInteger_1,
      'isKind' : isKind_1,
      'isNaN' : _isNaN$1,
      'isNull' : isNull_1,
      'isNumber' : isNumber_1,
      'isObject' : isObject_1,
      'isPlainObject' : isPlainObject_1,
      'isPrimitive' : isPrimitive_1,
      'isRegExp' : isRegExp_1,
      'isString' : isString_1,
      'isUndefined' : isUndefined,
      'isnt' : isnt_1,
      'kindOf' : kindOf_1,
      'toArray' : toArray_1$1,
      'toNumber' : toNumber_1,
      'toString' : toString_1
  };

  /**
       * Round value up with a custom radix.
       */
      function ceil(val, step){
          step = Math.abs(step || 1);
          return Math.ceil(val / step) * step;
      }

      var ceil_1 = ceil;

  /**
       * Clamps value inside range.
       */
      function clamp(val, min, max){
          return val < min? min : (val > max? max : val);
      }
      var clamp_1 = clamp;

  /**
      * Floor value to full steps.
      */
      function floor(val, step){
          step = Math.abs(step || 1);
          return Math.floor(val / step) * step;
      }
      var floor_1 = floor;

  /**
      * Checks if value is inside the range.
      */
      function inRange(val, min, max, threshold){
          threshold = threshold || 0;
          return (val + threshold >= min && val - threshold <= max);
      }

      var inRange_1 = inRange;

  /**
      * Check if value is close to target.
      */
      function isNear(val, target, threshold){
          return (Math.abs(val - target) <= threshold);
      }
      var isNear_1 = isNear;

  /**
      * Linear interpolation.
      * IMPORTANT:will return `Infinity` if numbers overflow Number.MAX_VALUE
      */
      function lerp(ratio, start, end){
          return start + (end - start) * ratio;
      }

      var lerp_1 = lerp;

  /**
      * Loops value inside range.
      */
      function loop(val, min, max){
          return val < min? max : (val > max? min : val);
      }

      var loop_1 = loop;

  /**
      * Gets normalized ratio of value inside range.
      */
      function norm(val, min, max){
          if (val < min || val > max) {
              throw new RangeError('value (' + val + ') must be between ' + min + ' and ' + max);
          }

          return val === max ? 1 : (val - min) / (max - min);
      }
      var norm_1 = norm;

  /**
      * Maps a number from one scale to another.
      * @example map(3, 0, 4, -1, 1) -> 0.5
      */
      function map$3(val, min1, max1, min2, max2){
          return lerp_1( norm_1(val, min1, max1), min2, max2 );
      }
      var map_1$2 = map$3;

  /**
       * Round number to a specific radix
       */
      function round(value, radix){
          radix = radix || 1; // default round 1
          return Math.round(value / radix) * radix;
      }

      var round_1 = round;

  //automatically generated, do not edit!
  //run `node build` instead
  var math = {
      'ceil' : ceil_1,
      'clamp' : clamp_1,
      'countSteps' : countSteps_1,
      'floor' : floor_1,
      'inRange' : inRange_1,
      'isNear' : isNear_1,
      'lerp' : lerp_1,
      'loop' : loop_1,
      'map' : map_1$2,
      'norm' : norm_1,
      'round' : round_1
  };

  // maximum safe integer (Math.pow(2, 53) - 1)
      // see: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer
      var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * @constant Maximum 32-bit unsigned integet value (2^32 - 1)
   */

      var MAX_UINT = 4294967295;

  /**
       * Enforce a specific amount of decimal digits and also fix floating
       * point rounding issues.
       */
      function enforcePrecision(val, nDecimalDigits){
          val = toNumber_1(val);
          var pow = Math.pow(10, nDecimalDigits);
          return +(Math.round(val * pow) / pow).toFixed(nDecimalDigits);
      }
      var enforcePrecision_1 = enforcePrecision;

  var _defaultDict = {
          thousand : 'K',
          million : 'M',
          billion : 'B'
      };

      /**
       * Abbreviate number if bigger than 1000. (eg: 2.5K, 17.5M, 3.4B, ...)
       */
      function abbreviateNumber(val, nDecimals, dict){
          nDecimals = nDecimals != null? nDecimals : 1;
          dict = dict || _defaultDict;
          val = enforcePrecision_1(val, nDecimals);

          var str, mod;

          if (val < 1000000) {
              mod = enforcePrecision_1(val / 1000, nDecimals);
              // might overflow to next scale during rounding
              str = mod < 1000? mod + dict.thousand : 1 + dict.million;
          } else if (val < 1000000000) {
              mod = enforcePrecision_1(val / 1000000, nDecimals);
              str = mod < 1000? mod + dict.million : 1 + dict.billion;
          } else {
              str = enforcePrecision_1(val / 1000000000, nDecimals) + dict.billion;
          }

          return str;
      }

      var abbreviate = abbreviateNumber;

  /**
       * Converts number into currency format
       */
      function currencyFormat(val, nDecimalDigits, decimalSeparator, thousandsSeparator) {
          val = toNumber_1(val);
          nDecimalDigits = nDecimalDigits == null? 2 : nDecimalDigits;
          decimalSeparator = decimalSeparator == null? '.' : decimalSeparator;
          thousandsSeparator = thousandsSeparator == null? ',' : thousandsSeparator;

          //can't use enforce precision since it returns a number and we are
          //doing a RegExp over the string
          var fixed = val.toFixed(nDecimalDigits),
              //separate begin [$1], middle [$2] and decimal digits [$4]
              parts = new RegExp('^(-?\\d{1,3})((?:\\d{3})+)(\\.(\\d{'+ nDecimalDigits +'}))?$').exec( fixed );

          if(parts){ //val >= 1000 || val <= -1000
              return parts[1] + parts[2].replace(/\d{3}/g, thousandsSeparator + '$&') + (parts[4] ? decimalSeparator + parts[4] : '');
          }else{
              return fixed.replace('.', decimalSeparator);
          }
      }

      var currencyFormat_1 = currencyFormat;

  /**
       * Returns "nth" of number (1 = "st", 2 = "nd", 3 = "rd", 4..10 = "th", ...)
       */
      function nth(i) {
          var t = (i % 100);
          if (t >= 10 && t <= 20) {
              return 'th';
          }
          switch(i % 10) {
              case 1:
                  return 'st';
              case 2:
                  return 'nd';
              case 3:
                  return 'rd';
              default:
                  return 'th';
          }
      }

      var nth_1 = nth;

  /**
       * converts number into ordinal form (1st, 2nd, 3rd, 4th, ...)
       */
      function ordinal(n){
         n = toInt_1(n);
         return n + nth_1(n);
      }

      var ordinal_1 = ordinal;

  /**
       * Bitwise circular shift left
       * http://en.wikipedia.org/wiki/Circular_shift
       */
      function rol(val, shift){
          return (val << shift) | (val >> (32 - shift));
      }
      var rol_1 = rol;

  /**
       * Bitwise circular shift right
       * http://en.wikipedia.org/wiki/Circular_shift
       */
      function ror(val, shift){
          return (val >> shift) | (val << (32 - shift));
      }
      var ror_1 = ror;

  /**
       * Get sign of the value.
       */
      function sign$1(val) {
          var num = toNumber_1(val);
          if (num === 0) return num; // +0 and +0 === 0
          if (isNaN(num)) return num; // NaN
          return num < 0? -1 : 1;
      }

      var sign_1 = sign$1;

  /**
       * "Convert" value into a 32-bit unsigned integer.
       * IMPORTANT: Value will wrap at 2^32.
       */
      function toUInt(val){
          // we do not use lang/toNumber because of perf and also because it
          // doesn't break the functionality
          return val >>> 0;
      }

      var toUInt_1 = toUInt;

  /**
       * "Convert" value into an 31-bit unsigned integer (since 1 bit is used for sign).
       * IMPORTANT: value wil wrap at 2^31, if negative will return 0.
       */
      function toUInt31(val){
          // we do not use lang/toNumber because of perf and also because it
          // doesn't break the functionality
          return (val <= 0)? 0 : (val > MAX_INT? ~~(val % (MAX_INT + 1)) : ~~val);
      }

      var toUInt31_1 = toUInt31;

  //automatically generated, do not edit!
  //run `node build` instead
  var number = {
      'MAX_INT' : MAX_INT,
      'MAX_SAFE_INTEGER' : MAX_SAFE_INTEGER,
      'MAX_UINT' : MAX_UINT,
      'MIN_INT' : MIN_INT,
      'abbreviate' : abbreviate,
      'currencyFormat' : currencyFormat_1,
      'enforcePrecision' : enforcePrecision_1,
      'isNaN' : _isNaN,
      'nth' : nth_1,
      'ordinal' : ordinal_1,
      'pad' : pad_1,
      'rol' : rol_1,
      'ror' : ror_1,
      'sign' : sign_1,
      'toInt' : toInt_1,
      'toUInt' : toUInt_1,
      'toUInt31' : toUInt31_1
  };

  /**
       * return a list of all enumerable properties that have function values
       */
      function functions(obj){
          var keys = [];
          forIn_1(obj, function(val, key){
              if (typeof val === 'function'){
                  keys.push(key);
              }
          });
          return keys.sort();
      }

      var functions_1 = functions;

  /**
       * Binds methods of the object to be run in it's own context.
       */
      function bindAll(obj, rest_methodNames){
          var keys = arguments.length > 1?
                      slice_1(arguments, 1) : functions_1(obj);
          forEach_1(keys, function(key){
              obj[key] = bind_1(obj[key], obj);
          });
      }

      var bindAll_1 = bindAll;

  /**
       * Deeply copy missing properties in the target from the defaults.
       */
      function deepFillIn(target, defaults){
          var i = 0,
              n = arguments.length,
              obj;

          while(++i < n) {
              obj = arguments[i];
              if (obj) {
                  // jshint loopfunc: true
                  forOwn_1(obj, function(newValue, key) {
                      var curValue = target[key];
                      if (curValue == null) {
                          target[key] = newValue;
                      } else if (isPlainObject_1(curValue) &&
                                 isPlainObject_1(newValue)) {
                          deepFillIn(curValue, newValue);
                      }
                  });
              }
          }

          return target;
      }

      var deepFillIn_1 = deepFillIn;

  /**
       * Mixes objects into the target object, recursively mixing existing child
       * objects.
       */
      function deepMixIn(target, objects) {
          var i = 0,
              n = arguments.length,
              obj;

          while(++i < n){
              obj = arguments[i];
              if (obj) {
                  forOwn_1(obj, copyProp$1, target);
              }
          }

          return target;
      }

      function copyProp$1(val, key) {
          var existing = this[key];
          if (isPlainObject_1(val) && isPlainObject_1(existing)) {
              deepMixIn(existing, val);
          } else {
              this[key] = val;
          }
      }

      var deepMixIn_1 = deepMixIn;

  /**
       * Copy missing properties in the obj from the defaults.
       */
      function fillIn(obj, var_defaults){
          forEach_1(slice_1(arguments, 1), function(base){
              forOwn_1(base, function(val, key){
                  if (obj[key] == null) {
                      obj[key] = val;
                  }
              });
          });
          return obj;
      }

      var fillIn_1 = fillIn;

  /**
       * Creates a new object with all the properties where the callback returns
       * true.
       */
      function filterValues(obj, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var output = {};
          forOwn_1(obj, function(value, key, obj) {
              if (callback(value, key, obj)) {
                  output[key] = value;
              }
          });

          return output;
      }
      var filter$4 = filterValues;

  /*
       * Helper function to flatten to a destination object.
       * Used to remove the need to create intermediate objects while flattening.
       */
      function flattenTo$1(obj, result, prefix, level) {
          forOwn_1(obj, function (value, key) {
              var nestedPrefix = prefix ? prefix + '.' + key : key;

              if (level !== 0 && isPlainObject_1(value)) {
                  flattenTo$1(value, result, nestedPrefix, level - 1);
              } else {
                  result[nestedPrefix] = value;
              }
          });

          return result;
      }

      /**
       * Recursively flattens an object.
       * A new object containing all the elements is returned.
       * If level is specified, it will only flatten up to that level.
       */
      function flatten$3(obj, level) {
          if (obj == null) {
              return {};
          }

          level = level == null ? -1 : level;
          return flattenTo$1(obj, {}, '', level);
      }

      var flatten_1$1 = flatten$3;

  /**
       * get "nested" object property
       */
      function get(obj, prop){
          var parts = prop.split('.'),
              last = parts.pop();

          while (prop = parts.shift()) {
              obj = obj[prop];
              if (obj == null) return;
          }

          return obj[last];
      }

      var get_1 = get;

  var UNDEF$2;

      /**
       * Check if object has nested property.
       */
      function has(obj, prop){
          return get_1(obj, prop) !== UNDEF$2;
      }

      var has_1 = has;

  /**
       * Get object keys
       */
       var keys = Object.keys || function (obj) {
              var keys = [];
              forOwn_1(obj, function(val, key){
                  keys.push(key);
              });
              return keys;
          };

      var keys_1 = keys;

  /**
       * Creates a new object where all the values are the result of calling
       * `callback`.
       */
      function mapValues(obj, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          var output = {};
          forOwn_1(obj, function(val, key, obj) {
              output[key] = callback(val, key, obj);
          });

          return output;
      }
      var map$4 = mapValues;

  /**
       * checks if a object contains all given properties/values
       */
      function matches(target, props){
          // can't use "object/every" because of circular dependency
          var result = true;
          forOwn_1(props, function(val, key){
              if (target[key] !== val) {
                  // break loop at first difference
                  return (result = false);
              }
          });
          return result;
      }

      var matches_1 = matches;

  /**
       * Deep merge objects.
       */
      function merge$2() {
          var i = 1,
              key, val, obj, target;

          // make sure we don't modify source element and it's properties
          // objects are passed by reference
          target = deepClone_1( arguments[0] );

          while (obj = arguments[i++]) {
              for (key in obj) {
                  if ( ! hasOwn_1(obj, key) ) {
                      continue;
                  }

                  val = obj[key];

                  if ( isObject_1(val) && isObject_1(target[key]) ){
                      // inception, deep merge objects
                      target[key] = merge$2(target[key], val);
                  } else {
                      // make sure arrays, regexp, date, objects are cloned
                      target[key] = deepClone_1(val);
                  }

              }
          }

          return target;
      }

      var merge_1 = merge$2;

  /**
       * Create nested object if non-existent
       */
      function namespace$1(obj, path$$1){
          if (!path$$1) return obj;
          forEach_1(path$$1.split('.'), function(key){
              if (!obj[key]) {
                  obj[key] = {};
              }
              obj = obj[key];
          });
          return obj;
      }

      var namespace_1 = namespace$1;

  /**
       * Return a copy of the object, filtered to only contain properties except the blacklisted keys.
       */
      function omit(obj, var_keys){
          var keys = typeof arguments[1] !== 'string'? arguments[1] : slice_1(arguments, 1),
              out = {};

          for (var property in obj) {
              if (obj.hasOwnProperty(property) && !contains_1(keys, property)) {
                  out[property] = obj[property];
              }
          }
          return out;
      }

      var omit_1 = omit;

  /**
       * Return a copy of the object, filtered to only have values for the whitelisted keys.
       */
      function pick$1(obj, var_keys){
          var keys = typeof arguments[1] !== 'string'? arguments[1] : slice_1(arguments, 1),
              out = {},
              i = 0, key;
          while (key = keys[i++]) {
              out[key] = obj[key];
          }
          return out;
      }

      var pick_1$1 = pick$1;

  /**
       * Extract a list of property values.
       */
      function pluck$2(obj, propName){
          return map$4(obj, prop_1(propName));
      }

      var pluck_1$2 = pluck$2;

  /**
       * Object reject
       */
      function reject$2(obj, callback, thisObj) {
          callback = makeIterator_(callback, thisObj);
          return filter$4(obj, function(value, index, obj) {
              return !callback(value, index, obj);
          }, thisObj);
      }

      var reject_1$2 = reject$2;

  function result(obj, prop) {
          var property = obj[prop];

          if(property === undefined) {
              return;
          }

          return isFunction_1(property) ? property.call(obj) : property;
      }

      var result_1 = result;

  /**
       * set "nested" object property
       */
      function set(obj, prop, val){
          var parts = (/^(.+)\.(.+)$/).exec(prop);
          if (parts){
              namespace_1(obj, parts[1])[parts[2]] = val;
          } else {
              obj[prop] = val;
          }
      }

      var set_1 = set;

  /**
       * Unset object property.
       */
      function unset(obj, prop){
          if (has_1(obj, prop)) {
              var parts = prop.split('.'),
                  last = parts.pop();
              while (prop = parts.shift()) {
                  obj = obj[prop];
              }
              return (delete obj[last]);

          } else {
              // if property doesn't exist treat as deleted
              return true;
          }
      }

      var unset_1 = unset;

  //automatically generated, do not edit!
  //run `node build` instead
  var object = {
      'bindAll' : bindAll_1,
      'contains' : contains_1$1,
      'deepFillIn' : deepFillIn_1,
      'deepMatches' : deepMatches_1,
      'deepMixIn' : deepMixIn_1,
      'equals' : equals_1$1,
      'every' : every_1$1,
      'fillIn' : fillIn_1,
      'filter' : filter$4,
      'find' : find_1$1,
      'flatten' : flatten_1$1,
      'forIn' : forIn_1,
      'forOwn' : forOwn_1,
      'functions' : functions_1,
      'get' : get_1,
      'has' : has_1,
      'hasOwn' : hasOwn_1,
      'keys' : keys_1,
      'map' : map$4,
      'matches' : matches_1,
      'max' : max_1$1,
      'merge' : merge_1,
      'min' : min_1$1,
      'mixIn' : mixIn_1,
      'namespace' : namespace_1,
      'omit' : omit_1,
      'pick' : pick_1$1,
      'pluck' : pluck_1$2,
      'reduce' : reduce_1$1,
      'reject' : reject_1$2,
      'result' : result_1,
      'set' : set_1,
      'size' : size_1,
      'some' : some_1$1,
      'unset' : unset_1,
      'values' : values_1
  };

  /**
       * Gets full query as string with all special chars decoded.
       */
      function getQuery(url$$1) {
          url$$1 = url$$1.replace(/#.*/, ''); //removes hash (to avoid getting hash query)
          var queryString = /\?[a-zA-Z0-9\=\&\%\$\-\_\.\+\!\*\'\(\)\,]+/.exec(url$$1); //valid chars according to: http://www.ietf.org/rfc/rfc1738.txt
          return (queryString)? decodeURIComponent(queryString[0].replace(/\+/g,' ')) : '';
      }

      var getQuery_1 = getQuery;

  /**
       * Checks if query string contains parameter.
       */
      function contains$3(url$$1, paramName) {
          var regex = new RegExp('(\\?|&)'+ paramName +'=', 'g'); //matches `?param=` or `&param=`
          return regex.test(getQuery_1(url$$1));
      }

      var contains_1$2 = contains$3;

  var UNDEF$3;

      /**
       * Parses string and convert it into a native value.
       */
      function typecast(val) {
          var r;
          if ( val === null || val === 'null' ) {
              r = null;
          } else if ( val === 'true' ) {
              r = true;
          } else if ( val === 'false' ) {
              r = false;
          } else if ( val === UNDEF$3 || val === 'undefined' ) {
              r = UNDEF$3;
          } else if ( val === '' || isNaN(val) ) {
              //isNaN('') returns false
              r = val;
          } else {
              //parseFloat(null || '') returns NaN
              r = parseFloat(val);
          }
          return r;
      }

      var typecast_1 = typecast;

  /**
       * Decode query string into an object of keys => vals.
       */
      function decode$1(queryStr, shouldTypecast) {
          var queryArr = (queryStr || '').replace('?', '').split('&'),
              i = -1,
              obj = {},
              equalIndex, cur, pValue, pName;

          while ((cur = queryArr[++i])) {
              equalIndex = cur.indexOf('=');
              pName = cur.substring(0, equalIndex);
              pValue = decodeURIComponent(cur.substring(equalIndex + 1));
              if (shouldTypecast !== false) {
                  pValue = typecast_1(pValue);
              }
              if (hasOwn_1(obj, pName)){
                  if(isArray_1(obj[pName])){
                      obj[pName].push(pValue);
                  } else {
                      obj[pName] = [obj[pName], pValue];
                  }
              } else {
                  obj[pName] = pValue;
             }
          }
          return obj;
      }

      var decode_1 = decode$1;

  /**
       * Encode object into a query string.
       */
      function encode$1(obj){
          var query = [],
              arrValues, reg;
          forOwn_1(obj, function (val, key) {
              if (isArray_1(val)) {
                  arrValues = key + '=';
                  reg = new RegExp('&'+key+'+=$');
                  forEach_1(val, function (aValue) {
                      arrValues += encodeURIComponent(aValue) + '&' + key + '=';
                  });
                  query.push(arrValues.replace(reg, ''));
              } else {
                 query.push(key + '=' + encodeURIComponent(val));
              }
          });
          return (query.length) ? '?' + query.join('&') : '';
      }

      var encode_1 = encode$1;

  /**
       * Get query parameter value.
       */
      function getParam(url$$1, param, shouldTypecast){
          var regexp = new RegExp('(\\?|&)'+ param + '=([^&]*)'), //matches `?param=value` or `&param=value`, value = $2
              result = regexp.exec( getQuery_1(url$$1) ),
              val = (result && result[2])? result[2] : null;
          return shouldTypecast === false? val : typecast_1(val);
      }

      var getParam_1 = getParam;

  /**
       * Get query string, parses and decodes it.
       */
      function parse$2(url$$1, shouldTypecast) {
          return decode_1(getQuery_1(url$$1), shouldTypecast);
      }

      var parse_1 = parse$2;

  /**
       * Set query string parameter value
       */
      function setParam(url$$1, paramName, value){
          url$$1 = url$$1 || '';

          var re = new RegExp('(\\?|&)'+ paramName +'=[^&]*' );
          var param = paramName +'='+ encodeURIComponent( value );

          if ( re.test(url$$1) ) {
              return url$$1.replace(re, '$1'+ param);
          } else {
              if (url$$1.indexOf('?') === -1) {
                  url$$1 += '?';
              }
              if (url$$1.indexOf('=') !== -1) {
                  url$$1 += '&';
              }
              return url$$1 + param;
          }

      }

      var setParam_1 = setParam;

  //automatically generated, do not edit!
  //run `node build` instead
  var queryString = {
      'contains' : contains_1$2,
      'decode' : decode_1,
      'encode' : encode_1,
      'getParam' : getParam_1,
      'getQuery' : getQuery_1,
      'parse' : parse_1,
      'setParam' : setParam_1
  };

  /**
       * Returns a random element from the supplied arguments
       * or from the array (if single argument is an array).
       */
      function choice(items) {
          var target = (arguments.length === 1 && isArray_1(items))? items : arguments;
          return target[ randInt_1(0, target.length - 1) ];
      }

      var choice_1 = choice;

  var _chars = '0123456789abcdef'.split('');

      /**
       * Returns a random hexadecimal string
       */
      function randHex(size){
          size = size && size > 0? size : 6;
          var str = '';
          while (size--) {
              str += choice_1(_chars);
          }
          return str;
      }

      var randHex_1 = randHex;

  /**
     * Returns pseudo-random guid (UUID v4)
     * IMPORTANT: it's not totally "safe" since randHex/choice uses Math.random
     * by default and sequences can be predicted in some cases. See the
     * "random/random" documentation for more info about it and how to replace
     * the default PRNG.
     */
    function guid() {
      return (
          randHex_1(8)+'-'+
          randHex_1(4)+'-'+
          // v4 UUID always contain "4" at this position to specify it was
          // randomly generated
          '4' + randHex_1(3) +'-'+
          // v4 UUID always contain chars [a,b,8,9] at this position
          choice_1(8, 9, 'a', 'b') + randHex_1(3)+'-'+
          randHex_1(12)
      );
    }
    var guid_1 = guid;

  /**
       * returns a random boolean value (true or false)
       */
      function randBool(){
          return random_1() >= 0.5;
      }

      var randBool_1 = randBool;

  /**
       * Returns random bit (0 or 1)
       */
      function randomBit() {
          return randBool_1()? 1 : 0;
      }

      var randBit = randomBit;

  /**
       * Returns random sign (-1 or 1)
       */
      function randomSign() {
          return randBool_1()? 1 : -1;
      }

      var randSign = randomSign;

  var defaultDictionary = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

      function randomString(length, dictionary) {
          if(!isNumber_1(length) || length <= 0) {
            length = 8;
          }

          if(!isString_1(dictionary) || dictionary.length < 1) {
            dictionary = defaultDictionary;
          }

          var result = '',
              domain = dictionary.length - 1;

          while(length--) {
            result += dictionary[randInt_1(0, domain)];
          }
          
          return result;
      }

      var randString = randomString;

  //automatically generated, do not edit!
  //run `node build` instead
  var random$2 = {
      'choice' : choice_1,
      'guid' : guid_1,
      'rand' : rand_1,
      'randBit' : randBit,
      'randBool' : randBool_1,
      'randHex' : randHex_1,
      'randInt' : randInt_1,
      'randSign' : randSign,
      'randString' : randString,
      'random' : random_1
  };

  /**
       * Contains all Unicode white-spaces. Taken from
       * http://en.wikipedia.org/wiki/Whitespace_character.
       */
      var WHITE_SPACES = [
          ' ', '\n', '\r', '\t', '\f', '\v', '\u00A0', '\u1680', '\u180E',
          '\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006',
          '\u2007', '\u2008', '\u2009', '\u200A', '\u2028', '\u2029', '\u202F',
          '\u205F', '\u3000'
      ];

  /**
      * Replaces all accented chars with regular ones
      */
      function replaceAccents(str){
          str = toString_1(str);

          // verifies if the String has accents and replace them
          if (str.search(/[\xC0-\xFF]/g) > -1) {
              str = str
                      .replace(/[\xC0-\xC5]/g, "A")
                      .replace(/[\xC6]/g, "AE")
                      .replace(/[\xC7]/g, "C")
                      .replace(/[\xC8-\xCB]/g, "E")
                      .replace(/[\xCC-\xCF]/g, "I")
                      .replace(/[\xD0]/g, "D")
                      .replace(/[\xD1]/g, "N")
                      .replace(/[\xD2-\xD6\xD8]/g, "O")
                      .replace(/[\xD9-\xDC]/g, "U")
                      .replace(/[\xDD]/g, "Y")
                      .replace(/[\xDE]/g, "P")
                      .replace(/[\xE0-\xE5]/g, "a")
                      .replace(/[\xE6]/g, "ae")
                      .replace(/[\xE7]/g, "c")
                      .replace(/[\xE8-\xEB]/g, "e")
                      .replace(/[\xEC-\xEF]/g, "i")
                      .replace(/[\xF1]/g, "n")
                      .replace(/[\xF2-\xF6\xF8]/g, "o")
                      .replace(/[\xF9-\xFC]/g, "u")
                      .replace(/[\xFE]/g, "p")
                      .replace(/[\xFD\xFF]/g, "y");
          }
          return str;
      }
      var replaceAccents_1 = replaceAccents;

  // This pattern is generated by the _build/pattern-removeNonWord.js script
      var PATTERN = /[^\x20\x2D0-9A-Z\x5Fa-z\xC0-\xD6\xD8-\xF6\xF8-\xFF]/g;

      /**
       * Remove non-word chars.
       */
      function removeNonWord(str){
          str = toString_1(str);
          return str.replace(PATTERN, '');
      }

      var removeNonWord_1 = removeNonWord;

  /**
       * "Safer" String.toUpperCase()
       */
      function upperCase(str){
          str = toString_1(str);
          return str.toUpperCase();
      }
      var upperCase_1 = upperCase;

  /**
       * "Safer" String.toLowerCase()
       */
      function lowerCase(str){
          str = toString_1(str);
          return str.toLowerCase();
      }

      var lowerCase_1 = lowerCase;

  /**
      * Convert string to camelCase text.
      */
      function camelCase(str){
          str = toString_1(str);
          str = replaceAccents_1(str);
          str = removeNonWord_1(str)
              .replace(/[\-_]/g, ' ') //convert all hyphens and underscores to spaces
              .replace(/\s[a-z]/g, upperCase_1) //convert first char of each word to UPPERCASE
              .replace(/\s+/g, '') //remove spaces
              .replace(/^[A-Z]/g, lowerCase_1); //convert first char to lowercase
          return str;
      }
      var camelCase_1 = camelCase;

  /**
       * Searches for a given substring
       */
      function contains$4(str, substring, fromIndex){
          str = toString_1(str);
          substring = toString_1(substring);
          return str.indexOf(substring, fromIndex) !== -1;
      }

      var contains_1$3 = contains$4;

  /**
       * Remove chars from beginning of string.
       */
      function ltrim(str, chars) {
          str = toString_1(str);
          chars = chars || WHITE_SPACES;

          var start = 0,
              len = str.length,
              charLen = chars.length,
              found = true,
              i, c;

          while (found && start < len) {
              found = false;
              i = -1;
              c = str.charAt(start);

              while (++i < charLen) {
                  if (c === chars[i]) {
                      found = true;
                      start++;
                      break;
                  }
              }
          }

          return (start >= len) ? '' : str.substr(start, len);
      }

      var ltrim_1 = ltrim;

  /**
       * Remove chars from end of string.
       */
      function rtrim(str, chars) {
          str = toString_1(str);
          chars = chars || WHITE_SPACES;

          var end = str.length - 1,
              charLen = chars.length,
              found = true,
              i, c;

          while (found && end >= 0) {
              found = false;
              i = -1;
              c = str.charAt(end);

              while (++i < charLen) {
                  if (c === chars[i]) {
                      found = true;
                      end--;
                      break;
                  }
              }
          }

          return (end >= 0) ? str.substring(0, end + 1) : '';
      }

      var rtrim_1 = rtrim;

  /**
       * Remove white-spaces from beginning and end of string.
       */
      function trim(str, chars) {
          str = toString_1(str);
          chars = chars || WHITE_SPACES;
          return ltrim_1(rtrim_1(str, chars), chars);
      }

      var trim_1 = trim;

  /**
       * Limit number of chars.
       */
      function truncate(str, maxChars, append, onlyFullWords){
          str = toString_1(str);
          append = append || '...';
          maxChars = onlyFullWords? maxChars + 1 : maxChars;

          str = trim_1(str);
          if(str.length <= maxChars){
              return str;
          }
          str = str.substr(0, maxChars - append.length);
          //crop at last space or remove trailing whitespace
          str = onlyFullWords? str.substr(0, str.lastIndexOf(' ')) : trim_1(str);
          return str + append;
      }
      var truncate_1 = truncate;

  /**
       * Truncate string at full words.
       */
       function crop(str, maxChars, append) {
           str = toString_1(str);
           return truncate_1(str, maxChars, append, true);
       }

       var crop_1 = crop;

  /**
       * Checks if string ends with specified suffix.
       */
      function endsWith(str, suffix) {
          str = toString_1(str);
          suffix = toString_1(suffix);

          return str.indexOf(suffix, str.length - suffix.length) !== -1;
      }

      var endsWith_1 = endsWith;

  /**
       * Escapes a string for insertion into HTML.
       */
      function escapeHtml(str){
          str = toString_1(str)
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/'/g, '&#39;')
              .replace(/"/g, '&quot;');
          return str;
      }

      var escapeHtml_1 = escapeHtml;

  /**
       * Escape RegExp string chars.
       */
      function escapeRegExp(str) {
          return toString_1(str).replace(/\W/g,'\\$&');
      }

      var escapeRegExp_1 = escapeRegExp;

  /**
       * Escape string into unicode sequences
       */
      function escapeUnicode(str, shouldEscapePrintable){
          str = toString_1(str);
          return str.replace(/[\s\S]/g, function(ch){
              // skip printable ASCII chars if we should not escape them
              if (!shouldEscapePrintable && (/[\x20-\x7E]/).test(ch)) {
                  return ch;
              }
              // we use "000" and slice(-4) for brevity, need to pad zeros,
              // unicode escape always have 4 chars after "\u"
              return '\\u'+ ('000'+ ch.charCodeAt(0).toString(16)).slice(-4);
          });
      }

      var escapeUnicode_1 = escapeUnicode;

  /**
       * Convert to lower case, remove accents, remove non-word chars and
       * replace spaces with the specified delimeter.
       * Does not split camelCase text.
       */
      function slugify(str, delimeter){
          str = toString_1(str);

          if (delimeter == null) {
              delimeter = "-";
          }
          str = replaceAccents_1(str);
          str = removeNonWord_1(str);
          str = trim_1(str) //should come after removeNonWord
                  .replace(/ +/g, delimeter) //replace spaces with delimeter
                  .toLowerCase();
          return str;
      }
      var slugify_1 = slugify;

  var CAMEL_CASE_BORDER = /([a-z\xE0-\xFF])([A-Z\xC0\xDF])/g;

      /**
       * Add space between camelCase text.
       */
      function unCamelCase(str, delimiter){
          if (delimiter == null) {
              delimiter = ' ';
          }

          function join(str, c1, c2) {
              return c1 + delimiter + c2;
          }

          str = toString_1(str);
          str = str.replace(CAMEL_CASE_BORDER, join);
          str = str.toLowerCase(); //add space between camelCase text
          return str;
      }
      var unCamelCase_1 = unCamelCase;

  /**
       * Replaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.
       */
      function hyphenate(str){
          str = toString_1(str);
          str = unCamelCase_1(str);
          return slugify_1(str, "-");
      }

      var hyphenate_1 = hyphenate;

  /**
       * Inserts a string at a given index.
       */
      function insert$1(string, index, partial){
          string = toString_1(string);

          if (index < 0) {
              index = string.length + index;
          }

          index = clamp_1(index, 0, string.length);

          return string.substr(0, index) + partial + string.substr(index);
      }

      var insert_1$1 = insert$1;

  var stache = /\{\{([^\}]+)\}\}/g; //mustache-like

      /**
       * String interpolation
       */
      function interpolate(template, replacements, syntax){
          template = toString_1(template);
          var replaceFn = function(match, prop){
              return toString_1( get_1(replacements, prop) );
          };
          return template.replace(syntax || stache, replaceFn);
      }

      var interpolate_1 = interpolate;

  /**
       * Group arguments as path segments, if any of the args is `null` or an
       * empty string it will be ignored from resulting path.
       */
      function makePath(var_args){
          var result = join_1(slice_1(arguments), '/');
          // need to disconsider duplicate '/' after protocol (eg: 'http://')
          return result.replace(/([^:\/]|^)\/{2,}/g, '$1/');
      }

      var makePath_1 = makePath;

  /**
       * Convert line-breaks from DOS/MAC to a single standard (UNIX by default)
       */
      function normalizeLineBreaks(str, lineEnd) {
          str = toString_1(str);
          lineEnd = lineEnd || '\n';

          return str
              .replace(/\r\n/g, lineEnd) // DOS
              .replace(/\r/g, lineEnd)   // Mac
              .replace(/\n/g, lineEnd);  // Unix
      }

      var normalizeLineBreaks_1 = normalizeLineBreaks;

  /**
       * camelCase + UPPERCASE first char
       */
      function pascalCase(str){
          str = toString_1(str);
          return camelCase_1(str).replace(/^[a-z]/, upperCase_1);
      }

      var pascalCase_1 = pascalCase;

  /**
       * UPPERCASE first char of each word.
       */
      function properCase(str){
          str = toString_1(str);
          return lowerCase_1(str).replace(/^\w|\s\w/g, upperCase_1);
      }

      var properCase_1 = properCase;

  /**
       * Remove non-printable ASCII chars
       */
      function removeNonASCII(str){
          str = toString_1(str);

          // Matches non-printable ASCII chars -
          // http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
          return str.replace(/[^\x20-\x7E]/g, '');
      }

      var removeNonASCII_1 = removeNonASCII;

  /**
       * Replace string(s) with the replacement(s) in the source.
       */
      function replace(str, search, replacements) {
          str = toString_1(str);
          search = toArray_1$1(search);
          replacements = toArray_1$1(replacements);

          var searchLength = search.length,
              replacementsLength = replacements.length;

          if (replacementsLength !== 1 && searchLength !== replacementsLength) {
              throw new Error('Unequal number of searches and replacements');
          }

          var i = -1;
          while (++i < searchLength) {
              // Use the first replacement for all searches if only one
              // replacement is provided
              str = str.replace(
                  search[i],
                  replacements[(replacementsLength === 1) ? 0 : i]);
          }

          return str;
      }

      var replace_1 = replace;

  /**
       * Pad string with `char` if its' length is smaller than `minLen`
       */
      function rpad(str, minLen, ch) {
          str = toString_1(str);
          ch = ch || ' ';
          return (str.length < minLen)? str + repeat_1(ch, minLen - str.length) : str;
      }

      var rpad_1 = rpad;

  /**
       * UPPERCASE first char of each sentence and lowercase other chars.
       */
      function sentenceCase(str){
          str = toString_1(str);

          // Replace first char of each sentence (new line or after '.\s+') to
          // UPPERCASE
          return lowerCase_1(str).replace(/(^\w)|\.\s+(\w)/gm, upperCase_1);
      }
      var sentenceCase_1 = sentenceCase;

  /**
       * Checks if string starts with specified prefix.
       */
      function startsWith(str, prefix) {
          str = toString_1(str);
          prefix = toString_1(prefix);

          return str.indexOf(prefix) === 0;
      }

      var startsWith_1 = startsWith;

  /**
       * Remove HTML tags from string.
       */
      function stripHtmlTags(str){
          str = toString_1(str);

          return str.replace(/<[^>]*>/g, '');
      }
      var stripHtmlTags_1 = stripHtmlTags;

  /**
       * Replaces spaces with underscores, split camelCase text, remove non-word chars, remove accents and convert to lower case.
       */
      function underscore$1(str){
          str = toString_1(str);
          str = unCamelCase_1(str);
          return slugify_1(str, "_");
      }
      var underscore_1$1 = underscore$1;

  /**
       * Unescapes HTML special chars
       */
      function unescapeHtml(str){
          str = toString_1(str)
              .replace(/&amp;/g , '&')
              .replace(/&lt;/g  , '<')
              .replace(/&gt;/g  , '>')
              .replace(/&#0*39;/g , "'")
              .replace(/&quot;/g, '"');
          return str;
      }

      var unescapeHtml_1 = unescapeHtml;

  /**
       * Unescape unicode char sequences
       */
      function unescapeUnicode(str){
          str = toString_1(str);
          return str.replace(/\\u[0-9a-f]{4}/g, function(ch){
              var code = parseInt(ch.slice(2), 16);
              return String.fromCharCode(code);
          });
      }

      var unescapeUnicode_1 = unescapeUnicode;

  /**
       * Replaces hyphens with spaces. (only hyphens between word chars)
       */
      function unhyphenate(str){
          str = toString_1(str);
          return str.replace(/(\w)(-)(\w)/g, '$1 $3');
      }
      var unhyphenate_1 = unhyphenate;

  //automatically generated, do not edit!
  //run `node build` instead
  var string$1 = {
      'WHITE_SPACES' : WHITE_SPACES,
      'camelCase' : camelCase_1,
      'contains' : contains_1$3,
      'crop' : crop_1,
      'endsWith' : endsWith_1,
      'escapeHtml' : escapeHtml_1,
      'escapeRegExp' : escapeRegExp_1,
      'escapeUnicode' : escapeUnicode_1,
      'hyphenate' : hyphenate_1,
      'insert' : insert_1$1,
      'interpolate' : interpolate_1,
      'lowerCase' : lowerCase_1,
      'lpad' : lpad_1,
      'ltrim' : ltrim_1,
      'makePath' : makePath_1,
      'normalizeLineBreaks' : normalizeLineBreaks_1,
      'pascalCase' : pascalCase_1,
      'properCase' : properCase_1,
      'removeNonASCII' : removeNonASCII_1,
      'removeNonWord' : removeNonWord_1,
      'repeat' : repeat_1,
      'replace' : replace_1,
      'replaceAccents' : replaceAccents_1,
      'rpad' : rpad_1,
      'rtrim' : rtrim_1,
      'sentenceCase' : sentenceCase_1,
      'slugify' : slugify_1,
      'startsWith' : startsWith_1,
      'stripHtmlTags' : stripHtmlTags_1,
      'trim' : trim_1,
      'truncate' : truncate_1,
      'typecast' : typecast_1,
      'unCamelCase' : unCamelCase_1,
      'underscore' : underscore_1$1,
      'unescapeHtml' : unescapeHtml_1,
      'unescapeUnicode' : unescapeUnicode_1,
      'unhyphenate' : unhyphenate_1,
      'upperCase' : upperCase_1
  };

  /**
       * Parse timestamp into an object.
       */
      function parseMs(ms){
          return {
              milliseconds : countSteps_1(ms, 1, 1000),
              seconds      : countSteps_1(ms, 1000, 60),
              minutes      : countSteps_1(ms, 60000, 60),
              hours        : countSteps_1(ms, 3600000, 24),
              days         : countSteps_1(ms, 86400000)
          };
      }

      var parseMs_1 = parseMs;

  var HOUR = 3600000,
          MINUTE = 60000,
          SECOND = 1000;

      /**
       * Format timestamp into a time string.
       */
      function toTimeString(ms){
          var h = ms < HOUR   ? 0 : countSteps_1(ms, HOUR),
              m = ms < MINUTE ? 0 : countSteps_1(ms, MINUTE, 60),
              s = ms < SECOND ? 0 : countSteps_1(ms, SECOND, 60),
              str = '';

          str += h? h + ':' : '';
          str += pad_1(m, 2) + ':';
          str += pad_1(s, 2);

          return str;
      }
      var toTimeString_1 = toTimeString;

  //automatically generated, do not edit!
  //run `node build` instead
  var time = {
      'convert' : convert_1,
      'now' : now_1,
      'parseMs' : parseMs_1,
      'toTimeString' : toTimeString_1
  };

  /**@license
   * mout v0.11.1 | http://moutjs.com | MIT license
   */


  //automatically generated, do not edit!
  //run `node build` instead
  var mout = {
      'VERSION' : '0.11.1',
      'array' : array$1,
      'collection' : collection,
      'date' : date,
      'function' : _function,
      'lang' : lang,
      'math' : math,
      'number' : number,
      'object' : object,
      'queryString' : queryString,
      'random' : random$2,
      'string' : string$1,
      'time' : time,
      'fn' : _function
  };

  var es5$1 = createCommonjsModule(function (module) {
  var isES5 = (function(){
      return this === undefined;
  })();

  if (isES5) {
      module.exports = {
          freeze: Object.freeze,
          defineProperty: Object.defineProperty,
          getDescriptor: Object.getOwnPropertyDescriptor,
          keys: Object.keys,
          names: Object.getOwnPropertyNames,
          getPrototypeOf: Object.getPrototypeOf,
          isArray: Array.isArray,
          isES5: isES5,
          propertyIsWritable: function(obj, prop) {
              var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
              return !!(!descriptor || descriptor.writable || descriptor.set);
          }
      };
  } else {
      var has = {}.hasOwnProperty;
      var str = {}.toString;
      var proto = {}.constructor.prototype;

      var ObjectKeys = function (o) {
          var ret = [];
          for (var key in o) {
              if (has.call(o, key)) {
                  ret.push(key);
              }
          }
          return ret;
      };

      var ObjectGetDescriptor = function(o, key) {
          return {value: o[key]};
      };

      var ObjectDefineProperty = function (o, key, desc) {
          o[key] = desc.value;
          return o;
      };

      var ObjectFreeze = function (obj) {
          return obj;
      };

      var ObjectGetPrototypeOf = function (obj) {
          try {
              return Object(obj).constructor.prototype;
          }
          catch (e) {
              return proto;
          }
      };

      var ArrayIsArray = function (obj) {
          try {
              return str.call(obj) === "[object Array]";
          }
          catch(e) {
              return false;
          }
      };

      module.exports = {
          isArray: ArrayIsArray,
          keys: ObjectKeys,
          names: ObjectKeys,
          defineProperty: ObjectDefineProperty,
          getDescriptor: ObjectGetDescriptor,
          freeze: ObjectFreeze,
          getPrototypeOf: ObjectGetPrototypeOf,
          isES5: isES5,
          propertyIsWritable: function() {
              return true;
          }
      };
  }
  });
  var es5_1$1 = es5$1.freeze;
  var es5_2$1 = es5$1.defineProperty;
  var es5_3$1 = es5$1.getDescriptor;
  var es5_4$1 = es5$1.keys;
  var es5_5$1 = es5$1.names;
  var es5_6$1 = es5$1.getPrototypeOf;
  var es5_7$1 = es5$1.isArray;
  var es5_8$1 = es5$1.isES5;
  var es5_9$1 = es5$1.propertyIsWritable;

  var canEvaluate$1 = typeof navigator == "undefined";
  var haveGetters = (function(){
      try {
          var o = {};
          es5$1.defineProperty(o, "f", {
              get: function () {
                  return 3;
              }
          });
          return o.f === 3;
      }
      catch (e) {
          return false;
      }

  })();

  var errorObj$1 = {e: {}};
  var tryCatchTarget$1;
  function tryCatcher$1() {
      try {
          var target = tryCatchTarget$1;
          tryCatchTarget$1 = null;
          return target.apply(this, arguments);
      } catch (e) {
          errorObj$1.e = e;
          return errorObj$1;
      }
  }
  function tryCatch$1(fn) {
      tryCatchTarget$1 = fn;
      return tryCatcher$1;
  }

  var inherits$3 = function(Child, Parent) {
      var hasProp = {}.hasOwnProperty;

      function T() {
          this.constructor = Child;
          this.constructor$ = Parent;
          for (var propertyName in Parent.prototype) {
              if (hasProp.call(Parent.prototype, propertyName) &&
                  propertyName.charAt(propertyName.length-1) !== "$"
             ) {
                  this[propertyName + "$"] = Parent.prototype[propertyName];
              }
          }
      }
      T.prototype = Parent.prototype;
      Child.prototype = new T();
      return Child.prototype;
  };


  function isPrimitive$2(val) {
      return val == null || val === true || val === false ||
          typeof val === "string" || typeof val === "number";

  }

  function isObject$2(value) {
      return !isPrimitive$2(value);
  }

  function maybeWrapAsError$2(maybeError) {
      if (!isPrimitive$2(maybeError)) return maybeError;

      return new Error(safeToString$1(maybeError));
  }

  function withAppended$1(target, appendee) {
      var len = target.length;
      var ret = new Array(len + 1);
      var i;
      for (i = 0; i < len; ++i) {
          ret[i] = target[i];
      }
      ret[i] = appendee;
      return ret;
  }

  function getDataPropertyOrDefault$1(obj, key, defaultValue) {
      if (es5$1.isES5) {
          var desc = Object.getOwnPropertyDescriptor(obj, key);

          if (desc != null) {
              return desc.get == null && desc.set == null
                      ? desc.value
                      : defaultValue;
          }
      } else {
          return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
      }
  }

  function notEnumerableProp$2(obj, name, value) {
      if (isPrimitive$2(obj)) return obj;
      var descriptor = {
          value: value,
          configurable: true,
          enumerable: false,
          writable: true
      };
      es5$1.defineProperty(obj, name, descriptor);
      return obj;
  }

  function thrower$1(r) {
      throw r;
  }

  var inheritedDataKeys$1 = (function() {
      var excludedPrototypes = [
          Array.prototype,
          Object.prototype,
          Function.prototype
      ];

      var isExcludedProto = function(val) {
          for (var i = 0; i < excludedPrototypes.length; ++i) {
              if (excludedPrototypes[i] === val) {
                  return true;
              }
          }
          return false;
      };

      if (es5$1.isES5) {
          var getKeys = Object.getOwnPropertyNames;
          return function(obj) {
              var ret = [];
              var visitedKeys = Object.create(null);
              while (obj != null && !isExcludedProto(obj)) {
                  var keys;
                  try {
                      keys = getKeys(obj);
                  } catch (e) {
                      return ret;
                  }
                  for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key]) continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                          ret.push(key);
                      }
                  }
                  obj = es5$1.getPrototypeOf(obj);
              }
              return ret;
          };
      } else {
          var hasProp = {}.hasOwnProperty;
          return function(obj) {
              if (isExcludedProto(obj)) return [];
              var ret = [];

              /*jshint forin:false */
              enumeration: for (var key in obj) {
                  if (hasProp.call(obj, key)) {
                      ret.push(key);
                  } else {
                      for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                              continue enumeration;
                          }
                      }
                      ret.push(key);
                  }
              }
              return ret;
          };
      }

  })();

  var thisAssignmentPattern$1 = /this\s*\.\s*\S+\s*=/;
  function isClass$1(fn) {
      try {
          if (typeof fn === "function") {
              var keys = es5$1.names(fn.prototype);

              var hasMethods = es5$1.isES5 && keys.length > 1;
              var hasMethodsOtherThanConstructor = keys.length > 0 &&
                  !(keys.length === 1 && keys[0] === "constructor");
              var hasThisAssignmentAndStaticMethods =
                  thisAssignmentPattern$1.test(fn + "") && es5$1.names(fn).length > 0;

              if (hasMethods || hasMethodsOtherThanConstructor ||
                  hasThisAssignmentAndStaticMethods) {
                  return true;
              }
          }
          return false;
      } catch (e) {
          return false;
      }
  }

  function toFastProperties$1(obj) {
      return obj;
      eval(obj);
  }

  var rident$1 = /^[a-z$_][a-z$_0-9]*$/i;
  function isIdentifier$1(str) {
      return rident$1.test(str);
  }

  function filledRange$1(count, prefix, suffix) {
      var ret = new Array(count);
      for(var i = 0; i < count; ++i) {
          ret[i] = prefix + i + suffix;
      }
      return ret;
  }

  function safeToString$1(obj) {
      try {
          return obj + "";
      } catch (e) {
          return "[no string representation]";
      }
  }

  function markAsOriginatingFromRejection$1(e) {
      try {
          notEnumerableProp$2(e, "isOperational", true);
      }
      catch(ignore) {}
  }

  function originatesFromRejection$1(e) {
      if (e == null) return false;
      return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
          e["isOperational"] === true);
  }

  function canAttachTrace$1(obj) {
      return obj instanceof Error && es5$1.propertyIsWritable(obj, "stack");
  }

  var ensureErrorObject$1 = (function() {
      if (!("stack" in new Error())) {
          return function(value) {
              if (canAttachTrace$1(value)) return value;
              try {throw new Error(safeToString$1(value));}
              catch(err) {return err;}
          };
      } else {
          return function(value) {
              if (canAttachTrace$1(value)) return value;
              return new Error(safeToString$1(value));
          };
      }
  })();

  function classString$1(obj) {
      return {}.toString.call(obj);
  }

  function copyDescriptors$1(from, to, filter) {
      var keys = es5$1.names(from);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (filter(key)) {
              try {
                  es5$1.defineProperty(to, key, es5$1.getDescriptor(from, key));
              } catch (ignore) {}
          }
      }
  }

  var ret$1 = {
      isClass: isClass$1,
      isIdentifier: isIdentifier$1,
      inheritedDataKeys: inheritedDataKeys$1,
      getDataPropertyOrDefault: getDataPropertyOrDefault$1,
      thrower: thrower$1,
      isArray: es5$1.isArray,
      haveGetters: haveGetters,
      notEnumerableProp: notEnumerableProp$2,
      isPrimitive: isPrimitive$2,
      isObject: isObject$2,
      canEvaluate: canEvaluate$1,
      errorObj: errorObj$1,
      tryCatch: tryCatch$1,
      inherits: inherits$3,
      withAppended: withAppended$1,
      maybeWrapAsError: maybeWrapAsError$2,
      toFastProperties: toFastProperties$1,
      filledRange: filledRange$1,
      toString: safeToString$1,
      canAttachTrace: canAttachTrace$1,
      ensureErrorObject: ensureErrorObject$1,
      originatesFromRejection: originatesFromRejection$1,
      markAsOriginatingFromRejection: markAsOriginatingFromRejection$1,
      classString: classString$1,
      copyDescriptors: copyDescriptors$1,
      hasDevTools: typeof chrome !== "undefined" && chrome &&
                   typeof chrome.loadTimes === "function",
      isNode: typeof process !== "undefined" &&
          classString$1(process).toLowerCase() === "[object process]"
  };
  ret$1.isRecentNode = ret$1.isNode && (function() {
      var version = process.versions.node.split(".").map(Number);
      return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
  })();

  if (ret$1.isNode) ret$1.toFastProperties(process);

  try {throw new Error(); } catch (e) {ret$1.lastLineError = e;}
  var util$2 = ret$1;

  var schedule$1;

  var noAsyncScheduler$1 = function() {
      throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
  };
  if (util$2.isNode && typeof MutationObserver === "undefined") {
      var GlobalSetImmediate$1 = commonjsGlobal.setImmediate;
      var ProcessNextTick$1 = process.nextTick;
      schedule$1 = util$2.isRecentNode
                  ? function(fn) { GlobalSetImmediate$1.call(commonjsGlobal, fn); }
                  : function(fn) { ProcessNextTick$1.call(process, fn); };
  } else if ((typeof MutationObserver !== "undefined") &&
            !(typeof window !== "undefined" &&
              window.navigator &&
              window.navigator.standalone)) {
      schedule$1 = function(fn) {
          var div = document.createElement("div");
          var observer = new MutationObserver(fn);
          observer.observe(div, {attributes: true});
          return function() { div.classList.toggle("foo"); };
      };
      schedule$1.isStatic = true;
  } else if (typeof setImmediate !== "undefined") {
      schedule$1 = function (fn) {
          setImmediate(fn);
      };
  } else if (typeof setTimeout !== "undefined") {
      schedule$1 = function (fn) {
          setTimeout(fn, 0);
      };
  } else {
      schedule$1 = noAsyncScheduler$1;
  }
  var schedule_1$1 = schedule$1;

  function arrayMove$1(src, srcIndex, dst, dstIndex, len) {
      for (var j = 0; j < len; ++j) {
          dst[j + dstIndex] = src[j + srcIndex];
          src[j + srcIndex] = void 0;
      }
  }

  function Queue$1(capacity) {
      this._capacity = capacity;
      this._length = 0;
      this._front = 0;
  }

  Queue$1.prototype._willBeOverCapacity = function (size) {
      return this._capacity < size;
  };

  Queue$1.prototype._pushOne = function (arg) {
      var length = this.length();
      this._checkCapacity(length + 1);
      var i = (this._front + length) & (this._capacity - 1);
      this[i] = arg;
      this._length = length + 1;
  };

  Queue$1.prototype._unshiftOne = function(value) {
      var capacity = this._capacity;
      this._checkCapacity(this.length() + 1);
      var front = this._front;
      var i = (((( front - 1 ) &
                      ( capacity - 1) ) ^ capacity ) - capacity );
      this[i] = value;
      this._front = i;
      this._length = this.length() + 1;
  };

  Queue$1.prototype.unshift = function(fn, receiver, arg) {
      this._unshiftOne(arg);
      this._unshiftOne(receiver);
      this._unshiftOne(fn);
  };

  Queue$1.prototype.push = function (fn, receiver, arg) {
      var length = this.length() + 3;
      if (this._willBeOverCapacity(length)) {
          this._pushOne(fn);
          this._pushOne(receiver);
          this._pushOne(arg);
          return;
      }
      var j = this._front + length - 3;
      this._checkCapacity(length);
      var wrapMask = this._capacity - 1;
      this[(j + 0) & wrapMask] = fn;
      this[(j + 1) & wrapMask] = receiver;
      this[(j + 2) & wrapMask] = arg;
      this._length = length;
  };

  Queue$1.prototype.shift = function () {
      var front = this._front,
          ret = this[front];

      this[front] = undefined;
      this._front = (front + 1) & (this._capacity - 1);
      this._length--;
      return ret;
  };

  Queue$1.prototype.length = function () {
      return this._length;
  };

  Queue$1.prototype._checkCapacity = function (size) {
      if (this._capacity < size) {
          this._resizeTo(this._capacity << 1);
      }
  };

  Queue$1.prototype._resizeTo = function (capacity) {
      var oldCapacity = this._capacity;
      this._capacity = capacity;
      var front = this._front;
      var length = this._length;
      var moveItemsCount = (front + length) & (oldCapacity - 1);
      arrayMove$1(this, 0, this, oldCapacity, moveItemsCount);
  };

  var queue$1 = Queue$1;

  var firstLineError$1;
  try {throw new Error(); } catch (e) {firstLineError$1 = e;}
  var schedule$2 = schedule_1$1;



  function Async$1() {
      this._isTickUsed = false;
      this._lateQueue = new queue$1(16);
      this._normalQueue = new queue$1(16);
      this._trampolineEnabled = true;
      var self = this;
      this.drainQueues = function () {
          self._drainQueues();
      };
      this._schedule =
          schedule$2.isStatic ? schedule$2(this.drainQueues) : schedule$2;
  }

  Async$1.prototype.disableTrampolineIfNecessary = function() {
      if (util$2.hasDevTools) {
          this._trampolineEnabled = false;
      }
  };

  Async$1.prototype.enableTrampoline = function() {
      if (!this._trampolineEnabled) {
          this._trampolineEnabled = true;
          this._schedule = function(fn) {
              setTimeout(fn, 0);
          };
      }
  };

  Async$1.prototype.haveItemsQueued = function () {
      return this._normalQueue.length() > 0;
  };

  Async$1.prototype.throwLater = function(fn, arg) {
      if (arguments.length === 1) {
          arg = fn;
          fn = function () { throw arg; };
      }
      if (typeof setTimeout !== "undefined") {
          setTimeout(function() {
              fn(arg);
          }, 0);
      } else try {
          this._schedule(function() {
              fn(arg);
          });
      } catch (e) {
          throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
      }
  };

  function AsyncInvokeLater$1(fn, receiver, arg) {
      this._lateQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncInvoke$1(fn, receiver, arg) {
      this._normalQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncSettlePromises$1(promise) {
      this._normalQueue._pushOne(promise);
      this._queueTick();
  }

  if (!util$2.hasDevTools) {
      Async$1.prototype.invokeLater = AsyncInvokeLater$1;
      Async$1.prototype.invoke = AsyncInvoke$1;
      Async$1.prototype.settlePromises = AsyncSettlePromises$1;
  } else {
      if (schedule$2.isStatic) {
          schedule$2 = function(fn) { setTimeout(fn, 0); };
      }
      Async$1.prototype.invokeLater = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvokeLater$1.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  setTimeout(function() {
                      fn.call(receiver, arg);
                  }, 100);
              });
          }
      };

      Async$1.prototype.invoke = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvoke$1.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  fn.call(receiver, arg);
              });
          }
      };

      Async$1.prototype.settlePromises = function(promise) {
          if (this._trampolineEnabled) {
              AsyncSettlePromises$1.call(this, promise);
          } else {
              this._schedule(function() {
                  promise._settlePromises();
              });
          }
      };
  }

  Async$1.prototype.invokeFirst = function (fn, receiver, arg) {
      this._normalQueue.unshift(fn, receiver, arg);
      this._queueTick();
  };

  Async$1.prototype._drainQueue = function(queue) {
      while (queue.length() > 0) {
          var fn = queue.shift();
          if (typeof fn !== "function") {
              fn._settlePromises();
              continue;
          }
          var receiver = queue.shift();
          var arg = queue.shift();
          fn.call(receiver, arg);
      }
  };

  Async$1.prototype._drainQueues = function () {
      this._drainQueue(this._normalQueue);
      this._reset();
      this._drainQueue(this._lateQueue);
  };

  Async$1.prototype._queueTick = function () {
      if (!this._isTickUsed) {
          this._isTickUsed = true;
          this._schedule(this.drainQueues);
      }
  };

  Async$1.prototype._reset = function () {
      this._isTickUsed = false;
  };

  var async$2 = new Async$1();
  var firstLineError_1$1 = firstLineError$1;
  async$2.firstLineError = firstLineError_1$1;

  var Objectfreeze$1 = es5$1.freeze;

  var inherits$4 = util$2.inherits;
  var notEnumerableProp$3 = util$2.notEnumerableProp;

  function subError$1(nameProperty, defaultMessage) {
      function SubError(message) {
          if (!(this instanceof SubError)) return new SubError(message);
          notEnumerableProp$3(this, "message",
              typeof message === "string" ? message : defaultMessage);
          notEnumerableProp$3(this, "name", nameProperty);
          if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
          } else {
              Error.call(this);
          }
      }
      inherits$4(SubError, Error);
      return SubError;
  }

  var _TypeError$1, _RangeError$1;
  var Warning$1 = subError$1("Warning", "warning");
  var CancellationError$1 = subError$1("CancellationError", "cancellation error");
  var TimeoutError$1 = subError$1("TimeoutError", "timeout error");
  var AggregateError$1 = subError$1("AggregateError", "aggregate error");
  try {
      _TypeError$1 = TypeError;
      _RangeError$1 = RangeError;
  } catch(e) {
      _TypeError$1 = subError$1("TypeError", "type error");
      _RangeError$1 = subError$1("RangeError", "range error");
  }

  var methods$2 = ("join pop push shift unshift slice filter forEach some " +
      "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

  for (var i$2 = 0; i$2 < methods$2.length; ++i$2) {
      if (typeof Array.prototype[methods$2[i$2]] === "function") {
          AggregateError$1.prototype[methods$2[i$2]] = Array.prototype[methods$2[i$2]];
      }
  }

  es5$1.defineProperty(AggregateError$1.prototype, "length", {
      value: 0,
      configurable: false,
      writable: true,
      enumerable: true
  });
  AggregateError$1.prototype["isOperational"] = true;
  var level$1 = 0;
  AggregateError$1.prototype.toString = function() {
      var indent = Array(level$1 * 4 + 1).join(" ");
      var ret = "\n" + indent + "AggregateError of:" + "\n";
      level$1++;
      indent = Array(level$1 * 4 + 1).join(" ");
      for (var i = 0; i < this.length; ++i) {
          var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
          var lines = str.split("\n");
          for (var j = 0; j < lines.length; ++j) {
              lines[j] = indent + lines[j];
          }
          str = lines.join("\n");
          ret += str + "\n";
      }
      level$1--;
      return ret;
  };

  function OperationalError$2(message) {
      if (!(this instanceof OperationalError$2))
          return new OperationalError$2(message);
      notEnumerableProp$3(this, "name", "OperationalError");
      notEnumerableProp$3(this, "message", message);
      this.cause = message;
      this["isOperational"] = true;

      if (message instanceof Error) {
          notEnumerableProp$3(this, "message", message.message);
          notEnumerableProp$3(this, "stack", message.stack);
      } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
      }

  }
  inherits$4(OperationalError$2, Error);

  var errorTypes$1 = Error["__BluebirdErrorTypes__"];
  if (!errorTypes$1) {
      errorTypes$1 = Objectfreeze$1({
          CancellationError: CancellationError$1,
          TimeoutError: TimeoutError$1,
          OperationalError: OperationalError$2,
          RejectionError: OperationalError$2,
          AggregateError: AggregateError$1
      });
      notEnumerableProp$3(Error, "__BluebirdErrorTypes__", errorTypes$1);
  }

  var errors$11 = {
      Error: Error,
      TypeError: _TypeError$1,
      RangeError: _RangeError$1,
      CancellationError: errorTypes$1.CancellationError,
      OperationalError: errorTypes$1.OperationalError,
      TimeoutError: errorTypes$1.TimeoutError,
      AggregateError: errorTypes$1.AggregateError,
      Warning: Warning$1
  };

  var thenables$1 = function(Promise, INTERNAL) {
  var util$$1 = util$2;
  var errorObj = util$$1.errorObj;
  var isObject = util$$1.isObject;

  function tryConvertToPromise(obj, context) {
      if (isObject(obj)) {
          if (obj instanceof Promise) {
              return obj;
          }
          else if (isAnyBluebirdPromise(obj)) {
              var ret = new Promise(INTERNAL);
              obj._then(
                  ret._fulfillUnchecked,
                  ret._rejectUncheckedCheckError,
                  ret._progressUnchecked,
                  ret,
                  null
              );
              return ret;
          }
          var then = util$$1.tryCatch(getThen)(obj);
          if (then === errorObj) {
              if (context) context._pushContext();
              var ret = Promise.reject(then.e);
              if (context) context._popContext();
              return ret;
          } else if (typeof then === "function") {
              return doThenable(obj, then, context);
          }
      }
      return obj;
  }

  function getThen(obj) {
      return obj.then;
  }

  var hasProp = {}.hasOwnProperty;
  function isAnyBluebirdPromise(obj) {
      return hasProp.call(obj, "_promise0");
  }

  function doThenable(x, then, context) {
      var promise = new Promise(INTERNAL);
      var ret = promise;
      if (context) context._pushContext();
      promise._captureStackTrace();
      if (context) context._popContext();
      var synchronous = true;
      var result = util$$1.tryCatch(then).call(x,
                                          resolveFromThenable,
                                          rejectFromThenable,
                                          progressFromThenable);
      synchronous = false;
      if (promise && result === errorObj) {
          promise._rejectCallback(result.e, true, true);
          promise = null;
      }

      function resolveFromThenable(value) {
          if (!promise) return;
          promise._resolveCallback(value);
          promise = null;
      }

      function rejectFromThenable(reason) {
          if (!promise) return;
          promise._rejectCallback(reason, synchronous, true);
          promise = null;
      }

      function progressFromThenable(value) {
          if (!promise) return;
          if (typeof promise._progress === "function") {
              promise._progress(value);
          }
      }
      return ret;
  }

  return tryConvertToPromise;
  };

  var promise_array$1 = function(Promise, INTERNAL, tryConvertToPromise,
      apiRejection) {
  var util$$1 = util$2;
  var isArray = util$$1.isArray;

  function toResolutionValue(val) {
      switch(val) {
      case -2: return [];
      case -3: return {};
      }
  }

  function PromiseArray(values) {
      var promise = this._promise = new Promise(INTERNAL);
      var parent;
      if (values instanceof Promise) {
          parent = values;
          promise._propagateFrom(parent, 1 | 4);
      }
      this._values = values;
      this._length = 0;
      this._totalResolved = 0;
      this._init(undefined, -2);
  }
  PromiseArray.prototype.length = function () {
      return this._length;
  };

  PromiseArray.prototype.promise = function () {
      return this._promise;
  };

  PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
      var values = tryConvertToPromise(this._values, this._promise);
      if (values instanceof Promise) {
          values = values._target();
          this._values = values;
          if (values._isFulfilled()) {
              values = values._value();
              if (!isArray(values)) {
                  var err = new Promise.TypeError("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
                  this.__hardReject__(err);
                  return;
              }
          } else if (values._isPending()) {
              values._then(
                  init,
                  this._reject,
                  undefined,
                  this,
                  resolveValueIfEmpty
             );
              return;
          } else {
              this._reject(values._reason());
              return;
          }
      } else if (!isArray(values)) {
          this._promise._reject(apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a")._reason());
          return;
      }

      if (values.length === 0) {
          if (resolveValueIfEmpty === -5) {
              this._resolveEmptyArray();
          }
          else {
              this._resolve(toResolutionValue(resolveValueIfEmpty));
          }
          return;
      }
      var len = this.getActualLength(values.length);
      this._length = len;
      this._values = this.shouldCopyValues() ? new Array(len) : this._values;
      var promise = this._promise;
      for (var i = 0; i < len; ++i) {
          var isResolved = this._isResolved();
          var maybePromise = tryConvertToPromise(values[i], promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              if (isResolved) {
                  maybePromise._ignoreRejections();
              } else if (maybePromise._isPending()) {
                  maybePromise._proxyPromiseArray(this, i);
              } else if (maybePromise._isFulfilled()) {
                  this._promiseFulfilled(maybePromise._value(), i);
              } else {
                  this._promiseRejected(maybePromise._reason(), i);
              }
          } else if (!isResolved) {
              this._promiseFulfilled(maybePromise, i);
          }
      }
  };

  PromiseArray.prototype._isResolved = function () {
      return this._values === null;
  };

  PromiseArray.prototype._resolve = function (value) {
      this._values = null;
      this._promise._fulfill(value);
  };

  PromiseArray.prototype.__hardReject__ =
  PromiseArray.prototype._reject = function (reason) {
      this._values = null;
      this._promise._rejectCallback(reason, false, true);
  };

  PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
      this._promise._progress({
          index: index,
          value: progressValue
      });
  };


  PromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
      }
  };

  PromiseArray.prototype._promiseRejected = function (reason, index) {
      this._totalResolved++;
      this._reject(reason);
  };

  PromiseArray.prototype.shouldCopyValues = function () {
      return true;
  };

  PromiseArray.prototype.getActualLength = function (len) {
      return len;
  };

  return PromiseArray;
  };

  var captured_trace = function() {
  var async = async$2;
  var util$$1 = util$2;
  var bluebirdFramePattern =
      /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
  var stackFramePattern = null;
  var formatStack = null;
  var indentStackFrames = false;
  var warn;

  function CapturedTrace(parent) {
      this._parent = parent;
      var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
      captureStackTrace(this, CapturedTrace);
      if (length > 32) this.uncycle();
  }
  util$$1.inherits(CapturedTrace, Error);

  CapturedTrace.prototype.uncycle = function() {
      var length = this._length;
      if (length < 2) return;
      var nodes = [];
      var stackToIndex = {};

      for (var i = 0, node = this; node !== undefined; ++i) {
          nodes.push(node);
          node = node._parent;
      }
      length = this._length = i;
      for (var i = length - 1; i >= 0; --i) {
          var stack = nodes[i].stack;
          if (stackToIndex[stack] === undefined) {
              stackToIndex[stack] = i;
          }
      }
      for (var i = 0; i < length; ++i) {
          var currentStack = nodes[i].stack;
          var index = stackToIndex[currentStack];
          if (index !== undefined && index !== i) {
              if (index > 0) {
                  nodes[index - 1]._parent = undefined;
                  nodes[index - 1]._length = 1;
              }
              nodes[i]._parent = undefined;
              nodes[i]._length = 1;
              var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

              if (index < length - 1) {
                  cycleEdgeNode._parent = nodes[index + 1];
                  cycleEdgeNode._parent.uncycle();
                  cycleEdgeNode._length =
                      cycleEdgeNode._parent._length + 1;
              } else {
                  cycleEdgeNode._parent = undefined;
                  cycleEdgeNode._length = 1;
              }
              var currentChildLength = cycleEdgeNode._length + 1;
              for (var j = i - 2; j >= 0; --j) {
                  nodes[j]._length = currentChildLength;
                  currentChildLength++;
              }
              return;
          }
      }
  };

  CapturedTrace.prototype.parent = function() {
      return this._parent;
  };

  CapturedTrace.prototype.hasParent = function() {
      return this._parent !== undefined;
  };

  CapturedTrace.prototype.attachExtraTrace = function(error) {
      if (error.__stackCleaned__) return;
      this.uncycle();
      var parsed = CapturedTrace.parseStackAndMessage(error);
      var message = parsed.message;
      var stacks = [parsed.stack];

      var trace = this;
      while (trace !== undefined) {
          stacks.push(cleanStack(trace.stack.split("\n")));
          trace = trace._parent;
      }
      removeCommonRoots(stacks);
      removeDuplicateOrEmptyJumps(stacks);
      util$$1.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
      util$$1.notEnumerableProp(error, "__stackCleaned__", true);
  };

  function reconstructStack(message, stacks) {
      for (var i = 0; i < stacks.length - 1; ++i) {
          stacks[i].push("From previous event:");
          stacks[i] = stacks[i].join("\n");
      }
      if (i < stacks.length) {
          stacks[i] = stacks[i].join("\n");
      }
      return message + "\n" + stacks.join("\n");
  }

  function removeDuplicateOrEmptyJumps(stacks) {
      for (var i = 0; i < stacks.length; ++i) {
          if (stacks[i].length === 0 ||
              ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
              stacks.splice(i, 1);
              i--;
          }
      }
  }

  function removeCommonRoots(stacks) {
      var current = stacks[0];
      for (var i = 1; i < stacks.length; ++i) {
          var prev = stacks[i];
          var currentLastIndex = current.length - 1;
          var currentLastLine = current[currentLastIndex];
          var commonRootMeetPoint = -1;

          for (var j = prev.length - 1; j >= 0; --j) {
              if (prev[j] === currentLastLine) {
                  commonRootMeetPoint = j;
                  break;
              }
          }

          for (var j = commonRootMeetPoint; j >= 0; --j) {
              var line = prev[j];
              if (current[currentLastIndex] === line) {
                  current.pop();
                  currentLastIndex--;
              } else {
                  break;
              }
          }
          current = prev;
      }
  }

  function cleanStack(stack) {
      var ret = [];
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          var isTraceLine = stackFramePattern.test(line) ||
              "    (No stack trace)" === line;
          var isInternalFrame = isTraceLine && shouldIgnore(line);
          if (isTraceLine && !isInternalFrame) {
              if (indentStackFrames && line.charAt(0) !== " ") {
                  line = "    " + line;
              }
              ret.push(line);
          }
      }
      return ret;
  }

  function stackFramesAsArray(error) {
      var stack = error.stack.replace(/\s+$/g, "").split("\n");
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
              break;
          }
      }
      if (i > 0) {
          stack = stack.slice(i);
      }
      return stack;
  }

  CapturedTrace.parseStackAndMessage = function(error) {
      var stack = error.stack;
      var message = error.toString();
      stack = typeof stack === "string" && stack.length > 0
                  ? stackFramesAsArray(error) : ["    (No stack trace)"];
      return {
          message: message,
          stack: cleanStack(stack)
      };
  };

  CapturedTrace.formatAndLogError = function(error, title) {
      if (typeof console !== "undefined") {
          var message;
          if (typeof error === "object" || typeof error === "function") {
              var stack = error.stack;
              message = title + formatStack(stack, error);
          } else {
              message = title + String(error);
          }
          if (typeof warn === "function") {
              warn(message);
          } else if (typeof console.log === "function" ||
              typeof console.log === "object") {
              console.log(message);
          }
      }
  };

  CapturedTrace.unhandledRejection = function (reason) {
      CapturedTrace.formatAndLogError(reason, "^--- With additional stack trace: ");
  };

  CapturedTrace.isSupported = function () {
      return typeof captureStackTrace === "function";
  };

  CapturedTrace.fireRejectionEvent =
  function(name, localHandler, reason, promise) {
      var localEventFired = false;
      try {
          if (typeof localHandler === "function") {
              localEventFired = true;
              if (name === "rejectionHandled") {
                  localHandler(promise);
              } else {
                  localHandler(reason, promise);
              }
          }
      } catch (e) {
          async.throwLater(e);
      }

      var globalEventFired = false;
      try {
          globalEventFired = fireGlobalEvent(name, reason, promise);
      } catch (e) {
          globalEventFired = true;
          async.throwLater(e);
      }

      var domEventFired = false;
      if (fireDomEvent) {
          try {
              domEventFired = fireDomEvent(name.toLowerCase(), {
                  reason: reason,
                  promise: promise
              });
          } catch (e) {
              domEventFired = true;
              async.throwLater(e);
          }
      }

      if (!globalEventFired && !localEventFired && !domEventFired &&
          name === "unhandledRejection") {
          CapturedTrace.formatAndLogError(reason, "Unhandled rejection ");
      }
  };

  function formatNonError(obj) {
      var str;
      if (typeof obj === "function") {
          str = "[function " +
              (obj.name || "anonymous") +
              "]";
      } else {
          str = obj.toString();
          var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
          if (ruselessToString.test(str)) {
              try {
                  var newStr = JSON.stringify(obj);
                  str = newStr;
              }
              catch(e) {

              }
          }
          if (str.length === 0) {
              str = "(empty array)";
          }
      }
      return ("(<" + snip(str) + ">, no stack trace)");
  }

  function snip(str) {
      var maxChars = 41;
      if (str.length < maxChars) {
          return str;
      }
      return str.substr(0, maxChars - 3) + "...";
  }

  var shouldIgnore = function() { return false; };
  var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
  function parseLineInfo(line) {
      var matches = line.match(parseLineInfoRegex);
      if (matches) {
          return {
              fileName: matches[1],
              line: parseInt(matches[2], 10)
          };
      }
  }
  CapturedTrace.setBounds = function(firstLineError, lastLineError) {
      if (!CapturedTrace.isSupported()) return;
      var firstStackLines = firstLineError.stack.split("\n");
      var lastStackLines = lastLineError.stack.split("\n");
      var firstIndex = -1;
      var lastIndex = -1;
      var firstFileName;
      var lastFileName;
      for (var i = 0; i < firstStackLines.length; ++i) {
          var result = parseLineInfo(firstStackLines[i]);
          if (result) {
              firstFileName = result.fileName;
              firstIndex = result.line;
              break;
          }
      }
      for (var i = 0; i < lastStackLines.length; ++i) {
          var result = parseLineInfo(lastStackLines[i]);
          if (result) {
              lastFileName = result.fileName;
              lastIndex = result.line;
              break;
          }
      }
      if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
          firstFileName !== lastFileName || firstIndex >= lastIndex) {
          return;
      }

      shouldIgnore = function(line) {
          if (bluebirdFramePattern.test(line)) return true;
          var info = parseLineInfo(line);
          if (info) {
              if (info.fileName === firstFileName &&
                  (firstIndex <= info.line && info.line <= lastIndex)) {
                  return true;
              }
          }
          return false;
      };
  };

  var captureStackTrace = (function stackDetection() {
      var v8stackFramePattern = /^\s*at\s*/;
      var v8stackFormatter = function(stack, error) {
          if (typeof stack === "string") return stack;

          if (error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      if (typeof Error.stackTraceLimit === "number" &&
          typeof Error.captureStackTrace === "function") {
          Error.stackTraceLimit = Error.stackTraceLimit + 6;
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          var captureStackTrace = Error.captureStackTrace;

          shouldIgnore = function(line) {
              return bluebirdFramePattern.test(line);
          };
          return function(receiver, ignoreUntil) {
              Error.stackTraceLimit = Error.stackTraceLimit + 6;
              captureStackTrace(receiver, ignoreUntil);
              Error.stackTraceLimit = Error.stackTraceLimit - 6;
          };
      }
      var err = new Error();

      if (typeof err.stack === "string" &&
          err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
          stackFramePattern = /@/;
          formatStack = v8stackFormatter;
          indentStackFrames = true;
          return function captureStackTrace(o) {
              o.stack = new Error().stack;
          };
      }

      var hasStackAfterThrow;
      try { throw new Error(); }
      catch(e) {
          hasStackAfterThrow = ("stack" in e);
      }
      if (!("stack" in err) && hasStackAfterThrow &&
          typeof Error.stackTraceLimit === "number") {
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          return function captureStackTrace(o) {
              Error.stackTraceLimit = Error.stackTraceLimit + 6;
              try { throw new Error(); }
              catch(e) { o.stack = e.stack; }
              Error.stackTraceLimit = Error.stackTraceLimit - 6;
          };
      }

      formatStack = function(stack, error) {
          if (typeof stack === "string") return stack;

          if ((typeof error === "object" ||
              typeof error === "function") &&
              error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      return null;

  })([]);

  var fireDomEvent;
  var fireGlobalEvent = (function() {
      if (util$$1.isNode) {
          return function(name, reason, promise) {
              if (name === "rejectionHandled") {
                  return process.emit(name, promise);
              } else {
                  return process.emit(name, reason, promise);
              }
          };
      } else {
          var customEventWorks = false;
          var anyEventWorks = true;
          try {
              var ev = new self.CustomEvent("test");
              customEventWorks = ev instanceof CustomEvent;
          } catch (e) {}
          if (!customEventWorks) {
              try {
                  var event = document.createEvent("CustomEvent");
                  event.initCustomEvent("testingtheevent", false, true, {});
                  self.dispatchEvent(event);
              } catch (e) {
                  anyEventWorks = false;
              }
          }
          if (anyEventWorks) {
              fireDomEvent = function(type, detail) {
                  var event;
                  if (customEventWorks) {
                      event = new self.CustomEvent(type, {
                          detail: detail,
                          bubbles: false,
                          cancelable: true
                      });
                  } else if (self.dispatchEvent) {
                      event = document.createEvent("CustomEvent");
                      event.initCustomEvent(type, false, true, detail);
                  }

                  return event ? !self.dispatchEvent(event) : false;
              };
          }

          var toWindowMethodNameMap = {};
          toWindowMethodNameMap["unhandledRejection"] = ("on" +
              "unhandledRejection").toLowerCase();
          toWindowMethodNameMap["rejectionHandled"] = ("on" +
              "rejectionHandled").toLowerCase();

          return function(name, reason, promise) {
              var methodName = toWindowMethodNameMap[name];
              var method = self[methodName];
              if (!method) return false;
              if (name === "rejectionHandled") {
                  method.call(self, promise);
              } else {
                  method.call(self, reason, promise);
              }
              return true;
          };
      }
  })();

  if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
      warn = function (message) {
          console.warn(message);
      };
      if (util$$1.isNode && process.stderr.isTTY) {
          warn = function(message) {
              process.stderr.write("\u001b[31m" + message + "\u001b[39m\n");
          };
      } else if (!util$$1.isNode && typeof (new Error().stack) === "string") {
          warn = function(message) {
              console.warn("%c" + message, "color: red");
          };
      }
  }

  return CapturedTrace;
  };

  var debuggability$1 = function(Promise, CapturedTrace) {
  var getDomain = Promise._getDomain;
  var async = async$2;
  var Warning = errors$11.Warning;
  var util$$1 = util$2;
  var canAttachTrace = util$$1.canAttachTrace;
  var unhandledRejectionHandled;
  var possiblyUnhandledRejection;
  var debugging = false || (util$$1.isNode &&
                      (!!process.env["BLUEBIRD_DEBUG"] ||
                       process.env["NODE_ENV"] === "development"));

  if (util$$1.isNode && process.env["BLUEBIRD_DEBUG"] == 0) debugging = false;

  if (debugging) {
      async.disableTrampolineIfNecessary();
  }

  Promise.prototype._ignoreRejections = function() {
      this._unsetRejectionIsUnhandled();
      this._bitField = this._bitField | 16777216;
  };

  Promise.prototype._ensurePossibleRejectionHandled = function () {
      if ((this._bitField & 16777216) !== 0) return;
      this._setRejectionIsUnhandled();
      async.invokeLater(this._notifyUnhandledRejection, this, undefined);
  };

  Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
      CapturedTrace.fireRejectionEvent("rejectionHandled",
                                    unhandledRejectionHandled, undefined, this);
  };

  Promise.prototype._notifyUnhandledRejection = function () {
      if (this._isRejectionUnhandled()) {
          var reason = this._getCarriedStackTrace() || this._settledValue;
          this._setUnhandledRejectionIsNotified();
          CapturedTrace.fireRejectionEvent("unhandledRejection",
                                        possiblyUnhandledRejection, reason, this);
      }
  };

  Promise.prototype._setUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField | 524288;
  };

  Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField & (~524288);
  };

  Promise.prototype._isUnhandledRejectionNotified = function () {
      return (this._bitField & 524288) > 0;
  };

  Promise.prototype._setRejectionIsUnhandled = function () {
      this._bitField = this._bitField | 2097152;
  };

  Promise.prototype._unsetRejectionIsUnhandled = function () {
      this._bitField = this._bitField & (~2097152);
      if (this._isUnhandledRejectionNotified()) {
          this._unsetUnhandledRejectionIsNotified();
          this._notifyUnhandledRejectionIsHandled();
      }
  };

  Promise.prototype._isRejectionUnhandled = function () {
      return (this._bitField & 2097152) > 0;
  };

  Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
      this._bitField = this._bitField | 1048576;
      this._fulfillmentHandler0 = capturedTrace;
  };

  Promise.prototype._isCarryingStackTrace = function () {
      return (this._bitField & 1048576) > 0;
  };

  Promise.prototype._getCarriedStackTrace = function () {
      return this._isCarryingStackTrace()
          ? this._fulfillmentHandler0
          : undefined;
  };

  Promise.prototype._captureStackTrace = function () {
      if (debugging) {
          this._trace = new CapturedTrace(this._peekContext());
      }
      return this;
  };

  Promise.prototype._attachExtraTrace = function (error, ignoreSelf) {
      if (debugging && canAttachTrace(error)) {
          var trace = this._trace;
          if (trace !== undefined) {
              if (ignoreSelf) trace = trace._parent;
          }
          if (trace !== undefined) {
              trace.attachExtraTrace(error);
          } else if (!error.__stackCleaned__) {
              var parsed = CapturedTrace.parseStackAndMessage(error);
              util$$1.notEnumerableProp(error, "stack",
                  parsed.message + "\n" + parsed.stack.join("\n"));
              util$$1.notEnumerableProp(error, "__stackCleaned__", true);
          }
      }
  };

  Promise.prototype._warn = function(message) {
      var warning = new Warning(message);
      var ctx = this._peekContext();
      if (ctx) {
          ctx.attachExtraTrace(warning);
      } else {
          var parsed = CapturedTrace.parseStackAndMessage(warning);
          warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
      }
      CapturedTrace.formatAndLogError(warning, "");
  };

  Promise.onPossiblyUnhandledRejection = function (fn) {
      var domain = getDomain();
      possiblyUnhandledRejection =
          typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                   : undefined;
  };

  Promise.onUnhandledRejectionHandled = function (fn) {
      var domain = getDomain();
      unhandledRejectionHandled =
          typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                   : undefined;
  };

  Promise.longStackTraces = function () {
      if (async.haveItemsQueued() &&
          debugging === false
     ) {
          throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/DT1qyG\u000a");
      }
      debugging = CapturedTrace.isSupported();
      if (debugging) {
          async.disableTrampolineIfNecessary();
      }
  };

  Promise.hasLongStackTraces = function () {
      return debugging && CapturedTrace.isSupported();
  };

  if (!CapturedTrace.isSupported()) {
      Promise.longStackTraces = function(){};
      debugging = false;
  }

  return function() {
      return debugging;
  };
  };

  var context$1 = function(Promise, CapturedTrace, isDebugging) {
  var contextStack = [];
  function Context() {
      this._trace = new CapturedTrace(peekContext());
  }
  Context.prototype._pushContext = function () {
      if (!isDebugging()) return;
      if (this._trace !== undefined) {
          contextStack.push(this._trace);
      }
  };

  Context.prototype._popContext = function () {
      if (!isDebugging()) return;
      if (this._trace !== undefined) {
          contextStack.pop();
      }
  };

  function createContext() {
      if (isDebugging()) return new Context();
  }

  function peekContext() {
      var lastIndex = contextStack.length - 1;
      if (lastIndex >= 0) {
          return contextStack[lastIndex];
      }
      return undefined;
  }

  Promise.prototype._peekContext = peekContext;
  Promise.prototype._pushContext = Context.prototype._pushContext;
  Promise.prototype._popContext = Context.prototype._popContext;

  return createContext;
  };

  var catch_filter$1 = function(NEXT_FILTER) {
  var util$$1 = util$2;
  var errors = errors$11;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  var keys = es5$1.keys;
  var TypeError = errors.TypeError;

  function CatchFilter(instances, callback, promise) {
      this._instances = instances;
      this._callback = callback;
      this._promise = promise;
  }

  function safePredicate(predicate, e) {
      var safeObject = {};
      var retfilter = tryCatch(predicate).call(safeObject, e);

      if (retfilter === errorObj) return retfilter;

      var safeKeys = keys(safeObject);
      if (safeKeys.length) {
          errorObj.e = new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a");
          return errorObj;
      }
      return retfilter;
  }

  CatchFilter.prototype.doFilter = function (e) {
      var cb = this._callback;
      var promise = this._promise;
      var boundTo = promise._boundValue();
      for (var i = 0, len = this._instances.length; i < len; ++i) {
          var item = this._instances[i];
          var itemIsErrorType = item === Error ||
              (item != null && item.prototype instanceof Error);

          if (itemIsErrorType && e instanceof item) {
              var ret = tryCatch(cb).call(boundTo, e);
              if (ret === errorObj) {
                  NEXT_FILTER.e = ret.e;
                  return NEXT_FILTER;
              }
              return ret;
          } else if (typeof item === "function" && !itemIsErrorType) {
              var shouldHandle = safePredicate(item, e);
              if (shouldHandle === errorObj) {
                  e = errorObj.e;
                  break;
              } else if (shouldHandle) {
                  var ret = tryCatch(cb).call(boundTo, e);
                  if (ret === errorObj) {
                      NEXT_FILTER.e = ret.e;
                      return NEXT_FILTER;
                  }
                  return ret;
              }
          }
      }
      NEXT_FILTER.e = e;
      return NEXT_FILTER;
  };

  return CatchFilter;
  };

  var maybeWrapAsError$3 = util$2.maybeWrapAsError;

  var TimeoutError$2 = errors$11.TimeoutError;
  var OperationalError$3 = errors$11.OperationalError;
  var haveGetters$1 = util$2.haveGetters;


  function isUntypedError$1(obj) {
      return obj instanceof Error &&
          es5$1.getPrototypeOf(obj) === Error.prototype;
  }

  var rErrorKey$1 = /^(?:name|message|stack|cause)$/;
  function wrapAsOperationalError$1(obj) {
      var ret;
      if (isUntypedError$1(obj)) {
          ret = new OperationalError$3(obj);
          ret.name = obj.name;
          ret.message = obj.message;
          ret.stack = obj.stack;
          var keys = es5$1.keys(obj);
          for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (!rErrorKey$1.test(key)) {
                  ret[key] = obj[key];
              }
          }
          return ret;
      }
      util$2.markAsOriginatingFromRejection(obj);
      return obj;
  }

  function nodebackForPromise$1(promise) {
      return function(err, value) {
          if (promise === null) return;

          if (err) {
              var wrapped = wrapAsOperationalError$1(maybeWrapAsError$3(err));
              promise._attachExtraTrace(wrapped);
              promise._reject(wrapped);
          } else if (arguments.length > 2) {
              var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
              promise._fulfill(args);
          } else {
              promise._fulfill(value);
          }

          promise = null;
      };
  }


  var PromiseResolver;
  if (!haveGetters$1) {
      PromiseResolver = function (promise) {
          this.promise = promise;
          this.asCallback = nodebackForPromise$1(promise);
          this.callback = this.asCallback;
      };
  }
  else {
      PromiseResolver = function (promise) {
          this.promise = promise;
      };
  }
  if (haveGetters$1) {
      var prop$1 = {
          get: function() {
              return nodebackForPromise$1(this.promise);
          }
      };
      es5$1.defineProperty(PromiseResolver.prototype, "asCallback", prop$1);
      es5$1.defineProperty(PromiseResolver.prototype, "callback", prop$1);
  }

  PromiseResolver._nodebackForPromise = nodebackForPromise$1;

  PromiseResolver.prototype.toString = function () {
      return "[object PromiseResolver]";
  };

  PromiseResolver.prototype.resolve =
  PromiseResolver.prototype.fulfill = function (value) {
      if (!(this instanceof PromiseResolver)) {
          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
      }
      this.promise._resolveCallback(value);
  };

  PromiseResolver.prototype.reject = function (reason) {
      if (!(this instanceof PromiseResolver)) {
          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
      }
      this.promise._rejectCallback(reason);
  };

  PromiseResolver.prototype.progress = function (value) {
      if (!(this instanceof PromiseResolver)) {
          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
      }
      this.promise._progress(value);
  };

  PromiseResolver.prototype.cancel = function (err) {
      this.promise.cancel(err);
  };

  PromiseResolver.prototype.timeout = function () {
      this.reject(new TimeoutError$2("timeout"));
  };

  PromiseResolver.prototype.isResolved = function () {
      return this.promise.isResolved();
  };

  PromiseResolver.prototype.toJSON = function () {
      return this.promise.toJSON();
  };

  var promise_resolver = PromiseResolver;

  var progress = function(Promise, PromiseArray) {
  var util$$1 = util$2;
  var async = async$2;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;

  Promise.prototype.progressed = function (handler) {
      return this._then(undefined, undefined, handler, undefined, undefined);
  };

  Promise.prototype._progress = function (progressValue) {
      if (this._isFollowingOrFulfilledOrRejected()) return;
      this._target()._progressUnchecked(progressValue);

  };

  Promise.prototype._progressHandlerAt = function (index) {
      return index === 0
          ? this._progressHandler0
          : this[(index << 2) + index - 5 + 2];
  };

  Promise.prototype._doProgressWith = function (progression) {
      var progressValue = progression.value;
      var handler = progression.handler;
      var promise = progression.promise;
      var receiver = progression.receiver;

      var ret = tryCatch(handler).call(receiver, progressValue);
      if (ret === errorObj) {
          if (ret.e != null &&
              ret.e.name !== "StopProgressPropagation") {
              var trace = util$$1.canAttachTrace(ret.e)
                  ? ret.e : new Error(util$$1.toString(ret.e));
              promise._attachExtraTrace(trace);
              promise._progress(ret.e);
          }
      } else if (ret instanceof Promise) {
          ret._then(promise._progress, null, null, promise, undefined);
      } else {
          promise._progress(ret);
      }
  };


  Promise.prototype._progressUnchecked = function (progressValue) {
      var len = this._length();
      var progress = this._progress;
      for (var i = 0; i < len; i++) {
          var handler = this._progressHandlerAt(i);
          var promise = this._promiseAt(i);
          if (!(promise instanceof Promise)) {
              var receiver = this._receiverAt(i);
              if (typeof handler === "function") {
                  handler.call(receiver, progressValue, promise);
              } else if (receiver instanceof PromiseArray &&
                         !receiver._isResolved()) {
                  receiver._promiseProgressed(progressValue, promise);
              }
              continue;
          }

          if (typeof handler === "function") {
              async.invoke(this._doProgressWith, this, {
                  handler: handler,
                  promise: promise,
                  receiver: this._receiverAt(i),
                  value: progressValue
              });
          } else {
              async.invoke(progress, promise, progressValue);
          }
      }
  };
  };

  var method$1 =
  function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
  var util$$1 = util$2;
  var tryCatch = util$$1.tryCatch;

  Promise.method = function (fn) {
      if (typeof fn !== "function") {
          throw new Promise.TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      }
      return function () {
          var ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._pushContext();
          var value = tryCatch(fn).apply(this, arguments);
          ret._popContext();
          ret._resolveFromSyncValue(value);
          return ret;
      };
  };

  Promise.attempt = Promise["try"] = function (fn, args, ctx) {
      if (typeof fn !== "function") {
          return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      }
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._pushContext();
      var value = util$$1.isArray(args)
          ? tryCatch(fn).apply(ctx, args)
          : tryCatch(fn).call(ctx, args);
      ret._popContext();
      ret._resolveFromSyncValue(value);
      return ret;
  };

  Promise.prototype._resolveFromSyncValue = function (value) {
      if (value === util$$1.errorObj) {
          this._rejectCallback(value.e, false, true);
      } else {
          this._resolveCallback(value, true);
      }
  };
  };

  var bind$2 = function(Promise, INTERNAL, tryConvertToPromise) {
  var rejectThis = function(_, e) {
      this._reject(e);
  };

  var targetRejected = function(e, context) {
      context.promiseRejectionQueued = true;
      context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
  };

  var bindingResolved = function(thisArg, context) {
      if (this._isPending()) {
          this._resolveCallback(context.target);
      }
  };

  var bindingRejected = function(e, context) {
      if (!context.promiseRejectionQueued) this._reject(e);
  };

  Promise.prototype.bind = function (thisArg) {
      var maybePromise = tryConvertToPromise(thisArg);
      var ret = new Promise(INTERNAL);
      ret._propagateFrom(this, 1);
      var target = this._target();

      ret._setBoundTo(maybePromise);
      if (maybePromise instanceof Promise) {
          var context = {
              promiseRejectionQueued: false,
              promise: ret,
              target: target,
              bindingPromise: maybePromise
          };
          target._then(INTERNAL, targetRejected, ret._progress, ret, context);
          maybePromise._then(
              bindingResolved, bindingRejected, ret._progress, ret, context);
      } else {
          ret._resolveCallback(target);
      }
      return ret;
  };

  Promise.prototype._setBoundTo = function (obj) {
      if (obj !== undefined) {
          this._bitField = this._bitField | 131072;
          this._boundTo = obj;
      } else {
          this._bitField = this._bitField & (~131072);
      }
  };

  Promise.prototype._isBound = function () {
      return (this._bitField & 131072) === 131072;
  };

  Promise.bind = function (thisArg, value) {
      var maybePromise = tryConvertToPromise(thisArg);
      var ret = new Promise(INTERNAL);

      ret._setBoundTo(maybePromise);
      if (maybePromise instanceof Promise) {
          maybePromise._then(function() {
              ret._resolveCallback(value);
          }, ret._reject, ret._progress, ret, null);
      } else {
          ret._resolveCallback(value);
      }
      return ret;
  };
  };

  var _finally$1 = function(Promise, NEXT_FILTER, tryConvertToPromise) {
  var util$$1 = util$2;
  var isPrimitive = util$$1.isPrimitive;
  var thrower = util$$1.thrower;

  function returnThis() {
      return this;
  }
  function throwThis() {
      throw this;
  }
  function return$(r) {
      return function() {
          return r;
      };
  }
  function throw$(r) {
      return function() {
          throw r;
      };
  }
  function promisedFinally(ret, reasonOrValue, isFulfilled) {
      var then;
      if (isPrimitive(reasonOrValue)) {
          then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
      } else {
          then = isFulfilled ? returnThis : throwThis;
      }
      return ret._then(then, thrower, undefined, reasonOrValue, undefined);
  }

  function finallyHandler(reasonOrValue) {
      var promise = this.promise;
      var handler = this.handler;

      var ret = promise._isBound()
                      ? handler.call(promise._boundValue())
                      : handler();

      if (ret !== undefined) {
          var maybePromise = tryConvertToPromise(ret, promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              return promisedFinally(maybePromise, reasonOrValue,
                                      promise.isFulfilled());
          }
      }

      if (promise.isRejected()) {
          NEXT_FILTER.e = reasonOrValue;
          return NEXT_FILTER;
      } else {
          return reasonOrValue;
      }
  }

  function tapHandler(value) {
      var promise = this.promise;
      var handler = this.handler;

      var ret = promise._isBound()
                      ? handler.call(promise._boundValue(), value)
                      : handler(value);

      if (ret !== undefined) {
          var maybePromise = tryConvertToPromise(ret, promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              return promisedFinally(maybePromise, value, true);
          }
      }
      return value;
  }

  Promise.prototype._passThroughHandler = function (handler, isFinally) {
      if (typeof handler !== "function") return this.then();

      var promiseAndHandler = {
          promise: this,
          handler: handler
      };

      return this._then(
              isFinally ? finallyHandler : tapHandler,
              isFinally ? finallyHandler : undefined, undefined,
              promiseAndHandler, undefined);
  };

  Promise.prototype.lastly =
  Promise.prototype["finally"] = function (handler) {
      return this._passThroughHandler(handler, true);
  };

  Promise.prototype.tap = function (handler) {
      return this._passThroughHandler(handler, false);
  };
  };

  var isPrimitive$3 = util$2.isPrimitive;

  var direct_resolve$1 = function(Promise) {
  var returner = function () {
      return this;
  };
  var thrower = function () {
      throw this;
  };
  var returnUndefined = function() {};
  var throwUndefined = function() {
      throw undefined;
  };

  var wrapper = function (value, action) {
      if (action === 1) {
          return function () {
              throw value;
          };
      } else if (action === 2) {
          return function () {
              return value;
          };
      }
  };


  Promise.prototype["return"] =
  Promise.prototype.thenReturn = function (value) {
      if (value === undefined) return this.then(returnUndefined);

      if (isPrimitive$3(value)) {
          return this._then(
              wrapper(value, 2),
              undefined,
              undefined,
              undefined,
              undefined
         );
      } else if (value instanceof Promise) {
          value._ignoreRejections();
      }
      return this._then(returner, undefined, undefined, value, undefined);
  };

  Promise.prototype["throw"] =
  Promise.prototype.thenThrow = function (reason) {
      if (reason === undefined) return this.then(throwUndefined);

      if (isPrimitive$3(reason)) {
          return this._then(
              wrapper(reason, 1),
              undefined,
              undefined,
              undefined,
              undefined
         );
      }
      return this._then(thrower, undefined, undefined, reason, undefined);
  };
  };

  var synchronous_inspection$1 = function(Promise) {
  function PromiseInspection(promise) {
      if (promise !== undefined) {
          promise = promise._target();
          this._bitField = promise._bitField;
          this._settledValue = promise._settledValue;
      }
      else {
          this._bitField = 0;
          this._settledValue = undefined;
      }
  }

  PromiseInspection.prototype.value = function () {
      if (!this.isFulfilled()) {
          throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
      }
      return this._settledValue;
  };

  PromiseInspection.prototype.error =
  PromiseInspection.prototype.reason = function () {
      if (!this.isRejected()) {
          throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
      }
      return this._settledValue;
  };

  PromiseInspection.prototype.isFulfilled =
  Promise.prototype._isFulfilled = function () {
      return (this._bitField & 268435456) > 0;
  };

  PromiseInspection.prototype.isRejected =
  Promise.prototype._isRejected = function () {
      return (this._bitField & 134217728) > 0;
  };

  PromiseInspection.prototype.isPending =
  Promise.prototype._isPending = function () {
      return (this._bitField & 402653184) === 0;
  };

  PromiseInspection.prototype.isResolved =
  Promise.prototype._isResolved = function () {
      return (this._bitField & 402653184) > 0;
  };

  Promise.prototype.isPending = function() {
      return this._target()._isPending();
  };

  Promise.prototype.isRejected = function() {
      return this._target()._isRejected();
  };

  Promise.prototype.isFulfilled = function() {
      return this._target()._isFulfilled();
  };

  Promise.prototype.isResolved = function() {
      return this._target()._isResolved();
  };

  Promise.prototype._value = function() {
      return this._settledValue;
  };

  Promise.prototype._reason = function() {
      this._unsetRejectionIsUnhandled();
      return this._settledValue;
  };

  Promise.prototype.value = function() {
      var target = this._target();
      if (!target.isFulfilled()) {
          throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
      }
      return target._settledValue;
  };

  Promise.prototype.reason = function() {
      var target = this._target();
      if (!target.isRejected()) {
          throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
      }
      target._unsetRejectionIsUnhandled();
      return target._settledValue;
  };


  Promise.PromiseInspection = PromiseInspection;
  };

  var join$2 =
  function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
  var util$$1 = util$2;
  var canEvaluate = util$$1.canEvaluate;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  var reject;

  {
  if (canEvaluate) {
      var thenCallback = function(i) {
          return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
      };

      var caller = function(count) {
          var values = [];
          for (var i = 1; i <= count; ++i) values.push("holder.p" + i);
          return new Function("holder", "                                      \n\
            'use strict';                                                    \n\
            var callback = holder.fn;                                        \n\
            return callback(values);                                         \n\
            ".replace(/values/g, values.join(", ")));
      };
      var thenCallbacks = [];
      var callers = [undefined];
      for (var i = 1; i <= 5; ++i) {
          thenCallbacks.push(thenCallback(i));
          callers.push(caller(i));
      }

      var Holder = function(total, fn) {
          this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
          this.fn = fn;
          this.total = total;
          this.now = 0;
      };

      Holder.prototype.callers = callers;
      Holder.prototype.checkFulfillment = function(promise) {
          var now = this.now;
          now++;
          var total = this.total;
          if (now >= total) {
              var handler = this.callers[total];
              promise._pushContext();
              var ret = tryCatch(handler)(this);
              promise._popContext();
              if (ret === errorObj) {
                  promise._rejectCallback(ret.e, false, true);
              } else {
                  promise._resolveCallback(ret);
              }
          } else {
              this.now = now;
          }
      };

      var reject = function (reason) {
          this._reject(reason);
      };
  }
  }

  Promise.join = function () {
      var last = arguments.length - 1;
      var fn;
      if (last > 0 && typeof arguments[last] === "function") {
          fn = arguments[last];
          {
              if (last < 6 && canEvaluate) {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  var holder = new Holder(last, fn);
                  var callbacks = thenCallbacks;
                  for (var i = 0; i < last; ++i) {
                      var maybePromise = tryConvertToPromise(arguments[i], ret);
                      if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          if (maybePromise._isPending()) {
                              maybePromise._then(callbacks[i], reject,
                                                 undefined, ret, holder);
                          } else if (maybePromise._isFulfilled()) {
                              callbacks[i].call(ret,
                                                maybePromise._value(), holder);
                          } else {
                              ret._reject(maybePromise._reason());
                          }
                      } else {
                          callbacks[i].call(ret, maybePromise, holder);
                      }
                  }
                  return ret;
              }
          }
      }
      var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}
      if (fn) args.pop();
      var ret = new PromiseArray(args).promise();
      return fn !== undefined ? ret.spread(fn) : ret;
  };

  };

  var map$5 = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL) {
  var getDomain = Promise._getDomain;
  var async = async$2;
  var util$$1 = util$2;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  var PENDING = {};
  var EMPTY_ARRAY = [];

  function MappingPromiseArray(promises, fn, limit, _filter) {
      this.constructor$(promises);
      this._promise._captureStackTrace();
      var domain = getDomain();
      this._callback = domain === null ? fn : domain.bind(fn);
      this._preservedValues = _filter === INTERNAL
          ? new Array(this.length())
          : null;
      this._limit = limit;
      this._inFlight = 0;
      this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
      async.invoke(init, this, undefined);
  }
  util$$1.inherits(MappingPromiseArray, PromiseArray);
  function init() {this._init$(undefined, -2);}

  MappingPromiseArray.prototype._init = function () {};

  MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var values = this._values;
      var length = this.length();
      var preservedValues = this._preservedValues;
      var limit = this._limit;
      if (values[index] === PENDING) {
          values[index] = value;
          if (limit >= 1) {
              this._inFlight--;
              this._drainQueue();
              if (this._isResolved()) return;
          }
      } else {
          if (limit >= 1 && this._inFlight >= limit) {
              values[index] = value;
              this._queue.push(index);
              return;
          }
          if (preservedValues !== null) preservedValues[index] = value;

          var callback = this._callback;
          var receiver = this._promise._boundValue();
          this._promise._pushContext();
          var ret = tryCatch(callback).call(receiver, value, index, length);
          this._promise._popContext();
          if (ret === errorObj) return this._reject(ret.e);

          var maybePromise = tryConvertToPromise(ret, this._promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              if (maybePromise._isPending()) {
                  if (limit >= 1) this._inFlight++;
                  values[index] = PENDING;
                  return maybePromise._proxyPromiseArray(this, index);
              } else if (maybePromise._isFulfilled()) {
                  ret = maybePromise._value();
              } else {
                  return this._reject(maybePromise._reason());
              }
          }
          values[index] = ret;
      }
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= length) {
          if (preservedValues !== null) {
              this._filter(values, preservedValues);
          } else {
              this._resolve(values);
          }

      }
  };

  MappingPromiseArray.prototype._drainQueue = function () {
      var queue = this._queue;
      var limit = this._limit;
      var values = this._values;
      while (queue.length > 0 && this._inFlight < limit) {
          if (this._isResolved()) return;
          var index = queue.pop();
          this._promiseFulfilled(values[index], index);
      }
  };

  MappingPromiseArray.prototype._filter = function (booleans, values) {
      var len = values.length;
      var ret = new Array(len);
      var j = 0;
      for (var i = 0; i < len; ++i) {
          if (booleans[i]) ret[j++] = values[i];
      }
      ret.length = j;
      this._resolve(ret);
  };

  MappingPromiseArray.prototype.preservedValues = function () {
      return this._preservedValues;
  };

  function map(promises, fn, options, _filter) {
      var limit = typeof options === "object" && options !== null
          ? options.concurrency
          : 0;
      limit = typeof limit === "number" &&
          isFinite(limit) && limit >= 1 ? limit : 0;
      return new MappingPromiseArray(promises, fn, limit, _filter);
  }

  Promise.prototype.map = function (fn, options) {
      if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");

      return map(this, fn, options, null).promise();
  };

  Promise.map = function (promises, fn, options, _filter) {
      if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      return map(promises, fn, options, _filter).promise();
  };


  };

  var cancel$1 = function(Promise) {
  var errors = errors$11;
  var async = async$2;
  var CancellationError = errors.CancellationError;

  Promise.prototype._cancel = function (reason) {
      if (!this.isCancellable()) return this;
      var parent;
      var promiseToReject = this;
      while ((parent = promiseToReject._cancellationParent) !== undefined &&
          parent.isCancellable()) {
          promiseToReject = parent;
      }
      this._unsetCancellable();
      promiseToReject._target()._rejectCallback(reason, false, true);
  };

  Promise.prototype.cancel = function (reason) {
      if (!this.isCancellable()) return this;
      if (reason === undefined) reason = new CancellationError();
      async.invokeLater(this._cancel, this, reason);
      return this;
  };

  Promise.prototype.cancellable = function () {
      if (this._cancellable()) return this;
      async.enableTrampoline();
      this._setCancellable();
      this._cancellationParent = undefined;
      return this;
  };

  Promise.prototype.uncancellable = function () {
      var ret = this.then();
      ret._unsetCancellable();
      return ret;
  };

  Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
      var ret = this._then(didFulfill, didReject, didProgress,
                           undefined, undefined);

      ret._setCancellable();
      ret._cancellationParent = undefined;
      return ret;
  };
  };

  var using$1 = function (Promise, apiRejection, tryConvertToPromise,
      createContext) {
      var TypeError = errors$11.TypeError;
      var inherits = util$2.inherits;
      var PromiseInspection = Promise.PromiseInspection;

      function inspectionMapper(inspections) {
          var len = inspections.length;
          for (var i = 0; i < len; ++i) {
              var inspection = inspections[i];
              if (inspection.isRejected()) {
                  return Promise.reject(inspection.error());
              }
              inspections[i] = inspection._settledValue;
          }
          return inspections;
      }

      function thrower(e) {
          setTimeout(function(){throw e;}, 0);
      }

      function castPreservingDisposable(thenable) {
          var maybePromise = tryConvertToPromise(thenable);
          if (maybePromise !== thenable &&
              typeof thenable._isDisposable === "function" &&
              typeof thenable._getDisposer === "function" &&
              thenable._isDisposable()) {
              maybePromise._setDisposable(thenable._getDisposer());
          }
          return maybePromise;
      }
      function dispose(resources, inspection) {
          var i = 0;
          var len = resources.length;
          var ret = Promise.defer();
          function iterator() {
              if (i >= len) return ret.resolve();
              var maybePromise = castPreservingDisposable(resources[i++]);
              if (maybePromise instanceof Promise &&
                  maybePromise._isDisposable()) {
                  try {
                      maybePromise = tryConvertToPromise(
                          maybePromise._getDisposer().tryDispose(inspection),
                          resources.promise);
                  } catch (e) {
                      return thrower(e);
                  }
                  if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower,
                                                null, null, null);
                  }
              }
              iterator();
          }
          iterator();
          return ret.promise;
      }

      function disposerSuccess(value) {
          var inspection = new PromiseInspection();
          inspection._settledValue = value;
          inspection._bitField = 268435456;
          return dispose(this, inspection).thenReturn(value);
      }

      function disposerFail(reason) {
          var inspection = new PromiseInspection();
          inspection._settledValue = reason;
          inspection._bitField = 134217728;
          return dispose(this, inspection).thenThrow(reason);
      }

      function Disposer(data, promise, context) {
          this._data = data;
          this._promise = promise;
          this._context = context;
      }

      Disposer.prototype.data = function () {
          return this._data;
      };

      Disposer.prototype.promise = function () {
          return this._promise;
      };

      Disposer.prototype.resource = function () {
          if (this.promise().isFulfilled()) {
              return this.promise().value();
          }
          return null;
      };

      Disposer.prototype.tryDispose = function(inspection) {
          var resource = this.resource();
          var context = this._context;
          if (context !== undefined) context._pushContext();
          var ret = resource !== null
              ? this.doDispose(resource, inspection) : null;
          if (context !== undefined) context._popContext();
          this._promise._unsetDisposable();
          this._data = null;
          return ret;
      };

      Disposer.isDisposer = function (d) {
          return (d != null &&
                  typeof d.resource === "function" &&
                  typeof d.tryDispose === "function");
      };

      function FunctionDisposer(fn, promise, context) {
          this.constructor$(fn, promise, context);
      }
      inherits(FunctionDisposer, Disposer);

      FunctionDisposer.prototype.doDispose = function (resource, inspection) {
          var fn = this.data();
          return fn.call(resource, resource, inspection);
      };

      function maybeUnwrapDisposer(value) {
          if (Disposer.isDisposer(value)) {
              this.resources[this.index]._setDisposable(value);
              return value.promise();
          }
          return value;
      }

      Promise.using = function () {
          var len = arguments.length;
          if (len < 2) return apiRejection(
                          "you must pass at least 2 arguments to Promise.using");
          var fn = arguments[len - 1];
          if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");

          var input;
          var spreadArgs = true;
          if (len === 2 && Array.isArray(arguments[0])) {
              input = arguments[0];
              len = input.length;
              spreadArgs = false;
          } else {
              input = arguments;
              len--;
          }
          var resources = new Array(len);
          for (var i = 0; i < len; ++i) {
              var resource = input[i];
              if (Disposer.isDisposer(resource)) {
                  var disposer = resource;
                  resource = resource.promise();
                  resource._setDisposable(disposer);
              } else {
                  var maybePromise = tryConvertToPromise(resource);
                  if (maybePromise instanceof Promise) {
                      resource =
                          maybePromise._then(maybeUnwrapDisposer, null, null, {
                              resources: resources,
                              index: i
                      }, undefined);
                  }
              }
              resources[i] = resource;
          }

          var promise = Promise.settle(resources)
              .then(inspectionMapper)
              .then(function(vals) {
                  promise._pushContext();
                  var ret;
                  try {
                      ret = spreadArgs
                          ? fn.apply(undefined, vals) : fn.call(undefined,  vals);
                  } finally {
                      promise._popContext();
                  }
                  return ret;
              })
              ._then(
                  disposerSuccess, disposerFail, undefined, resources, undefined);
          resources.promise = promise;
          return promise;
      };

      Promise.prototype._setDisposable = function (disposer) {
          this._bitField = this._bitField | 262144;
          this._disposer = disposer;
      };

      Promise.prototype._isDisposable = function () {
          return (this._bitField & 262144) > 0;
      };

      Promise.prototype._getDisposer = function () {
          return this._disposer;
      };

      Promise.prototype._unsetDisposable = function () {
          this._bitField = this._bitField & (~262144);
          this._disposer = undefined;
      };

      Promise.prototype.disposer = function (fn) {
          if (typeof fn === "function") {
              return new FunctionDisposer(fn, this, createContext());
          }
          throw new TypeError();
      };

  };

  var generators$1 = function(Promise,
                            apiRejection,
                            INTERNAL,
                            tryConvertToPromise) {
  var errors = errors$11;
  var TypeError = errors.TypeError;
  var util$$1 = util$2;
  var errorObj = util$$1.errorObj;
  var tryCatch = util$$1.tryCatch;
  var yieldHandlers = [];

  function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
      for (var i = 0; i < yieldHandlers.length; ++i) {
          traceParent._pushContext();
          var result = tryCatch(yieldHandlers[i])(value);
          traceParent._popContext();
          if (result === errorObj) {
              traceParent._pushContext();
              var ret = Promise.reject(errorObj.e);
              traceParent._popContext();
              return ret;
          }
          var maybePromise = tryConvertToPromise(result, traceParent);
          if (maybePromise instanceof Promise) return maybePromise;
      }
      return null;
  }

  function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
      var promise = this._promise = new Promise(INTERNAL);
      promise._captureStackTrace();
      this._stack = stack;
      this._generatorFunction = generatorFunction;
      this._receiver = receiver;
      this._generator = undefined;
      this._yieldHandlers = typeof yieldHandler === "function"
          ? [yieldHandler].concat(yieldHandlers)
          : yieldHandlers;
  }

  PromiseSpawn.prototype.promise = function () {
      return this._promise;
  };

  PromiseSpawn.prototype._run = function () {
      this._generator = this._generatorFunction.call(this._receiver);
      this._receiver =
          this._generatorFunction = undefined;
      this._next(undefined);
  };

  PromiseSpawn.prototype._continue = function (result) {
      if (result === errorObj) {
          return this._promise._rejectCallback(result.e, false, true);
      }

      var value = result.value;
      if (result.done === true) {
          this._promise._resolveCallback(value);
      } else {
          var maybePromise = tryConvertToPromise(value, this._promise);
          if (!(maybePromise instanceof Promise)) {
              maybePromise =
                  promiseFromYieldHandler(maybePromise,
                                          this._yieldHandlers,
                                          this._promise);
              if (maybePromise === null) {
                  this._throw(
                      new TypeError(
                          "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/4Y4pDk\u000a\u000a".replace("%s", value) +
                          "From coroutine:\u000a" +
                          this._stack.split("\n").slice(1, -7).join("\n")
                      )
                  );
                  return;
              }
          }
          maybePromise._then(
              this._next,
              this._throw,
              undefined,
              this,
              null
         );
      }
  };

  PromiseSpawn.prototype._throw = function (reason) {
      this._promise._attachExtraTrace(reason);
      this._promise._pushContext();
      var result = tryCatch(this._generator["throw"])
          .call(this._generator, reason);
      this._promise._popContext();
      this._continue(result);
  };

  PromiseSpawn.prototype._next = function (value) {
      this._promise._pushContext();
      var result = tryCatch(this._generator.next).call(this._generator, value);
      this._promise._popContext();
      this._continue(result);
  };

  Promise.coroutine = function (generatorFunction, options) {
      if (typeof generatorFunction !== "function") {
          throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
      }
      var yieldHandler = Object(options).yieldHandler;
      var PromiseSpawn$ = PromiseSpawn;
      var stack = new Error().stack;
      return function () {
          var generator = generatorFunction.apply(this, arguments);
          var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                        stack);
          spawn._generator = generator;
          spawn._next(undefined);
          return spawn.promise();
      };
  };

  Promise.coroutine.addYieldHandler = function(fn) {
      if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      yieldHandlers.push(fn);
  };

  Promise.spawn = function (generatorFunction) {
      if (typeof generatorFunction !== "function") {
          return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
      }
      var spawn = new PromiseSpawn(generatorFunction, this);
      var ret = spawn.promise();
      spawn._run(Promise.spawn);
      return ret;
  };
  };

  var nodeify$1 = function(Promise) {
  var util$$1 = util$2;
  var async = async$2;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;

  function spreadAdapter(val, nodeback) {
      var promise = this;
      if (!util$$1.isArray(val)) return successAdapter.call(promise, val, nodeback);
      var ret =
          tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }

  function successAdapter(val, nodeback) {
      var promise = this;
      var receiver = promise._boundValue();
      var ret = val === undefined
          ? tryCatch(nodeback).call(receiver, null)
          : tryCatch(nodeback).call(receiver, null, val);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }
  function errorAdapter(reason, nodeback) {
      var promise = this;
      if (!reason) {
          var target = promise._target();
          var newReason = target._getCarriedStackTrace();
          newReason.cause = reason;
          reason = newReason;
      }
      var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }

  Promise.prototype.asCallback =
  Promise.prototype.nodeify = function (nodeback, options) {
      if (typeof nodeback == "function") {
          var adapter = successAdapter;
          if (options !== undefined && Object(options).spread) {
              adapter = spreadAdapter;
          }
          this._then(
              adapter,
              errorAdapter,
              undefined,
              this,
              nodeback
          );
      }
      return this;
  };
  };

  var cr$1 = Object.create;
  if (cr$1) {
      var callerCache$1 = cr$1(null);
      var getterCache$1 = cr$1(null);
      callerCache$1[" size"] = getterCache$1[" size"] = 0;
  }

  var call_get$1 = function(Promise) {
  var util$$1 = util$2;
  var canEvaluate = util$$1.canEvaluate;
  var isIdentifier = util$$1.isIdentifier;

  var getMethodCaller;
  var getGetter;
  {
  var makeMethodCaller = function (methodName) {
      return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
  };

  var makeGetter = function (propertyName) {
      return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
  };

  var getCompiled = function(name, compiler, cache) {
      var ret = cache[name];
      if (typeof ret !== "function") {
          if (!isIdentifier(name)) {
              return null;
          }
          ret = compiler(name);
          cache[name] = ret;
          cache[" size"]++;
          if (cache[" size"] > 512) {
              var keys = Object.keys(cache);
              for (var i = 0; i < 256; ++i) delete cache[keys[i]];
              cache[" size"] = keys.length - 256;
          }
      }
      return ret;
  };

  getMethodCaller = function(name) {
      return getCompiled(name, makeMethodCaller, callerCache$1);
  };

  getGetter = function(name) {
      return getCompiled(name, makeGetter, getterCache$1);
  };
  }

  function ensureMethod(obj, methodName) {
      var fn;
      if (obj != null) fn = obj[methodName];
      if (typeof fn !== "function") {
          var message = "Object " + util$$1.classString(obj) + " has no method '" +
              util$$1.toString(methodName) + "'";
          throw new Promise.TypeError(message);
      }
      return fn;
  }

  function caller(obj) {
      var methodName = this.pop();
      var fn = ensureMethod(obj, methodName);
      return fn.apply(obj, this);
  }
  Promise.prototype.call = function (methodName) {
      var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
      {
          if (canEvaluate) {
              var maybeCaller = getMethodCaller(methodName);
              if (maybeCaller !== null) {
                  return this._then(
                      maybeCaller, undefined, undefined, args, undefined);
              }
          }
      }
      args.push(methodName);
      return this._then(caller, undefined, undefined, args, undefined);
  };

  function namedGetter(obj) {
      return obj[this];
  }
  function indexedGetter(obj) {
      var index = +this;
      if (index < 0) index = Math.max(0, index + obj.length);
      return obj[index];
  }
  Promise.prototype.get = function (propertyName) {
      var isIndex = (typeof propertyName === "number");
      var getter;
      if (!isIndex) {
          if (canEvaluate) {
              var maybeGetter = getGetter(propertyName);
              getter = maybeGetter !== null ? maybeGetter : namedGetter;
          } else {
              getter = namedGetter;
          }
      } else {
          getter = indexedGetter;
      }
      return this._then(getter, undefined, undefined, propertyName, undefined);
  };
  };

  var props$1 = function(
      Promise, PromiseArray, tryConvertToPromise, apiRejection) {
  var util$$1 = util$2;
  var isObject = util$$1.isObject;
  var es5 = es5$1;

  function PropertiesPromiseArray(obj) {
      var keys = es5.keys(obj);
      var len = keys.length;
      var values = new Array(len * 2);
      for (var i = 0; i < len; ++i) {
          var key = keys[i];
          values[i] = obj[key];
          values[i + len] = key;
      }
      this.constructor$(values);
  }
  util$$1.inherits(PropertiesPromiseArray, PromiseArray);

  PropertiesPromiseArray.prototype._init = function () {
      this._init$(undefined, -3) ;
  };

  PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          var val = {};
          var keyOffset = this.length();
          for (var i = 0, len = this.length(); i < len; ++i) {
              val[this._values[i + keyOffset]] = this._values[i];
          }
          this._resolve(val);
      }
  };

  PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
      this._promise._progress({
          key: this._values[index + this.length()],
          value: value
      });
  };

  PropertiesPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };

  PropertiesPromiseArray.prototype.getActualLength = function (len) {
      return len >> 1;
  };

  function props(promises) {
      var ret;
      var castValue = tryConvertToPromise(promises);

      if (!isObject(castValue)) {
          return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/OsFKC8\u000a");
      } else if (castValue instanceof Promise) {
          ret = castValue._then(
              Promise.props, undefined, undefined, undefined, undefined);
      } else {
          ret = new PropertiesPromiseArray(castValue).promise();
      }

      if (castValue instanceof Promise) {
          ret._propagateFrom(castValue, 4);
      }
      return ret;
  }

  Promise.prototype.props = function () {
      return props(this);
  };

  Promise.props = function (promises) {
      return props(promises);
  };
  };

  var race$1 = function(
      Promise, INTERNAL, tryConvertToPromise, apiRejection) {
  var isArray = util$2.isArray;

  var raceLater = function (promise) {
      return promise.then(function(array) {
          return race(array, promise);
      });
  };

  function race(promises, parent) {
      var maybePromise = tryConvertToPromise(promises);

      if (maybePromise instanceof Promise) {
          return raceLater(maybePromise);
      } else if (!isArray(promises)) {
          return apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
      }

      var ret = new Promise(INTERNAL);
      if (parent !== undefined) {
          ret._propagateFrom(parent, 4 | 1);
      }
      var fulfill = ret._fulfill;
      var reject = ret._reject;
      for (var i = 0, len = promises.length; i < len; ++i) {
          var val = promises[i];

          if (val === undefined && !(i in promises)) {
              continue;
          }

          Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
      }
      return ret;
  }

  Promise.race = function (promises) {
      return race(promises, undefined);
  };

  Promise.prototype.race = function () {
      return race(this, undefined);
  };

  };

  var reduce$4 = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL) {
  var getDomain = Promise._getDomain;
  var async = async$2;
  var util$$1 = util$2;
  var tryCatch = util$$1.tryCatch;
  var errorObj = util$$1.errorObj;
  function ReductionPromiseArray(promises, fn, accum, _each) {
      this.constructor$(promises);
      this._promise._captureStackTrace();
      this._preservedValues = _each === INTERNAL ? [] : null;
      this._zerothIsAccum = (accum === undefined);
      this._gotAccum = false;
      this._reducingIndex = (this._zerothIsAccum ? 1 : 0);
      this._valuesPhase = undefined;
      var maybePromise = tryConvertToPromise(accum, this._promise);
      var rejected = false;
      var isPromise = maybePromise instanceof Promise;
      if (isPromise) {
          maybePromise = maybePromise._target();
          if (maybePromise._isPending()) {
              maybePromise._proxyPromiseArray(this, -1);
          } else if (maybePromise._isFulfilled()) {
              accum = maybePromise._value();
              this._gotAccum = true;
          } else {
              this._reject(maybePromise._reason());
              rejected = true;
          }
      }
      if (!(isPromise || this._zerothIsAccum)) this._gotAccum = true;
      var domain = getDomain();
      this._callback = domain === null ? fn : domain.bind(fn);
      this._accum = accum;
      if (!rejected) async.invoke(init, this, undefined);
  }
  function init() {
      this._init$(undefined, -5);
  }
  util$$1.inherits(ReductionPromiseArray, PromiseArray);

  ReductionPromiseArray.prototype._init = function () {};

  ReductionPromiseArray.prototype._resolveEmptyArray = function () {
      if (this._gotAccum || this._zerothIsAccum) {
          this._resolve(this._preservedValues !== null
                          ? [] : this._accum);
      }
  };

  ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var values = this._values;
      values[index] = value;
      var length = this.length();
      var preservedValues = this._preservedValues;
      var isEach = preservedValues !== null;
      var gotAccum = this._gotAccum;
      var valuesPhase = this._valuesPhase;
      var valuesPhaseIndex;
      if (!valuesPhase) {
          valuesPhase = this._valuesPhase = new Array(length);
          for (valuesPhaseIndex=0; valuesPhaseIndex<length; ++valuesPhaseIndex) {
              valuesPhase[valuesPhaseIndex] = 0;
          }
      }
      valuesPhaseIndex = valuesPhase[index];

      if (index === 0 && this._zerothIsAccum) {
          this._accum = value;
          this._gotAccum = gotAccum = true;
          valuesPhase[index] = ((valuesPhaseIndex === 0)
              ? 1 : 2);
      } else if (index === -1) {
          this._accum = value;
          this._gotAccum = gotAccum = true;
      } else {
          if (valuesPhaseIndex === 0) {
              valuesPhase[index] = 1;
          } else {
              valuesPhase[index] = 2;
              this._accum = value;
          }
      }
      if (!gotAccum) return;

      var callback = this._callback;
      var receiver = this._promise._boundValue();
      var ret;

      for (var i = this._reducingIndex; i < length; ++i) {
          valuesPhaseIndex = valuesPhase[i];
          if (valuesPhaseIndex === 2) {
              this._reducingIndex = i + 1;
              continue;
          }
          if (valuesPhaseIndex !== 1) return;
          value = values[i];
          this._promise._pushContext();
          if (isEach) {
              preservedValues.push(value);
              ret = tryCatch(callback).call(receiver, value, i, length);
          }
          else {
              ret = tryCatch(callback)
                  .call(receiver, this._accum, value, i, length);
          }
          this._promise._popContext();

          if (ret === errorObj) return this._reject(ret.e);

          var maybePromise = tryConvertToPromise(ret, this._promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              if (maybePromise._isPending()) {
                  valuesPhase[i] = 4;
                  return maybePromise._proxyPromiseArray(this, i);
              } else if (maybePromise._isFulfilled()) {
                  ret = maybePromise._value();
              } else {
                  return this._reject(maybePromise._reason());
              }
          }

          this._reducingIndex = i + 1;
          this._accum = ret;
      }

      this._resolve(isEach ? preservedValues : this._accum);
  };

  function reduce(promises, fn, initialValue, _each) {
      if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
      return array.promise();
  }

  Promise.prototype.reduce = function (fn, initialValue) {
      return reduce(this, fn, initialValue, null);
  };

  Promise.reduce = function (promises, fn, initialValue, _each) {
      return reduce(promises, fn, initialValue, _each);
  };
  };

  var settle$1 =
      function(Promise, PromiseArray) {
  var PromiseInspection = Promise.PromiseInspection;
  var util$$1 = util$2;

  function SettledPromiseArray(values) {
      this.constructor$(values);
  }
  util$$1.inherits(SettledPromiseArray, PromiseArray);

  SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
      this._values[index] = inspection;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
      }
  };

  SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var ret = new PromiseInspection();
      ret._bitField = 268435456;
      ret._settledValue = value;
      this._promiseResolved(index, ret);
  };
  SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
      var ret = new PromiseInspection();
      ret._bitField = 134217728;
      ret._settledValue = reason;
      this._promiseResolved(index, ret);
  };

  Promise.settle = function (promises) {
      return new SettledPromiseArray(promises).promise();
  };

  Promise.prototype.settle = function () {
      return new SettledPromiseArray(this).promise();
  };
  };

  var some$4 =
  function(Promise, PromiseArray, apiRejection) {
  var util$$1 = util$2;
  var RangeError = errors$11.RangeError;
  var AggregateError = errors$11.AggregateError;
  var isArray = util$$1.isArray;


  function SomePromiseArray(values) {
      this.constructor$(values);
      this._howMany = 0;
      this._unwrap = false;
      this._initialized = false;
  }
  util$$1.inherits(SomePromiseArray, PromiseArray);

  SomePromiseArray.prototype._init = function () {
      if (!this._initialized) {
          return;
      }
      if (this._howMany === 0) {
          this._resolve([]);
          return;
      }
      this._init$(undefined, -5);
      var isArrayResolved = isArray(this._values);
      if (!this._isResolved() &&
          isArrayResolved &&
          this._howMany > this._canPossiblyFulfill()) {
          this._reject(this._getRangeError(this.length()));
      }
  };

  SomePromiseArray.prototype.init = function () {
      this._initialized = true;
      this._init();
  };

  SomePromiseArray.prototype.setUnwrap = function () {
      this._unwrap = true;
  };

  SomePromiseArray.prototype.howMany = function () {
      return this._howMany;
  };

  SomePromiseArray.prototype.setHowMany = function (count) {
      this._howMany = count;
  };

  SomePromiseArray.prototype._promiseFulfilled = function (value) {
      this._addFulfilled(value);
      if (this._fulfilled() === this.howMany()) {
          this._values.length = this.howMany();
          if (this.howMany() === 1 && this._unwrap) {
              this._resolve(this._values[0]);
          } else {
              this._resolve(this._values);
          }
      }

  };
  SomePromiseArray.prototype._promiseRejected = function (reason) {
      this._addRejected(reason);
      if (this.howMany() > this._canPossiblyFulfill()) {
          var e = new AggregateError();
          for (var i = this.length(); i < this._values.length; ++i) {
              e.push(this._values[i]);
          }
          this._reject(e);
      }
  };

  SomePromiseArray.prototype._fulfilled = function () {
      return this._totalResolved;
  };

  SomePromiseArray.prototype._rejected = function () {
      return this._values.length - this.length();
  };

  SomePromiseArray.prototype._addRejected = function (reason) {
      this._values.push(reason);
  };

  SomePromiseArray.prototype._addFulfilled = function (value) {
      this._values[this._totalResolved++] = value;
  };

  SomePromiseArray.prototype._canPossiblyFulfill = function () {
      return this.length() - this._rejected();
  };

  SomePromiseArray.prototype._getRangeError = function (count) {
      var message = "Input array must contain at least " +
              this._howMany + " items but contains only " + count + " items";
      return new RangeError(message);
  };

  SomePromiseArray.prototype._resolveEmptyArray = function () {
      this._reject(this._getRangeError(0));
  };

  function some(promises, howMany) {
      if ((howMany | 0) !== howMany || howMany < 0) {
          return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/1wAmHx\u000a");
      }
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(howMany);
      ret.init();
      return promise;
  }

  Promise.some = function (promises, howMany) {
      return some(promises, howMany);
  };

  Promise.prototype.some = function (howMany) {
      return some(this, howMany);
  };

  Promise._SomePromiseArray = SomePromiseArray;
  };

  var promisify$1 = function(Promise, INTERNAL) {
  var THIS = {};
  var util$$1 = util$2;
  var nodebackForPromise = promise_resolver
      ._nodebackForPromise;
  var withAppended = util$$1.withAppended;
  var maybeWrapAsError = util$$1.maybeWrapAsError;
  var canEvaluate = util$$1.canEvaluate;
  var TypeError = errors$11.TypeError;
  var defaultSuffix = "Async";
  var defaultPromisified = {__isPromisified__: true};
  var noCopyProps = [
      "arity",    "length",
      "name",
      "arguments",
      "caller",
      "callee",
      "prototype",
      "__isPromisified__"
  ];
  var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

  var defaultFilter = function(name) {
      return util$$1.isIdentifier(name) &&
          name.charAt(0) !== "_" &&
          name !== "constructor";
  };

  function propsFilter(key) {
      return !noCopyPropsPattern.test(key);
  }

  function isPromisified(fn) {
      try {
          return fn.__isPromisified__ === true;
      }
      catch (e) {
          return false;
      }
  }

  function hasPromisified(obj, key, suffix) {
      var val = util$$1.getDataPropertyOrDefault(obj, key + suffix,
                                              defaultPromisified);
      return val ? isPromisified(val) : false;
  }
  function checkValid(ret, suffix, suffixRegexp) {
      for (var i = 0; i < ret.length; i += 2) {
          var key = ret[i];
          if (suffixRegexp.test(key)) {
              var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
              for (var j = 0; j < ret.length; j += 2) {
                  if (ret[j] === keyWithoutAsyncSuffix) {
                      throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/iWrZbw\u000a"
                          .replace("%s", suffix));
                  }
              }
          }
      }
  }

  function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
      var keys = util$$1.inheritedDataKeys(obj);
      var ret = [];
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var value = obj[key];
          var passesDefaultFilter = filter === defaultFilter
              ? true : defaultFilter(key, value, obj);
          if (typeof value === "function" &&
              !isPromisified(value) &&
              !hasPromisified(obj, key, suffix) &&
              filter(key, value, obj, passesDefaultFilter)) {
              ret.push(key, value);
          }
      }
      checkValid(ret, suffix, suffixRegexp);
      return ret;
  }

  var escapeIdentRegex = function(str) {
      return str.replace(/([$])/, "\\$");
  };

  var makeNodePromisifiedEval;
  {
  var switchCaseArgumentOrder = function(likelyArgumentCount) {
      var ret = [likelyArgumentCount];
      var min = Math.max(0, likelyArgumentCount - 1 - 3);
      for(var i = likelyArgumentCount - 1; i >= min; --i) {
          ret.push(i);
      }
      for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
          ret.push(i);
      }
      return ret;
  };

  var argumentSequence = function(argumentCount) {
      return util$$1.filledRange(argumentCount, "_arg", "");
  };

  var parameterDeclaration = function(parameterCount) {
      return util$$1.filledRange(
          Math.max(parameterCount, 3), "_arg", "");
  };

  var parameterCount = function(fn) {
      if (typeof fn.length === "number") {
          return Math.max(Math.min(fn.length, 1023 + 1), 0);
      }
      return 0;
  };

  makeNodePromisifiedEval =
  function(callback, receiver, originalName, fn) {
      var newParameterCount = Math.max(0, parameterCount(fn) - 1);
      var argumentOrder = switchCaseArgumentOrder(newParameterCount);
      var shouldProxyThis = typeof callback === "string" || receiver === THIS;

      function generateCallForArgumentCount(count) {
          var args = argumentSequence(count).join(", ");
          var comma = count > 0 ? ", " : "";
          var ret;
          if (shouldProxyThis) {
              ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
          } else {
              ret = receiver === undefined
                  ? "ret = callback({{args}}, nodeback); break;\n"
                  : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
          }
          return ret.replace("{{args}}", args).replace(", ", comma);
      }

      function generateArgumentSwitchCase() {
          var ret = "";
          for (var i = 0; i < argumentOrder.length; ++i) {
              ret += "case " + argumentOrder[i] +":" +
                  generateCallForArgumentCount(argumentOrder[i]);
          }

          ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                  ? "ret = callback.apply(this, args);\n"
                                  : "ret = callback.apply(receiver, args);\n"));
          return ret;
      }

      var getFunctionCode = typeof callback === "string"
                                  ? ("this != null ? this['"+callback+"'] : fn")
                                  : "fn";

      return new Function("Promise",
                          "fn",
                          "receiver",
                          "withAppended",
                          "maybeWrapAsError",
                          "nodebackForPromise",
                          "tryCatch",
                          "errorObj",
                          "notEnumerableProp",
                          "INTERNAL","'use strict';                            \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise);                      \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
        "
          .replace("Parameters", parameterDeclaration(newParameterCount))
          .replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
          .replace("[GetFunctionCode]", getFunctionCode))(
              Promise,
              fn,
              receiver,
              withAppended,
              maybeWrapAsError,
              nodebackForPromise,
              util$$1.tryCatch,
              util$$1.errorObj,
              util$$1.notEnumerableProp,
              INTERNAL
          );
  };
  }

  function makeNodePromisifiedClosure(callback, receiver, _, fn) {
      var defaultThis = (function() {return this;})();
      var method = callback;
      if (typeof method === "string") {
          callback = fn;
      }
      function promisified() {
          var _receiver = receiver;
          if (receiver === THIS) _receiver = this;
          var promise = new Promise(INTERNAL);
          promise._captureStackTrace();
          var cb = typeof method === "string" && this !== defaultThis
              ? this[method] : callback;
          var fn = nodebackForPromise(promise);
          try {
              cb.apply(_receiver, withAppended(arguments, fn));
          } catch(e) {
              promise._rejectCallback(maybeWrapAsError(e), true, true);
          }
          return promise;
      }
      util$$1.notEnumerableProp(promisified, "__isPromisified__", true);
      return promisified;
  }

  var makeNodePromisified = canEvaluate
      ? makeNodePromisifiedEval
      : makeNodePromisifiedClosure;

  function promisifyAll(obj, suffix, filter, promisifier) {
      var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
      var methods =
          promisifiableMethods(obj, suffix, suffixRegexp, filter);

      for (var i = 0, len = methods.length; i < len; i+= 2) {
          var key = methods[i];
          var fn = methods[i+1];
          var promisifiedKey = key + suffix;
          if (promisifier === makeNodePromisified) {
              obj[promisifiedKey] =
                  makeNodePromisified(key, THIS, key, fn, suffix);
          } else {
              var promisified = promisifier(fn, function() {
                  return makeNodePromisified(key, THIS, key, fn, suffix);
              });
              util$$1.notEnumerableProp(promisified, "__isPromisified__", true);
              obj[promisifiedKey] = promisified;
          }
      }
      util$$1.toFastProperties(obj);
      return obj;
  }

  function promisify(callback, receiver) {
      return makeNodePromisified(callback, receiver, undefined, callback);
  }

  Promise.promisify = function (fn, receiver) {
      if (typeof fn !== "function") {
          throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      }
      if (isPromisified(fn)) {
          return fn;
      }
      var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
      util$$1.copyDescriptors(fn, ret, propsFilter);
      return ret;
  };

  Promise.promisifyAll = function (target, options) {
      if (typeof target !== "function" && typeof target !== "object") {
          throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/9ITlV0\u000a");
      }
      options = Object(options);
      var suffix = options.suffix;
      if (typeof suffix !== "string") suffix = defaultSuffix;
      var filter = options.filter;
      if (typeof filter !== "function") filter = defaultFilter;
      var promisifier = options.promisifier;
      if (typeof promisifier !== "function") promisifier = makeNodePromisified;

      if (!util$$1.isIdentifier(suffix)) {
          throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/8FZo5V\u000a");
      }

      var keys = util$$1.inheritedDataKeys(target);
      for (var i = 0; i < keys.length; ++i) {
          var value = target[keys[i]];
          if (keys[i] !== "constructor" &&
              util$$1.isClass(value)) {
              promisifyAll(value.prototype, suffix, filter, promisifier);
              promisifyAll(value, suffix, filter, promisifier);
          }
      }

      return promisifyAll(target, suffix, filter, promisifier);
  };
  };

  var any$1 = function(Promise) {
  var SomePromiseArray = Promise._SomePromiseArray;
  function any(promises) {
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(1);
      ret.setUnwrap();
      ret.init();
      return promise;
  }

  Promise.any = function (promises) {
      return any(promises);
  };

  Promise.prototype.any = function () {
      return any(this);
  };

  };

  var each$1 = function(Promise, INTERNAL) {
  var PromiseReduce = Promise.reduce;

  Promise.prototype.each = function (fn) {
      return PromiseReduce(this, fn, null, INTERNAL);
  };

  Promise.each = function (promises, fn) {
      return PromiseReduce(promises, fn, null, INTERNAL);
  };
  };

  var timers$1 = function(Promise, INTERNAL) {
  var util$$1 = util$2;
  var TimeoutError = Promise.TimeoutError;

  var afterTimeout = function (promise, message) {
      if (!promise.isPending()) return;
      
      var err;
      if(!util$$1.isPrimitive(message) && (message instanceof Error)) {
          err = message;
      } else {
          if (typeof message !== "string") {
              message = "operation timed out";
          }
          err = new TimeoutError(message);
      }
      util$$1.markAsOriginatingFromRejection(err);
      promise._attachExtraTrace(err);
      promise._cancel(err);
  };

  var afterValue = function(value) { return delay(+this).thenReturn(value); };
  var delay = Promise.delay = function (value, ms) {
      if (ms === undefined) {
          ms = value;
          value = undefined;
          var ret = new Promise(INTERNAL);
          setTimeout(function() { ret._fulfill(); }, ms);
          return ret;
      }
      ms = +ms;
      return Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
  };

  Promise.prototype.delay = function (ms) {
      return delay(this, ms);
  };

  function successClear(value) {
      var handle = this;
      if (handle instanceof Number) handle = +handle;
      clearTimeout(handle);
      return value;
  }

  function failureClear(reason) {
      var handle = this;
      if (handle instanceof Number) handle = +handle;
      clearTimeout(handle);
      throw reason;
  }

  Promise.prototype.timeout = function (ms, message) {
      ms = +ms;
      var ret = this.then().cancellable();
      ret._cancellationParent = this;
      var handle = setTimeout(function timeoutTimeout() {
          afterTimeout(ret, message);
      }, ms);
      return ret._then(successClear, failureClear, undefined, handle, undefined);
  };

  };

  var filter$5 = function(Promise, INTERNAL) {
  var PromiseMap = Promise.map;

  Promise.prototype.filter = function (fn, options) {
      return PromiseMap(this, fn, options, INTERNAL);
  };

  Promise.filter = function (promises, fn, options) {
      return PromiseMap(promises, fn, options, INTERNAL);
  };
  };

  var promise$1 = createCommonjsModule(function (module) {
  module.exports = function() {
  var makeSelfResolutionError = function () {
      return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/LhFpo0\u000a");
  };
  var reflect = function() {
      return new Promise.PromiseInspection(this._target());
  };
  var apiRejection = function(msg) {
      return Promise.reject(new TypeError(msg));
  };

  var util$$1 = util$2;

  var getDomain;
  if (util$$1.isNode) {
      getDomain = function() {
          var ret = process.domain;
          if (ret === undefined) ret = null;
          return ret;
      };
  } else {
      getDomain = function() {
          return null;
      };
  }
  util$$1.notEnumerableProp(Promise, "_getDomain", getDomain);

  var UNDEFINED_BINDING = {};
  var async = async$2;
  var errors = errors$11;
  var TypeError = Promise.TypeError = errors.TypeError;
  Promise.RangeError = errors.RangeError;
  Promise.CancellationError = errors.CancellationError;
  Promise.TimeoutError = errors.TimeoutError;
  Promise.OperationalError = errors.OperationalError;
  Promise.RejectionError = errors.OperationalError;
  Promise.AggregateError = errors.AggregateError;
  var INTERNAL = function(){};
  var APPLY = {};
  var NEXT_FILTER = {e: null};
  var tryConvertToPromise = thenables$1(Promise, INTERNAL);
  var PromiseArray =
      promise_array$1(Promise, INTERNAL,
                                      tryConvertToPromise, apiRejection);
  var CapturedTrace = captured_trace();
  var isDebugging = debuggability$1(Promise, CapturedTrace);
   /*jshint unused:false*/
  var createContext =
      context$1(Promise, CapturedTrace, isDebugging);
  var CatchFilter = catch_filter$1(NEXT_FILTER);
  var PromiseResolver = promise_resolver;
  var nodebackForPromise = PromiseResolver._nodebackForPromise;
  var errorObj = util$$1.errorObj;
  var tryCatch = util$$1.tryCatch;

  function Promise(resolver) {
      if (typeof resolver !== "function") {
          throw new TypeError("the promise constructor requires a resolver function\u000a\u000a    See http://goo.gl/EC22Yn\u000a");
      }
      if (this.constructor !== Promise) {
          throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/KsIlge\u000a");
      }
      this._bitField = 0;
      this._fulfillmentHandler0 = undefined;
      this._rejectionHandler0 = undefined;
      this._progressHandler0 = undefined;
      this._promise0 = undefined;
      this._receiver0 = undefined;
      this._settledValue = undefined;
      if (resolver !== INTERNAL) this._resolveFromResolver(resolver);
  }

  Promise.prototype.toString = function () {
      return "[object Promise]";
  };

  Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
      var len = arguments.length;
      if (len > 1) {
          var catchInstances = new Array(len - 1),
              j = 0, i;
          for (i = 0; i < len - 1; ++i) {
              var item = arguments[i];
              if (typeof item === "function") {
                  catchInstances[j++] = item;
              } else {
                  return Promise.reject(
                      new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a"));
              }
          }
          catchInstances.length = j;
          fn = arguments[i];
          var catchFilter = new CatchFilter(catchInstances, fn, this);
          return this._then(undefined, catchFilter.doFilter, undefined,
              catchFilter, undefined);
      }
      return this._then(undefined, fn, undefined, undefined, undefined);
  };

  Promise.prototype.reflect = function () {
      return this._then(reflect, reflect, undefined, this, undefined);
  };

  Promise.prototype.then = function (didFulfill, didReject, didProgress) {
      if (isDebugging() && arguments.length > 0 &&
          typeof didFulfill !== "function" &&
          typeof didReject !== "function") {
          var msg = ".then() only accepts functions but was passed: " +
                  util$$1.classString(didFulfill);
          if (arguments.length > 1) {
              msg += ", " + util$$1.classString(didReject);
          }
          this._warn(msg);
      }
      return this._then(didFulfill, didReject, didProgress,
          undefined, undefined);
  };

  Promise.prototype.done = function (didFulfill, didReject, didProgress) {
      var promise = this._then(didFulfill, didReject, didProgress,
          undefined, undefined);
      promise._setIsFinal();
  };

  Promise.prototype.spread = function (didFulfill, didReject) {
      return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined);
  };

  Promise.prototype.isCancellable = function () {
      return !this.isResolved() &&
          this._cancellable();
  };

  Promise.prototype.toJSON = function () {
      var ret = {
          isFulfilled: false,
          isRejected: false,
          fulfillmentValue: undefined,
          rejectionReason: undefined
      };
      if (this.isFulfilled()) {
          ret.fulfillmentValue = this.value();
          ret.isFulfilled = true;
      } else if (this.isRejected()) {
          ret.rejectionReason = this.reason();
          ret.isRejected = true;
      }
      return ret;
  };

  Promise.prototype.all = function () {
      return new PromiseArray(this).promise();
  };

  Promise.prototype.error = function (fn) {
      return this.caught(util$$1.originatesFromRejection, fn);
  };

  Promise.getNewLibraryCopy = module.exports;

  Promise.is = function (val) {
      return val instanceof Promise;
  };

  Promise.fromNode = function(fn) {
      var ret = new Promise(INTERNAL);
      var result = tryCatch(fn)(nodebackForPromise(ret));
      if (result === errorObj) {
          ret._rejectCallback(result.e, true, true);
      }
      return ret;
  };

  Promise.all = function (promises) {
      return new PromiseArray(promises).promise();
  };

  Promise.defer = Promise.pending = function () {
      var promise = new Promise(INTERNAL);
      return new PromiseResolver(promise);
  };

  Promise.cast = function (obj) {
      var ret = tryConvertToPromise(obj);
      if (!(ret instanceof Promise)) {
          var val = ret;
          ret = new Promise(INTERNAL);
          ret._fulfillUnchecked(val);
      }
      return ret;
  };

  Promise.resolve = Promise.fulfilled = Promise.cast;

  Promise.reject = Promise.rejected = function (reason) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._rejectCallback(reason, true);
      return ret;
  };

  Promise.setScheduler = function(fn) {
      if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
      var prev = async._schedule;
      async._schedule = fn;
      return prev;
  };

  Promise.prototype._then = function (
      didFulfill,
      didReject,
      didProgress,
      receiver,
      internalData
  ) {
      var haveInternalData = internalData !== undefined;
      var ret = haveInternalData ? internalData : new Promise(INTERNAL);

      if (!haveInternalData) {
          ret._propagateFrom(this, 4 | 1);
          ret._captureStackTrace();
      }

      var target = this._target();
      if (target !== this) {
          if (receiver === undefined) receiver = this._boundTo;
          if (!haveInternalData) ret._setIsMigrated();
      }

      var callbackIndex = target._addCallbacks(didFulfill,
                                               didReject,
                                               didProgress,
                                               ret,
                                               receiver,
                                               getDomain());

      if (target._isResolved() && !target._isSettlePromisesQueued()) {
          async.invoke(
              target._settlePromiseAtPostResolution, target, callbackIndex);
      }

      return ret;
  };

  Promise.prototype._settlePromiseAtPostResolution = function (index) {
      if (this._isRejectionUnhandled()) this._unsetRejectionIsUnhandled();
      this._settlePromiseAt(index);
  };

  Promise.prototype._length = function () {
      return this._bitField & 131071;
  };

  Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
      return (this._bitField & 939524096) > 0;
  };

  Promise.prototype._isFollowing = function () {
      return (this._bitField & 536870912) === 536870912;
  };

  Promise.prototype._setLength = function (len) {
      this._bitField = (this._bitField & -131072) |
          (len & 131071);
  };

  Promise.prototype._setFulfilled = function () {
      this._bitField = this._bitField | 268435456;
  };

  Promise.prototype._setRejected = function () {
      this._bitField = this._bitField | 134217728;
  };

  Promise.prototype._setFollowing = function () {
      this._bitField = this._bitField | 536870912;
  };

  Promise.prototype._setIsFinal = function () {
      this._bitField = this._bitField | 33554432;
  };

  Promise.prototype._isFinal = function () {
      return (this._bitField & 33554432) > 0;
  };

  Promise.prototype._cancellable = function () {
      return (this._bitField & 67108864) > 0;
  };

  Promise.prototype._setCancellable = function () {
      this._bitField = this._bitField | 67108864;
  };

  Promise.prototype._unsetCancellable = function () {
      this._bitField = this._bitField & (~67108864);
  };

  Promise.prototype._setIsMigrated = function () {
      this._bitField = this._bitField | 4194304;
  };

  Promise.prototype._unsetIsMigrated = function () {
      this._bitField = this._bitField & (~4194304);
  };

  Promise.prototype._isMigrated = function () {
      return (this._bitField & 4194304) > 0;
  };

  Promise.prototype._receiverAt = function (index) {
      var ret = index === 0
          ? this._receiver0
          : this[
              index * 5 - 5 + 4];
      if (ret === UNDEFINED_BINDING) {
          return undefined;
      } else if (ret === undefined && this._isBound()) {
          return this._boundValue();
      }
      return ret;
  };

  Promise.prototype._promiseAt = function (index) {
      return index === 0
          ? this._promise0
          : this[index * 5 - 5 + 3];
  };

  Promise.prototype._fulfillmentHandlerAt = function (index) {
      return index === 0
          ? this._fulfillmentHandler0
          : this[index * 5 - 5 + 0];
  };

  Promise.prototype._rejectionHandlerAt = function (index) {
      return index === 0
          ? this._rejectionHandler0
          : this[index * 5 - 5 + 1];
  };

  Promise.prototype._boundValue = function() {
      var ret = this._boundTo;
      if (ret !== undefined) {
          if (ret instanceof Promise) {
              if (ret.isFulfilled()) {
                  return ret.value();
              } else {
                  return undefined;
              }
          }
      }
      return ret;
  };

  Promise.prototype._migrateCallbacks = function (follower, index) {
      var fulfill = follower._fulfillmentHandlerAt(index);
      var reject = follower._rejectionHandlerAt(index);
      var progress$$1 = follower._progressHandlerAt(index);
      var promise = follower._promiseAt(index);
      var receiver = follower._receiverAt(index);
      if (promise instanceof Promise) promise._setIsMigrated();
      if (receiver === undefined) receiver = UNDEFINED_BINDING;
      this._addCallbacks(fulfill, reject, progress$$1, promise, receiver, null);
  };

  Promise.prototype._addCallbacks = function (
      fulfill,
      reject,
      progress$$1,
      promise,
      receiver,
      domain
  ) {
      var index = this._length();

      if (index >= 131071 - 5) {
          index = 0;
          this._setLength(0);
      }

      if (index === 0) {
          this._promise0 = promise;
          if (receiver !== undefined) this._receiver0 = receiver;
          if (typeof fulfill === "function" && !this._isCarryingStackTrace()) {
              this._fulfillmentHandler0 =
                  domain === null ? fulfill : domain.bind(fulfill);
          }
          if (typeof reject === "function") {
              this._rejectionHandler0 =
                  domain === null ? reject : domain.bind(reject);
          }
          if (typeof progress$$1 === "function") {
              this._progressHandler0 =
                  domain === null ? progress$$1 : domain.bind(progress$$1);
          }
      } else {
          var base = index * 5 - 5;
          this[base + 3] = promise;
          this[base + 4] = receiver;
          if (typeof fulfill === "function") {
              this[base + 0] =
                  domain === null ? fulfill : domain.bind(fulfill);
          }
          if (typeof reject === "function") {
              this[base + 1] =
                  domain === null ? reject : domain.bind(reject);
          }
          if (typeof progress$$1 === "function") {
              this[base + 2] =
                  domain === null ? progress$$1 : domain.bind(progress$$1);
          }
      }
      this._setLength(index + 1);
      return index;
  };

  Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
      var index = this._length();

      if (index >= 131071 - 5) {
          index = 0;
          this._setLength(0);
      }
      if (index === 0) {
          this._promise0 = promiseSlotValue;
          this._receiver0 = receiver;
      } else {
          var base = index * 5 - 5;
          this[base + 3] = promiseSlotValue;
          this[base + 4] = receiver;
      }
      this._setLength(index + 1);
  };

  Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
      this._setProxyHandlers(promiseArray, index);
  };

  Promise.prototype._resolveCallback = function(value, shouldBind) {
      if (this._isFollowingOrFulfilledOrRejected()) return;
      if (value === this)
          return this._rejectCallback(makeSelfResolutionError(), false, true);
      var maybePromise = tryConvertToPromise(value, this);
      if (!(maybePromise instanceof Promise)) return this._fulfill(value);

      var propagationFlags = 1 | (shouldBind ? 4 : 0);
      this._propagateFrom(maybePromise, propagationFlags);
      var promise = maybePromise._target();
      if (promise._isPending()) {
          var len = this._length();
          for (var i = 0; i < len; ++i) {
              promise._migrateCallbacks(this, i);
          }
          this._setFollowing();
          this._setLength(0);
          this._setFollowee(promise);
      } else if (promise._isFulfilled()) {
          this._fulfillUnchecked(promise._value());
      } else {
          this._rejectUnchecked(promise._reason(),
              promise._getCarriedStackTrace());
      }
  };

  Promise.prototype._rejectCallback =
  function(reason, synchronous, shouldNotMarkOriginatingFromRejection) {
      if (!shouldNotMarkOriginatingFromRejection) {
          util$$1.markAsOriginatingFromRejection(reason);
      }
      var trace = util$$1.ensureErrorObject(reason);
      var hasStack = trace === reason;
      this._attachExtraTrace(trace, synchronous ? hasStack : false);
      this._reject(reason, hasStack ? undefined : trace);
  };

  Promise.prototype._resolveFromResolver = function (resolver) {
      var promise = this;
      this._captureStackTrace();
      this._pushContext();
      var synchronous = true;
      var r = tryCatch(resolver)(function(value) {
          if (promise === null) return;
          promise._resolveCallback(value);
          promise = null;
      }, function (reason) {
          if (promise === null) return;
          promise._rejectCallback(reason, synchronous);
          promise = null;
      });
      synchronous = false;
      this._popContext();

      if (r !== undefined && r === errorObj && promise !== null) {
          promise._rejectCallback(r.e, true, true);
          promise = null;
      }
  };

  Promise.prototype._settlePromiseFromHandler = function (
      handler, receiver, value, promise
  ) {
      if (promise._isRejected()) return;
      promise._pushContext();
      var x;
      if (receiver === APPLY && !this._isRejected()) {
          x = tryCatch(handler).apply(this._boundValue(), value);
      } else {
          x = tryCatch(handler).call(receiver, value);
      }
      promise._popContext();

      if (x === errorObj || x === promise || x === NEXT_FILTER) {
          var err = x === promise ? makeSelfResolutionError() : x.e;
          promise._rejectCallback(err, false, true);
      } else {
          promise._resolveCallback(x);
      }
  };

  Promise.prototype._target = function() {
      var ret = this;
      while (ret._isFollowing()) ret = ret._followee();
      return ret;
  };

  Promise.prototype._followee = function() {
      return this._rejectionHandler0;
  };

  Promise.prototype._setFollowee = function(promise) {
      this._rejectionHandler0 = promise;
  };

  Promise.prototype._cleanValues = function () {
      if (this._cancellable()) {
          this._cancellationParent = undefined;
      }
  };

  Promise.prototype._propagateFrom = function (parent, flags) {
      if ((flags & 1) > 0 && parent._cancellable()) {
          this._setCancellable();
          this._cancellationParent = parent;
      }
      if ((flags & 4) > 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  };

  Promise.prototype._fulfill = function (value) {
      if (this._isFollowingOrFulfilledOrRejected()) return;
      this._fulfillUnchecked(value);
  };

  Promise.prototype._reject = function (reason, carriedStackTrace) {
      if (this._isFollowingOrFulfilledOrRejected()) return;
      this._rejectUnchecked(reason, carriedStackTrace);
  };

  Promise.prototype._settlePromiseAt = function (index) {
      var promise = this._promiseAt(index);
      var isPromise = promise instanceof Promise;

      if (isPromise && promise._isMigrated()) {
          promise._unsetIsMigrated();
          return async.invoke(this._settlePromiseAt, this, index);
      }
      var handler = this._isFulfilled()
          ? this._fulfillmentHandlerAt(index)
          : this._rejectionHandlerAt(index);

      var carriedStackTrace =
          this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
      var value = this._settledValue;
      var receiver = this._receiverAt(index);
      this._clearCallbackDataAtIndex(index);

      if (typeof handler === "function") {
          if (!isPromise) {
              handler.call(receiver, value, promise);
          } else {
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (receiver instanceof PromiseArray) {
          if (!receiver._isResolved()) {
              if (this._isFulfilled()) {
                  receiver._promiseFulfilled(value, promise);
              }
              else {
                  receiver._promiseRejected(value, promise);
              }
          }
      } else if (isPromise) {
          if (this._isFulfilled()) {
              promise._fulfill(value);
          } else {
              promise._reject(value, carriedStackTrace);
          }
      }

      if (index >= 4 && (index & 31) === 4)
          async.invokeLater(this._setLength, this, 0);
  };

  Promise.prototype._clearCallbackDataAtIndex = function(index) {
      if (index === 0) {
          if (!this._isCarryingStackTrace()) {
              this._fulfillmentHandler0 = undefined;
          }
          this._rejectionHandler0 =
          this._progressHandler0 =
          this._receiver0 =
          this._promise0 = undefined;
      } else {
          var base = index * 5 - 5;
          this[base + 3] =
          this[base + 4] =
          this[base + 0] =
          this[base + 1] =
          this[base + 2] = undefined;
      }
  };

  Promise.prototype._isSettlePromisesQueued = function () {
      return (this._bitField &
              -1073741824) === -1073741824;
  };

  Promise.prototype._setSettlePromisesQueued = function () {
      this._bitField = this._bitField | -1073741824;
  };

  Promise.prototype._unsetSettlePromisesQueued = function () {
      this._bitField = this._bitField & (~-1073741824);
  };

  Promise.prototype._queueSettlePromises = function() {
      async.settlePromises(this);
      this._setSettlePromisesQueued();
  };

  Promise.prototype._fulfillUnchecked = function (value) {
      if (value === this) {
          var err = makeSelfResolutionError();
          this._attachExtraTrace(err);
          return this._rejectUnchecked(err, undefined);
      }
      this._setFulfilled();
      this._settledValue = value;
      this._cleanValues();

      if (this._length() > 0) {
          this._queueSettlePromises();
      }
  };

  Promise.prototype._rejectUncheckedCheckError = function (reason) {
      var trace = util$$1.ensureErrorObject(reason);
      this._rejectUnchecked(reason, trace === reason ? undefined : trace);
  };

  Promise.prototype._rejectUnchecked = function (reason, trace) {
      if (reason === this) {
          var err = makeSelfResolutionError();
          this._attachExtraTrace(err);
          return this._rejectUnchecked(err);
      }
      this._setRejected();
      this._settledValue = reason;
      this._cleanValues();

      if (this._isFinal()) {
          async.throwLater(function(e) {
              if ("stack" in e) {
                  async.invokeFirst(
                      CapturedTrace.unhandledRejection, undefined, e);
              }
              throw e;
          }, trace === undefined ? reason : trace);
          return;
      }

      if (trace !== undefined && trace !== reason) {
          this._setCarriedStackTrace(trace);
      }

      if (this._length() > 0) {
          this._queueSettlePromises();
      } else {
          this._ensurePossibleRejectionHandled();
      }
  };

  Promise.prototype._settlePromises = function () {
      this._unsetSettlePromisesQueued();
      var len = this._length();
      for (var i = 0; i < len; i++) {
          this._settlePromiseAt(i);
      }
  };


  util$$1.notEnumerableProp(Promise,
                         "_makeSelfResolutionError",
                         makeSelfResolutionError);

  progress(Promise, PromiseArray);
  method$1(Promise, INTERNAL, tryConvertToPromise, apiRejection);
  bind$2(Promise, INTERNAL, tryConvertToPromise);
  _finally$1(Promise, NEXT_FILTER, tryConvertToPromise);
  direct_resolve$1(Promise);
  synchronous_inspection$1(Promise);
  join$2(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
  Promise.version = "2.11.0";
  Promise.Promise = Promise;
  map$5(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
  cancel$1(Promise);
  using$1(Promise, apiRejection, tryConvertToPromise, createContext);
  generators$1(Promise, apiRejection, INTERNAL, tryConvertToPromise);
  nodeify$1(Promise);
  call_get$1(Promise);
  props$1(Promise, PromiseArray, tryConvertToPromise, apiRejection);
  race$1(Promise, INTERNAL, tryConvertToPromise, apiRejection);
  reduce$4(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
  settle$1(Promise, PromiseArray);
  some$4(Promise, PromiseArray, apiRejection);
  promisify$1(Promise, INTERNAL);
  any$1(Promise);
  each$1(Promise, INTERNAL);
  timers$1(Promise, INTERNAL);
  filter$5(Promise, INTERNAL);
                                                           
      util$$1.toFastProperties(Promise);                                          
      util$$1.toFastProperties(Promise.prototype);                                
      function fillTypes(value) {                                              
          var p = new Promise(INTERNAL);                                       
          p._fulfillmentHandler0 = value;                                      
          p._rejectionHandler0 = value;                                        
          p._progressHandler0 = value;                                         
          p._promise0 = value;                                                 
          p._receiver0 = value;                                                
          p._settledValue = value;                                             
      }                                                                        
      // Complete slack tracking, opt out of field-type tracking and           
      // stabilize map                                                         
      fillTypes({a: 1});                                                       
      fillTypes({b: 2});                                                       
      fillTypes({c: 3});                                                       
      fillTypes(1);                                                            
      fillTypes(function(){});                                                 
      fillTypes(undefined);                                                    
      fillTypes(false);                                                        
      fillTypes(new Promise(INTERNAL));                                        
      CapturedTrace.setBounds(async.firstLineError, util$$1.lastLineError);       
      return Promise;                                                          

  };
  });

  var old$2;
  if (typeof Promise !== "undefined") old$2 = Promise;
  function noConflict$1() {
      try { if (Promise === bluebird$1) Promise = old$2; }
      catch (e) {}
      return bluebird$1;
  }
  var bluebird$1 = promise$1();
  bluebird$1.noConflict = noConflict$1;
  var bluebird_1$1 = bluebird$1;

  var tar_gz = createCommonjsModule(function (module) {
  /**
   * Construct and setup all tarball functions
   * @param {Object} [zoptions] The zlib options https://goo.gl/R40wrD
   * @param {Object} [toptions] The tar options https://goo.gl/bqklaR
   * @class
   */
  var TarGz = module.exports = function(zoptions, toptions) {

    // Chech if it's a new instance, otherwise initiate a new one
    if (!(this instanceof TarGz))
      return new TarGz(zoptions, toptions);

    // Clone our options to avoid reference errors
    this._options = {
      zlib: zoptions ? mout.lang.deepClone(zoptions) : {},
      tar: toptions ? mout.lang.deepClone(toptions) : {}
    };
  };

  /**
   * Creates a readstream that transforms a directory into a
   * tarball stream that can be piped
   * @param  {String} directory The directory to be tarballed
   * @return {Stream} A ReadStream that can be piped
   */
  TarGz.prototype.createReadStream = function(directory) {

    // Create all needed streams
    var stream1 = fstream.Reader(directory);
    var stream2 = tar.Pack(this._options.tar);
    var stream3 = zlib.createGzip(this._options.zlib);

    // Bubble erros
    this._bubble(stream3, stream2, stream1);

    return stream1.pipe(stream2).pipe(stream3);
  };

  /**
   * Creates a writestream that receives a tarball stream and decompress
   * to a destination directory
   * @param  {String} directory The directory where files will be extracted
   * @return {Stream} A stream that you can write a tarball file
   */
  TarGz.prototype.createWriteStream = function(directory) {
    var stream1 = zlib.createGunzip(this._options.zlib);
    var stream2 = tar.Extract({
      path: directory,
      strip: this._options.tar.strip || 0
    });

    this._bubble(stream1, stream2);
    stream1.pipe(stream2);

    return stream1;
  };

  /**
   * Parse a tarball stream and emit entry event for each entry parsed inside
   * the piped tarball
   * @return {Stream} A gunzip stream that also emits entry
   */
  TarGz.prototype.createParseStream = function() {
    var stream1 = zlib.createGunzip(this._options.zlib);
    var stream2 = tar.Parse();

    this._bubble(stream1, stream2);

    // Capture the entry event
    stream2.on('entry', function(entry) {
      stream1.emit('entry', entry);
    });

    stream1.pipe(stream2);
    return stream1;
  };

  /**
   * A sugar method to compress a directory to a file
   * @param  {String} source The directory the be tarballed
   * @param  {String} destination The file where the result will be wrote
   * @param  {Function} [cb] An optinal callback that will be called when the
   * job is done
   * @return {Promise} An promise that will be fulfilled when the job is done
   */
  TarGz.prototype.compress = bluebird_1$1.method(function(source, destination, cb) {
    var def = bluebird_1$1.defer();

    // Handle callbacks
    def.promise
      .then(function() {
        if (cb)
          process.nextTick(function() {
            cb();
          });
      })
      .catch(function(err) {
        if (cb)
          process.nextTick(function() {
            cb(err);
          });
      });

    // Create all streams that we need
    var write = fs.createWriteStream(destination);
    var read = this.createReadStream(source);

    // Listen to events
    write.on('error', def.callback);
    write.on('finish', def.callback);
    read.on('error', def.callback);

    // Pipe everything
    read.pipe(write);

    return def.promise;
  });

  /**
   * A sugar method to decompress into a directory
   * @param  {String} source The tarball to be extracted
   * @param  {String} destination A folder where the tarball will be extracted
   * @param  {Function} [cb] An optinal callback that will be called when the
   * job is done
   * @return {Promise} An promise that will be fulfilled when the job is done
   */
  TarGz.prototype.extract = bluebird_1$1.method(function(source, destination, cb) {
    var def = bluebird_1$1.defer();

    // Handle callbacks
    def.promise
      .then(function() {
        if (cb)
          process.nextTick(function() {
            cb();
          });
      })
      .catch(function(err) {
        if (cb)
          process.nextTick(function() {
            cb(err);
          });
      });

    // Create all streams that we need
    var read = fs.createReadStream(source);
    var write = this.createWriteStream(destination);

    // Listen to events
    write.on('error', def.callback);
    write.on('finish', def.callback);
    read.on('error', def.callback);

    // Pipe everything
    read.pipe(write);

    return def.promise;
  });

  /**
   * Internal tool for bubbling stream errors
   * @param {Stream} destination The final stream where other streams should have
   * their errors bubbled
   * @param {...Stream} stream Streams that will emit error to the final stream
   */
  TarGz.prototype._bubble = function( /* destination, stream, ... */ ) {
    var streams = Array.prototype.slice.call(arguments);
    var destination = streams.shift();

    streams.forEach(function(stream) {
      stream.on('error', function(err) {
        destination.emit('error', err);
      });
    });

  };
  });

  var item = createCommonjsModule(function (module, exports) {

  var counter = 0;

  /**
   * Permissions.
   * @enum {number}
   */
  var permissions = {
    USER_READ: 256, // 0400
    USER_WRITE: 128, // 0200
    USER_EXEC: 64, // 0100
    GROUP_READ: 32, // 0040
    GROUP_WRITE: 16, // 0020
    GROUP_EXEC: 8, // 0010
    OTHER_READ: 4, // 0004
    OTHER_WRITE: 2, // 0002
    OTHER_EXEC: 1 // 0001
  };

  function getUid() {
    return process.getuid && process.getuid();
  }

  function getGid() {
    return process.getgid && process.getgid();
  }

  /**
   * A filesystem item.
   * @constructor
   */
  function Item() {
    var now = Date.now();

    /**
     * Access time.
     * @type {Date}
     */
    this._atime = new Date(now);

    /**
     * Change time.
     * @type {Date}
     */
    this._ctime = new Date(now);

    /**
     * Birth time.
     * @type {Date}
     */
    this._birthtime = new Date(now);

    /**
     * Modification time.
     * @type {Date}
     */
    this._mtime = new Date(now);

    /**
     * Permissions.
     */
    this._mode = 438; // 0666

    /**
     * User id.
     * @type {number}
     */
    this._uid = getUid();

    /**
     * Group id.
     * @type {number}
     */
    this._gid = getGid();

    /**
     * Item number.
     * @type {number}
     */
    this._id = ++counter;

    /**
     * Number of links to this item.
     */
    this.links = 0;
  }

  /**
   * Determine if the current user has read permission.
   * @return {boolean} The current user can read.
   */
  Item.prototype.canRead = function() {
    var uid = getUid();
    var gid = getGid();
    var can = false;
    if (uid === 0) {
      can = true;
    } else if (uid === this._uid) {
      can = (permissions.USER_READ & this._mode) === permissions.USER_READ;
    } else if (gid === this._gid) {
      can = (permissions.GROUP_READ & this._mode) === permissions.GROUP_READ;
    } else {
      can = (permissions.OTHER_READ & this._mode) === permissions.OTHER_READ;
    }
    return can;
  };

  /**
   * Determine if the current user has write permission.
   * @return {boolean} The current user can write.
   */
  Item.prototype.canWrite = function() {
    var uid = getUid();
    var gid = getGid();
    var can = false;
    if (uid === 0) {
      can = true;
    } else if (uid === this._uid) {
      can = (permissions.USER_WRITE & this._mode) === permissions.USER_WRITE;
    } else if (gid === this._gid) {
      can = (permissions.GROUP_WRITE & this._mode) === permissions.GROUP_WRITE;
    } else {
      can = (permissions.OTHER_WRITE & this._mode) === permissions.OTHER_WRITE;
    }
    return can;
  };

  /**
   * Determine if the current user has execute permission.
   * @return {boolean} The current user can execute.
   */
  Item.prototype.canExecute = function() {
    var uid = getUid();
    var gid = getGid();
    var can = false;
    if (uid === 0) {
      can = true;
    } else if (uid === this._uid) {
      can = (permissions.USER_EXEC & this._mode) === permissions.USER_EXEC;
    } else if (gid === this._gid) {
      can = (permissions.GROUP_EXEC & this._mode) === permissions.GROUP_EXEC;
    } else {
      can = (permissions.OTHER_EXEC & this._mode) === permissions.OTHER_EXEC;
    }
    return can;
  };

  /**
   * Get access time.
   * @return {Date} Access time.
   */
  Item.prototype.getATime = function() {
    return this._atime;
  };

  /**
   * Set access time.
   * @param {Date} atime Access time.
   */
  Item.prototype.setATime = function(atime) {
    this._atime = atime;
  };

  /**
   * Get change time.
   * @return {Date} Change time.
   */
  Item.prototype.getCTime = function() {
    return this._ctime;
  };

  /**
   * Set change time.
   * @param {Date} ctime Change time.
   */
  Item.prototype.setCTime = function(ctime) {
    this._ctime = ctime;
  };

  /**
   * Get birth time.
   * @return {Date} Birth time.
   */
  Item.prototype.getBirthtime = function() {
    return this._birthtime;
  };

  /**
   * Set change time.
   * @param {Date} birthtime Birth time.
   */
  Item.prototype.setBirthtime = function(birthtime) {
    this._birthtime = birthtime;
  };

  /**
   * Get modification time.
   * @return {Date} Modification time.
   */
  Item.prototype.getMTime = function() {
    return this._mtime;
  };

  /**
   * Set modification time.
   * @param {Date} mtime Modification time.
   */
  Item.prototype.setMTime = function(mtime) {
    this._mtime = mtime;
  };

  /**
   * Get mode (permission only, e.g 0666).
   * @return {number} Mode.
   */
  Item.prototype.getMode = function() {
    return this._mode;
  };

  /**
   * Set mode (permission only, e.g 0666).
   * @param {Date} mode Mode.
   */
  Item.prototype.setMode = function(mode) {
    this.setCTime(new Date());
    this._mode = mode;
  };

  /**
   * Get user id.
   * @return {number} User id.
   */
  Item.prototype.getUid = function() {
    return this._uid;
  };

  /**
   * Set user id.
   * @param {number} uid User id.
   */
  Item.prototype.setUid = function(uid) {
    this.setCTime(new Date());
    this._uid = uid;
  };

  /**
   * Get group id.
   * @return {number} Group id.
   */
  Item.prototype.getGid = function() {
    return this._gid;
  };

  /**
   * Set group id.
   * @param {number} gid Group id.
   */
  Item.prototype.setGid = function(gid) {
    this.setCTime(new Date());
    this._gid = gid;
  };

  /**
   * Get item stats.
   * @return {Object} Stats properties.
   */
  Item.prototype.getStats = function() {
    return {
      dev: 8675309,
      nlink: this.links,
      uid: this.getUid(),
      gid: this.getGid(),
      rdev: 0,
      blksize: 4096,
      ino: this._id,
      atime: this.getATime(),
      mtime: this.getMTime(),
      ctime: this.getCTime(),
      birthtime: this.getBirthtime()
    };
  };

  /**
   * Get the item's string representation.
   * @return {string} String representation.
   */
  Item.prototype.toString = function() {
    return '[' + this.constructor.name + ']';
  };

  /**
   * Export the constructor.
   * @type {function()}
   */
  exports = module.exports = Item;
  });

  var file$1 = createCommonjsModule(function (module, exports) {





  var EMPTY = new Buffer(0);


  /**
   * A directory.
   * @constructor
   */
  function File() {
    item.call(this);

    /**
     * File content.
     * @type {Buffer}
     */
    this._content = EMPTY;
  }
  util.inherits(File, item);

  /**
   * Get the file contents.
   * @return {Buffer} File contents.
   */
  File.prototype.getContent = function() {
    this.setATime(new Date());
    return this._content;
  };

  /**
   * Set the file contents.
   * @param {string|Buffer} content File contents.
   */
  File.prototype.setContent = function(content) {
    if (typeof content === 'string') {
      content = new Buffer(content);
    } else if (!Buffer.isBuffer(content)) {
      throw new Error('File content must be a string or buffer');
    }
    this._content = content;
    var now = Date.now();
    this.setCTime(new Date(now));
    this.setMTime(new Date(now));
  };

  /**
   * Get file stats.
   * @return {Object} Stats properties.
   */
  File.prototype.getStats = function() {
    var size = this._content.length;
    var stats = item.prototype.getStats.call(this);
    stats.mode = this.getMode() | constants.S_IFREG;
    stats.size = size;
    stats.blocks = Math.ceil(size / 512);
    return stats;
  };

  /**
   * Export the constructor.
   * @type {function()}
   */
  exports = module.exports = File;
  });

  var descriptor = createCommonjsModule(function (module, exports) {



  /**
   * Create a new file descriptor.
   * @param {number} flags Flags.
   * @constructor
   */
  function FileDescriptor(flags) {
    /**
     * Flags.
     * @type {number}
     */
    this._flags = flags;

    /**
     * File system item.
     * @type {Item}
     */
    this._item = null;

    /**
     * Current file position.
     * @type {number}
     */
    this._position = 0;
  }

  /**
   * Set the item.
   * @param {Item} item File system item.
   */
  FileDescriptor.prototype.setItem = function(item) {
    this._item = item;
  };

  /**
   * Get the item.
   * @return {Item} File system item.
   */
  FileDescriptor.prototype.getItem = function() {
    return this._item;
  };

  /**
   * Get the current file position.
   * @return {number} File position.
   */
  FileDescriptor.prototype.getPosition = function() {
    return this._position;
  };

  /**
   * Set the current file position.
   * @param {number} position File position.
   */
  FileDescriptor.prototype.setPosition = function(position) {
    this._position = position;
  };

  /**
   * Check if file opened for appending.
   * @return {boolean} Opened for appending.
   */
  FileDescriptor.prototype.isAppend = function() {
    return (this._flags & constants.O_APPEND) === constants.O_APPEND;
  };

  /**
   * Check if file opened for creation.
   * @return {boolean} Opened for creation.
   */
  FileDescriptor.prototype.isCreate = function() {
    return (this._flags & constants.O_CREAT) === constants.O_CREAT;
  };

  /**
   * Check if file opened for reading.
   * @return {boolean} Opened for reading.
   */
  FileDescriptor.prototype.isRead = function() {
    // special treatment because O_RDONLY is 0
    return (
      this._flags === constants.O_RDONLY ||
      this._flags === (constants.O_RDONLY | constants.O_SYNC) ||
      (this._flags & constants.O_RDWR) === constants.O_RDWR
    );
  };

  /**
   * Check if file opened for writing.
   * @return {boolean} Opened for writing.
   */
  FileDescriptor.prototype.isWrite = function() {
    return (
      (this._flags & constants.O_WRONLY) === constants.O_WRONLY ||
      (this._flags & constants.O_RDWR) === constants.O_RDWR
    );
  };

  /**
   * Check if file opened for truncating.
   * @return {boolean} Opened for truncating.
   */
  FileDescriptor.prototype.isTruncate = function() {
    return (this._flags & constants.O_TRUNC) === constants.O_TRUNC;
  };

  /**
   * Check if file opened with exclusive flag.
   * @return {boolean} Opened with exclusive.
   */
  FileDescriptor.prototype.isExclusive = function() {
    return (this._flags & constants.O_EXCL) === constants.O_EXCL;
  };

  /**
   * Export the constructor.
   * @type {function()}
   */
  exports = module.exports = FileDescriptor;
  });

  var directory = createCommonjsModule(function (module, exports) {







  /**
   * A directory.
   * @constructor
   */
  function Directory() {
    item.call(this);

    /**
     * Items in this directory.
     * @type {Object.<string, Item>}
     */
    this._items = {};

    /**
     * Permissions.
     */
    this._mode = 511; // 0777
  }
  util.inherits(Directory, item);

  /**
   * Add an item to the directory.
   * @param {string} name The name to give the item.
   * @param {Item} item The item to add.
   * @return {Item} The added item.
   */
  Directory.prototype.addItem = function(name, item$$1) {
    if (this._items.hasOwnProperty(name)) {
      throw new Error('Item with the same name already exists: ' + name);
    }
    this._items[name] = item$$1;
    ++item$$1.links;
    if (item$$1 instanceof Directory) {
      // for '.' entry
      ++item$$1.links;
      // for subdirectory
      ++this.links;
    }
    this.setMTime(new Date());
    return item$$1;
  };

  /**
   * Get a named item.
   * @param {string} name Item name.
   * @return {Item} The named item (or null if none).
   */
  Directory.prototype.getItem = function(name) {
    var item$$1 = null;
    if (this._items.hasOwnProperty(name)) {
      item$$1 = this._items[name];
    }
    return item$$1;
  };

  /**
   * Remove an item.
   * @param {string} name Name of item to remove.
   * @return {Item} The orphan item.
   */
  Directory.prototype.removeItem = function(name) {
    if (!this._items.hasOwnProperty(name)) {
      throw new Error('Item does not exist in directory: ' + name);
    }
    var item$$1 = this._items[name];
    delete this._items[name];
    --item$$1.links;
    if (item$$1 instanceof Directory) {
      // for '.' entry
      --item$$1.links;
      // for subdirectory
      --this.links;
    }
    this.setMTime(new Date());
    return item$$1;
  };

  /**
   * Get list of item names in this directory.
   * @return {Array.<string>} Item names.
   */
  Directory.prototype.list = function() {
    return Object.keys(this._items).sort();
  };

  /**
   * Get directory stats.
   * @return {Object} Stats properties.
   */
  Directory.prototype.getStats = function() {
    var stats = item.prototype.getStats.call(this);
    stats.mode = this.getMode() | constants.S_IFDIR;
    stats.size = 1;
    stats.blocks = 1;
    return stats;
  };

  /**
   * Export the constructor.
   * @type {function()}
   */
  exports = module.exports = Directory;
  });

  var symlink$1 = createCommonjsModule(function (module, exports) {







  /**
   * A directory.
   * @constructor
   */
  function SymbolicLink() {
    item.call(this);

    /**
     * Relative path to source.
     * @type {string}
     */
    this._path = undefined;
  }
  util.inherits(SymbolicLink, item);

  /**
   * Set the path to the source.
   * @param {string} pathname Path to source.
   */
  SymbolicLink.prototype.setPath = function(pathname) {
    this._path = pathname;
  };

  /**
   * Get the path to the source.
   * @return {string} Path to source.
   */
  SymbolicLink.prototype.getPath = function() {
    return this._path;
  };

  /**
   * Get symbolic link stats.
   * @return {Object} Stats properties.
   */
  SymbolicLink.prototype.getStats = function() {
    var size = this._path.length;
    var stats = item.prototype.getStats.call(this);
    stats.mode = this.getMode() | constants.S_IFLNK;
    stats.size = size;
    stats.blocks = Math.ceil(size / 512);
    return stats;
  };

  /**
   * Export the constructor.
   * @type {function()}
   */
  exports = module.exports = SymbolicLink;
  });

  var error = createCommonjsModule(function (module, exports) {

  /**
   * Error codes from libuv.
   * @enum {number}
   */
  var codes = {
    UNKNOWN: {
      errno: -1,
      message: 'unknown error'
    },
    OK: {
      errno: 0,
      message: 'success'
    },
    EOF: {
      errno: 1,
      message: 'end of file'
    },
    EADDRINFO: {
      errno: 2,
      message: 'getaddrinfo error'
    },
    EACCES: {
      errno: 3,
      message: 'permission denied'
    },
    EAGAIN: {
      errno: 4,
      message: 'resource temporarily unavailable'
    },
    EADDRINUSE: {
      errno: 5,
      message: 'address already in use'
    },
    EADDRNOTAVAIL: {
      errno: 6,
      message: 'address not available'
    },
    EAFNOSUPPORT: {
      errno: 7,
      message: 'address family not supported'
    },
    EALREADY: {
      errno: 8,
      message: 'connection already in progress'
    },
    EBADF: {
      errno: 9,
      message: 'bad file descriptor'
    },
    EBUSY: {
      errno: 10,
      message: 'resource busy or locked'
    },
    ECONNABORTED: {
      errno: 11,
      message: 'software caused connection abort'
    },
    ECONNREFUSED: {
      errno: 12,
      message: 'connection refused'
    },
    ECONNRESET: {
      errno: 13,
      message: 'connection reset by peer'
    },
    EDESTADDRREQ: {
      errno: 14,
      message: 'destination address required'
    },
    EFAULT: {
      errno: 15,
      message: 'bad address in system call argument'
    },
    EHOSTUNREACH: {
      errno: 16,
      message: 'host is unreachable'
    },
    EINTR: {
      errno: 17,
      message: 'interrupted system call'
    },
    EINVAL: {
      errno: 18,
      message: 'invalid argument'
    },
    EISCONN: {
      errno: 19,
      message: 'socket is already connected'
    },
    EMFILE: {
      errno: 20,
      message: 'too many open files'
    },
    EMSGSIZE: {
      errno: 21,
      message: 'message too long'
    },
    ENETDOWN: {
      errno: 22,
      message: 'network is down'
    },
    ENETUNREACH: {
      errno: 23,
      message: 'network is unreachable'
    },
    ENFILE: {
      errno: 24,
      message: 'file table overflow'
    },
    ENOBUFS: {
      errno: 25,
      message: 'no buffer space available'
    },
    ENOMEM: {
      errno: 26,
      message: 'not enough memory'
    },
    ENOTDIR: {
      errno: 27,
      message: 'not a directory'
    },
    EISDIR: {
      errno: 28,
      message: 'illegal operation on a directory'
    },
    ENONET: {
      errno: 29,
      message: 'machine is not on the network'
    },
    ENOTCONN: {
      errno: 31,
      message: 'socket is not connected'
    },
    ENOTSOCK: {
      errno: 32,
      message: 'socket operation on non-socket'
    },
    ENOTSUP: {
      errno: 33,
      message: 'operation not supported on socket'
    },
    ENOENT: {
      errno: 34,
      message: 'no such file or directory'
    },
    ENOSYS: {
      errno: 35,
      message: 'function not implemented'
    },
    EPIPE: {
      errno: 36,
      message: 'broken pipe'
    },
    EPROTO: {
      errno: 37,
      message: 'protocol error'
    },
    EPROTONOSUPPORT: {
      errno: 38,
      message: 'protocol not supported'
    },
    EPROTOTYPE: {
      errno: 39,
      message: 'protocol wrong type for socket'
    },
    ETIMEDOUT: {
      errno: 40,
      message: 'connection timed out'
    },
    ECHARSET: {
      errno: 41,
      message: 'invalid Unicode character'
    },
    EAIFAMNOSUPPORT: {
      errno: 42,
      message: 'address family for hostname not supported'
    },
    EAISERVICE: {
      errno: 44,
      message: 'servname not supported for ai_socktype'
    },
    EAISOCKTYPE: {
      errno: 45,
      message: 'ai_socktype not supported'
    },
    ESHUTDOWN: {
      errno: 46,
      message: 'cannot send after transport endpoint shutdown'
    },
    EEXIST: {
      errno: 47,
      message: 'file already exists'
    },
    ESRCH: {
      errno: 48,
      message: 'no such process'
    },
    ENAMETOOLONG: {
      errno: 49,
      message: 'name too long'
    },
    EPERM: {
      errno: 50,
      message: 'operation not permitted'
    },
    ELOOP: {
      errno: 51,
      message: 'too many symbolic links encountered'
    },
    EXDEV: {
      errno: 52,
      message: 'cross-device link not permitted'
    },
    ENOTEMPTY: {
      errno: 53,
      message: 'directory not empty'
    },
    ENOSPC: {
      errno: 54,
      message: 'no space left on device'
    },
    EIO: {
      errno: 55,
      message: 'i/o error'
    },
    EROFS: {
      errno: 56,
      message: 'read-only file system'
    },
    ENODEV: {
      errno: 57,
      message: 'no such device'
    },
    ESPIPE: {
      errno: 58,
      message: 'invalid seek'
    },
    ECANCELED: {
      errno: 59,
      message: 'peration canceled'
    }
  };

  /**
   * Create an error.
   * @param {string} code Error code.
   * @param {string} path Path (optional).
   * @constructor
   */
  function FSError(code, path$$1) {
    if (!codes.hasOwnProperty(code)) {
      throw new Error('Programmer error, invalid error code: ' + code);
    }
    Error.call(this);
    var details = codes[code];
    var message = code + ', ' + details.message;
    if (path$$1) {
      message += " '" + path$$1 + "'";
    }
    this.message = message;
    this.code = code;
    this.errno = details.errno;
    Error.captureStackTrace(this, FSError);
  }
  FSError.prototype = new Error();

  /**
   * Error constructor.
   */
  exports = module.exports = FSError;
  });

  var filesystem = createCommonjsModule(function (module) {









  var isWindows = process.platform === 'win32';

  function getPathParts(filepath) {
    var parts = path._makeLong(path.resolve(filepath)).split(path.sep);
    parts.shift();
    if (isWindows) {
      // parts currently looks like ['', '?', 'c:', ...]
      parts.shift();
      var q = parts.shift(); // should be '?'
      var base = '\\\\' + q + '\\' + parts.shift().toLowerCase();
      parts.unshift(base);
    }
    if (parts[parts.length - 1] === '') {
      parts.pop();
    }
    return parts;
  }

  /**
   * Create a new file system.
   * @param {Object} options Any filesystem options.
   * @param {boolean} options.createCwd Create a directory for `process.cwd()`
   *     (defaults to `true`).
   * @param {boolean} options.createTmp Create a directory for `os.tmpdir()`
   *     (defaults to `true`).
   * @constructor
   */
  function FileSystem(options) {
    options = options || {};

    var createCwd = 'createCwd' in options ? options.createCwd : true;
    var createTmp = 'createTmp' in options ? options.createTmp : true;

    var root = new directory();

    // populate with default directories
    var defaults = [];
    if (createCwd) {
      defaults.push(process.cwd());
    }

    if (createTmp) {
      defaults.push((os.tmpdir && os.tmpdir()) || os.tmpDir());
    }

    defaults.forEach(function(dir) {
      var parts = getPathParts(dir);
      var directory$$1 = root;
      var i, ii, name, candidate;
      for (i = 0, ii = parts.length; i < ii; ++i) {
        name = parts[i];
        candidate = directory$$1.getItem(name);
        if (!candidate) {
          directory$$1 = directory$$1.addItem(name, new directory());
        } else if (candidate instanceof directory) {
          directory$$1 = candidate;
        } else {
          throw new Error('Failed to create directory: ' + dir);
        }
      }
    });

    /**
     * Root directory.
     * @type {Directory}
     */
    this._root = root;
  }

  /**
   * Get the root directory.
   * @return {Directory} The root directory.
   */
  FileSystem.prototype.getRoot = function() {
    return this._root;
  };

  /**
   * Get a file system item.
   * @param {string} filepath Path to item.
   * @return {Item} The item (or null if not found).
   */
  FileSystem.prototype.getItem = function(filepath) {
    var parts = getPathParts(filepath);
    var currentParts = getPathParts(process.cwd());
    var item = this._root;
    var itemPath = '/';
    var name;
    for (var i = 0, ii = parts.length; i < ii; ++i) {
      name = parts[i];
      while (item instanceof symlink$1) {
        // Symbolic link being traversed as a directory --- If link targets
        // another symbolic link, resolve target's path relative to the original
        // link's target, otherwise relative to the current item.
        itemPath = path.resolve(path.dirname(itemPath), item.getPath());
        item = this.getItem(itemPath);
      }
      if (item) {
        if (item instanceof directory && name !== currentParts[i]) {
          // make sure traversal is allowed
          if (!item.canExecute()) {
            throw new error('EACCES', filepath);
          }
        }
        item = item.getItem(name);
      }
      if (!item) {
        break;
      }
      itemPath = path.resolve(itemPath, name);
    }
    return item;
  };

  /**
   * Populate a directory with an item.
   * @param {Directory} directory The directory to populate.
   * @param {string} name The name of the item.
   * @param {string|Buffer|function|Object} obj Instructions for creating the
   *     item.
   */
  function populate(directory$$1, name, obj) {
    var item;
    if (typeof obj === 'string' || Buffer.isBuffer(obj)) {
      // contents for a file
      item = new file$1();
      item.setContent(obj);
    } else if (typeof obj === 'function') {
      // item factory
      item = obj();
    } else if (typeof obj === 'object') {
      // directory with more to populate
      item = new directory();
      for (var key in obj) {
        populate(item, key, obj[key]);
      }
    } else {
      throw new Error('Unsupported type: ' + typeof obj + ' of item ' + name);
    }
    /**
     * Special exception for redundant adding of empty directories.
     */
    if (
      item instanceof directory &&
      item.list().length === 0 &&
      directory$$1.getItem(name) instanceof directory
    ) {
      // pass
    } else {
      directory$$1.addItem(name, item);
    }
  }

  /**
   * Configure a mock file system.
   * @param {Object} paths Config object.
   * @param {Object} options Any filesystem options.
   * @param {boolean} options.createCwd Create a directory for `process.cwd()`
   *     (defaults to `true`).
   * @param {boolean} options.createTmp Create a directory for `os.tmpdir()`
   *     (defaults to `true`).
   * @return {FileSystem} Mock file system.
   */
  FileSystem.create = function(paths, options) {
    var system = new FileSystem(options);

    for (var filepath in paths) {
      var parts = getPathParts(filepath);
      var directory$$1 = system._root;
      var i, ii, name, candidate;
      for (i = 0, ii = parts.length - 1; i < ii; ++i) {
        name = parts[i];
        candidate = directory$$1.getItem(name);
        if (!candidate) {
          directory$$1 = directory$$1.addItem(name, new directory());
        } else if (candidate instanceof directory) {
          directory$$1 = candidate;
        } else {
          throw new Error('Failed to create directory: ' + filepath);
        }
      }
      populate(directory$$1, parts[i], paths[filepath]);
    }

    return system;
  };

  /**
   * Generate a factory for new files.
   * @param {Object} config File config.
   * @return {function():File} Factory that creates a new file.
   */
  FileSystem.file = function(config) {
    config = config || {};
    return function() {
      var file = new file$1();
      if (config.hasOwnProperty('content')) {
        file.setContent(config.content);
      }
      if (config.hasOwnProperty('mode')) {
        file.setMode(config.mode);
      } else {
        file.setMode(438); // 0666
      }
      if (config.hasOwnProperty('uid')) {
        file.setUid(config.uid);
      }
      if (config.hasOwnProperty('gid')) {
        file.setGid(config.gid);
      }
      if (config.hasOwnProperty('atime')) {
        file.setATime(config.atime);
      }
      if (config.hasOwnProperty('ctime')) {
        file.setCTime(config.ctime);
      }
      if (config.hasOwnProperty('mtime')) {
        file.setMTime(config.mtime);
      }
      if (config.hasOwnProperty('birthtime')) {
        file.setBirthtime(config.birthtime);
      }
      return file;
    };
  };

  /**
   * Generate a factory for new symbolic links.
   * @param {Object} config File config.
   * @return {function():File} Factory that creates a new symbolic link.
   */
  FileSystem.symlink = function(config) {
    config = config || {};
    return function() {
      var link = new symlink$1();
      if (config.hasOwnProperty('mode')) {
        link.setMode(config.mode);
      } else {
        link.setMode(438); // 0666
      }
      if (config.hasOwnProperty('uid')) {
        link.setUid(config.uid);
      }
      if (config.hasOwnProperty('gid')) {
        link.setGid(config.gid);
      }
      if (config.hasOwnProperty('path')) {
        link.setPath(config.path);
      } else {
        throw new Error('Missing "path" property');
      }
      if (config.hasOwnProperty('atime')) {
        link.setATime(config.atime);
      }
      if (config.hasOwnProperty('ctime')) {
        link.setCTime(config.ctime);
      }
      if (config.hasOwnProperty('mtime')) {
        link.setMTime(config.mtime);
      }
      if (config.hasOwnProperty('birthtime')) {
        link.setBirthtime(config.birthtime);
      }
      return link;
    };
  };

  /**
   * Generate a factory for new directories.
   * @param {Object} config File config.
   * @return {function():Directory} Factory that creates a new directory.
   */
  FileSystem.directory = function(config) {
    config = config || {};
    return function() {
      var dir = new directory();
      if (config.hasOwnProperty('mode')) {
        dir.setMode(config.mode);
      }
      if (config.hasOwnProperty('uid')) {
        dir.setUid(config.uid);
      }
      if (config.hasOwnProperty('gid')) {
        dir.setGid(config.gid);
      }
      if (config.hasOwnProperty('items')) {
        for (var name in config.items) {
          populate(dir, name, config.items[name]);
        }
      }
      if (config.hasOwnProperty('atime')) {
        dir.setATime(config.atime);
      }
      if (config.hasOwnProperty('ctime')) {
        dir.setCTime(config.ctime);
      }
      if (config.hasOwnProperty('mtime')) {
        dir.setMTime(config.mtime);
      }
      if (config.hasOwnProperty('birthtime')) {
        dir.setBirthtime(config.birthtime);
      }
      return dir;
    };
  };

  /**
   * Module exports.
   * @type {function}
   */
  var exports = (module.exports = FileSystem);
  exports.getPathParts = getPathParts;
  });

  var binding = createCommonjsModule(function (module, exports) {









  var getPathParts = filesystem.getPathParts;

  /** Workaround for optimizations in node 8 */
  var fsBinding = process.binding('fs');
  var statValues = fsBinding.getStatValues ? fsBinding.getStatValues() : [];

  /**
   * Call the provided function and either return the result or call the callback
   * with it (depending on if a callback is provided).
   * @param {function()} callback Optional callback.
   * @param {Object} thisArg This argument for the following function.
   * @param {function()} func Function to call.
   * @return {*} Return (if callback is not provided).
   */
  function maybeCallback(callback, thisArg, func) {
    if (callback && typeof callback === 'function') {
      var err = null;
      var val;
      try {
        val = func.call(thisArg);
      } catch (e) {
        err = e;
      }
      process.nextTick(function() {
        if (val === undefined) {
          callback(err);
        } else {
          callback(err, val);
        }
      });
    } else {
      return func.call(thisArg);
    }
  }

  /**
   * Handle FSReqWrap oncomplete.
   * @param {Function} callback The callback.
   * @return {Function} The normalized callback.
   */
  function normalizeCallback(callback) {
    if (callback && typeof callback.oncomplete === 'function') {
      // Unpack callback from FSReqWrap
      callback = callback.oncomplete.bind(callback);
    }
    return callback;
  }

  /**
   * Handle stat optimizations introduced in Node 8.
   * See https://github.com/nodejs/node/pull/11665.
   * @param {Function} callback The callback.
   * @return {Function} The wrapped callback.
   */
  function wrapStatsCallback(callback) {
    if (callback && typeof callback.oncomplete === 'function') {
      // Unpack callback from FSReqWrap
      callback = callback.oncomplete.bind(callback);
    }
    if (typeof callback === 'function') {
      return function(err, stats) {
        if (stats) {
          fillStatsArray(stats, statValues);
        }
        callback.apply(this, arguments);
      };
    } else {
      return callback;
    }
  }

  function notImplemented() {
    throw new Error('Method not implemented');
  }

  /**
   * Create a new stats object.
   * @param {Object} config Stats properties.
   * @constructor
   */
  function Stats(config) {
    for (var key in config) {
      this[key] = config[key];
    }
  }

  /**
   * Check if mode indicates property.
   * @param {number} property Property to check.
   * @return {boolean} Property matches mode.
   */
  Stats.prototype._checkModeProperty = function(property) {
    return (this.mode & constants.S_IFMT) === property;
  };

  /**
   * @return {Boolean} Is a directory.
   */
  Stats.prototype.isDirectory = function() {
    return this._checkModeProperty(constants.S_IFDIR);
  };

  /**
   * @return {Boolean} Is a regular file.
   */
  Stats.prototype.isFile = function() {
    return this._checkModeProperty(constants.S_IFREG);
  };

  /**
   * @return {Boolean} Is a block device.
   */
  Stats.prototype.isBlockDevice = function() {
    return this._checkModeProperty(constants.S_IFBLK);
  };

  /**
   * @return {Boolean} Is a character device.
   */
  Stats.prototype.isCharacterDevice = function() {
    return this._checkModeProperty(constants.S_IFCHR);
  };

  /**
   * @return {Boolean} Is a symbolic link.
   */
  Stats.prototype.isSymbolicLink = function() {
    return this._checkModeProperty(constants.S_IFLNK);
  };

  /**
   * @return {Boolean} Is a named pipe.
   */
  Stats.prototype.isFIFO = function() {
    return this._checkModeProperty(constants.S_IFIFO);
  };

  /**
   * @return {Boolean} Is a socket.
   */
  Stats.prototype.isSocket = function() {
    return this._checkModeProperty(constants.S_IFSOCK);
  };

  /**
   * Create a new binding with the given file system.
   * @param {FileSystem} system Mock file system.
   * @constructor
   */
  function Binding(system) {
    /**
     * Mock file system.
     * @type {FileSystem}
     */
    this._system = system;

    /**
     * Stats constructor.
     * @type {function}
     */
    this.Stats = Stats;

    /**
     * Lookup of open files.
     * @type {Object.<number, FileDescriptor>}
     */
    this._openFiles = {};

    /**
     * Counter for file descriptors.
     * @type {number}
     */
    this._counter = 0;
  }

  /**
   * Get the file system underlying this binding.
   * @return {FileSystem} The underlying file system.
   */
  Binding.prototype.getSystem = function() {
    return this._system;
  };

  /**
   * Reset the file system underlying this binding.
   * @param {FileSystem} system The new file system.
   */
  Binding.prototype.setSystem = function(system) {
    this._system = system;
  };

  /**
   * Get a file descriptor.
   * @param {number} fd File descriptor identifier.
   * @return {FileDescriptor} File descriptor.
   */
  Binding.prototype._getDescriptorById = function(fd) {
    if (!this._openFiles.hasOwnProperty(fd)) {
      throw new error('EBADF');
    }
    return this._openFiles[fd];
  };

  /**
   * Keep track of a file descriptor as open.
   * @param {FileDescriptor} descriptor The file descriptor.
   * @return {number} Identifier for file descriptor.
   */
  Binding.prototype._trackDescriptor = function(descriptor$$1) {
    var fd = ++this._counter;
    this._openFiles[fd] = descriptor$$1;
    return fd;
  };

  /**
   * Stop tracking a file descriptor as open.
   * @param {number} fd Identifier for file descriptor.
   */
  Binding.prototype._untrackDescriptorById = function(fd) {
    if (!this._openFiles.hasOwnProperty(fd)) {
      throw new error('EBADF');
    }
    delete this._openFiles[fd];
  };

  /**
   * Resolve the canonicalized absolute pathname.
   * @param {string|Buffer} filepath The file path.
   * @param {string} encoding The encoding for the return.
   * @return {string|Buffer} The real path.
   */
  Binding.prototype.realpath = function(filepath, encoding, callback) {
    return maybeCallback(normalizeCallback(callback), this, function() {
      var realPath;
      if (Buffer.isBuffer(filepath)) {
        filepath = filepath.toString();
      }
      var resolved = path.resolve(filepath);
      var parts = getPathParts(resolved);
      var item = this._system.getRoot();
      var itemPath = '/';
      var name, i, ii;
      for (i = 0, ii = parts.length; i < ii; ++i) {
        name = parts[i];
        while (item instanceof symlink$1) {
          itemPath = path.resolve(path.dirname(itemPath), item.getPath());
          item = this._system.getItem(itemPath);
        }
        if (!item) {
          throw new error('ENOENT', filepath);
        }
        if (item instanceof directory) {
          itemPath = path.resolve(itemPath, name);
          item = item.getItem(name);
        } else {
          throw new error('ENOTDIR', filepath);
        }
      }
      if (item) {
        while (item instanceof symlink$1) {
          itemPath = path.resolve(path.dirname(itemPath), item.getPath());
          item = this._system.getItem(itemPath);
        }
        realPath = itemPath;
      } else {
        throw new error('ENOENT', filepath);
      }

      if (encoding === 'buffer') {
        realPath = new Buffer(realPath);
      }
      return realPath;
    });
  };

  /**
   * Fill a Float64Array with stat information
   * This is based on the internal FillStatsArray function in Node.
   * https://github.com/nodejs/node/blob/4e05952a8a75af6df625415db612d3a9a1322682/src/node_file.cc#L533
   * @param {object} stats An object with file stats
   * @param {Float64Array} statValues A Float64Array where stat values should be inserted
   * @returns {void}
   */
  function fillStatsArray(stats, statValues) {
    statValues[0] = stats.dev;
    statValues[1] = stats.mode;
    statValues[2] = stats.nlink;
    statValues[3] = stats.uid;
    statValues[4] = stats.gid;
    statValues[5] = stats.rdev;
    statValues[6] = stats.blksize;
    statValues[7] = stats.ino;
    statValues[8] = stats.size;
    statValues[9] = stats.blocks;
    statValues[10] = +stats.atime;
    statValues[11] = +stats.mtime;
    statValues[12] = +stats.ctime;
    statValues[13] = +stats.birthtime;
  }

  /**
   * Stat an item.
   * @param {string} filepath Path.
   * @param {function(Error, Stats)|Float64Array} callback Callback (optional). In Node 7.7.0+ this will be a Float64Array
   * that should be filled with stat values.
   * @return {Stats|undefined} Stats or undefined (if sync).
   */
  Binding.prototype.stat = function(filepath, callback) {
    return maybeCallback(wrapStatsCallback(callback), this, function() {
      var item = this._system.getItem(filepath);
      if (item instanceof symlink$1) {
        item = this._system.getItem(
          path.resolve(path.dirname(filepath), item.getPath())
        );
      }
      if (!item) {
        throw new error('ENOENT', filepath);
      }
      var stats = item.getStats();

      // In Node 7.7.0+, binding.stat accepts a Float64Array as the second argument,
      // which should be filled with stat values.
      // In prior versions of Node, binding.stat simply returns a Stats instance.
      if (callback instanceof Float64Array) {
        fillStatsArray(stats, callback);
      } else {
        fillStatsArray(stats, statValues);
        return new Stats(stats);
      }
    });
  };

  /**
   * Stat an item.
   * @param {number} fd File descriptor.
   * @param {function(Error, Stats)|Float64Array} callback Callback (optional). In Node 7.7.0+ this will be a Float64Array
   * that should be filled with stat values.
   * @return {Stats|undefined} Stats or undefined (if sync).
   */
  Binding.prototype.fstat = function(fd, callback) {
    return maybeCallback(wrapStatsCallback(callback), this, function() {
      var descriptor$$1 = this._getDescriptorById(fd);
      var item = descriptor$$1.getItem();
      var stats = item.getStats();

      // In Node 7.7.0+, binding.stat accepts a Float64Array as the second argument,
      // which should be filled with stat values.
      // In prior versions of Node, binding.stat simply returns a Stats instance.
      if (callback instanceof Float64Array) {
        fillStatsArray(stats, callback);
      } else {
        fillStatsArray(stats, statValues);
        return new Stats(stats);
      }
    });
  };

  /**
   * Close a file descriptor.
   * @param {number} fd File descriptor.
   * @param {function(Error)} callback Callback (optional).
   */
  Binding.prototype.close = function(fd, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      this._untrackDescriptorById(fd);
    });
  };

  /**
   * Open and possibly create a file.
   * @param {string} pathname File path.
   * @param {number} flags Flags.
   * @param {number} mode Mode.
   * @param {function(Error, string)} callback Callback (optional).
   * @return {string} File descriptor (if sync).
   */
  Binding.prototype.open = function(pathname, flags, mode, callback) {
    return maybeCallback(normalizeCallback(callback), this, function() {
      var descriptor$$1 = new descriptor(flags);
      var item = this._system.getItem(pathname);
      while (item instanceof symlink$1) {
        item = this._system.getItem(
          path.resolve(path.dirname(pathname), item.getPath())
        );
      }
      if (descriptor$$1.isExclusive() && item) {
        throw new error('EEXIST', pathname);
      }
      if (descriptor$$1.isCreate() && !item) {
        var parent = this._system.getItem(path.dirname(pathname));
        if (!parent) {
          throw new error('ENOENT', pathname);
        }
        if (!(parent instanceof directory)) {
          throw new error('ENOTDIR', pathname);
        }
        item = new file$1();
        if (mode) {
          item.setMode(mode);
        }
        parent.addItem(path.basename(pathname), item);
      }
      if (descriptor$$1.isRead()) {
        if (!item) {
          throw new error('ENOENT', pathname);
        }
        if (!item.canRead()) {
          throw new error('EACCES', pathname);
        }
      }
      if (descriptor$$1.isWrite() && !item.canWrite()) {
        throw new error('EACCES', pathname);
      }
      if (descriptor$$1.isTruncate()) {
        item.setContent('');
      }
      if (descriptor$$1.isTruncate() || descriptor$$1.isAppend()) {
        descriptor$$1.setPosition(item.getContent().length);
      }
      descriptor$$1.setItem(item);
      return this._trackDescriptor(descriptor$$1);
    });
  };

  /**
   * Read from a file descriptor.
   * @param {string} fd File descriptor.
   * @param {Buffer} buffer Buffer that the contents will be written to.
   * @param {number} offset Offset in the buffer to start writing to.
   * @param {number} length Number of bytes to read.
   * @param {?number} position Where to begin reading in the file.  If null,
   *     data will be read from the current file position.
   * @param {function(Error, number, Buffer)} callback Callback (optional) called
   *     with any error, number of bytes read, and the buffer.
   * @return {number} Number of bytes read (if sync).
   */
  Binding.prototype.read = function(
    fd,
    buffer$$1,
    offset,
    length,
    position,
    callback
  ) {
    return maybeCallback(normalizeCallback(callback), this, function() {
      var descriptor$$1 = this._getDescriptorById(fd);
      if (!descriptor$$1.isRead()) {
        throw new error('EBADF');
      }
      var file = descriptor$$1.getItem();
      if (!(file instanceof file$1)) {
        // deleted or not a regular file
        throw new error('EBADF');
      }
      if (typeof position !== 'number' || position < 0) {
        position = descriptor$$1.getPosition();
      }
      var content = file.getContent();
      var start = Math.min(position, content.length);
      var end = Math.min(position + length, content.length);
      var read = start < end ? content.copy(buffer$$1, offset, start, end) : 0;
      descriptor$$1.setPosition(position + read);
      return read;
    });
  };

  /**
   * Write to a file descriptor given a buffer.
   * @param {string} fd File descriptor.
   * @param {Array<Buffer>} buffers Array of buffers with contents to write.
   * @param {?number} position Where to begin writing in the file.  If null,
   *     data will be written to the current file position.
   * @param {function(Error, number, Buffer)} callback Callback (optional) called
   *     with any error, number of bytes written, and the buffer.
   * @return {number} Number of bytes written (if sync).
   */
  Binding.prototype.writeBuffers = function(fd, buffers, position, callback) {
    return maybeCallback(normalizeCallback(callback), this, function() {
      var descriptor$$1 = this._getDescriptorById(fd);
      if (!descriptor$$1.isWrite()) {
        throw new error('EBADF');
      }
      var file = descriptor$$1.getItem();
      if (!(file instanceof file$1)) {
        // not a regular file
        throw new error('EBADF');
      }
      if (typeof position !== 'number' || position < 0) {
        position = descriptor$$1.getPosition();
      }
      var content = file.getContent();
      var newContent = Buffer.concat(buffers);
      var newLength = position + newContent.length;
      if (content.length < newLength) {
        var tempContent = new Buffer(newLength);
        content.copy(tempContent);
        content = tempContent;
      }
      var written = newContent.copy(content, position);
      file.setContent(content);
      descriptor$$1.setPosition(newLength);
      return written;
    });
  };

  /**
   * Write to a file descriptor given a buffer.
   * @param {string} fd File descriptor.
   * @param {Buffer} buffer Buffer with contents to write.
   * @param {number} offset Offset in the buffer to start writing from.
   * @param {number} length Number of bytes to write.
   * @param {?number} position Where to begin writing in the file.  If null,
   *     data will be written to the current file position.
   * @param {function(Error, number, Buffer)} callback Callback (optional) called
   *     with any error, number of bytes written, and the buffer.
   * @return {number} Number of bytes written (if sync).
   */
  Binding.prototype.writeBuffer = function(
    fd,
    buffer$$1,
    offset,
    length,
    position,
    callback
  ) {
    return maybeCallback(normalizeCallback(callback), this, function() {
      var descriptor$$1 = this._getDescriptorById(fd);
      if (!descriptor$$1.isWrite()) {
        throw new error('EBADF');
      }
      var file = descriptor$$1.getItem();
      if (!(file instanceof file$1)) {
        // not a regular file
        throw new error('EBADF');
      }
      if (typeof position !== 'number' || position < 0) {
        position = descriptor$$1.getPosition();
      }
      var content = file.getContent();
      var newLength = position + length;
      if (content.length < newLength) {
        var newContent = new Buffer(newLength);
        content.copy(newContent);
        content = newContent;
      }
      var sourceEnd = Math.min(offset + length, buffer$$1.length);
      var written = buffer$$1.copy(content, position, offset, sourceEnd);
      file.setContent(content);
      descriptor$$1.setPosition(newLength);
      return written;
    });
  };

  /**
   * Alias for writeBuffer (used in Node <= 0.10).
   * @param {string} fd File descriptor.
   * @param {Buffer} buffer Buffer with contents to write.
   * @param {number} offset Offset in the buffer to start writing from.
   * @param {number} length Number of bytes to write.
   * @param {?number} position Where to begin writing in the file.  If null,
   *     data will be written to the current file position.
   * @param {function(Error, number, Buffer)} callback Callback (optional) called
   *     with any error, number of bytes written, and the buffer.
   * @return {number} Number of bytes written (if sync).
   */
  Binding.prototype.write = Binding.prototype.writeBuffer;

  /**
   * Write to a file descriptor given a string.
   * @param {string} fd File descriptor.
   * @param {string} string String with contents to write.
   * @param {number} position Where to begin writing in the file.  If null,
   *     data will be written to the current file position.
   * @param {string} encoding String encoding.
   * @param {function(Error, number, string)} callback Callback (optional) called
   *     with any error, number of bytes written, and the string.
   * @return {number} Number of bytes written (if sync).
   */
  Binding.prototype.writeString = function(
    fd,
    string,
    position,
    encoding,
    callback
  ) {
    var buffer$$1 = new Buffer(string, encoding);
    var wrapper;
    if (callback) {
      if (callback.oncomplete) {
        callback = callback.oncomplete.bind(callback);
      }
      wrapper = function(err, written, returned) {
        callback(err, written, returned && string);
      };
    }
    return this.writeBuffer(fd, buffer$$1, 0, string.length, position, wrapper);
  };

  /**
   * Rename a file.
   * @param {string} oldPath Old pathname.
   * @param {string} newPath New pathname.
   * @param {function(Error)} callback Callback (optional).
   * @return {undefined}
   */
  Binding.prototype.rename = function(oldPath, newPath, callback) {
    return maybeCallback(normalizeCallback(callback), this, function() {
      var oldItem = this._system.getItem(oldPath);
      if (!oldItem) {
        throw new error('ENOENT', oldPath);
      }
      var oldParent = this._system.getItem(path.dirname(oldPath));
      var oldName = path.basename(oldPath);
      var newItem = this._system.getItem(newPath);
      var newParent = this._system.getItem(path.dirname(newPath));
      var newName = path.basename(newPath);
      if (newItem) {
        // make sure they are the same type
        if (oldItem instanceof file$1) {
          if (newItem instanceof directory) {
            throw new error('EISDIR', newPath);
          }
        } else if (oldItem instanceof directory) {
          if (!(newItem instanceof directory)) {
            throw new error('ENOTDIR', newPath);
          }
          if (newItem.list().length > 0) {
            throw new error('ENOTEMPTY', newPath);
          }
        }
        newParent.removeItem(newName);
      } else {
        if (!newParent) {
          throw new error('ENOENT', newPath);
        }
        if (!(newParent instanceof directory)) {
          throw new error('ENOTDIR', newPath);
        }
      }
      oldParent.removeItem(oldName);
      newParent.addItem(newName, oldItem);
    });
  };

  /**
   * Read a directory.
   * @param {string} dirpath Path to directory.
   * @param {string} encoding The encoding ('utf-8' or 'buffer').
   * @param {function(Error, (Array.<string>|Array.<Buffer>)} callback Callback
   *     (optional) called with any error or array of items in the directory.
   * @return {Array.<string>|Array.<Buffer>} Array of items in directory (if sync).
   */
  Binding.prototype.readdir = function(dirpath, encoding, callback) {
    if (encoding && typeof encoding !== 'string') {
      callback = encoding;
      encoding = 'utf-8';
    }
    return maybeCallback(normalizeCallback(callback), this, function() {
      var dpath = dirpath;
      var dir = this._system.getItem(dirpath);
      while (dir instanceof symlink$1) {
        dpath = path.resolve(path.dirname(dpath), dir.getPath());
        dir = this._system.getItem(dpath);
      }
      if (!dir) {
        throw new error('ENOENT', dirpath);
      }
      if (!(dir instanceof directory)) {
        throw new error('ENOTDIR', dirpath);
      }
      var list = dir.list();
      if (encoding === 'buffer') {
        list = list.map(function(item) {
          return new Buffer(item);
        });
      }
      return list;
    });
  };

  /**
   * Create a directory.
   * @param {string} pathname Path to new directory.
   * @param {number} mode Permissions.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.mkdir = function(pathname, mode, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var item = this._system.getItem(pathname);
      if (item) {
        throw new error('EEXIST', pathname);
      }
      var parent = this._system.getItem(path.dirname(pathname));
      if (!parent) {
        throw new error('ENOENT', pathname);
      }
      this.access(path.dirname(pathname), parseInt('0002', 8));
      var dir = new directory();
      if (mode) {
        dir.setMode(mode);
      }
      parent.addItem(path.basename(pathname), dir);
    });
  };

  /**
   * Remove a directory.
   * @param {string} pathname Path to directory.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.rmdir = function(pathname, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var item = this._system.getItem(pathname);
      if (!item) {
        throw new error('ENOENT', pathname);
      }
      if (!(item instanceof directory)) {
        throw new error('ENOTDIR', pathname);
      }
      if (item.list().length > 0) {
        throw new error('ENOTEMPTY', pathname);
      }
      this.access(path.dirname(pathname), parseInt('0002', 8));
      var parent = this._system.getItem(path.dirname(pathname));
      parent.removeItem(path.basename(pathname));
    });
  };

  var PATH_CHARS =
    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

  var MAX_ATTEMPTS = 62 * 62 * 62;

  /**
   * Create a directory based on a template.
   * See http://web.mit.edu/freebsd/head/lib/libc/stdio/mktemp.c
   * @param {string} template Path template (trailing Xs will be replaced).
   * @param {string} encoding The encoding ('utf-8' or 'buffer').
   * @param {function(Error, string)} callback Optional callback.
   */
  Binding.prototype.mkdtemp = function(prefix, encoding, callback) {
    if (encoding && typeof encoding !== 'string') {
      callback = encoding;
      encoding = 'utf-8';
    }
    return maybeCallback(normalizeCallback(callback), this, function() {
      prefix = prefix.replace(/X{0,6}$/, 'XXXXXX');
      var parentPath = path.dirname(prefix);
      var parent = this._system.getItem(parentPath);
      if (!parent) {
        throw new error('ENOENT', prefix);
      }
      if (!(parent instanceof directory)) {
        throw new error('ENOTDIR', prefix);
      }
      this.access(parentPath, parseInt('0002', 8));
      var template = path.basename(prefix);
      var unique = false;
      var count = 0;
      var name;
      while (!unique && count < MAX_ATTEMPTS) {
        var position = template.length - 1;
        var replacement = '';
        while (template.charAt(position) === 'X') {
          replacement += PATH_CHARS.charAt(
            Math.floor(PATH_CHARS.length * Math.random())
          );
          position -= 1;
        }
        var candidate = template.slice(0, position + 1) + replacement;
        if (!parent.getItem(candidate)) {
          name = candidate;
          unique = true;
        }
        count += 1;
      }
      if (!name) {
        throw new error('EEXIST', prefix);
      }
      var dir = new directory();
      parent.addItem(name, dir);
      var uniquePath = path.join(parentPath, name);
      if (encoding === 'buffer') {
        uniquePath = new Buffer(uniquePath);
      }
      return uniquePath;
    });
  };

  /**
   * Truncate a file.
   * @param {number} fd File descriptor.
   * @param {number} len Number of bytes.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.ftruncate = function(fd, len, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var descriptor$$1 = this._getDescriptorById(fd);
      if (!descriptor$$1.isWrite()) {
        throw new error('EINVAL');
      }
      var file = descriptor$$1.getItem();
      if (!(file instanceof file$1)) {
        throw new error('EINVAL');
      }
      var content = file.getContent();
      var newContent = new Buffer(len);
      content.copy(newContent);
      file.setContent(newContent);
    });
  };

  /**
   * Legacy support.
   * @param {number} fd File descriptor.
   * @param {number} len Number of bytes.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.truncate = Binding.prototype.ftruncate;

  /**
   * Change user and group owner.
   * @param {string} pathname Path.
   * @param {number} uid User id.
   * @param {number} gid Group id.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.chown = function(pathname, uid, gid, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var item = this._system.getItem(pathname);
      if (!item) {
        throw new error('ENOENT', pathname);
      }
      item.setUid(uid);
      item.setGid(gid);
    });
  };

  /**
   * Change user and group owner.
   * @param {number} fd File descriptor.
   * @param {number} uid User id.
   * @param {number} gid Group id.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.fchown = function(fd, uid, gid, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var descriptor$$1 = this._getDescriptorById(fd);
      var item = descriptor$$1.getItem();
      item.setUid(uid);
      item.setGid(gid);
    });
  };

  /**
   * Change permissions.
   * @param {string} pathname Path.
   * @param {number} mode Mode.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.chmod = function(pathname, mode, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var item = this._system.getItem(pathname);
      if (!item) {
        throw new error('ENOENT', pathname);
      }
      item.setMode(mode);
    });
  };

  /**
   * Change permissions.
   * @param {number} fd File descriptor.
   * @param {number} mode Mode.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.fchmod = function(fd, mode, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var descriptor$$1 = this._getDescriptorById(fd);
      var item = descriptor$$1.getItem();
      item.setMode(mode);
    });
  };

  /**
   * Delete a named item.
   * @param {string} pathname Path to item.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.unlink = function(pathname, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var item = this._system.getItem(pathname);
      if (!item) {
        throw new error('ENOENT', pathname);
      }
      if (item instanceof directory) {
        throw new error('EPERM', pathname);
      }
      var parent = this._system.getItem(path.dirname(pathname));
      parent.removeItem(path.basename(pathname));
    });
  };

  /**
   * Update timestamps.
   * @param {string} pathname Path to item.
   * @param {number} atime Access time (in seconds).
   * @param {number} mtime Modification time (in seconds).
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.utimes = function(pathname, atime, mtime, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var item = this._system.getItem(pathname);
      if (!item) {
        throw new error('ENOENT', pathname);
      }
      item.setATime(new Date(atime * 1000));
      item.setMTime(new Date(mtime * 1000));
    });
  };

  /**
   * Update timestamps.
   * @param {number} fd File descriptor.
   * @param {number} atime Access time (in seconds).
   * @param {number} mtime Modification time (in seconds).
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.futimes = function(fd, atime, mtime, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var descriptor$$1 = this._getDescriptorById(fd);
      var item = descriptor$$1.getItem();
      item.setATime(new Date(atime * 1000));
      item.setMTime(new Date(mtime * 1000));
    });
  };

  /**
   * Synchronize in-core state with storage device.
   * @param {number} fd File descriptor.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.fsync = function(fd, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      this._getDescriptorById(fd);
    });
  };

  /**
   * Synchronize in-core metadata state with storage device.
   * @param {number} fd File descriptor.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.fdatasync = function(fd, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      this._getDescriptorById(fd);
    });
  };

  /**
   * Create a hard link.
   * @param {string} srcPath The existing file.
   * @param {string} destPath The new link to create.
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.link = function(srcPath, destPath, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var item = this._system.getItem(srcPath);
      if (!item) {
        throw new error('ENOENT', srcPath);
      }
      if (item instanceof directory) {
        throw new error('EPERM', srcPath);
      }
      if (this._system.getItem(destPath)) {
        throw new error('EEXIST', destPath);
      }
      var parent = this._system.getItem(path.dirname(destPath));
      if (!parent) {
        throw new error('ENOENT', destPath);
      }
      if (!(parent instanceof directory)) {
        throw new error('ENOTDIR', destPath);
      }
      parent.addItem(path.basename(destPath), item);
    });
  };

  /**
   * Create a symbolic link.
   * @param {string} srcPath Path from link to the source file.
   * @param {string} destPath Path for the generated link.
   * @param {string} type Ignored (used for Windows only).
   * @param {function(Error)} callback Optional callback.
   */
  Binding.prototype.symlink = function(srcPath, destPath, type, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      if (this._system.getItem(destPath)) {
        throw new error('EEXIST', destPath);
      }
      var parent = this._system.getItem(path.dirname(destPath));
      if (!parent) {
        throw new error('ENOENT', destPath);
      }
      if (!(parent instanceof directory)) {
        throw new error('ENOTDIR', destPath);
      }
      var link = new symlink$1();
      link.setPath(srcPath);
      parent.addItem(path.basename(destPath), link);
    });
  };

  /**
   * Read the contents of a symbolic link.
   * @param {string} pathname Path to symbolic link.
   * @param {string} encoding The encoding ('utf-8' or 'buffer').
   * @param {function(Error, (string|Buffer))} callback Optional callback.
   * @return {string|Buffer} Symbolic link contents (path to source).
   */
  Binding.prototype.readlink = function(pathname, encoding, callback) {
    if (encoding && typeof encoding !== 'string') {
      callback = encoding;
      encoding = 'utf-8';
    }
    return maybeCallback(normalizeCallback(callback), this, function() {
      var link = this._system.getItem(pathname);
      if (!(link instanceof symlink$1)) {
        throw new error('EINVAL', pathname);
      }
      var linkPath = link.getPath();
      if (encoding === 'buffer') {
        linkPath = new Buffer(linkPath);
      }
      return linkPath;
    });
  };

  /**
   * Stat an item.
   * @param {string} filepath Path.
   * @param {function(Error, Stats)|Float64Array} callback Callback (optional). In Node 7.7.0+ this will be a Float64Array
   * that should be filled with stat values.
   * @return {Stats|undefined} Stats or undefined (if sync).
   */
  Binding.prototype.lstat = function(filepath, callback) {
    return maybeCallback(wrapStatsCallback(callback), this, function() {
      var item = this._system.getItem(filepath);
      if (!item) {
        throw new error('ENOENT', filepath);
      }
      var stats = item.getStats();

      // In Node 7.7.0+, binding.stat accepts a Float64Array as the second argument,
      // which should be filled with stat values.
      // In prior versions of Node, binding.stat simply returns a Stats instance.
      if (callback instanceof Float64Array) {
        fillStatsArray(stats, callback);
      } else {
        fillStatsArray(stats, statValues);
        return new Stats(item.getStats());
      }
    });
  };

  /**
   * Tests user permissions.
   * @param {string} filepath Path.
   * @param {number} mode Mode.
   * @param {function(Error)} callback Callback (optional).
   */
  Binding.prototype.access = function(filepath, mode, callback) {
    maybeCallback(normalizeCallback(callback), this, function() {
      var item = this._system.getItem(filepath);
      if (!item) {
        throw new error('ENOENT', filepath);
      }
      if (mode && process.getuid && process.getgid) {
        var itemMode = item.getMode();
        if (item.getUid() === process.getuid()) {
          if ((itemMode & (mode * 64)) !== mode * 64) {
            throw new error('EACCES', filepath);
          }
        } else if (item.getGid() === process.getgid()) {
          if ((itemMode & (mode * 8)) !== mode * 8) {
            throw new error('EACCES', filepath);
          }
        } else {
          if ((itemMode & mode) !== mode) {
            throw new error('EACCES', filepath);
          }
        }
      }
    });
  };

  /**
   * Not yet implemented.
   * @type {function()}
   */
  Binding.prototype.StatWatcher = notImplemented;

  /**
   * Export the binding constructor.
   * @type {function()}
   */
  exports = module.exports = Binding;
  });

  var lib$4 = createCommonjsModule(function (module) {




  var realBinding = process.binding('fs');


  var realBindingProps = Object.assign({}, realBinding);
  var realProcessProps = {
    cwd: process.cwd,
    chdir: process.chdir
  };

  function overrideBinding(binding$$1) {
    for (var key in binding$$1) {
      if (typeof binding$$1[key] === 'function') {
        realBinding[key] = binding$$1[key].bind(binding$$1);
      } else {
        realBinding[key] = binding$$1[key];
      }
    }
  }

  function overrideProcess(cwd, chdir) {
    process.cwd = cwd;
    process.chdir = chdir;
  }

  function restoreBinding() {
    var key;
    for (key in realBindingProps) {
      realBinding[key] = realBindingProps[key];
    }
    // Delete excess keys that came in when the binding was originally applied.
    for (key in realBinding) {
      if (typeof realBindingProps[key] === 'undefined') {
        delete realBinding[key];
      }
    }
  }

  function restoreProcess() {
    for (var key in realProcessProps) {
      process[key] = realProcessProps[key];
    }
  }

  /**
   * Swap out the fs bindings for a mock file system.
   * @param {Object} config Mock file system configuration.
   * @param {Object} options Any filesystem options.
   * @param {boolean} options.createCwd Create a directory for `process.cwd()`
   *     (defaults to `true`).
   * @param {boolean} options.createTmp Create a directory for `os.tmpdir()`
   *     (defaults to `true`).
   */
  var exports = (module.exports = function mock(config, options) {
    var system = filesystem.create(config, options);
    var binding$$1 = new binding(system);

    overrideBinding(binding$$1);

    var currentPath = process.cwd();
    overrideProcess(
      function cwd() {
        return currentPath;
      },
      function chdir(directory) {
        if (!binding$$1.stat(path._makeLong(directory)).isDirectory()) {
          throw new error('ENOTDIR');
        }
        currentPath = path.resolve(currentPath, directory);
      }
    );
  });

  /**
   * Get hold of the mocked filesystem's 'root'
   * If fs hasn't currently been replaced, this will return an empty object
   */
  exports.getMockRoot = function() {
    if (typeof realBinding.getSystem === 'undefined') {
      return {};
    } else {
      return realBinding.getSystem().getRoot();
    }
  };

  /**
   * Restore the fs bindings for the real file system.
   */
  exports.restore = function() {
    restoreBinding();
    restoreProcess();
  };

  /**
   * Create a file factory.
   */
  exports.file = filesystem.file;

  /**
   * Create a directory factory.
   */
  exports.directory = filesystem.directory;

  /**
   * Create a symbolic link factory.
   */
  exports.symlink = filesystem.symlink;
  });

  // This module implements some file download utils. Its most important export
  // is `safeDownloadTargzFile`, which, given a file, its md5, a tar.gz url, its
  // md5 and a path, returns a Promise that will only resolve once the exact file
  // you expect is available on that path.










  // TODO: this lib takes 0.5s to load! Must be replaced asap.
  // Perhaps just use the unix `tar` command (cross platform?)


  // String -> String ~> Promise String
  //   Downloads a file from an url to a path.
  //   Returns a promise containing the path.
  var download = function download(url$$1) {
    return function (filePath) {
      var promise = bluebird_1.resolve(lib$3(path.dirname(filePath))).then(function () {
        return new bluebird_1(function (resolve, reject) {
          var writeStream = fs.createWriteStream(filePath);
          var downloadStream = got.stream(url$$1);
          downloadStream.on("end", function () {
            return resolve(filePath);
          });
          downloadStream.on("data", function (chunk) {
            return promise.onDataCallback(chunk);
          });
          downloadStream.on("error", reject);
          downloadStream.pipe(writeStream);
        });
      });
      promise.onDataCallback = function () {};
      promise.onData = function (callback) {
        promise.onDataCallback = callback || function () {};
        return promise;
      };
      return promise;
    };
  };

  // String -> String ~> Promise String
  //   Hashes a file using the given algorithm (ex: "md5").
  //   Returns a promise containing the hashed string.
  var hash$3 = function hash(algorithm) {
    return function (path$$1) {
      return new bluebird_1(function (resolve, reject) {
        var readStream = fs.ReadStream(path$$1);
        var hash = crypto.createHash(algorithm);
        readStream.on("data", function (d) {
          return hash.update(d);
        });
        readStream.on("end", function () {
          return resolve(hash.digest("hex"));
        });
        readStream.on("error", reject);
      });
    };
  };

  // String -> String ~> Promise ()
  //   Asserts a file matches this md5 hash.
  //   Returns a promise containing its path.
  var checksum = function checksum(fileHash) {
    return function (path$$1) {
      return hash$3("md5")(path$$1).then(function (actualHash) {
        return actualHash === fileHash;
      }).then(assert).then(function () {
        return path$$1;
      });
    };
  };

  // String ~> String ~> String ~> Promise String
  //   Downloads a file to a directory, check.
  //   Checks if the md5 hash matches.
  //   Returns a promise containing the path.
  var downloadAndCheck = function downloadAndCheck(url$$1) {
    return function (path$$1) {
      return function (fileHash) {
        return download(url$$1)(path$$1).then(checksum(fileHash));
      };
    };
  };

  // String -> String ~> Promise String
  //   TODO: work for zip and other types
  var extract = function extract(fromPath) {
    return function (toPath) {
      return tar_gz().extract(fromPath, toPath).then(function () {
        return toPath;
      });
    };
  };

  // String ~> Promise String
  //   Reads a file as an UTF8 string.
  //   Returns a promise containing that string.
  var readUTF8 = function readUTF8(path$$1) {
    return fsPromise.readFile(path$$1, { encoding: "utf8" });
  };

  // String ~> Promise Bool
  var isDirectory = function isDirectory(path$$1) {
    return fsPromise.exists(path$$1).then(assert).then(function () {
      return fsPromise.lstat(path$$1);
    }).then(function (stats) {
      return stats.isDirectory();
    }).catch(function () {
      return false;
    });
  };

  // String -> Promise String
  var directoryTree = function directoryTree(dirPath) {
    var paths = [];
    var search = function search(dirPath) {
      return isDirectory(dirPath).then(function (isDir) {
        if (isDir) {
          var searchOnDir = function searchOnDir(dir) {
            return search(path.join(dirPath, dir));
          };
          return bluebird_1.all(bluebird_1.map(fsPromise.readdir(dirPath), searchOnDir));
        } else {
          paths.push(dirPath);
        }    });
    };
    return bluebird_1.all(search(dirPath)).then(function () {
      return paths;
    });
  };

  // Regex -> String ~> Promise (Array String)
  var search = function search(regex) {
    return function (dirPath) {
      return directoryTree(dirPath).then(function (tree) {
        return tree.filter(function (path$$1) {
          return regex.test(path$$1);
        });
      });
    };
  };

  // String -> String -> String -> String ~> Promise String
  //   Downloads a file inside a tar.gz and places it at `filePath`.
  //   Checks the md5 hash of the tar before extracting it.
  //   Checks the md5 hash of the file after extracting it.
  //   If all is OK, returns a promise containing the file path.
  var safeDownloadArchived = function safeDownloadArchived(url$$1) {
    return function (archiveHash) {
      return function (fileHash) {
        return function (filePath) {
          var fileDir = path.dirname(filePath);
          var fileName = path.basename(filePath);
          var archivePath = path.join(fileDir, ".swarm_downloads/files.tar.gz");
          var archiveDir = path.dirname(archivePath);
          var promise = bluebird_1.resolve(lib$3(archiveDir)).then(function () {
            return checksum(fileHash)(filePath);
          }).then(function () {
            return filePath;
          }).catch(function () {
            return fsPromise.exists(archiveDir).then(function (exists) {
              return !exists ? fsPromise.mkdir(archiveDir) : null;
            }).then(function () {
              return download(url$$1)(archivePath).onData(promise.onDataCallback);
            }).then(function () {
              return hash$3("md5")(archivePath);
            }).then(function () {
              return archiveHash ? checksum(archiveHash)(archivePath) : null;
            }).then(function () {
              return extract(archivePath)(archiveDir);
            }).then(function () {
              return search(new RegExp(fileName + "$"))(archiveDir);
            }).then(function (fp) {
              return fsPromise.rename(fp[0], filePath);
            }).then(function () {
              return fsPromise.unlink(archivePath);
            }).then(function () {
              return fileHash ? checksum(fileHash)(filePath) : null;
            }).then(function () {
              return filePath;
            });
          });
          promise.onDataCallback = function () {};
          promise.onData = function (callback) {
            promise.onDataCallback = callback || function () {};
            return promise;
          };
          return promise;
        };
      };
    };
  };

  // String -> String ~> Promise String
  //   Like `safeDownloadArchivedFile`, but without the checksums.
  var downloadArchived = function downloadArchived(url$$1) {
    return function (path$$1) {
      return safeDownloadArchived(url$$1)(null)(null)(path$$1);
    };
  };

  // () => Promise Bool
  //   Tests the implementation by downloading a predetermined tar.gz
  //   from a mocked HTTP-server into a mocked filesystem. Does some
  //   redundancy tests such as checking the file constents and double
  //   checking its MD5 hash.
  //   Returns a promise containing a boolean, true if tests passed.
  var test = function test() {
    var filePath = "/swarm/foo.txt";
    var fileHash = "d3b07384d113edec49eaa6238ad5ff00";
    var archiveUrl = "http://localhost:12534";
    var archiveHash = "7fa45f946bb2a696bdd9972e0fbceac2";
    var archiveData = new Buffer([0x1f, 0x8b, 0x08, 0x00, 0xf1, 0x34, 0xaf, 0x58, 0x00, 0x03, 0xed, 0xcf, 0x3d, 0x0e, 0x83, 0x30, 0x0c, 0x86, 0x61, 0x66, 0x4e, 0xe1, 0x13, 0x54, 0xce, 0x0f, 0xc9, 0x79, 0x58, 0xb2, 0x46, 0x82, 0x14, 0x71, 0x7c, 0xd2, 0x06, 0x31, 0x52, 0x75, 0x40, 0x08, 0xe9, 0x7d, 0x96, 0x4f, 0x96, 0x3d, 0x7c, 0x4e, 0x39, 0xbf, 0xca, 0x5a, 0xba, 0x2b, 0xa9, 0x6a, 0xf0, 0x5e, 0x3e, 0x19, 0xc3, 0xf0, 0x4d, 0xb5, 0x6d, 0xde, 0x79, 0x31, 0x4e, 0x07, 0x17, 0x9c, 0xb5, 0x31, 0x8a, 0x1a, 0xab, 0xc6, 0x77, 0xa2, 0x97, 0xb6, 0xda, 0xbd, 0xe7, 0x32, 0x4e, 0xb5, 0xca, 0xf2, 0xe3, 0xae, 0x9e, 0xa5, 0x74, 0xb2, 0x6f, 0x8f, 0xc8, 0x91, 0x0f, 0x91, 0x72, 0xee, 0xef, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xdf, 0x06, 0xb3, 0x2a, 0xda, 0xed, 0x00, 0x28, 0x00, 0x00]);
    var fsMock = lib$4({ "/swarm": {} });
    var httpMock = http.createServer(function (_, res) {
      return res.end(archiveData);
    }).listen(12534);

    return safeDownloadArchived(archiveUrl)(archiveHash)(fileHash)(filePath).then(checksum(fileHash)).then(readUTF8).then(function (text) {
      return text === "foo\n";
    }).then(assert).then(function () {
      return safeDownloadArchived(archiveUrl)(archiveHash)(fileHash)(filePath);
    }).then(function () {
      return true;
    }).catch(false).finally(function () {
      return httpMock.close();
    });
  };

  var files$1 = {
    download: download,
    hash: hash$3,
    checksum: checksum,
    downloadAndCheck: downloadAndCheck,
    extract: extract,
    readUTF8: readUTF8,
    safeDownloadArchived: safeDownloadArchived,
    directoryTree: directoryTree,
    downloadArchived: downloadArchived,
    search: search,
    test: test
  };

  var db = {
  	"application/1d-interleaved-parityfec": {"source":"iana"},
  	"application/3gpdash-qoe-report+xml": {"source":"iana"},
  	"application/3gpp-ims+xml": {"source":"iana"},
  	"application/a2l": {"source":"iana"},
  	"application/activemessage": {"source":"iana"},
  	"application/alto-costmap+json": {"source":"iana","compressible":true},
  	"application/alto-costmapfilter+json": {"source":"iana","compressible":true},
  	"application/alto-directory+json": {"source":"iana","compressible":true},
  	"application/alto-endpointcost+json": {"source":"iana","compressible":true},
  	"application/alto-endpointcostparams+json": {"source":"iana","compressible":true},
  	"application/alto-endpointprop+json": {"source":"iana","compressible":true},
  	"application/alto-endpointpropparams+json": {"source":"iana","compressible":true},
  	"application/alto-error+json": {"source":"iana","compressible":true},
  	"application/alto-networkmap+json": {"source":"iana","compressible":true},
  	"application/alto-networkmapfilter+json": {"source":"iana","compressible":true},
  	"application/aml": {"source":"iana"},
  	"application/andrew-inset": {"source":"iana","extensions":["ez"]},
  	"application/applefile": {"source":"iana"},
  	"application/applixware": {"source":"apache","extensions":["aw"]},
  	"application/atf": {"source":"iana"},
  	"application/atfx": {"source":"iana"},
  	"application/atom+xml": {"source":"iana","compressible":true,"extensions":["atom"]},
  	"application/atomcat+xml": {"source":"iana","extensions":["atomcat"]},
  	"application/atomdeleted+xml": {"source":"iana"},
  	"application/atomicmail": {"source":"iana"},
  	"application/atomsvc+xml": {"source":"iana","extensions":["atomsvc"]},
  	"application/atxml": {"source":"iana"},
  	"application/auth-policy+xml": {"source":"iana"},
  	"application/bacnet-xdd+zip": {"source":"iana"},
  	"application/batch-smtp": {"source":"iana"},
  	"application/bdoc": {"compressible":false,"extensions":["bdoc"]},
  	"application/beep+xml": {"source":"iana"},
  	"application/calendar+json": {"source":"iana","compressible":true},
  	"application/calendar+xml": {"source":"iana"},
  	"application/call-completion": {"source":"iana"},
  	"application/cals-1840": {"source":"iana"},
  	"application/cbor": {"source":"iana"},
  	"application/cccex": {"source":"iana"},
  	"application/ccmp+xml": {"source":"iana"},
  	"application/ccxml+xml": {"source":"iana","extensions":["ccxml"]},
  	"application/cdfx+xml": {"source":"iana"},
  	"application/cdmi-capability": {"source":"iana","extensions":["cdmia"]},
  	"application/cdmi-container": {"source":"iana","extensions":["cdmic"]},
  	"application/cdmi-domain": {"source":"iana","extensions":["cdmid"]},
  	"application/cdmi-object": {"source":"iana","extensions":["cdmio"]},
  	"application/cdmi-queue": {"source":"iana","extensions":["cdmiq"]},
  	"application/cdni": {"source":"iana"},
  	"application/cea": {"source":"iana"},
  	"application/cea-2018+xml": {"source":"iana"},
  	"application/cellml+xml": {"source":"iana"},
  	"application/cfw": {"source":"iana"},
  	"application/clue_info+xml": {"source":"iana"},
  	"application/cms": {"source":"iana"},
  	"application/cnrp+xml": {"source":"iana"},
  	"application/coap-group+json": {"source":"iana","compressible":true},
  	"application/coap-payload": {"source":"iana"},
  	"application/commonground": {"source":"iana"},
  	"application/conference-info+xml": {"source":"iana"},
  	"application/cose": {"source":"iana"},
  	"application/cose-key": {"source":"iana"},
  	"application/cose-key-set": {"source":"iana"},
  	"application/cpl+xml": {"source":"iana"},
  	"application/csrattrs": {"source":"iana"},
  	"application/csta+xml": {"source":"iana"},
  	"application/cstadata+xml": {"source":"iana"},
  	"application/csvm+json": {"source":"iana","compressible":true},
  	"application/cu-seeme": {"source":"apache","extensions":["cu"]},
  	"application/cybercash": {"source":"iana"},
  	"application/dart": {"compressible":true},
  	"application/dash+xml": {"source":"iana","extensions":["mpd"]},
  	"application/dashdelta": {"source":"iana"},
  	"application/davmount+xml": {"source":"iana","extensions":["davmount"]},
  	"application/dca-rft": {"source":"iana"},
  	"application/dcd": {"source":"iana"},
  	"application/dec-dx": {"source":"iana"},
  	"application/dialog-info+xml": {"source":"iana"},
  	"application/dicom": {"source":"iana"},
  	"application/dicom+json": {"source":"iana","compressible":true},
  	"application/dicom+xml": {"source":"iana"},
  	"application/dii": {"source":"iana"},
  	"application/dit": {"source":"iana"},
  	"application/dns": {"source":"iana"},
  	"application/docbook+xml": {"source":"apache","extensions":["dbk"]},
  	"application/dskpp+xml": {"source":"iana"},
  	"application/dssc+der": {"source":"iana","extensions":["dssc"]},
  	"application/dssc+xml": {"source":"iana","extensions":["xdssc"]},
  	"application/dvcs": {"source":"iana"},
  	"application/ecmascript": {"source":"iana","compressible":true,"extensions":["ecma"]},
  	"application/edi-consent": {"source":"iana"},
  	"application/edi-x12": {"source":"iana","compressible":false},
  	"application/edifact": {"source":"iana","compressible":false},
  	"application/efi": {"source":"iana"},
  	"application/emergencycalldata.comment+xml": {"source":"iana"},
  	"application/emergencycalldata.control+xml": {"source":"iana"},
  	"application/emergencycalldata.deviceinfo+xml": {"source":"iana"},
  	"application/emergencycalldata.ecall.msd": {"source":"iana"},
  	"application/emergencycalldata.providerinfo+xml": {"source":"iana"},
  	"application/emergencycalldata.serviceinfo+xml": {"source":"iana"},
  	"application/emergencycalldata.subscriberinfo+xml": {"source":"iana"},
  	"application/emergencycalldata.veds+xml": {"source":"iana"},
  	"application/emma+xml": {"source":"iana","extensions":["emma"]},
  	"application/emotionml+xml": {"source":"iana"},
  	"application/encaprtp": {"source":"iana"},
  	"application/epp+xml": {"source":"iana"},
  	"application/epub+zip": {"source":"iana","extensions":["epub"]},
  	"application/eshop": {"source":"iana"},
  	"application/exi": {"source":"iana","extensions":["exi"]},
  	"application/fastinfoset": {"source":"iana"},
  	"application/fastsoap": {"source":"iana"},
  	"application/fdt+xml": {"source":"iana"},
  	"application/fhir+xml": {"source":"iana"},
  	"application/fido.trusted-apps+json": {"compressible":true},
  	"application/fits": {"source":"iana"},
  	"application/font-sfnt": {"source":"iana"},
  	"application/font-tdpfr": {"source":"iana","extensions":["pfr"]},
  	"application/font-woff": {"source":"iana","compressible":false,"extensions":["woff"]},
  	"application/framework-attributes+xml": {"source":"iana"},
  	"application/geo+json": {"source":"iana","compressible":true,"extensions":["geojson"]},
  	"application/geo+json-seq": {"source":"iana"},
  	"application/geoxacml+xml": {"source":"iana"},
  	"application/gml+xml": {"source":"iana","extensions":["gml"]},
  	"application/gpx+xml": {"source":"apache","extensions":["gpx"]},
  	"application/gxf": {"source":"apache","extensions":["gxf"]},
  	"application/gzip": {"source":"iana","compressible":false,"extensions":["gz"]},
  	"application/h224": {"source":"iana"},
  	"application/held+xml": {"source":"iana"},
  	"application/hjson": {"extensions":["hjson"]},
  	"application/http": {"source":"iana"},
  	"application/hyperstudio": {"source":"iana","extensions":["stk"]},
  	"application/ibe-key-request+xml": {"source":"iana"},
  	"application/ibe-pkg-reply+xml": {"source":"iana"},
  	"application/ibe-pp-data": {"source":"iana"},
  	"application/iges": {"source":"iana"},
  	"application/im-iscomposing+xml": {"source":"iana"},
  	"application/index": {"source":"iana"},
  	"application/index.cmd": {"source":"iana"},
  	"application/index.obj": {"source":"iana"},
  	"application/index.response": {"source":"iana"},
  	"application/index.vnd": {"source":"iana"},
  	"application/inkml+xml": {"source":"iana","extensions":["ink","inkml"]},
  	"application/iotp": {"source":"iana"},
  	"application/ipfix": {"source":"iana","extensions":["ipfix"]},
  	"application/ipp": {"source":"iana"},
  	"application/isup": {"source":"iana"},
  	"application/its+xml": {"source":"iana"},
  	"application/java-archive": {"source":"apache","compressible":false,"extensions":["jar","war","ear"]},
  	"application/java-serialized-object": {"source":"apache","compressible":false,"extensions":["ser"]},
  	"application/java-vm": {"source":"apache","compressible":false,"extensions":["class"]},
  	"application/javascript": {"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},
  	"application/jf2feed+json": {"source":"iana","compressible":true},
  	"application/jose": {"source":"iana"},
  	"application/jose+json": {"source":"iana","compressible":true},
  	"application/jrd+json": {"source":"iana","compressible":true},
  	"application/json": {"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},
  	"application/json-patch+json": {"source":"iana","compressible":true},
  	"application/json-seq": {"source":"iana"},
  	"application/json5": {"extensions":["json5"]},
  	"application/jsonml+json": {"source":"apache","compressible":true,"extensions":["jsonml"]},
  	"application/jwk+json": {"source":"iana","compressible":true},
  	"application/jwk-set+json": {"source":"iana","compressible":true},
  	"application/jwt": {"source":"iana"},
  	"application/kpml-request+xml": {"source":"iana"},
  	"application/kpml-response+xml": {"source":"iana"},
  	"application/ld+json": {"source":"iana","compressible":true,"extensions":["jsonld"]},
  	"application/lgr+xml": {"source":"iana"},
  	"application/link-format": {"source":"iana"},
  	"application/load-control+xml": {"source":"iana"},
  	"application/lost+xml": {"source":"iana","extensions":["lostxml"]},
  	"application/lostsync+xml": {"source":"iana"},
  	"application/lxf": {"source":"iana"},
  	"application/mac-binhex40": {"source":"iana","extensions":["hqx"]},
  	"application/mac-compactpro": {"source":"apache","extensions":["cpt"]},
  	"application/macwriteii": {"source":"iana"},
  	"application/mads+xml": {"source":"iana","extensions":["mads"]},
  	"application/manifest+json": {"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},
  	"application/marc": {"source":"iana","extensions":["mrc"]},
  	"application/marcxml+xml": {"source":"iana","extensions":["mrcx"]},
  	"application/mathematica": {"source":"iana","extensions":["ma","nb","mb"]},
  	"application/mathml+xml": {"source":"iana","extensions":["mathml"]},
  	"application/mathml-content+xml": {"source":"iana"},
  	"application/mathml-presentation+xml": {"source":"iana"},
  	"application/mbms-associated-procedure-description+xml": {"source":"iana"},
  	"application/mbms-deregister+xml": {"source":"iana"},
  	"application/mbms-envelope+xml": {"source":"iana"},
  	"application/mbms-msk+xml": {"source":"iana"},
  	"application/mbms-msk-response+xml": {"source":"iana"},
  	"application/mbms-protection-description+xml": {"source":"iana"},
  	"application/mbms-reception-report+xml": {"source":"iana"},
  	"application/mbms-register+xml": {"source":"iana"},
  	"application/mbms-register-response+xml": {"source":"iana"},
  	"application/mbms-schedule+xml": {"source":"iana"},
  	"application/mbms-user-service-description+xml": {"source":"iana"},
  	"application/mbox": {"source":"iana","extensions":["mbox"]},
  	"application/media-policy-dataset+xml": {"source":"iana"},
  	"application/media_control+xml": {"source":"iana"},
  	"application/mediaservercontrol+xml": {"source":"iana","extensions":["mscml"]},
  	"application/merge-patch+json": {"source":"iana","compressible":true},
  	"application/metalink+xml": {"source":"apache","extensions":["metalink"]},
  	"application/metalink4+xml": {"source":"iana","extensions":["meta4"]},
  	"application/mets+xml": {"source":"iana","extensions":["mets"]},
  	"application/mf4": {"source":"iana"},
  	"application/mikey": {"source":"iana"},
  	"application/mmt-usd+xml": {"source":"iana"},
  	"application/mods+xml": {"source":"iana","extensions":["mods"]},
  	"application/moss-keys": {"source":"iana"},
  	"application/moss-signature": {"source":"iana"},
  	"application/mosskey-data": {"source":"iana"},
  	"application/mosskey-request": {"source":"iana"},
  	"application/mp21": {"source":"iana","extensions":["m21","mp21"]},
  	"application/mp4": {"source":"iana","extensions":["mp4s","m4p"]},
  	"application/mpeg4-generic": {"source":"iana"},
  	"application/mpeg4-iod": {"source":"iana"},
  	"application/mpeg4-iod-xmt": {"source":"iana"},
  	"application/mrb-consumer+xml": {"source":"iana"},
  	"application/mrb-publish+xml": {"source":"iana"},
  	"application/msc-ivr+xml": {"source":"iana"},
  	"application/msc-mixer+xml": {"source":"iana"},
  	"application/msword": {"source":"iana","compressible":false,"extensions":["doc","dot"]},
  	"application/mud+json": {"source":"iana","compressible":true},
  	"application/mxf": {"source":"iana","extensions":["mxf"]},
  	"application/n-quads": {"source":"iana"},
  	"application/n-triples": {"source":"iana"},
  	"application/nasdata": {"source":"iana"},
  	"application/news-checkgroups": {"source":"iana"},
  	"application/news-groupinfo": {"source":"iana"},
  	"application/news-transmission": {"source":"iana"},
  	"application/nlsml+xml": {"source":"iana"},
  	"application/node": {"source":"iana"},
  	"application/nss": {"source":"iana"},
  	"application/ocsp-request": {"source":"iana"},
  	"application/ocsp-response": {"source":"iana"},
  	"application/octet-stream": {"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},
  	"application/oda": {"source":"iana","extensions":["oda"]},
  	"application/odx": {"source":"iana"},
  	"application/oebps-package+xml": {"source":"iana","extensions":["opf"]},
  	"application/ogg": {"source":"iana","compressible":false,"extensions":["ogx"]},
  	"application/omdoc+xml": {"source":"apache","extensions":["omdoc"]},
  	"application/onenote": {"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},
  	"application/oxps": {"source":"iana","extensions":["oxps"]},
  	"application/p2p-overlay+xml": {"source":"iana"},
  	"application/parityfec": {"source":"iana"},
  	"application/passport": {"source":"iana"},
  	"application/patch-ops-error+xml": {"source":"iana","extensions":["xer"]},
  	"application/pdf": {"source":"iana","compressible":false,"extensions":["pdf"]},
  	"application/pdx": {"source":"iana"},
  	"application/pgp-encrypted": {"source":"iana","compressible":false,"extensions":["pgp"]},
  	"application/pgp-keys": {"source":"iana"},
  	"application/pgp-signature": {"source":"iana","extensions":["asc","sig"]},
  	"application/pics-rules": {"source":"apache","extensions":["prf"]},
  	"application/pidf+xml": {"source":"iana"},
  	"application/pidf-diff+xml": {"source":"iana"},
  	"application/pkcs10": {"source":"iana","extensions":["p10"]},
  	"application/pkcs12": {"source":"iana"},
  	"application/pkcs7-mime": {"source":"iana","extensions":["p7m","p7c"]},
  	"application/pkcs7-signature": {"source":"iana","extensions":["p7s"]},
  	"application/pkcs8": {"source":"iana","extensions":["p8"]},
  	"application/pkcs8-encrypted": {"source":"iana"},
  	"application/pkix-attr-cert": {"source":"iana","extensions":["ac"]},
  	"application/pkix-cert": {"source":"iana","extensions":["cer"]},
  	"application/pkix-crl": {"source":"iana","extensions":["crl"]},
  	"application/pkix-pkipath": {"source":"iana","extensions":["pkipath"]},
  	"application/pkixcmp": {"source":"iana","extensions":["pki"]},
  	"application/pls+xml": {"source":"iana","extensions":["pls"]},
  	"application/poc-settings+xml": {"source":"iana"},
  	"application/postscript": {"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},
  	"application/ppsp-tracker+json": {"source":"iana","compressible":true},
  	"application/problem+json": {"source":"iana","compressible":true},
  	"application/problem+xml": {"source":"iana"},
  	"application/provenance+xml": {"source":"iana"},
  	"application/prs.alvestrand.titrax-sheet": {"source":"iana"},
  	"application/prs.cww": {"source":"iana","extensions":["cww"]},
  	"application/prs.hpub+zip": {"source":"iana"},
  	"application/prs.nprend": {"source":"iana"},
  	"application/prs.plucker": {"source":"iana"},
  	"application/prs.rdf-xml-crypt": {"source":"iana"},
  	"application/prs.xsf+xml": {"source":"iana"},
  	"application/pskc+xml": {"source":"iana","extensions":["pskcxml"]},
  	"application/qsig": {"source":"iana"},
  	"application/raml+yaml": {"compressible":true,"extensions":["raml"]},
  	"application/raptorfec": {"source":"iana"},
  	"application/rdap+json": {"source":"iana","compressible":true},
  	"application/rdf+xml": {"source":"iana","compressible":true,"extensions":["rdf"]},
  	"application/reginfo+xml": {"source":"iana","extensions":["rif"]},
  	"application/relax-ng-compact-syntax": {"source":"iana","extensions":["rnc"]},
  	"application/remote-printing": {"source":"iana"},
  	"application/reputon+json": {"source":"iana","compressible":true},
  	"application/resource-lists+xml": {"source":"iana","extensions":["rl"]},
  	"application/resource-lists-diff+xml": {"source":"iana","extensions":["rld"]},
  	"application/rfc+xml": {"source":"iana"},
  	"application/riscos": {"source":"iana"},
  	"application/rlmi+xml": {"source":"iana"},
  	"application/rls-services+xml": {"source":"iana","extensions":["rs"]},
  	"application/route-apd+xml": {"source":"iana"},
  	"application/route-s-tsid+xml": {"source":"iana"},
  	"application/route-usd+xml": {"source":"iana"},
  	"application/rpki-ghostbusters": {"source":"iana","extensions":["gbr"]},
  	"application/rpki-manifest": {"source":"iana","extensions":["mft"]},
  	"application/rpki-publication": {"source":"iana"},
  	"application/rpki-roa": {"source":"iana","extensions":["roa"]},
  	"application/rpki-updown": {"source":"iana"},
  	"application/rsd+xml": {"source":"apache","extensions":["rsd"]},
  	"application/rss+xml": {"source":"apache","compressible":true,"extensions":["rss"]},
  	"application/rtf": {"source":"iana","compressible":true,"extensions":["rtf"]},
  	"application/rtploopback": {"source":"iana"},
  	"application/rtx": {"source":"iana"},
  	"application/samlassertion+xml": {"source":"iana"},
  	"application/samlmetadata+xml": {"source":"iana"},
  	"application/sbml+xml": {"source":"iana","extensions":["sbml"]},
  	"application/scaip+xml": {"source":"iana"},
  	"application/scim+json": {"source":"iana","compressible":true},
  	"application/scvp-cv-request": {"source":"iana","extensions":["scq"]},
  	"application/scvp-cv-response": {"source":"iana","extensions":["scs"]},
  	"application/scvp-vp-request": {"source":"iana","extensions":["spq"]},
  	"application/scvp-vp-response": {"source":"iana","extensions":["spp"]},
  	"application/sdp": {"source":"iana","extensions":["sdp"]},
  	"application/sep+xml": {"source":"iana"},
  	"application/sep-exi": {"source":"iana"},
  	"application/session-info": {"source":"iana"},
  	"application/set-payment": {"source":"iana"},
  	"application/set-payment-initiation": {"source":"iana","extensions":["setpay"]},
  	"application/set-registration": {"source":"iana"},
  	"application/set-registration-initiation": {"source":"iana","extensions":["setreg"]},
  	"application/sgml": {"source":"iana"},
  	"application/sgml-open-catalog": {"source":"iana"},
  	"application/shf+xml": {"source":"iana","extensions":["shf"]},
  	"application/sieve": {"source":"iana"},
  	"application/simple-filter+xml": {"source":"iana"},
  	"application/simple-message-summary": {"source":"iana"},
  	"application/simplesymbolcontainer": {"source":"iana"},
  	"application/slate": {"source":"iana"},
  	"application/smil": {"source":"iana"},
  	"application/smil+xml": {"source":"iana","extensions":["smi","smil"]},
  	"application/smpte336m": {"source":"iana"},
  	"application/soap+fastinfoset": {"source":"iana"},
  	"application/soap+xml": {"source":"iana","compressible":true},
  	"application/sparql-query": {"source":"iana","extensions":["rq"]},
  	"application/sparql-results+xml": {"source":"iana","extensions":["srx"]},
  	"application/spirits-event+xml": {"source":"iana"},
  	"application/sql": {"source":"iana"},
  	"application/srgs": {"source":"iana","extensions":["gram"]},
  	"application/srgs+xml": {"source":"iana","extensions":["grxml"]},
  	"application/sru+xml": {"source":"iana","extensions":["sru"]},
  	"application/ssdl+xml": {"source":"apache","extensions":["ssdl"]},
  	"application/ssml+xml": {"source":"iana","extensions":["ssml"]},
  	"application/tamp-apex-update": {"source":"iana"},
  	"application/tamp-apex-update-confirm": {"source":"iana"},
  	"application/tamp-community-update": {"source":"iana"},
  	"application/tamp-community-update-confirm": {"source":"iana"},
  	"application/tamp-error": {"source":"iana"},
  	"application/tamp-sequence-adjust": {"source":"iana"},
  	"application/tamp-sequence-adjust-confirm": {"source":"iana"},
  	"application/tamp-status-query": {"source":"iana"},
  	"application/tamp-status-response": {"source":"iana"},
  	"application/tamp-update": {"source":"iana"},
  	"application/tamp-update-confirm": {"source":"iana"},
  	"application/tar": {"compressible":true},
  	"application/tei+xml": {"source":"iana","extensions":["tei","teicorpus"]},
  	"application/thraud+xml": {"source":"iana","extensions":["tfi"]},
  	"application/timestamp-query": {"source":"iana"},
  	"application/timestamp-reply": {"source":"iana"},
  	"application/timestamped-data": {"source":"iana","extensions":["tsd"]},
  	"application/tnauthlist": {"source":"iana"},
  	"application/trig": {"source":"iana"},
  	"application/ttml+xml": {"source":"iana"},
  	"application/tve-trigger": {"source":"iana"},
  	"application/ulpfec": {"source":"iana"},
  	"application/urc-grpsheet+xml": {"source":"iana"},
  	"application/urc-ressheet+xml": {"source":"iana"},
  	"application/urc-targetdesc+xml": {"source":"iana"},
  	"application/urc-uisocketdesc+xml": {"source":"iana"},
  	"application/vcard+json": {"source":"iana","compressible":true},
  	"application/vcard+xml": {"source":"iana"},
  	"application/vemmi": {"source":"iana"},
  	"application/vividence.scriptfile": {"source":"apache"},
  	"application/vnd.1000minds.decision-model+xml": {"source":"iana"},
  	"application/vnd.3gpp-prose+xml": {"source":"iana"},
  	"application/vnd.3gpp-prose-pc3ch+xml": {"source":"iana"},
  	"application/vnd.3gpp-v2x-local-service-information": {"source":"iana"},
  	"application/vnd.3gpp.access-transfer-events+xml": {"source":"iana"},
  	"application/vnd.3gpp.bsf+xml": {"source":"iana"},
  	"application/vnd.3gpp.gmop+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-affiliation-command+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-floor-request+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-location-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.mcptt-signed+xml": {"source":"iana"},
  	"application/vnd.3gpp.mid-call+xml": {"source":"iana"},
  	"application/vnd.3gpp.pic-bw-large": {"source":"iana","extensions":["plb"]},
  	"application/vnd.3gpp.pic-bw-small": {"source":"iana","extensions":["psb"]},
  	"application/vnd.3gpp.pic-bw-var": {"source":"iana","extensions":["pvb"]},
  	"application/vnd.3gpp.sms": {"source":"iana"},
  	"application/vnd.3gpp.sms+xml": {"source":"iana"},
  	"application/vnd.3gpp.srvcc-ext+xml": {"source":"iana"},
  	"application/vnd.3gpp.srvcc-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.state-and-event-info+xml": {"source":"iana"},
  	"application/vnd.3gpp.ussd+xml": {"source":"iana"},
  	"application/vnd.3gpp2.bcmcsinfo+xml": {"source":"iana"},
  	"application/vnd.3gpp2.sms": {"source":"iana"},
  	"application/vnd.3gpp2.tcap": {"source":"iana","extensions":["tcap"]},
  	"application/vnd.3lightssoftware.imagescal": {"source":"iana"},
  	"application/vnd.3m.post-it-notes": {"source":"iana","extensions":["pwn"]},
  	"application/vnd.accpac.simply.aso": {"source":"iana","extensions":["aso"]},
  	"application/vnd.accpac.simply.imp": {"source":"iana","extensions":["imp"]},
  	"application/vnd.acucobol": {"source":"iana","extensions":["acu"]},
  	"application/vnd.acucorp": {"source":"iana","extensions":["atc","acutc"]},
  	"application/vnd.adobe.air-application-installer-package+zip": {"source":"apache","extensions":["air"]},
  	"application/vnd.adobe.flash.movie": {"source":"iana"},
  	"application/vnd.adobe.formscentral.fcdt": {"source":"iana","extensions":["fcdt"]},
  	"application/vnd.adobe.fxp": {"source":"iana","extensions":["fxp","fxpl"]},
  	"application/vnd.adobe.partial-upload": {"source":"iana"},
  	"application/vnd.adobe.xdp+xml": {"source":"iana","extensions":["xdp"]},
  	"application/vnd.adobe.xfdf": {"source":"iana","extensions":["xfdf"]},
  	"application/vnd.aether.imp": {"source":"iana"},
  	"application/vnd.ah-barcode": {"source":"iana"},
  	"application/vnd.ahead.space": {"source":"iana","extensions":["ahead"]},
  	"application/vnd.airzip.filesecure.azf": {"source":"iana","extensions":["azf"]},
  	"application/vnd.airzip.filesecure.azs": {"source":"iana","extensions":["azs"]},
  	"application/vnd.amadeus+json": {"source":"iana","compressible":true},
  	"application/vnd.amazon.ebook": {"source":"apache","extensions":["azw"]},
  	"application/vnd.amazon.mobi8-ebook": {"source":"iana"},
  	"application/vnd.americandynamics.acc": {"source":"iana","extensions":["acc"]},
  	"application/vnd.amiga.ami": {"source":"iana","extensions":["ami"]},
  	"application/vnd.amundsen.maze+xml": {"source":"iana"},
  	"application/vnd.android.package-archive": {"source":"apache","compressible":false,"extensions":["apk"]},
  	"application/vnd.anki": {"source":"iana"},
  	"application/vnd.anser-web-certificate-issue-initiation": {"source":"iana","extensions":["cii"]},
  	"application/vnd.anser-web-funds-transfer-initiation": {"source":"apache","extensions":["fti"]},
  	"application/vnd.antix.game-component": {"source":"iana","extensions":["atx"]},
  	"application/vnd.apache.thrift.binary": {"source":"iana"},
  	"application/vnd.apache.thrift.compact": {"source":"iana"},
  	"application/vnd.apache.thrift.json": {"source":"iana"},
  	"application/vnd.api+json": {"source":"iana","compressible":true},
  	"application/vnd.apothekende.reservation+json": {"source":"iana","compressible":true},
  	"application/vnd.apple.installer+xml": {"source":"iana","extensions":["mpkg"]},
  	"application/vnd.apple.mpegurl": {"source":"iana","extensions":["m3u8"]},
  	"application/vnd.apple.pkpass": {"compressible":false,"extensions":["pkpass"]},
  	"application/vnd.arastra.swi": {"source":"iana"},
  	"application/vnd.aristanetworks.swi": {"source":"iana","extensions":["swi"]},
  	"application/vnd.artsquare": {"source":"iana"},
  	"application/vnd.astraea-software.iota": {"source":"iana","extensions":["iota"]},
  	"application/vnd.audiograph": {"source":"iana","extensions":["aep"]},
  	"application/vnd.autopackage": {"source":"iana"},
  	"application/vnd.avalon+json": {"source":"iana","compressible":true},
  	"application/vnd.avistar+xml": {"source":"iana"},
  	"application/vnd.balsamiq.bmml+xml": {"source":"iana"},
  	"application/vnd.balsamiq.bmpr": {"source":"iana"},
  	"application/vnd.bbf.usp.msg": {"source":"iana"},
  	"application/vnd.bbf.usp.msg+json": {"source":"iana","compressible":true},
  	"application/vnd.bekitzur-stech+json": {"source":"iana","compressible":true},
  	"application/vnd.bint.med-content": {"source":"iana"},
  	"application/vnd.biopax.rdf+xml": {"source":"iana"},
  	"application/vnd.blink-idb-value-wrapper": {"source":"iana"},
  	"application/vnd.blueice.multipass": {"source":"iana","extensions":["mpm"]},
  	"application/vnd.bluetooth.ep.oob": {"source":"iana"},
  	"application/vnd.bluetooth.le.oob": {"source":"iana"},
  	"application/vnd.bmi": {"source":"iana","extensions":["bmi"]},
  	"application/vnd.businessobjects": {"source":"iana","extensions":["rep"]},
  	"application/vnd.cab-jscript": {"source":"iana"},
  	"application/vnd.canon-cpdl": {"source":"iana"},
  	"application/vnd.canon-lips": {"source":"iana"},
  	"application/vnd.capasystems-pg+json": {"source":"iana","compressible":true},
  	"application/vnd.cendio.thinlinc.clientconf": {"source":"iana"},
  	"application/vnd.century-systems.tcp_stream": {"source":"iana"},
  	"application/vnd.chemdraw+xml": {"source":"iana","extensions":["cdxml"]},
  	"application/vnd.chess-pgn": {"source":"iana"},
  	"application/vnd.chipnuts.karaoke-mmd": {"source":"iana","extensions":["mmd"]},
  	"application/vnd.cinderella": {"source":"iana","extensions":["cdy"]},
  	"application/vnd.cirpack.isdn-ext": {"source":"iana"},
  	"application/vnd.citationstyles.style+xml": {"source":"iana"},
  	"application/vnd.claymore": {"source":"iana","extensions":["cla"]},
  	"application/vnd.cloanto.rp9": {"source":"iana","extensions":["rp9"]},
  	"application/vnd.clonk.c4group": {"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},
  	"application/vnd.cluetrust.cartomobile-config": {"source":"iana","extensions":["c11amc"]},
  	"application/vnd.cluetrust.cartomobile-config-pkg": {"source":"iana","extensions":["c11amz"]},
  	"application/vnd.coffeescript": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.document": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.document-template": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.presentation": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.presentation-template": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.spreadsheet": {"source":"iana"},
  	"application/vnd.collabio.xodocuments.spreadsheet-template": {"source":"iana"},
  	"application/vnd.collection+json": {"source":"iana","compressible":true},
  	"application/vnd.collection.doc+json": {"source":"iana","compressible":true},
  	"application/vnd.collection.next+json": {"source":"iana","compressible":true},
  	"application/vnd.comicbook+zip": {"source":"iana"},
  	"application/vnd.comicbook-rar": {"source":"iana"},
  	"application/vnd.commerce-battelle": {"source":"iana"},
  	"application/vnd.commonspace": {"source":"iana","extensions":["csp"]},
  	"application/vnd.contact.cmsg": {"source":"iana","extensions":["cdbcmsg"]},
  	"application/vnd.coreos.ignition+json": {"source":"iana","compressible":true},
  	"application/vnd.cosmocaller": {"source":"iana","extensions":["cmc"]},
  	"application/vnd.crick.clicker": {"source":"iana","extensions":["clkx"]},
  	"application/vnd.crick.clicker.keyboard": {"source":"iana","extensions":["clkk"]},
  	"application/vnd.crick.clicker.palette": {"source":"iana","extensions":["clkp"]},
  	"application/vnd.crick.clicker.template": {"source":"iana","extensions":["clkt"]},
  	"application/vnd.crick.clicker.wordbank": {"source":"iana","extensions":["clkw"]},
  	"application/vnd.criticaltools.wbs+xml": {"source":"iana","extensions":["wbs"]},
  	"application/vnd.ctc-posml": {"source":"iana","extensions":["pml"]},
  	"application/vnd.ctct.ws+xml": {"source":"iana"},
  	"application/vnd.cups-pdf": {"source":"iana"},
  	"application/vnd.cups-postscript": {"source":"iana"},
  	"application/vnd.cups-ppd": {"source":"iana","extensions":["ppd"]},
  	"application/vnd.cups-raster": {"source":"iana"},
  	"application/vnd.cups-raw": {"source":"iana"},
  	"application/vnd.curl": {"source":"iana"},
  	"application/vnd.curl.car": {"source":"apache","extensions":["car"]},
  	"application/vnd.curl.pcurl": {"source":"apache","extensions":["pcurl"]},
  	"application/vnd.cyan.dean.root+xml": {"source":"iana"},
  	"application/vnd.cybank": {"source":"iana"},
  	"application/vnd.d2l.coursepackage1p0+zip": {"source":"iana"},
  	"application/vnd.dart": {"source":"iana","compressible":true,"extensions":["dart"]},
  	"application/vnd.data-vision.rdz": {"source":"iana","extensions":["rdz"]},
  	"application/vnd.datapackage+json": {"source":"iana","compressible":true},
  	"application/vnd.dataresource+json": {"source":"iana","compressible":true},
  	"application/vnd.debian.binary-package": {"source":"iana"},
  	"application/vnd.dece.data": {"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},
  	"application/vnd.dece.ttml+xml": {"source":"iana","extensions":["uvt","uvvt"]},
  	"application/vnd.dece.unspecified": {"source":"iana","extensions":["uvx","uvvx"]},
  	"application/vnd.dece.zip": {"source":"iana","extensions":["uvz","uvvz"]},
  	"application/vnd.denovo.fcselayout-link": {"source":"iana","extensions":["fe_launch"]},
  	"application/vnd.desmume-movie": {"source":"iana"},
  	"application/vnd.desmume.movie": {"source":"apache"},
  	"application/vnd.dir-bi.plate-dl-nosuffix": {"source":"iana"},
  	"application/vnd.dm.delegation+xml": {"source":"iana"},
  	"application/vnd.dna": {"source":"iana","extensions":["dna"]},
  	"application/vnd.document+json": {"source":"iana","compressible":true},
  	"application/vnd.dolby.mlp": {"source":"apache","extensions":["mlp"]},
  	"application/vnd.dolby.mobile.1": {"source":"iana"},
  	"application/vnd.dolby.mobile.2": {"source":"iana"},
  	"application/vnd.doremir.scorecloud-binary-document": {"source":"iana"},
  	"application/vnd.dpgraph": {"source":"iana","extensions":["dpg"]},
  	"application/vnd.dreamfactory": {"source":"iana","extensions":["dfac"]},
  	"application/vnd.drive+json": {"source":"iana","compressible":true},
  	"application/vnd.ds-keypoint": {"source":"apache","extensions":["kpxx"]},
  	"application/vnd.dtg.local": {"source":"iana"},
  	"application/vnd.dtg.local.flash": {"source":"iana"},
  	"application/vnd.dtg.local.html": {"source":"iana"},
  	"application/vnd.dvb.ait": {"source":"iana","extensions":["ait"]},
  	"application/vnd.dvb.dvbj": {"source":"iana"},
  	"application/vnd.dvb.esgcontainer": {"source":"iana"},
  	"application/vnd.dvb.ipdcdftnotifaccess": {"source":"iana"},
  	"application/vnd.dvb.ipdcesgaccess": {"source":"iana"},
  	"application/vnd.dvb.ipdcesgaccess2": {"source":"iana"},
  	"application/vnd.dvb.ipdcesgpdd": {"source":"iana"},
  	"application/vnd.dvb.ipdcroaming": {"source":"iana"},
  	"application/vnd.dvb.iptv.alfec-base": {"source":"iana"},
  	"application/vnd.dvb.iptv.alfec-enhancement": {"source":"iana"},
  	"application/vnd.dvb.notif-aggregate-root+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-container+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-generic+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-ia-msglist+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-ia-registration-request+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-ia-registration-response+xml": {"source":"iana"},
  	"application/vnd.dvb.notif-init+xml": {"source":"iana"},
  	"application/vnd.dvb.pfr": {"source":"iana"},
  	"application/vnd.dvb.service": {"source":"iana","extensions":["svc"]},
  	"application/vnd.dxr": {"source":"iana"},
  	"application/vnd.dynageo": {"source":"iana","extensions":["geo"]},
  	"application/vnd.dzr": {"source":"iana"},
  	"application/vnd.easykaraoke.cdgdownload": {"source":"iana"},
  	"application/vnd.ecdis-update": {"source":"iana"},
  	"application/vnd.ecip.rlp": {"source":"iana"},
  	"application/vnd.ecowin.chart": {"source":"iana","extensions":["mag"]},
  	"application/vnd.ecowin.filerequest": {"source":"iana"},
  	"application/vnd.ecowin.fileupdate": {"source":"iana"},
  	"application/vnd.ecowin.series": {"source":"iana"},
  	"application/vnd.ecowin.seriesrequest": {"source":"iana"},
  	"application/vnd.ecowin.seriesupdate": {"source":"iana"},
  	"application/vnd.efi.img": {"source":"iana"},
  	"application/vnd.efi.iso": {"source":"iana"},
  	"application/vnd.emclient.accessrequest+xml": {"source":"iana"},
  	"application/vnd.enliven": {"source":"iana","extensions":["nml"]},
  	"application/vnd.enphase.envoy": {"source":"iana"},
  	"application/vnd.eprints.data+xml": {"source":"iana"},
  	"application/vnd.epson.esf": {"source":"iana","extensions":["esf"]},
  	"application/vnd.epson.msf": {"source":"iana","extensions":["msf"]},
  	"application/vnd.epson.quickanime": {"source":"iana","extensions":["qam"]},
  	"application/vnd.epson.salt": {"source":"iana","extensions":["slt"]},
  	"application/vnd.epson.ssf": {"source":"iana","extensions":["ssf"]},
  	"application/vnd.ericsson.quickcall": {"source":"iana"},
  	"application/vnd.espass-espass+zip": {"source":"iana"},
  	"application/vnd.eszigno3+xml": {"source":"iana","extensions":["es3","et3"]},
  	"application/vnd.etsi.aoc+xml": {"source":"iana"},
  	"application/vnd.etsi.asic-e+zip": {"source":"iana"},
  	"application/vnd.etsi.asic-s+zip": {"source":"iana"},
  	"application/vnd.etsi.cug+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvcommand+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvdiscovery+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvprofile+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvsad-bc+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvsad-cod+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvsad-npvr+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvservice+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvsync+xml": {"source":"iana"},
  	"application/vnd.etsi.iptvueprofile+xml": {"source":"iana"},
  	"application/vnd.etsi.mcid+xml": {"source":"iana"},
  	"application/vnd.etsi.mheg5": {"source":"iana"},
  	"application/vnd.etsi.overload-control-policy-dataset+xml": {"source":"iana"},
  	"application/vnd.etsi.pstn+xml": {"source":"iana"},
  	"application/vnd.etsi.sci+xml": {"source":"iana"},
  	"application/vnd.etsi.simservs+xml": {"source":"iana"},
  	"application/vnd.etsi.timestamp-token": {"source":"iana"},
  	"application/vnd.etsi.tsl+xml": {"source":"iana"},
  	"application/vnd.etsi.tsl.der": {"source":"iana"},
  	"application/vnd.eudora.data": {"source":"iana"},
  	"application/vnd.evolv.ecig.profile": {"source":"iana"},
  	"application/vnd.evolv.ecig.settings": {"source":"iana"},
  	"application/vnd.evolv.ecig.theme": {"source":"iana"},
  	"application/vnd.ezpix-album": {"source":"iana","extensions":["ez2"]},
  	"application/vnd.ezpix-package": {"source":"iana","extensions":["ez3"]},
  	"application/vnd.f-secure.mobile": {"source":"iana"},
  	"application/vnd.fastcopy-disk-image": {"source":"iana"},
  	"application/vnd.fdf": {"source":"iana","extensions":["fdf"]},
  	"application/vnd.fdsn.mseed": {"source":"iana","extensions":["mseed"]},
  	"application/vnd.fdsn.seed": {"source":"iana","extensions":["seed","dataless"]},
  	"application/vnd.ffsns": {"source":"iana"},
  	"application/vnd.filmit.zfc": {"source":"iana"},
  	"application/vnd.fints": {"source":"iana"},
  	"application/vnd.firemonkeys.cloudcell": {"source":"iana"},
  	"application/vnd.flographit": {"source":"iana","extensions":["gph"]},
  	"application/vnd.fluxtime.clip": {"source":"iana","extensions":["ftc"]},
  	"application/vnd.font-fontforge-sfd": {"source":"iana"},
  	"application/vnd.framemaker": {"source":"iana","extensions":["fm","frame","maker","book"]},
  	"application/vnd.frogans.fnc": {"source":"iana","extensions":["fnc"]},
  	"application/vnd.frogans.ltf": {"source":"iana","extensions":["ltf"]},
  	"application/vnd.fsc.weblaunch": {"source":"iana","extensions":["fsc"]},
  	"application/vnd.fujitsu.oasys": {"source":"iana","extensions":["oas"]},
  	"application/vnd.fujitsu.oasys2": {"source":"iana","extensions":["oa2"]},
  	"application/vnd.fujitsu.oasys3": {"source":"iana","extensions":["oa3"]},
  	"application/vnd.fujitsu.oasysgp": {"source":"iana","extensions":["fg5"]},
  	"application/vnd.fujitsu.oasysprs": {"source":"iana","extensions":["bh2"]},
  	"application/vnd.fujixerox.art-ex": {"source":"iana"},
  	"application/vnd.fujixerox.art4": {"source":"iana"},
  	"application/vnd.fujixerox.ddd": {"source":"iana","extensions":["ddd"]},
  	"application/vnd.fujixerox.docuworks": {"source":"iana","extensions":["xdw"]},
  	"application/vnd.fujixerox.docuworks.binder": {"source":"iana","extensions":["xbd"]},
  	"application/vnd.fujixerox.docuworks.container": {"source":"iana"},
  	"application/vnd.fujixerox.hbpl": {"source":"iana"},
  	"application/vnd.fut-misnet": {"source":"iana"},
  	"application/vnd.fuzzysheet": {"source":"iana","extensions":["fzs"]},
  	"application/vnd.genomatix.tuxedo": {"source":"iana","extensions":["txd"]},
  	"application/vnd.geo+json": {"source":"iana","compressible":true},
  	"application/vnd.geocube+xml": {"source":"iana"},
  	"application/vnd.geogebra.file": {"source":"iana","extensions":["ggb"]},
  	"application/vnd.geogebra.tool": {"source":"iana","extensions":["ggt"]},
  	"application/vnd.geometry-explorer": {"source":"iana","extensions":["gex","gre"]},
  	"application/vnd.geonext": {"source":"iana","extensions":["gxt"]},
  	"application/vnd.geoplan": {"source":"iana","extensions":["g2w"]},
  	"application/vnd.geospace": {"source":"iana","extensions":["g3w"]},
  	"application/vnd.gerber": {"source":"iana"},
  	"application/vnd.globalplatform.card-content-mgt": {"source":"iana"},
  	"application/vnd.globalplatform.card-content-mgt-response": {"source":"iana"},
  	"application/vnd.gmx": {"source":"iana","extensions":["gmx"]},
  	"application/vnd.google-apps.document": {"compressible":false,"extensions":["gdoc"]},
  	"application/vnd.google-apps.presentation": {"compressible":false,"extensions":["gslides"]},
  	"application/vnd.google-apps.spreadsheet": {"compressible":false,"extensions":["gsheet"]},
  	"application/vnd.google-earth.kml+xml": {"source":"iana","compressible":true,"extensions":["kml"]},
  	"application/vnd.google-earth.kmz": {"source":"iana","compressible":false,"extensions":["kmz"]},
  	"application/vnd.gov.sk.e-form+xml": {"source":"iana"},
  	"application/vnd.gov.sk.e-form+zip": {"source":"iana"},
  	"application/vnd.gov.sk.xmldatacontainer+xml": {"source":"iana"},
  	"application/vnd.grafeq": {"source":"iana","extensions":["gqf","gqs"]},
  	"application/vnd.gridmp": {"source":"iana"},
  	"application/vnd.groove-account": {"source":"iana","extensions":["gac"]},
  	"application/vnd.groove-help": {"source":"iana","extensions":["ghf"]},
  	"application/vnd.groove-identity-message": {"source":"iana","extensions":["gim"]},
  	"application/vnd.groove-injector": {"source":"iana","extensions":["grv"]},
  	"application/vnd.groove-tool-message": {"source":"iana","extensions":["gtm"]},
  	"application/vnd.groove-tool-template": {"source":"iana","extensions":["tpl"]},
  	"application/vnd.groove-vcard": {"source":"iana","extensions":["vcg"]},
  	"application/vnd.hal+json": {"source":"iana","compressible":true},
  	"application/vnd.hal+xml": {"source":"iana","extensions":["hal"]},
  	"application/vnd.handheld-entertainment+xml": {"source":"iana","extensions":["zmm"]},
  	"application/vnd.hbci": {"source":"iana","extensions":["hbci"]},
  	"application/vnd.hc+json": {"source":"iana","compressible":true},
  	"application/vnd.hcl-bireports": {"source":"iana"},
  	"application/vnd.hdt": {"source":"iana"},
  	"application/vnd.heroku+json": {"source":"iana","compressible":true},
  	"application/vnd.hhe.lesson-player": {"source":"iana","extensions":["les"]},
  	"application/vnd.hp-hpgl": {"source":"iana","extensions":["hpgl"]},
  	"application/vnd.hp-hpid": {"source":"iana","extensions":["hpid"]},
  	"application/vnd.hp-hps": {"source":"iana","extensions":["hps"]},
  	"application/vnd.hp-jlyt": {"source":"iana","extensions":["jlt"]},
  	"application/vnd.hp-pcl": {"source":"iana","extensions":["pcl"]},
  	"application/vnd.hp-pclxl": {"source":"iana","extensions":["pclxl"]},
  	"application/vnd.httphone": {"source":"iana"},
  	"application/vnd.hydrostatix.sof-data": {"source":"iana","extensions":["sfd-hdstx"]},
  	"application/vnd.hyper-item+json": {"source":"iana","compressible":true},
  	"application/vnd.hyperdrive+json": {"source":"iana","compressible":true},
  	"application/vnd.hzn-3d-crossword": {"source":"iana"},
  	"application/vnd.ibm.afplinedata": {"source":"iana"},
  	"application/vnd.ibm.electronic-media": {"source":"iana"},
  	"application/vnd.ibm.minipay": {"source":"iana","extensions":["mpy"]},
  	"application/vnd.ibm.modcap": {"source":"iana","extensions":["afp","listafp","list3820"]},
  	"application/vnd.ibm.rights-management": {"source":"iana","extensions":["irm"]},
  	"application/vnd.ibm.secure-container": {"source":"iana","extensions":["sc"]},
  	"application/vnd.iccprofile": {"source":"iana","extensions":["icc","icm"]},
  	"application/vnd.ieee.1905": {"source":"iana"},
  	"application/vnd.igloader": {"source":"iana","extensions":["igl"]},
  	"application/vnd.imagemeter.folder+zip": {"source":"iana"},
  	"application/vnd.imagemeter.image+zip": {"source":"iana"},
  	"application/vnd.immervision-ivp": {"source":"iana","extensions":["ivp"]},
  	"application/vnd.immervision-ivu": {"source":"iana","extensions":["ivu"]},
  	"application/vnd.ims.imsccv1p1": {"source":"iana"},
  	"application/vnd.ims.imsccv1p2": {"source":"iana"},
  	"application/vnd.ims.imsccv1p3": {"source":"iana"},
  	"application/vnd.ims.lis.v2.result+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolconsumerprofile+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolproxy+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolproxy.id+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolsettings+json": {"source":"iana","compressible":true},
  	"application/vnd.ims.lti.v2.toolsettings.simple+json": {"source":"iana","compressible":true},
  	"application/vnd.informedcontrol.rms+xml": {"source":"iana"},
  	"application/vnd.informix-visionary": {"source":"iana"},
  	"application/vnd.infotech.project": {"source":"iana"},
  	"application/vnd.infotech.project+xml": {"source":"iana"},
  	"application/vnd.innopath.wamp.notification": {"source":"iana"},
  	"application/vnd.insors.igm": {"source":"iana","extensions":["igm"]},
  	"application/vnd.intercon.formnet": {"source":"iana","extensions":["xpw","xpx"]},
  	"application/vnd.intergeo": {"source":"iana","extensions":["i2g"]},
  	"application/vnd.intertrust.digibox": {"source":"iana"},
  	"application/vnd.intertrust.nncp": {"source":"iana"},
  	"application/vnd.intu.qbo": {"source":"iana","extensions":["qbo"]},
  	"application/vnd.intu.qfx": {"source":"iana","extensions":["qfx"]},
  	"application/vnd.iptc.g2.catalogitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.conceptitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.knowledgeitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.newsitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.newsmessage+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.packageitem+xml": {"source":"iana"},
  	"application/vnd.iptc.g2.planningitem+xml": {"source":"iana"},
  	"application/vnd.ipunplugged.rcprofile": {"source":"iana","extensions":["rcprofile"]},
  	"application/vnd.irepository.package+xml": {"source":"iana","extensions":["irp"]},
  	"application/vnd.is-xpr": {"source":"iana","extensions":["xpr"]},
  	"application/vnd.isac.fcs": {"source":"iana","extensions":["fcs"]},
  	"application/vnd.jam": {"source":"iana","extensions":["jam"]},
  	"application/vnd.japannet-directory-service": {"source":"iana"},
  	"application/vnd.japannet-jpnstore-wakeup": {"source":"iana"},
  	"application/vnd.japannet-payment-wakeup": {"source":"iana"},
  	"application/vnd.japannet-registration": {"source":"iana"},
  	"application/vnd.japannet-registration-wakeup": {"source":"iana"},
  	"application/vnd.japannet-setstore-wakeup": {"source":"iana"},
  	"application/vnd.japannet-verification": {"source":"iana"},
  	"application/vnd.japannet-verification-wakeup": {"source":"iana"},
  	"application/vnd.jcp.javame.midlet-rms": {"source":"iana","extensions":["rms"]},
  	"application/vnd.jisp": {"source":"iana","extensions":["jisp"]},
  	"application/vnd.joost.joda-archive": {"source":"iana","extensions":["joda"]},
  	"application/vnd.jsk.isdn-ngn": {"source":"iana"},
  	"application/vnd.kahootz": {"source":"iana","extensions":["ktz","ktr"]},
  	"application/vnd.kde.karbon": {"source":"iana","extensions":["karbon"]},
  	"application/vnd.kde.kchart": {"source":"iana","extensions":["chrt"]},
  	"application/vnd.kde.kformula": {"source":"iana","extensions":["kfo"]},
  	"application/vnd.kde.kivio": {"source":"iana","extensions":["flw"]},
  	"application/vnd.kde.kontour": {"source":"iana","extensions":["kon"]},
  	"application/vnd.kde.kpresenter": {"source":"iana","extensions":["kpr","kpt"]},
  	"application/vnd.kde.kspread": {"source":"iana","extensions":["ksp"]},
  	"application/vnd.kde.kword": {"source":"iana","extensions":["kwd","kwt"]},
  	"application/vnd.kenameaapp": {"source":"iana","extensions":["htke"]},
  	"application/vnd.kidspiration": {"source":"iana","extensions":["kia"]},
  	"application/vnd.kinar": {"source":"iana","extensions":["kne","knp"]},
  	"application/vnd.koan": {"source":"iana","extensions":["skp","skd","skt","skm"]},
  	"application/vnd.kodak-descriptor": {"source":"iana","extensions":["sse"]},
  	"application/vnd.las.las+json": {"source":"iana","compressible":true},
  	"application/vnd.las.las+xml": {"source":"iana","extensions":["lasxml"]},
  	"application/vnd.liberty-request+xml": {"source":"iana"},
  	"application/vnd.llamagraphics.life-balance.desktop": {"source":"iana","extensions":["lbd"]},
  	"application/vnd.llamagraphics.life-balance.exchange+xml": {"source":"iana","extensions":["lbe"]},
  	"application/vnd.lotus-1-2-3": {"source":"iana","extensions":["123"]},
  	"application/vnd.lotus-approach": {"source":"iana","extensions":["apr"]},
  	"application/vnd.lotus-freelance": {"source":"iana","extensions":["pre"]},
  	"application/vnd.lotus-notes": {"source":"iana","extensions":["nsf"]},
  	"application/vnd.lotus-organizer": {"source":"iana","extensions":["org"]},
  	"application/vnd.lotus-screencam": {"source":"iana","extensions":["scm"]},
  	"application/vnd.lotus-wordpro": {"source":"iana","extensions":["lwp"]},
  	"application/vnd.macports.portpkg": {"source":"iana","extensions":["portpkg"]},
  	"application/vnd.mapbox-vector-tile": {"source":"iana"},
  	"application/vnd.marlin.drm.actiontoken+xml": {"source":"iana"},
  	"application/vnd.marlin.drm.conftoken+xml": {"source":"iana"},
  	"application/vnd.marlin.drm.license+xml": {"source":"iana"},
  	"application/vnd.marlin.drm.mdcf": {"source":"iana"},
  	"application/vnd.mason+json": {"source":"iana","compressible":true},
  	"application/vnd.maxmind.maxmind-db": {"source":"iana"},
  	"application/vnd.mcd": {"source":"iana","extensions":["mcd"]},
  	"application/vnd.medcalcdata": {"source":"iana","extensions":["mc1"]},
  	"application/vnd.mediastation.cdkey": {"source":"iana","extensions":["cdkey"]},
  	"application/vnd.meridian-slingshot": {"source":"iana"},
  	"application/vnd.mfer": {"source":"iana","extensions":["mwf"]},
  	"application/vnd.mfmp": {"source":"iana","extensions":["mfm"]},
  	"application/vnd.micro+json": {"source":"iana","compressible":true},
  	"application/vnd.micrografx.flo": {"source":"iana","extensions":["flo"]},
  	"application/vnd.micrografx.igx": {"source":"iana","extensions":["igx"]},
  	"application/vnd.microsoft.portable-executable": {"source":"iana"},
  	"application/vnd.microsoft.windows.thumbnail-cache": {"source":"iana"},
  	"application/vnd.miele+json": {"source":"iana","compressible":true},
  	"application/vnd.mif": {"source":"iana","extensions":["mif"]},
  	"application/vnd.minisoft-hp3000-save": {"source":"iana"},
  	"application/vnd.mitsubishi.misty-guard.trustweb": {"source":"iana"},
  	"application/vnd.mobius.daf": {"source":"iana","extensions":["daf"]},
  	"application/vnd.mobius.dis": {"source":"iana","extensions":["dis"]},
  	"application/vnd.mobius.mbk": {"source":"iana","extensions":["mbk"]},
  	"application/vnd.mobius.mqy": {"source":"iana","extensions":["mqy"]},
  	"application/vnd.mobius.msl": {"source":"iana","extensions":["msl"]},
  	"application/vnd.mobius.plc": {"source":"iana","extensions":["plc"]},
  	"application/vnd.mobius.txf": {"source":"iana","extensions":["txf"]},
  	"application/vnd.mophun.application": {"source":"iana","extensions":["mpn"]},
  	"application/vnd.mophun.certificate": {"source":"iana","extensions":["mpc"]},
  	"application/vnd.motorola.flexsuite": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.adsi": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.fis": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.gotap": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.kmr": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.ttc": {"source":"iana"},
  	"application/vnd.motorola.flexsuite.wem": {"source":"iana"},
  	"application/vnd.motorola.iprm": {"source":"iana"},
  	"application/vnd.mozilla.xul+xml": {"source":"iana","compressible":true,"extensions":["xul"]},
  	"application/vnd.ms-3mfdocument": {"source":"iana"},
  	"application/vnd.ms-artgalry": {"source":"iana","extensions":["cil"]},
  	"application/vnd.ms-asf": {"source":"iana"},
  	"application/vnd.ms-cab-compressed": {"source":"iana","extensions":["cab"]},
  	"application/vnd.ms-color.iccprofile": {"source":"apache"},
  	"application/vnd.ms-excel": {"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},
  	"application/vnd.ms-excel.addin.macroenabled.12": {"source":"iana","extensions":["xlam"]},
  	"application/vnd.ms-excel.sheet.binary.macroenabled.12": {"source":"iana","extensions":["xlsb"]},
  	"application/vnd.ms-excel.sheet.macroenabled.12": {"source":"iana","extensions":["xlsm"]},
  	"application/vnd.ms-excel.template.macroenabled.12": {"source":"iana","extensions":["xltm"]},
  	"application/vnd.ms-fontobject": {"source":"iana","compressible":true,"extensions":["eot"]},
  	"application/vnd.ms-htmlhelp": {"source":"iana","extensions":["chm"]},
  	"application/vnd.ms-ims": {"source":"iana","extensions":["ims"]},
  	"application/vnd.ms-lrm": {"source":"iana","extensions":["lrm"]},
  	"application/vnd.ms-office.activex+xml": {"source":"iana"},
  	"application/vnd.ms-officetheme": {"source":"iana","extensions":["thmx"]},
  	"application/vnd.ms-opentype": {"source":"apache","compressible":true},
  	"application/vnd.ms-outlook": {"compressible":false,"extensions":["msg"]},
  	"application/vnd.ms-package.obfuscated-opentype": {"source":"apache"},
  	"application/vnd.ms-pki.seccat": {"source":"apache","extensions":["cat"]},
  	"application/vnd.ms-pki.stl": {"source":"apache","extensions":["stl"]},
  	"application/vnd.ms-playready.initiator+xml": {"source":"iana"},
  	"application/vnd.ms-powerpoint": {"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},
  	"application/vnd.ms-powerpoint.addin.macroenabled.12": {"source":"iana","extensions":["ppam"]},
  	"application/vnd.ms-powerpoint.presentation.macroenabled.12": {"source":"iana","extensions":["pptm"]},
  	"application/vnd.ms-powerpoint.slide.macroenabled.12": {"source":"iana","extensions":["sldm"]},
  	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {"source":"iana","extensions":["ppsm"]},
  	"application/vnd.ms-powerpoint.template.macroenabled.12": {"source":"iana","extensions":["potm"]},
  	"application/vnd.ms-printdevicecapabilities+xml": {"source":"iana"},
  	"application/vnd.ms-printing.printticket+xml": {"source":"apache"},
  	"application/vnd.ms-printschematicket+xml": {"source":"iana"},
  	"application/vnd.ms-project": {"source":"iana","extensions":["mpp","mpt"]},
  	"application/vnd.ms-tnef": {"source":"iana"},
  	"application/vnd.ms-windows.devicepairing": {"source":"iana"},
  	"application/vnd.ms-windows.nwprinting.oob": {"source":"iana"},
  	"application/vnd.ms-windows.printerpairing": {"source":"iana"},
  	"application/vnd.ms-windows.wsd.oob": {"source":"iana"},
  	"application/vnd.ms-wmdrm.lic-chlg-req": {"source":"iana"},
  	"application/vnd.ms-wmdrm.lic-resp": {"source":"iana"},
  	"application/vnd.ms-wmdrm.meter-chlg-req": {"source":"iana"},
  	"application/vnd.ms-wmdrm.meter-resp": {"source":"iana"},
  	"application/vnd.ms-word.document.macroenabled.12": {"source":"iana","extensions":["docm"]},
  	"application/vnd.ms-word.template.macroenabled.12": {"source":"iana","extensions":["dotm"]},
  	"application/vnd.ms-works": {"source":"iana","extensions":["wps","wks","wcm","wdb"]},
  	"application/vnd.ms-wpl": {"source":"iana","extensions":["wpl"]},
  	"application/vnd.ms-xpsdocument": {"source":"iana","compressible":false,"extensions":["xps"]},
  	"application/vnd.msa-disk-image": {"source":"iana"},
  	"application/vnd.mseq": {"source":"iana","extensions":["mseq"]},
  	"application/vnd.msign": {"source":"iana"},
  	"application/vnd.multiad.creator": {"source":"iana"},
  	"application/vnd.multiad.creator.cif": {"source":"iana"},
  	"application/vnd.music-niff": {"source":"iana"},
  	"application/vnd.musician": {"source":"iana","extensions":["mus"]},
  	"application/vnd.muvee.style": {"source":"iana","extensions":["msty"]},
  	"application/vnd.mynfc": {"source":"iana","extensions":["taglet"]},
  	"application/vnd.ncd.control": {"source":"iana"},
  	"application/vnd.ncd.reference": {"source":"iana"},
  	"application/vnd.nearst.inv+json": {"source":"iana","compressible":true},
  	"application/vnd.nervana": {"source":"iana"},
  	"application/vnd.netfpx": {"source":"iana"},
  	"application/vnd.neurolanguage.nlu": {"source":"iana","extensions":["nlu"]},
  	"application/vnd.nintendo.nitro.rom": {"source":"iana"},
  	"application/vnd.nintendo.snes.rom": {"source":"iana"},
  	"application/vnd.nitf": {"source":"iana","extensions":["ntf","nitf"]},
  	"application/vnd.noblenet-directory": {"source":"iana","extensions":["nnd"]},
  	"application/vnd.noblenet-sealer": {"source":"iana","extensions":["nns"]},
  	"application/vnd.noblenet-web": {"source":"iana","extensions":["nnw"]},
  	"application/vnd.nokia.catalogs": {"source":"iana"},
  	"application/vnd.nokia.conml+wbxml": {"source":"iana"},
  	"application/vnd.nokia.conml+xml": {"source":"iana"},
  	"application/vnd.nokia.iptv.config+xml": {"source":"iana"},
  	"application/vnd.nokia.isds-radio-presets": {"source":"iana"},
  	"application/vnd.nokia.landmark+wbxml": {"source":"iana"},
  	"application/vnd.nokia.landmark+xml": {"source":"iana"},
  	"application/vnd.nokia.landmarkcollection+xml": {"source":"iana"},
  	"application/vnd.nokia.n-gage.ac+xml": {"source":"iana"},
  	"application/vnd.nokia.n-gage.data": {"source":"iana","extensions":["ngdat"]},
  	"application/vnd.nokia.n-gage.symbian.install": {"source":"iana","extensions":["n-gage"]},
  	"application/vnd.nokia.ncd": {"source":"iana"},
  	"application/vnd.nokia.pcd+wbxml": {"source":"iana"},
  	"application/vnd.nokia.pcd+xml": {"source":"iana"},
  	"application/vnd.nokia.radio-preset": {"source":"iana","extensions":["rpst"]},
  	"application/vnd.nokia.radio-presets": {"source":"iana","extensions":["rpss"]},
  	"application/vnd.novadigm.edm": {"source":"iana","extensions":["edm"]},
  	"application/vnd.novadigm.edx": {"source":"iana","extensions":["edx"]},
  	"application/vnd.novadigm.ext": {"source":"iana","extensions":["ext"]},
  	"application/vnd.ntt-local.content-share": {"source":"iana"},
  	"application/vnd.ntt-local.file-transfer": {"source":"iana"},
  	"application/vnd.ntt-local.ogw_remote-access": {"source":"iana"},
  	"application/vnd.ntt-local.sip-ta_remote": {"source":"iana"},
  	"application/vnd.ntt-local.sip-ta_tcp_stream": {"source":"iana"},
  	"application/vnd.oasis.opendocument.chart": {"source":"iana","extensions":["odc"]},
  	"application/vnd.oasis.opendocument.chart-template": {"source":"iana","extensions":["otc"]},
  	"application/vnd.oasis.opendocument.database": {"source":"iana","extensions":["odb"]},
  	"application/vnd.oasis.opendocument.formula": {"source":"iana","extensions":["odf"]},
  	"application/vnd.oasis.opendocument.formula-template": {"source":"iana","extensions":["odft"]},
  	"application/vnd.oasis.opendocument.graphics": {"source":"iana","compressible":false,"extensions":["odg"]},
  	"application/vnd.oasis.opendocument.graphics-template": {"source":"iana","extensions":["otg"]},
  	"application/vnd.oasis.opendocument.image": {"source":"iana","extensions":["odi"]},
  	"application/vnd.oasis.opendocument.image-template": {"source":"iana","extensions":["oti"]},
  	"application/vnd.oasis.opendocument.presentation": {"source":"iana","compressible":false,"extensions":["odp"]},
  	"application/vnd.oasis.opendocument.presentation-template": {"source":"iana","extensions":["otp"]},
  	"application/vnd.oasis.opendocument.spreadsheet": {"source":"iana","compressible":false,"extensions":["ods"]},
  	"application/vnd.oasis.opendocument.spreadsheet-template": {"source":"iana","extensions":["ots"]},
  	"application/vnd.oasis.opendocument.text": {"source":"iana","compressible":false,"extensions":["odt"]},
  	"application/vnd.oasis.opendocument.text-master": {"source":"iana","extensions":["odm"]},
  	"application/vnd.oasis.opendocument.text-template": {"source":"iana","extensions":["ott"]},
  	"application/vnd.oasis.opendocument.text-web": {"source":"iana","extensions":["oth"]},
  	"application/vnd.obn": {"source":"iana"},
  	"application/vnd.ocf+cbor": {"source":"iana"},
  	"application/vnd.oftn.l10n+json": {"source":"iana","compressible":true},
  	"application/vnd.oipf.contentaccessdownload+xml": {"source":"iana"},
  	"application/vnd.oipf.contentaccessstreaming+xml": {"source":"iana"},
  	"application/vnd.oipf.cspg-hexbinary": {"source":"iana"},
  	"application/vnd.oipf.dae.svg+xml": {"source":"iana"},
  	"application/vnd.oipf.dae.xhtml+xml": {"source":"iana"},
  	"application/vnd.oipf.mippvcontrolmessage+xml": {"source":"iana"},
  	"application/vnd.oipf.pae.gem": {"source":"iana"},
  	"application/vnd.oipf.spdiscovery+xml": {"source":"iana"},
  	"application/vnd.oipf.spdlist+xml": {"source":"iana"},
  	"application/vnd.oipf.ueprofile+xml": {"source":"iana"},
  	"application/vnd.oipf.userprofile+xml": {"source":"iana"},
  	"application/vnd.olpc-sugar": {"source":"iana","extensions":["xo"]},
  	"application/vnd.oma-scws-config": {"source":"iana"},
  	"application/vnd.oma-scws-http-request": {"source":"iana"},
  	"application/vnd.oma-scws-http-response": {"source":"iana"},
  	"application/vnd.oma.bcast.associated-procedure-parameter+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.drm-trigger+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.imd+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.ltkm": {"source":"iana"},
  	"application/vnd.oma.bcast.notification+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.provisioningtrigger": {"source":"iana"},
  	"application/vnd.oma.bcast.sgboot": {"source":"iana"},
  	"application/vnd.oma.bcast.sgdd+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.sgdu": {"source":"iana"},
  	"application/vnd.oma.bcast.simple-symbol-container": {"source":"iana"},
  	"application/vnd.oma.bcast.smartcard-trigger+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.sprov+xml": {"source":"iana"},
  	"application/vnd.oma.bcast.stkm": {"source":"iana"},
  	"application/vnd.oma.cab-address-book+xml": {"source":"iana"},
  	"application/vnd.oma.cab-feature-handler+xml": {"source":"iana"},
  	"application/vnd.oma.cab-pcc+xml": {"source":"iana"},
  	"application/vnd.oma.cab-subs-invite+xml": {"source":"iana"},
  	"application/vnd.oma.cab-user-prefs+xml": {"source":"iana"},
  	"application/vnd.oma.dcd": {"source":"iana"},
  	"application/vnd.oma.dcdc": {"source":"iana"},
  	"application/vnd.oma.dd2+xml": {"source":"iana","extensions":["dd2"]},
  	"application/vnd.oma.drm.risd+xml": {"source":"iana"},
  	"application/vnd.oma.group-usage-list+xml": {"source":"iana"},
  	"application/vnd.oma.lwm2m+json": {"source":"iana","compressible":true},
  	"application/vnd.oma.lwm2m+tlv": {"source":"iana"},
  	"application/vnd.oma.pal+xml": {"source":"iana"},
  	"application/vnd.oma.poc.detailed-progress-report+xml": {"source":"iana"},
  	"application/vnd.oma.poc.final-report+xml": {"source":"iana"},
  	"application/vnd.oma.poc.groups+xml": {"source":"iana"},
  	"application/vnd.oma.poc.invocation-descriptor+xml": {"source":"iana"},
  	"application/vnd.oma.poc.optimized-progress-report+xml": {"source":"iana"},
  	"application/vnd.oma.push": {"source":"iana"},
  	"application/vnd.oma.scidm.messages+xml": {"source":"iana"},
  	"application/vnd.oma.xcap-directory+xml": {"source":"iana"},
  	"application/vnd.omads-email+xml": {"source":"iana"},
  	"application/vnd.omads-file+xml": {"source":"iana"},
  	"application/vnd.omads-folder+xml": {"source":"iana"},
  	"application/vnd.omaloc-supl-init": {"source":"iana"},
  	"application/vnd.onepager": {"source":"iana"},
  	"application/vnd.onepagertamp": {"source":"iana"},
  	"application/vnd.onepagertamx": {"source":"iana"},
  	"application/vnd.onepagertat": {"source":"iana"},
  	"application/vnd.onepagertatp": {"source":"iana"},
  	"application/vnd.onepagertatx": {"source":"iana"},
  	"application/vnd.openblox.game+xml": {"source":"iana"},
  	"application/vnd.openblox.game-binary": {"source":"iana"},
  	"application/vnd.openeye.oeb": {"source":"iana"},
  	"application/vnd.openofficeorg.extension": {"source":"apache","extensions":["oxt"]},
  	"application/vnd.openstreetmap.data+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.custom-properties+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawing+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.extended-properties+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.presentation": {"source":"iana","compressible":false,"extensions":["pptx"]},
  	"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slide": {"source":"iana","extensions":["sldx"]},
  	"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {"source":"iana","extensions":["ppsx"]},
  	"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.template": {"source":"iana","extensions":["potx"]},
  	"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {"source":"iana","compressible":false,"extensions":["xlsx"]},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {"source":"iana","extensions":["xltx"]},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.theme+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.themeoverride+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.vmldrawing": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {"source":"iana","compressible":false,"extensions":["docx"]},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {"source":"iana","extensions":["dotx"]},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-package.core-properties+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {"source":"iana"},
  	"application/vnd.openxmlformats-package.relationships+xml": {"source":"iana"},
  	"application/vnd.oracle.resource+json": {"source":"iana","compressible":true},
  	"application/vnd.orange.indata": {"source":"iana"},
  	"application/vnd.osa.netdeploy": {"source":"iana"},
  	"application/vnd.osgeo.mapguide.package": {"source":"iana","extensions":["mgp"]},
  	"application/vnd.osgi.bundle": {"source":"iana"},
  	"application/vnd.osgi.dp": {"source":"iana","extensions":["dp"]},
  	"application/vnd.osgi.subsystem": {"source":"iana","extensions":["esa"]},
  	"application/vnd.otps.ct-kip+xml": {"source":"iana"},
  	"application/vnd.oxli.countgraph": {"source":"iana"},
  	"application/vnd.pagerduty+json": {"source":"iana","compressible":true},
  	"application/vnd.palm": {"source":"iana","extensions":["pdb","pqa","oprc"]},
  	"application/vnd.panoply": {"source":"iana"},
  	"application/vnd.paos+xml": {"source":"iana"},
  	"application/vnd.paos.xml": {"source":"apache"},
  	"application/vnd.patentdive": {"source":"iana"},
  	"application/vnd.pawaafile": {"source":"iana","extensions":["paw"]},
  	"application/vnd.pcos": {"source":"iana"},
  	"application/vnd.pg.format": {"source":"iana","extensions":["str"]},
  	"application/vnd.pg.osasli": {"source":"iana","extensions":["ei6"]},
  	"application/vnd.piaccess.application-licence": {"source":"iana"},
  	"application/vnd.picsel": {"source":"iana","extensions":["efif"]},
  	"application/vnd.pmi.widget": {"source":"iana","extensions":["wg"]},
  	"application/vnd.poc.group-advertisement+xml": {"source":"iana"},
  	"application/vnd.pocketlearn": {"source":"iana","extensions":["plf"]},
  	"application/vnd.powerbuilder6": {"source":"iana","extensions":["pbd"]},
  	"application/vnd.powerbuilder6-s": {"source":"iana"},
  	"application/vnd.powerbuilder7": {"source":"iana"},
  	"application/vnd.powerbuilder7-s": {"source":"iana"},
  	"application/vnd.powerbuilder75": {"source":"iana"},
  	"application/vnd.powerbuilder75-s": {"source":"iana"},
  	"application/vnd.preminet": {"source":"iana"},
  	"application/vnd.previewsystems.box": {"source":"iana","extensions":["box"]},
  	"application/vnd.proteus.magazine": {"source":"iana","extensions":["mgz"]},
  	"application/vnd.publishare-delta-tree": {"source":"iana","extensions":["qps"]},
  	"application/vnd.pvi.ptid1": {"source":"iana","extensions":["ptid"]},
  	"application/vnd.pwg-multiplexed": {"source":"iana"},
  	"application/vnd.pwg-xhtml-print+xml": {"source":"iana"},
  	"application/vnd.qualcomm.brew-app-res": {"source":"iana"},
  	"application/vnd.quarantainenet": {"source":"iana"},
  	"application/vnd.quark.quarkxpress": {"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},
  	"application/vnd.quobject-quoxdocument": {"source":"iana"},
  	"application/vnd.radisys.moml+xml": {"source":"iana"},
  	"application/vnd.radisys.msml+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit-conf+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit-conn+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit-dialog+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-audit-stream+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-conf+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-base+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-fax-detect+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-group+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-speech+xml": {"source":"iana"},
  	"application/vnd.radisys.msml-dialog-transform+xml": {"source":"iana"},
  	"application/vnd.rainstor.data": {"source":"iana"},
  	"application/vnd.rapid": {"source":"iana"},
  	"application/vnd.rar": {"source":"iana"},
  	"application/vnd.realvnc.bed": {"source":"iana","extensions":["bed"]},
  	"application/vnd.recordare.musicxml": {"source":"iana","extensions":["mxl"]},
  	"application/vnd.recordare.musicxml+xml": {"source":"iana","extensions":["musicxml"]},
  	"application/vnd.renlearn.rlprint": {"source":"iana"},
  	"application/vnd.restful+json": {"source":"iana","compressible":true},
  	"application/vnd.rig.cryptonote": {"source":"iana","extensions":["cryptonote"]},
  	"application/vnd.rim.cod": {"source":"apache","extensions":["cod"]},
  	"application/vnd.rn-realmedia": {"source":"apache","extensions":["rm"]},
  	"application/vnd.rn-realmedia-vbr": {"source":"apache","extensions":["rmvb"]},
  	"application/vnd.route66.link66+xml": {"source":"iana","extensions":["link66"]},
  	"application/vnd.rs-274x": {"source":"iana"},
  	"application/vnd.ruckus.download": {"source":"iana"},
  	"application/vnd.s3sms": {"source":"iana"},
  	"application/vnd.sailingtracker.track": {"source":"iana","extensions":["st"]},
  	"application/vnd.sbm.cid": {"source":"iana"},
  	"application/vnd.sbm.mid2": {"source":"iana"},
  	"application/vnd.scribus": {"source":"iana"},
  	"application/vnd.sealed.3df": {"source":"iana"},
  	"application/vnd.sealed.csf": {"source":"iana"},
  	"application/vnd.sealed.doc": {"source":"iana"},
  	"application/vnd.sealed.eml": {"source":"iana"},
  	"application/vnd.sealed.mht": {"source":"iana"},
  	"application/vnd.sealed.net": {"source":"iana"},
  	"application/vnd.sealed.ppt": {"source":"iana"},
  	"application/vnd.sealed.tiff": {"source":"iana"},
  	"application/vnd.sealed.xls": {"source":"iana"},
  	"application/vnd.sealedmedia.softseal.html": {"source":"iana"},
  	"application/vnd.sealedmedia.softseal.pdf": {"source":"iana"},
  	"application/vnd.seemail": {"source":"iana","extensions":["see"]},
  	"application/vnd.sema": {"source":"iana","extensions":["sema"]},
  	"application/vnd.semd": {"source":"iana","extensions":["semd"]},
  	"application/vnd.semf": {"source":"iana","extensions":["semf"]},
  	"application/vnd.shana.informed.formdata": {"source":"iana","extensions":["ifm"]},
  	"application/vnd.shana.informed.formtemplate": {"source":"iana","extensions":["itp"]},
  	"application/vnd.shana.informed.interchange": {"source":"iana","extensions":["iif"]},
  	"application/vnd.shana.informed.package": {"source":"iana","extensions":["ipk"]},
  	"application/vnd.sigrok.session": {"source":"iana"},
  	"application/vnd.simtech-mindmapper": {"source":"iana","extensions":["twd","twds"]},
  	"application/vnd.siren+json": {"source":"iana","compressible":true},
  	"application/vnd.smaf": {"source":"iana","extensions":["mmf"]},
  	"application/vnd.smart.notebook": {"source":"iana"},
  	"application/vnd.smart.teacher": {"source":"iana","extensions":["teacher"]},
  	"application/vnd.software602.filler.form+xml": {"source":"iana"},
  	"application/vnd.software602.filler.form-xml-zip": {"source":"iana"},
  	"application/vnd.solent.sdkm+xml": {"source":"iana","extensions":["sdkm","sdkd"]},
  	"application/vnd.spotfire.dxp": {"source":"iana","extensions":["dxp"]},
  	"application/vnd.spotfire.sfs": {"source":"iana","extensions":["sfs"]},
  	"application/vnd.sqlite3": {"source":"iana"},
  	"application/vnd.sss-cod": {"source":"iana"},
  	"application/vnd.sss-dtf": {"source":"iana"},
  	"application/vnd.sss-ntf": {"source":"iana"},
  	"application/vnd.stardivision.calc": {"source":"apache","extensions":["sdc"]},
  	"application/vnd.stardivision.draw": {"source":"apache","extensions":["sda"]},
  	"application/vnd.stardivision.impress": {"source":"apache","extensions":["sdd"]},
  	"application/vnd.stardivision.math": {"source":"apache","extensions":["smf"]},
  	"application/vnd.stardivision.writer": {"source":"apache","extensions":["sdw","vor"]},
  	"application/vnd.stardivision.writer-global": {"source":"apache","extensions":["sgl"]},
  	"application/vnd.stepmania.package": {"source":"iana","extensions":["smzip"]},
  	"application/vnd.stepmania.stepchart": {"source":"iana","extensions":["sm"]},
  	"application/vnd.street-stream": {"source":"iana"},
  	"application/vnd.sun.wadl+xml": {"source":"iana","compressible":true,"extensions":["wadl"]},
  	"application/vnd.sun.xml.calc": {"source":"apache","extensions":["sxc"]},
  	"application/vnd.sun.xml.calc.template": {"source":"apache","extensions":["stc"]},
  	"application/vnd.sun.xml.draw": {"source":"apache","extensions":["sxd"]},
  	"application/vnd.sun.xml.draw.template": {"source":"apache","extensions":["std"]},
  	"application/vnd.sun.xml.impress": {"source":"apache","extensions":["sxi"]},
  	"application/vnd.sun.xml.impress.template": {"source":"apache","extensions":["sti"]},
  	"application/vnd.sun.xml.math": {"source":"apache","extensions":["sxm"]},
  	"application/vnd.sun.xml.writer": {"source":"apache","extensions":["sxw"]},
  	"application/vnd.sun.xml.writer.global": {"source":"apache","extensions":["sxg"]},
  	"application/vnd.sun.xml.writer.template": {"source":"apache","extensions":["stw"]},
  	"application/vnd.sus-calendar": {"source":"iana","extensions":["sus","susp"]},
  	"application/vnd.svd": {"source":"iana","extensions":["svd"]},
  	"application/vnd.swiftview-ics": {"source":"iana"},
  	"application/vnd.symbian.install": {"source":"apache","extensions":["sis","sisx"]},
  	"application/vnd.syncml+xml": {"source":"iana","extensions":["xsm"]},
  	"application/vnd.syncml.dm+wbxml": {"source":"iana","extensions":["bdm"]},
  	"application/vnd.syncml.dm+xml": {"source":"iana","extensions":["xdm"]},
  	"application/vnd.syncml.dm.notification": {"source":"iana"},
  	"application/vnd.syncml.dmddf+wbxml": {"source":"iana"},
  	"application/vnd.syncml.dmddf+xml": {"source":"iana"},
  	"application/vnd.syncml.dmtnds+wbxml": {"source":"iana"},
  	"application/vnd.syncml.dmtnds+xml": {"source":"iana"},
  	"application/vnd.syncml.ds.notification": {"source":"iana"},
  	"application/vnd.tableschema+json": {"source":"iana","compressible":true},
  	"application/vnd.tao.intent-module-archive": {"source":"iana","extensions":["tao"]},
  	"application/vnd.tcpdump.pcap": {"source":"iana","extensions":["pcap","cap","dmp"]},
  	"application/vnd.tmd.mediaflex.api+xml": {"source":"iana"},
  	"application/vnd.tml": {"source":"iana"},
  	"application/vnd.tmobile-livetv": {"source":"iana","extensions":["tmo"]},
  	"application/vnd.tri.onesource": {"source":"iana"},
  	"application/vnd.trid.tpt": {"source":"iana","extensions":["tpt"]},
  	"application/vnd.triscape.mxs": {"source":"iana","extensions":["mxs"]},
  	"application/vnd.trueapp": {"source":"iana","extensions":["tra"]},
  	"application/vnd.truedoc": {"source":"iana"},
  	"application/vnd.ubisoft.webplayer": {"source":"iana"},
  	"application/vnd.ufdl": {"source":"iana","extensions":["ufd","ufdl"]},
  	"application/vnd.uiq.theme": {"source":"iana","extensions":["utz"]},
  	"application/vnd.umajin": {"source":"iana","extensions":["umj"]},
  	"application/vnd.unity": {"source":"iana","extensions":["unityweb"]},
  	"application/vnd.uoml+xml": {"source":"iana","extensions":["uoml"]},
  	"application/vnd.uplanet.alert": {"source":"iana"},
  	"application/vnd.uplanet.alert-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.bearer-choice": {"source":"iana"},
  	"application/vnd.uplanet.bearer-choice-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.cacheop": {"source":"iana"},
  	"application/vnd.uplanet.cacheop-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.channel": {"source":"iana"},
  	"application/vnd.uplanet.channel-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.list": {"source":"iana"},
  	"application/vnd.uplanet.list-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.listcmd": {"source":"iana"},
  	"application/vnd.uplanet.listcmd-wbxml": {"source":"iana"},
  	"application/vnd.uplanet.signal": {"source":"iana"},
  	"application/vnd.uri-map": {"source":"iana"},
  	"application/vnd.valve.source.material": {"source":"iana"},
  	"application/vnd.vcx": {"source":"iana","extensions":["vcx"]},
  	"application/vnd.vd-study": {"source":"iana"},
  	"application/vnd.vectorworks": {"source":"iana"},
  	"application/vnd.vel+json": {"source":"iana","compressible":true},
  	"application/vnd.verimatrix.vcas": {"source":"iana"},
  	"application/vnd.vidsoft.vidconference": {"source":"iana"},
  	"application/vnd.visio": {"source":"iana","extensions":["vsd","vst","vss","vsw"]},
  	"application/vnd.visionary": {"source":"iana","extensions":["vis"]},
  	"application/vnd.vividence.scriptfile": {"source":"iana"},
  	"application/vnd.vsf": {"source":"iana","extensions":["vsf"]},
  	"application/vnd.wap.sic": {"source":"iana"},
  	"application/vnd.wap.slc": {"source":"iana"},
  	"application/vnd.wap.wbxml": {"source":"iana","extensions":["wbxml"]},
  	"application/vnd.wap.wmlc": {"source":"iana","extensions":["wmlc"]},
  	"application/vnd.wap.wmlscriptc": {"source":"iana","extensions":["wmlsc"]},
  	"application/vnd.webturbo": {"source":"iana","extensions":["wtb"]},
  	"application/vnd.wfa.p2p": {"source":"iana"},
  	"application/vnd.wfa.wsc": {"source":"iana"},
  	"application/vnd.windows.devicepairing": {"source":"iana"},
  	"application/vnd.wmc": {"source":"iana"},
  	"application/vnd.wmf.bootstrap": {"source":"iana"},
  	"application/vnd.wolfram.mathematica": {"source":"iana"},
  	"application/vnd.wolfram.mathematica.package": {"source":"iana"},
  	"application/vnd.wolfram.player": {"source":"iana","extensions":["nbp"]},
  	"application/vnd.wordperfect": {"source":"iana","extensions":["wpd"]},
  	"application/vnd.wqd": {"source":"iana","extensions":["wqd"]},
  	"application/vnd.wrq-hp3000-labelled": {"source":"iana"},
  	"application/vnd.wt.stf": {"source":"iana","extensions":["stf"]},
  	"application/vnd.wv.csp+wbxml": {"source":"iana"},
  	"application/vnd.wv.csp+xml": {"source":"iana"},
  	"application/vnd.wv.ssp+xml": {"source":"iana"},
  	"application/vnd.xacml+json": {"source":"iana","compressible":true},
  	"application/vnd.xara": {"source":"iana","extensions":["xar"]},
  	"application/vnd.xfdl": {"source":"iana","extensions":["xfdl"]},
  	"application/vnd.xfdl.webform": {"source":"iana"},
  	"application/vnd.xmi+xml": {"source":"iana"},
  	"application/vnd.xmpie.cpkg": {"source":"iana"},
  	"application/vnd.xmpie.dpkg": {"source":"iana"},
  	"application/vnd.xmpie.plan": {"source":"iana"},
  	"application/vnd.xmpie.ppkg": {"source":"iana"},
  	"application/vnd.xmpie.xlim": {"source":"iana"},
  	"application/vnd.yamaha.hv-dic": {"source":"iana","extensions":["hvd"]},
  	"application/vnd.yamaha.hv-script": {"source":"iana","extensions":["hvs"]},
  	"application/vnd.yamaha.hv-voice": {"source":"iana","extensions":["hvp"]},
  	"application/vnd.yamaha.openscoreformat": {"source":"iana","extensions":["osf"]},
  	"application/vnd.yamaha.openscoreformat.osfpvg+xml": {"source":"iana","extensions":["osfpvg"]},
  	"application/vnd.yamaha.remote-setup": {"source":"iana"},
  	"application/vnd.yamaha.smaf-audio": {"source":"iana","extensions":["saf"]},
  	"application/vnd.yamaha.smaf-phrase": {"source":"iana","extensions":["spf"]},
  	"application/vnd.yamaha.through-ngn": {"source":"iana"},
  	"application/vnd.yamaha.tunnel-udpencap": {"source":"iana"},
  	"application/vnd.yaoweme": {"source":"iana"},
  	"application/vnd.yellowriver-custom-menu": {"source":"iana","extensions":["cmp"]},
  	"application/vnd.youtube.yt": {"source":"iana"},
  	"application/vnd.zul": {"source":"iana","extensions":["zir","zirz"]},
  	"application/vnd.zzazz.deck+xml": {"source":"iana","extensions":["zaz"]},
  	"application/voicexml+xml": {"source":"iana","extensions":["vxml"]},
  	"application/voucher-cms+json": {"source":"iana","compressible":true},
  	"application/vq-rtcpxr": {"source":"iana"},
  	"application/wasm": {"compressible":true,"extensions":["wasm"]},
  	"application/watcherinfo+xml": {"source":"iana"},
  	"application/webpush-options+json": {"source":"iana","compressible":true},
  	"application/whoispp-query": {"source":"iana"},
  	"application/whoispp-response": {"source":"iana"},
  	"application/widget": {"source":"iana","extensions":["wgt"]},
  	"application/winhlp": {"source":"apache","extensions":["hlp"]},
  	"application/wita": {"source":"iana"},
  	"application/wordperfect5.1": {"source":"iana"},
  	"application/wsdl+xml": {"source":"iana","extensions":["wsdl"]},
  	"application/wspolicy+xml": {"source":"iana","extensions":["wspolicy"]},
  	"application/x-7z-compressed": {"source":"apache","compressible":false,"extensions":["7z"]},
  	"application/x-abiword": {"source":"apache","extensions":["abw"]},
  	"application/x-ace-compressed": {"source":"apache","extensions":["ace"]},
  	"application/x-amf": {"source":"apache"},
  	"application/x-apple-diskimage": {"source":"apache","extensions":["dmg"]},
  	"application/x-arj": {"compressible":false,"extensions":["arj"]},
  	"application/x-authorware-bin": {"source":"apache","extensions":["aab","x32","u32","vox"]},
  	"application/x-authorware-map": {"source":"apache","extensions":["aam"]},
  	"application/x-authorware-seg": {"source":"apache","extensions":["aas"]},
  	"application/x-bcpio": {"source":"apache","extensions":["bcpio"]},
  	"application/x-bdoc": {"compressible":false,"extensions":["bdoc"]},
  	"application/x-bittorrent": {"source":"apache","extensions":["torrent"]},
  	"application/x-blorb": {"source":"apache","extensions":["blb","blorb"]},
  	"application/x-bzip": {"source":"apache","compressible":false,"extensions":["bz"]},
  	"application/x-bzip2": {"source":"apache","compressible":false,"extensions":["bz2","boz"]},
  	"application/x-cbr": {"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},
  	"application/x-cdlink": {"source":"apache","extensions":["vcd"]},
  	"application/x-cfs-compressed": {"source":"apache","extensions":["cfs"]},
  	"application/x-chat": {"source":"apache","extensions":["chat"]},
  	"application/x-chess-pgn": {"source":"apache","extensions":["pgn"]},
  	"application/x-chrome-extension": {"extensions":["crx"]},
  	"application/x-cocoa": {"source":"nginx","extensions":["cco"]},
  	"application/x-compress": {"source":"apache"},
  	"application/x-conference": {"source":"apache","extensions":["nsc"]},
  	"application/x-cpio": {"source":"apache","extensions":["cpio"]},
  	"application/x-csh": {"source":"apache","extensions":["csh"]},
  	"application/x-deb": {"compressible":false},
  	"application/x-debian-package": {"source":"apache","extensions":["deb","udeb"]},
  	"application/x-dgc-compressed": {"source":"apache","extensions":["dgc"]},
  	"application/x-director": {"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},
  	"application/x-doom": {"source":"apache","extensions":["wad"]},
  	"application/x-dtbncx+xml": {"source":"apache","extensions":["ncx"]},
  	"application/x-dtbook+xml": {"source":"apache","extensions":["dtb"]},
  	"application/x-dtbresource+xml": {"source":"apache","extensions":["res"]},
  	"application/x-dvi": {"source":"apache","compressible":false,"extensions":["dvi"]},
  	"application/x-envoy": {"source":"apache","extensions":["evy"]},
  	"application/x-eva": {"source":"apache","extensions":["eva"]},
  	"application/x-font-bdf": {"source":"apache","extensions":["bdf"]},
  	"application/x-font-dos": {"source":"apache"},
  	"application/x-font-framemaker": {"source":"apache"},
  	"application/x-font-ghostscript": {"source":"apache","extensions":["gsf"]},
  	"application/x-font-libgrx": {"source":"apache"},
  	"application/x-font-linux-psf": {"source":"apache","extensions":["psf"]},
  	"application/x-font-pcf": {"source":"apache","extensions":["pcf"]},
  	"application/x-font-snf": {"source":"apache","extensions":["snf"]},
  	"application/x-font-speedo": {"source":"apache"},
  	"application/x-font-sunos-news": {"source":"apache"},
  	"application/x-font-type1": {"source":"apache","extensions":["pfa","pfb","pfm","afm"]},
  	"application/x-font-vfont": {"source":"apache"},
  	"application/x-freearc": {"source":"apache","extensions":["arc"]},
  	"application/x-futuresplash": {"source":"apache","extensions":["spl"]},
  	"application/x-gca-compressed": {"source":"apache","extensions":["gca"]},
  	"application/x-glulx": {"source":"apache","extensions":["ulx"]},
  	"application/x-gnumeric": {"source":"apache","extensions":["gnumeric"]},
  	"application/x-gramps-xml": {"source":"apache","extensions":["gramps"]},
  	"application/x-gtar": {"source":"apache","extensions":["gtar"]},
  	"application/x-gzip": {"source":"apache"},
  	"application/x-hdf": {"source":"apache","extensions":["hdf"]},
  	"application/x-httpd-php": {"compressible":true,"extensions":["php"]},
  	"application/x-install-instructions": {"source":"apache","extensions":["install"]},
  	"application/x-iso9660-image": {"source":"apache","extensions":["iso"]},
  	"application/x-java-archive-diff": {"source":"nginx","extensions":["jardiff"]},
  	"application/x-java-jnlp-file": {"source":"apache","compressible":false,"extensions":["jnlp"]},
  	"application/x-javascript": {"compressible":true},
  	"application/x-latex": {"source":"apache","compressible":false,"extensions":["latex"]},
  	"application/x-lua-bytecode": {"extensions":["luac"]},
  	"application/x-lzh-compressed": {"source":"apache","extensions":["lzh","lha"]},
  	"application/x-makeself": {"source":"nginx","extensions":["run"]},
  	"application/x-mie": {"source":"apache","extensions":["mie"]},
  	"application/x-mobipocket-ebook": {"source":"apache","extensions":["prc","mobi"]},
  	"application/x-mpegurl": {"compressible":false},
  	"application/x-ms-application": {"source":"apache","extensions":["application"]},
  	"application/x-ms-shortcut": {"source":"apache","extensions":["lnk"]},
  	"application/x-ms-wmd": {"source":"apache","extensions":["wmd"]},
  	"application/x-ms-wmz": {"source":"apache","extensions":["wmz"]},
  	"application/x-ms-xbap": {"source":"apache","extensions":["xbap"]},
  	"application/x-msaccess": {"source":"apache","extensions":["mdb"]},
  	"application/x-msbinder": {"source":"apache","extensions":["obd"]},
  	"application/x-mscardfile": {"source":"apache","extensions":["crd"]},
  	"application/x-msclip": {"source":"apache","extensions":["clp"]},
  	"application/x-msdos-program": {"extensions":["exe"]},
  	"application/x-msdownload": {"source":"apache","extensions":["exe","dll","com","bat","msi"]},
  	"application/x-msmediaview": {"source":"apache","extensions":["mvb","m13","m14"]},
  	"application/x-msmetafile": {"source":"apache","extensions":["wmf","wmz","emf","emz"]},
  	"application/x-msmoney": {"source":"apache","extensions":["mny"]},
  	"application/x-mspublisher": {"source":"apache","extensions":["pub"]},
  	"application/x-msschedule": {"source":"apache","extensions":["scd"]},
  	"application/x-msterminal": {"source":"apache","extensions":["trm"]},
  	"application/x-mswrite": {"source":"apache","extensions":["wri"]},
  	"application/x-netcdf": {"source":"apache","extensions":["nc","cdf"]},
  	"application/x-ns-proxy-autoconfig": {"compressible":true,"extensions":["pac"]},
  	"application/x-nzb": {"source":"apache","extensions":["nzb"]},
  	"application/x-perl": {"source":"nginx","extensions":["pl","pm"]},
  	"application/x-pilot": {"source":"nginx","extensions":["prc","pdb"]},
  	"application/x-pkcs12": {"source":"apache","compressible":false,"extensions":["p12","pfx"]},
  	"application/x-pkcs7-certificates": {"source":"apache","extensions":["p7b","spc"]},
  	"application/x-pkcs7-certreqresp": {"source":"apache","extensions":["p7r"]},
  	"application/x-rar-compressed": {"source":"apache","compressible":false,"extensions":["rar"]},
  	"application/x-redhat-package-manager": {"source":"nginx","extensions":["rpm"]},
  	"application/x-research-info-systems": {"source":"apache","extensions":["ris"]},
  	"application/x-sea": {"source":"nginx","extensions":["sea"]},
  	"application/x-sh": {"source":"apache","compressible":true,"extensions":["sh"]},
  	"application/x-shar": {"source":"apache","extensions":["shar"]},
  	"application/x-shockwave-flash": {"source":"apache","compressible":false,"extensions":["swf"]},
  	"application/x-silverlight-app": {"source":"apache","extensions":["xap"]},
  	"application/x-sql": {"source":"apache","extensions":["sql"]},
  	"application/x-stuffit": {"source":"apache","compressible":false,"extensions":["sit"]},
  	"application/x-stuffitx": {"source":"apache","extensions":["sitx"]},
  	"application/x-subrip": {"source":"apache","extensions":["srt"]},
  	"application/x-sv4cpio": {"source":"apache","extensions":["sv4cpio"]},
  	"application/x-sv4crc": {"source":"apache","extensions":["sv4crc"]},
  	"application/x-t3vm-image": {"source":"apache","extensions":["t3"]},
  	"application/x-tads": {"source":"apache","extensions":["gam"]},
  	"application/x-tar": {"source":"apache","compressible":true,"extensions":["tar"]},
  	"application/x-tcl": {"source":"apache","extensions":["tcl","tk"]},
  	"application/x-tex": {"source":"apache","extensions":["tex"]},
  	"application/x-tex-tfm": {"source":"apache","extensions":["tfm"]},
  	"application/x-texinfo": {"source":"apache","extensions":["texinfo","texi"]},
  	"application/x-tgif": {"source":"apache","extensions":["obj"]},
  	"application/x-ustar": {"source":"apache","extensions":["ustar"]},
  	"application/x-virtualbox-hdd": {"compressible":true,"extensions":["hdd"]},
  	"application/x-virtualbox-ova": {"compressible":true,"extensions":["ova"]},
  	"application/x-virtualbox-ovf": {"compressible":true,"extensions":["ovf"]},
  	"application/x-virtualbox-vbox": {"compressible":true,"extensions":["vbox"]},
  	"application/x-virtualbox-vbox-extpack": {"compressible":false,"extensions":["vbox-extpack"]},
  	"application/x-virtualbox-vdi": {"compressible":true,"extensions":["vdi"]},
  	"application/x-virtualbox-vhd": {"compressible":true,"extensions":["vhd"]},
  	"application/x-virtualbox-vmdk": {"compressible":true,"extensions":["vmdk"]},
  	"application/x-wais-source": {"source":"apache","extensions":["src"]},
  	"application/x-web-app-manifest+json": {"compressible":true,"extensions":["webapp"]},
  	"application/x-www-form-urlencoded": {"source":"iana","compressible":true},
  	"application/x-x509-ca-cert": {"source":"apache","extensions":["der","crt","pem"]},
  	"application/x-xfig": {"source":"apache","extensions":["fig"]},
  	"application/x-xliff+xml": {"source":"apache","extensions":["xlf"]},
  	"application/x-xpinstall": {"source":"apache","compressible":false,"extensions":["xpi"]},
  	"application/x-xz": {"source":"apache","extensions":["xz"]},
  	"application/x-zmachine": {"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},
  	"application/x400-bp": {"source":"iana"},
  	"application/xacml+xml": {"source":"iana"},
  	"application/xaml+xml": {"source":"apache","extensions":["xaml"]},
  	"application/xcap-att+xml": {"source":"iana"},
  	"application/xcap-caps+xml": {"source":"iana"},
  	"application/xcap-diff+xml": {"source":"iana","extensions":["xdf"]},
  	"application/xcap-el+xml": {"source":"iana"},
  	"application/xcap-error+xml": {"source":"iana"},
  	"application/xcap-ns+xml": {"source":"iana"},
  	"application/xcon-conference-info+xml": {"source":"iana"},
  	"application/xcon-conference-info-diff+xml": {"source":"iana"},
  	"application/xenc+xml": {"source":"iana","extensions":["xenc"]},
  	"application/xhtml+xml": {"source":"iana","compressible":true,"extensions":["xhtml","xht"]},
  	"application/xhtml-voice+xml": {"source":"apache"},
  	"application/xml": {"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},
  	"application/xml-dtd": {"source":"iana","compressible":true,"extensions":["dtd"]},
  	"application/xml-external-parsed-entity": {"source":"iana"},
  	"application/xml-patch+xml": {"source":"iana"},
  	"application/xmpp+xml": {"source":"iana"},
  	"application/xop+xml": {"source":"iana","compressible":true,"extensions":["xop"]},
  	"application/xproc+xml": {"source":"apache","extensions":["xpl"]},
  	"application/xslt+xml": {"source":"iana","extensions":["xslt"]},
  	"application/xspf+xml": {"source":"apache","extensions":["xspf"]},
  	"application/xv+xml": {"source":"iana","extensions":["mxml","xhvml","xvml","xvm"]},
  	"application/yang": {"source":"iana","extensions":["yang"]},
  	"application/yang-data+json": {"source":"iana","compressible":true},
  	"application/yang-data+xml": {"source":"iana"},
  	"application/yang-patch+json": {"source":"iana","compressible":true},
  	"application/yang-patch+xml": {"source":"iana"},
  	"application/yin+xml": {"source":"iana","extensions":["yin"]},
  	"application/zip": {"source":"iana","compressible":false,"extensions":["zip"]},
  	"application/zlib": {"source":"iana"},
  	"audio/1d-interleaved-parityfec": {"source":"iana"},
  	"audio/32kadpcm": {"source":"iana"},
  	"audio/3gpp": {"source":"iana","compressible":false,"extensions":["3gpp"]},
  	"audio/3gpp2": {"source":"iana"},
  	"audio/ac3": {"source":"iana"},
  	"audio/adpcm": {"source":"apache","extensions":["adp"]},
  	"audio/amr": {"source":"iana"},
  	"audio/amr-wb": {"source":"iana"},
  	"audio/amr-wb+": {"source":"iana"},
  	"audio/aptx": {"source":"iana"},
  	"audio/asc": {"source":"iana"},
  	"audio/atrac-advanced-lossless": {"source":"iana"},
  	"audio/atrac-x": {"source":"iana"},
  	"audio/atrac3": {"source":"iana"},
  	"audio/basic": {"source":"iana","compressible":false,"extensions":["au","snd"]},
  	"audio/bv16": {"source":"iana"},
  	"audio/bv32": {"source":"iana"},
  	"audio/clearmode": {"source":"iana"},
  	"audio/cn": {"source":"iana"},
  	"audio/dat12": {"source":"iana"},
  	"audio/dls": {"source":"iana"},
  	"audio/dsr-es201108": {"source":"iana"},
  	"audio/dsr-es202050": {"source":"iana"},
  	"audio/dsr-es202211": {"source":"iana"},
  	"audio/dsr-es202212": {"source":"iana"},
  	"audio/dv": {"source":"iana"},
  	"audio/dvi4": {"source":"iana"},
  	"audio/eac3": {"source":"iana"},
  	"audio/encaprtp": {"source":"iana"},
  	"audio/evrc": {"source":"iana"},
  	"audio/evrc-qcp": {"source":"iana"},
  	"audio/evrc0": {"source":"iana"},
  	"audio/evrc1": {"source":"iana"},
  	"audio/evrcb": {"source":"iana"},
  	"audio/evrcb0": {"source":"iana"},
  	"audio/evrcb1": {"source":"iana"},
  	"audio/evrcnw": {"source":"iana"},
  	"audio/evrcnw0": {"source":"iana"},
  	"audio/evrcnw1": {"source":"iana"},
  	"audio/evrcwb": {"source":"iana"},
  	"audio/evrcwb0": {"source":"iana"},
  	"audio/evrcwb1": {"source":"iana"},
  	"audio/evs": {"source":"iana"},
  	"audio/fwdred": {"source":"iana"},
  	"audio/g711-0": {"source":"iana"},
  	"audio/g719": {"source":"iana"},
  	"audio/g722": {"source":"iana"},
  	"audio/g7221": {"source":"iana"},
  	"audio/g723": {"source":"iana"},
  	"audio/g726-16": {"source":"iana"},
  	"audio/g726-24": {"source":"iana"},
  	"audio/g726-32": {"source":"iana"},
  	"audio/g726-40": {"source":"iana"},
  	"audio/g728": {"source":"iana"},
  	"audio/g729": {"source":"iana"},
  	"audio/g7291": {"source":"iana"},
  	"audio/g729d": {"source":"iana"},
  	"audio/g729e": {"source":"iana"},
  	"audio/gsm": {"source":"iana"},
  	"audio/gsm-efr": {"source":"iana"},
  	"audio/gsm-hr-08": {"source":"iana"},
  	"audio/ilbc": {"source":"iana"},
  	"audio/ip-mr_v2.5": {"source":"iana"},
  	"audio/isac": {"source":"apache"},
  	"audio/l16": {"source":"iana"},
  	"audio/l20": {"source":"iana"},
  	"audio/l24": {"source":"iana","compressible":false},
  	"audio/l8": {"source":"iana"},
  	"audio/lpc": {"source":"iana"},
  	"audio/melp": {"source":"iana"},
  	"audio/melp1200": {"source":"iana"},
  	"audio/melp2400": {"source":"iana"},
  	"audio/melp600": {"source":"iana"},
  	"audio/midi": {"source":"apache","extensions":["mid","midi","kar","rmi"]},
  	"audio/mobile-xmf": {"source":"iana"},
  	"audio/mp3": {"compressible":false,"extensions":["mp3"]},
  	"audio/mp4": {"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},
  	"audio/mp4a-latm": {"source":"iana"},
  	"audio/mpa": {"source":"iana"},
  	"audio/mpa-robust": {"source":"iana"},
  	"audio/mpeg": {"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},
  	"audio/mpeg4-generic": {"source":"iana"},
  	"audio/musepack": {"source":"apache"},
  	"audio/ogg": {"source":"iana","compressible":false,"extensions":["oga","ogg","spx"]},
  	"audio/opus": {"source":"iana"},
  	"audio/parityfec": {"source":"iana"},
  	"audio/pcma": {"source":"iana"},
  	"audio/pcma-wb": {"source":"iana"},
  	"audio/pcmu": {"source":"iana"},
  	"audio/pcmu-wb": {"source":"iana"},
  	"audio/prs.sid": {"source":"iana"},
  	"audio/qcelp": {"source":"iana"},
  	"audio/raptorfec": {"source":"iana"},
  	"audio/red": {"source":"iana"},
  	"audio/rtp-enc-aescm128": {"source":"iana"},
  	"audio/rtp-midi": {"source":"iana"},
  	"audio/rtploopback": {"source":"iana"},
  	"audio/rtx": {"source":"iana"},
  	"audio/s3m": {"source":"apache","extensions":["s3m"]},
  	"audio/silk": {"source":"apache","extensions":["sil"]},
  	"audio/smv": {"source":"iana"},
  	"audio/smv-qcp": {"source":"iana"},
  	"audio/smv0": {"source":"iana"},
  	"audio/sp-midi": {"source":"iana"},
  	"audio/speex": {"source":"iana"},
  	"audio/t140c": {"source":"iana"},
  	"audio/t38": {"source":"iana"},
  	"audio/telephone-event": {"source":"iana"},
  	"audio/tone": {"source":"iana"},
  	"audio/uemclip": {"source":"iana"},
  	"audio/ulpfec": {"source":"iana"},
  	"audio/vdvi": {"source":"iana"},
  	"audio/vmr-wb": {"source":"iana"},
  	"audio/vnd.3gpp.iufp": {"source":"iana"},
  	"audio/vnd.4sb": {"source":"iana"},
  	"audio/vnd.audiokoz": {"source":"iana"},
  	"audio/vnd.celp": {"source":"iana"},
  	"audio/vnd.cisco.nse": {"source":"iana"},
  	"audio/vnd.cmles.radio-events": {"source":"iana"},
  	"audio/vnd.cns.anp1": {"source":"iana"},
  	"audio/vnd.cns.inf1": {"source":"iana"},
  	"audio/vnd.dece.audio": {"source":"iana","extensions":["uva","uvva"]},
  	"audio/vnd.digital-winds": {"source":"iana","extensions":["eol"]},
  	"audio/vnd.dlna.adts": {"source":"iana"},
  	"audio/vnd.dolby.heaac.1": {"source":"iana"},
  	"audio/vnd.dolby.heaac.2": {"source":"iana"},
  	"audio/vnd.dolby.mlp": {"source":"iana"},
  	"audio/vnd.dolby.mps": {"source":"iana"},
  	"audio/vnd.dolby.pl2": {"source":"iana"},
  	"audio/vnd.dolby.pl2x": {"source":"iana"},
  	"audio/vnd.dolby.pl2z": {"source":"iana"},
  	"audio/vnd.dolby.pulse.1": {"source":"iana"},
  	"audio/vnd.dra": {"source":"iana","extensions":["dra"]},
  	"audio/vnd.dts": {"source":"iana","extensions":["dts"]},
  	"audio/vnd.dts.hd": {"source":"iana","extensions":["dtshd"]},
  	"audio/vnd.dvb.file": {"source":"iana"},
  	"audio/vnd.everad.plj": {"source":"iana"},
  	"audio/vnd.hns.audio": {"source":"iana"},
  	"audio/vnd.lucent.voice": {"source":"iana","extensions":["lvp"]},
  	"audio/vnd.ms-playready.media.pya": {"source":"iana","extensions":["pya"]},
  	"audio/vnd.nokia.mobile-xmf": {"source":"iana"},
  	"audio/vnd.nortel.vbk": {"source":"iana"},
  	"audio/vnd.nuera.ecelp4800": {"source":"iana","extensions":["ecelp4800"]},
  	"audio/vnd.nuera.ecelp7470": {"source":"iana","extensions":["ecelp7470"]},
  	"audio/vnd.nuera.ecelp9600": {"source":"iana","extensions":["ecelp9600"]},
  	"audio/vnd.octel.sbc": {"source":"iana"},
  	"audio/vnd.presonus.multitrack": {"source":"iana"},
  	"audio/vnd.qcelp": {"source":"iana"},
  	"audio/vnd.rhetorex.32kadpcm": {"source":"iana"},
  	"audio/vnd.rip": {"source":"iana","extensions":["rip"]},
  	"audio/vnd.rn-realaudio": {"compressible":false},
  	"audio/vnd.sealedmedia.softseal.mpeg": {"source":"iana"},
  	"audio/vnd.vmx.cvsd": {"source":"iana"},
  	"audio/vnd.wave": {"compressible":false},
  	"audio/vorbis": {"source":"iana","compressible":false},
  	"audio/vorbis-config": {"source":"iana"},
  	"audio/wav": {"compressible":false,"extensions":["wav"]},
  	"audio/wave": {"compressible":false,"extensions":["wav"]},
  	"audio/webm": {"source":"apache","compressible":false,"extensions":["weba"]},
  	"audio/x-aac": {"source":"apache","compressible":false,"extensions":["aac"]},
  	"audio/x-aiff": {"source":"apache","extensions":["aif","aiff","aifc"]},
  	"audio/x-caf": {"source":"apache","compressible":false,"extensions":["caf"]},
  	"audio/x-flac": {"source":"apache","extensions":["flac"]},
  	"audio/x-m4a": {"source":"nginx","extensions":["m4a"]},
  	"audio/x-matroska": {"source":"apache","extensions":["mka"]},
  	"audio/x-mpegurl": {"source":"apache","extensions":["m3u"]},
  	"audio/x-ms-wax": {"source":"apache","extensions":["wax"]},
  	"audio/x-ms-wma": {"source":"apache","extensions":["wma"]},
  	"audio/x-pn-realaudio": {"source":"apache","extensions":["ram","ra"]},
  	"audio/x-pn-realaudio-plugin": {"source":"apache","extensions":["rmp"]},
  	"audio/x-realaudio": {"source":"nginx","extensions":["ra"]},
  	"audio/x-tta": {"source":"apache"},
  	"audio/x-wav": {"source":"apache","extensions":["wav"]},
  	"audio/xm": {"source":"apache","extensions":["xm"]},
  	"chemical/x-cdx": {"source":"apache","extensions":["cdx"]},
  	"chemical/x-cif": {"source":"apache","extensions":["cif"]},
  	"chemical/x-cmdf": {"source":"apache","extensions":["cmdf"]},
  	"chemical/x-cml": {"source":"apache","extensions":["cml"]},
  	"chemical/x-csml": {"source":"apache","extensions":["csml"]},
  	"chemical/x-pdb": {"source":"apache"},
  	"chemical/x-xyz": {"source":"apache","extensions":["xyz"]},
  	"font/collection": {"source":"iana","extensions":["ttc"]},
  	"font/otf": {"source":"iana","compressible":true,"extensions":["otf"]},
  	"font/sfnt": {"source":"iana"},
  	"font/ttf": {"source":"iana","extensions":["ttf"]},
  	"font/woff": {"source":"iana","extensions":["woff"]},
  	"font/woff2": {"source":"iana","extensions":["woff2"]},
  	"image/aces": {"source":"iana"},
  	"image/apng": {"compressible":false,"extensions":["apng"]},
  	"image/bmp": {"source":"iana","compressible":true,"extensions":["bmp"]},
  	"image/cgm": {"source":"iana","extensions":["cgm"]},
  	"image/dicom-rle": {"source":"iana"},
  	"image/emf": {"source":"iana"},
  	"image/fits": {"source":"iana"},
  	"image/g3fax": {"source":"iana","extensions":["g3"]},
  	"image/gif": {"source":"iana","compressible":false,"extensions":["gif"]},
  	"image/ief": {"source":"iana","extensions":["ief"]},
  	"image/jls": {"source":"iana"},
  	"image/jp2": {"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},
  	"image/jpeg": {"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},
  	"image/jpm": {"source":"iana","compressible":false,"extensions":["jpm"]},
  	"image/jpx": {"source":"iana","compressible":false,"extensions":["jpx","jpf"]},
  	"image/ktx": {"source":"iana","extensions":["ktx"]},
  	"image/naplps": {"source":"iana"},
  	"image/pjpeg": {"compressible":false},
  	"image/png": {"source":"iana","compressible":false,"extensions":["png"]},
  	"image/prs.btif": {"source":"iana","extensions":["btif"]},
  	"image/prs.pti": {"source":"iana"},
  	"image/pwg-raster": {"source":"iana"},
  	"image/sgi": {"source":"apache","extensions":["sgi"]},
  	"image/svg+xml": {"source":"iana","compressible":true,"extensions":["svg","svgz"]},
  	"image/t38": {"source":"iana"},
  	"image/tiff": {"source":"iana","compressible":false,"extensions":["tiff","tif"]},
  	"image/tiff-fx": {"source":"iana"},
  	"image/vnd.adobe.photoshop": {"source":"iana","compressible":true,"extensions":["psd"]},
  	"image/vnd.airzip.accelerator.azv": {"source":"iana"},
  	"image/vnd.cns.inf2": {"source":"iana"},
  	"image/vnd.dece.graphic": {"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},
  	"image/vnd.djvu": {"source":"iana","extensions":["djvu","djv"]},
  	"image/vnd.dvb.subtitle": {"source":"iana","extensions":["sub"]},
  	"image/vnd.dwg": {"source":"iana","extensions":["dwg"]},
  	"image/vnd.dxf": {"source":"iana","extensions":["dxf"]},
  	"image/vnd.fastbidsheet": {"source":"iana","extensions":["fbs"]},
  	"image/vnd.fpx": {"source":"iana","extensions":["fpx"]},
  	"image/vnd.fst": {"source":"iana","extensions":["fst"]},
  	"image/vnd.fujixerox.edmics-mmr": {"source":"iana","extensions":["mmr"]},
  	"image/vnd.fujixerox.edmics-rlc": {"source":"iana","extensions":["rlc"]},
  	"image/vnd.globalgraphics.pgb": {"source":"iana"},
  	"image/vnd.microsoft.icon": {"source":"iana"},
  	"image/vnd.mix": {"source":"iana"},
  	"image/vnd.mozilla.apng": {"source":"iana"},
  	"image/vnd.ms-modi": {"source":"iana","extensions":["mdi"]},
  	"image/vnd.ms-photo": {"source":"apache","extensions":["wdp"]},
  	"image/vnd.net-fpx": {"source":"iana","extensions":["npx"]},
  	"image/vnd.radiance": {"source":"iana"},
  	"image/vnd.sealed.png": {"source":"iana"},
  	"image/vnd.sealedmedia.softseal.gif": {"source":"iana"},
  	"image/vnd.sealedmedia.softseal.jpg": {"source":"iana"},
  	"image/vnd.svf": {"source":"iana"},
  	"image/vnd.tencent.tap": {"source":"iana"},
  	"image/vnd.valve.source.texture": {"source":"iana"},
  	"image/vnd.wap.wbmp": {"source":"iana","extensions":["wbmp"]},
  	"image/vnd.xiff": {"source":"iana","extensions":["xif"]},
  	"image/vnd.zbrush.pcx": {"source":"iana"},
  	"image/webp": {"source":"apache","extensions":["webp"]},
  	"image/wmf": {"source":"iana"},
  	"image/x-3ds": {"source":"apache","extensions":["3ds"]},
  	"image/x-cmu-raster": {"source":"apache","extensions":["ras"]},
  	"image/x-cmx": {"source":"apache","extensions":["cmx"]},
  	"image/x-freehand": {"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},
  	"image/x-icon": {"source":"apache","compressible":true,"extensions":["ico"]},
  	"image/x-jng": {"source":"nginx","extensions":["jng"]},
  	"image/x-mrsid-image": {"source":"apache","extensions":["sid"]},
  	"image/x-ms-bmp": {"source":"nginx","compressible":true,"extensions":["bmp"]},
  	"image/x-pcx": {"source":"apache","extensions":["pcx"]},
  	"image/x-pict": {"source":"apache","extensions":["pic","pct"]},
  	"image/x-portable-anymap": {"source":"apache","extensions":["pnm"]},
  	"image/x-portable-bitmap": {"source":"apache","extensions":["pbm"]},
  	"image/x-portable-graymap": {"source":"apache","extensions":["pgm"]},
  	"image/x-portable-pixmap": {"source":"apache","extensions":["ppm"]},
  	"image/x-rgb": {"source":"apache","extensions":["rgb"]},
  	"image/x-tga": {"source":"apache","extensions":["tga"]},
  	"image/x-xbitmap": {"source":"apache","extensions":["xbm"]},
  	"image/x-xcf": {"compressible":false},
  	"image/x-xpixmap": {"source":"apache","extensions":["xpm"]},
  	"image/x-xwindowdump": {"source":"apache","extensions":["xwd"]},
  	"message/cpim": {"source":"iana"},
  	"message/delivery-status": {"source":"iana"},
  	"message/disposition-notification": {"source":"iana","extensions":["disposition-notification"]},
  	"message/external-body": {"source":"iana"},
  	"message/feedback-report": {"source":"iana"},
  	"message/global": {"source":"iana","extensions":["u8msg"]},
  	"message/global-delivery-status": {"source":"iana","extensions":["u8dsn"]},
  	"message/global-disposition-notification": {"source":"iana","extensions":["u8mdn"]},
  	"message/global-headers": {"source":"iana","extensions":["u8hdr"]},
  	"message/http": {"source":"iana","compressible":false},
  	"message/imdn+xml": {"source":"iana","compressible":true},
  	"message/news": {"source":"iana"},
  	"message/partial": {"source":"iana","compressible":false},
  	"message/rfc822": {"source":"iana","compressible":true,"extensions":["eml","mime"]},
  	"message/s-http": {"source":"iana"},
  	"message/sip": {"source":"iana"},
  	"message/sipfrag": {"source":"iana"},
  	"message/tracking-status": {"source":"iana"},
  	"message/vnd.si.simp": {"source":"iana"},
  	"message/vnd.wfa.wsc": {"source":"iana","extensions":["wsc"]},
  	"model/3mf": {"source":"iana"},
  	"model/gltf+json": {"source":"iana","compressible":true,"extensions":["gltf"]},
  	"model/gltf-binary": {"source":"iana","compressible":true,"extensions":["glb"]},
  	"model/iges": {"source":"iana","compressible":false,"extensions":["igs","iges"]},
  	"model/mesh": {"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},
  	"model/vnd.collada+xml": {"source":"iana","extensions":["dae"]},
  	"model/vnd.dwf": {"source":"iana","extensions":["dwf"]},
  	"model/vnd.flatland.3dml": {"source":"iana"},
  	"model/vnd.gdl": {"source":"iana","extensions":["gdl"]},
  	"model/vnd.gs-gdl": {"source":"apache"},
  	"model/vnd.gs.gdl": {"source":"iana"},
  	"model/vnd.gtw": {"source":"iana","extensions":["gtw"]},
  	"model/vnd.moml+xml": {"source":"iana"},
  	"model/vnd.mts": {"source":"iana","extensions":["mts"]},
  	"model/vnd.opengex": {"source":"iana"},
  	"model/vnd.parasolid.transmit.binary": {"source":"iana"},
  	"model/vnd.parasolid.transmit.text": {"source":"iana"},
  	"model/vnd.rosette.annotated-data-model": {"source":"iana"},
  	"model/vnd.valve.source.compiled-map": {"source":"iana"},
  	"model/vnd.vtu": {"source":"iana","extensions":["vtu"]},
  	"model/vrml": {"source":"iana","compressible":false,"extensions":["wrl","vrml"]},
  	"model/x3d+binary": {"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},
  	"model/x3d+fastinfoset": {"source":"iana"},
  	"model/x3d+vrml": {"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},
  	"model/x3d+xml": {"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},
  	"model/x3d-vrml": {"source":"iana"},
  	"multipart/alternative": {"source":"iana","compressible":false},
  	"multipart/appledouble": {"source":"iana"},
  	"multipart/byteranges": {"source":"iana"},
  	"multipart/digest": {"source":"iana"},
  	"multipart/encrypted": {"source":"iana","compressible":false},
  	"multipart/form-data": {"source":"iana","compressible":false},
  	"multipart/header-set": {"source":"iana"},
  	"multipart/mixed": {"source":"iana","compressible":false},
  	"multipart/multilingual": {"source":"iana"},
  	"multipart/parallel": {"source":"iana"},
  	"multipart/related": {"source":"iana","compressible":false},
  	"multipart/report": {"source":"iana"},
  	"multipart/signed": {"source":"iana","compressible":false},
  	"multipart/vnd.bint.med-plus": {"source":"iana"},
  	"multipart/voice-message": {"source":"iana"},
  	"multipart/x-mixed-replace": {"source":"iana"},
  	"text/1d-interleaved-parityfec": {"source":"iana"},
  	"text/cache-manifest": {"source":"iana","compressible":true,"extensions":["appcache","manifest"]},
  	"text/calendar": {"source":"iana","extensions":["ics","ifb"]},
  	"text/calender": {"compressible":true},
  	"text/cmd": {"compressible":true},
  	"text/coffeescript": {"extensions":["coffee","litcoffee"]},
  	"text/css": {"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},
  	"text/csv": {"source":"iana","compressible":true,"extensions":["csv"]},
  	"text/csv-schema": {"source":"iana"},
  	"text/directory": {"source":"iana"},
  	"text/dns": {"source":"iana"},
  	"text/ecmascript": {"source":"iana"},
  	"text/encaprtp": {"source":"iana"},
  	"text/enriched": {"source":"iana"},
  	"text/fwdred": {"source":"iana"},
  	"text/grammar-ref-list": {"source":"iana"},
  	"text/html": {"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},
  	"text/jade": {"extensions":["jade"]},
  	"text/javascript": {"source":"iana","compressible":true},
  	"text/jcr-cnd": {"source":"iana"},
  	"text/jsx": {"compressible":true,"extensions":["jsx"]},
  	"text/less": {"extensions":["less"]},
  	"text/markdown": {"source":"iana","compressible":true,"extensions":["markdown","md"]},
  	"text/mathml": {"source":"nginx","extensions":["mml"]},
  	"text/mizar": {"source":"iana"},
  	"text/n3": {"source":"iana","compressible":true,"extensions":["n3"]},
  	"text/parameters": {"source":"iana"},
  	"text/parityfec": {"source":"iana"},
  	"text/plain": {"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},
  	"text/provenance-notation": {"source":"iana"},
  	"text/prs.fallenstein.rst": {"source":"iana"},
  	"text/prs.lines.tag": {"source":"iana","extensions":["dsc"]},
  	"text/prs.prop.logic": {"source":"iana"},
  	"text/raptorfec": {"source":"iana"},
  	"text/red": {"source":"iana"},
  	"text/rfc822-headers": {"source":"iana"},
  	"text/richtext": {"source":"iana","compressible":true,"extensions":["rtx"]},
  	"text/rtf": {"source":"iana","compressible":true,"extensions":["rtf"]},
  	"text/rtp-enc-aescm128": {"source":"iana"},
  	"text/rtploopback": {"source":"iana"},
  	"text/rtx": {"source":"iana"},
  	"text/sgml": {"source":"iana","extensions":["sgml","sgm"]},
  	"text/shex": {"extensions":["shex"]},
  	"text/slim": {"extensions":["slim","slm"]},
  	"text/strings": {"source":"iana"},
  	"text/stylus": {"extensions":["stylus","styl"]},
  	"text/t140": {"source":"iana"},
  	"text/tab-separated-values": {"source":"iana","compressible":true,"extensions":["tsv"]},
  	"text/troff": {"source":"iana","extensions":["t","tr","roff","man","me","ms"]},
  	"text/turtle": {"source":"iana","extensions":["ttl"]},
  	"text/ulpfec": {"source":"iana"},
  	"text/uri-list": {"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},
  	"text/vcard": {"source":"iana","compressible":true,"extensions":["vcard"]},
  	"text/vnd.a": {"source":"iana"},
  	"text/vnd.abc": {"source":"iana"},
  	"text/vnd.ascii-art": {"source":"iana"},
  	"text/vnd.curl": {"source":"iana","extensions":["curl"]},
  	"text/vnd.curl.dcurl": {"source":"apache","extensions":["dcurl"]},
  	"text/vnd.curl.mcurl": {"source":"apache","extensions":["mcurl"]},
  	"text/vnd.curl.scurl": {"source":"apache","extensions":["scurl"]},
  	"text/vnd.debian.copyright": {"source":"iana"},
  	"text/vnd.dmclientscript": {"source":"iana"},
  	"text/vnd.dvb.subtitle": {"source":"iana","extensions":["sub"]},
  	"text/vnd.esmertec.theme-descriptor": {"source":"iana"},
  	"text/vnd.fly": {"source":"iana","extensions":["fly"]},
  	"text/vnd.fmi.flexstor": {"source":"iana","extensions":["flx"]},
  	"text/vnd.graphviz": {"source":"iana","extensions":["gv"]},
  	"text/vnd.in3d.3dml": {"source":"iana","extensions":["3dml"]},
  	"text/vnd.in3d.spot": {"source":"iana","extensions":["spot"]},
  	"text/vnd.iptc.newsml": {"source":"iana"},
  	"text/vnd.iptc.nitf": {"source":"iana"},
  	"text/vnd.latex-z": {"source":"iana"},
  	"text/vnd.motorola.reflex": {"source":"iana"},
  	"text/vnd.ms-mediapackage": {"source":"iana"},
  	"text/vnd.net2phone.commcenter.command": {"source":"iana"},
  	"text/vnd.radisys.msml-basic-layout": {"source":"iana"},
  	"text/vnd.si.uricatalogue": {"source":"iana"},
  	"text/vnd.sun.j2me.app-descriptor": {"source":"iana","extensions":["jad"]},
  	"text/vnd.trolltech.linguist": {"source":"iana"},
  	"text/vnd.wap.si": {"source":"iana"},
  	"text/vnd.wap.sl": {"source":"iana"},
  	"text/vnd.wap.wml": {"source":"iana","extensions":["wml"]},
  	"text/vnd.wap.wmlscript": {"source":"iana","extensions":["wmls"]},
  	"text/vtt": {"charset":"UTF-8","compressible":true,"extensions":["vtt"]},
  	"text/x-asm": {"source":"apache","extensions":["s","asm"]},
  	"text/x-c": {"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},
  	"text/x-component": {"source":"nginx","extensions":["htc"]},
  	"text/x-fortran": {"source":"apache","extensions":["f","for","f77","f90"]},
  	"text/x-gwt-rpc": {"compressible":true},
  	"text/x-handlebars-template": {"extensions":["hbs"]},
  	"text/x-java-source": {"source":"apache","extensions":["java"]},
  	"text/x-jquery-tmpl": {"compressible":true},
  	"text/x-lua": {"extensions":["lua"]},
  	"text/x-markdown": {"compressible":true,"extensions":["mkd"]},
  	"text/x-nfo": {"source":"apache","extensions":["nfo"]},
  	"text/x-opml": {"source":"apache","extensions":["opml"]},
  	"text/x-org": {"compressible":true,"extensions":["org"]},
  	"text/x-pascal": {"source":"apache","extensions":["p","pas"]},
  	"text/x-processing": {"compressible":true,"extensions":["pde"]},
  	"text/x-sass": {"extensions":["sass"]},
  	"text/x-scss": {"extensions":["scss"]},
  	"text/x-setext": {"source":"apache","extensions":["etx"]},
  	"text/x-sfv": {"source":"apache","extensions":["sfv"]},
  	"text/x-suse-ymp": {"compressible":true,"extensions":["ymp"]},
  	"text/x-uuencode": {"source":"apache","extensions":["uu"]},
  	"text/x-vcalendar": {"source":"apache","extensions":["vcs"]},
  	"text/x-vcard": {"source":"apache","extensions":["vcf"]},
  	"text/xml": {"source":"iana","compressible":true,"extensions":["xml"]},
  	"text/xml-external-parsed-entity": {"source":"iana"},
  	"text/yaml": {"extensions":["yaml","yml"]},
  	"video/1d-interleaved-parityfec": {"source":"iana"},
  	"video/3gpp": {"source":"iana","extensions":["3gp","3gpp"]},
  	"video/3gpp-tt": {"source":"iana"},
  	"video/3gpp2": {"source":"iana","extensions":["3g2"]},
  	"video/bmpeg": {"source":"iana"},
  	"video/bt656": {"source":"iana"},
  	"video/celb": {"source":"iana"},
  	"video/dv": {"source":"iana"},
  	"video/encaprtp": {"source":"iana"},
  	"video/h261": {"source":"iana","extensions":["h261"]},
  	"video/h263": {"source":"iana","extensions":["h263"]},
  	"video/h263-1998": {"source":"iana"},
  	"video/h263-2000": {"source":"iana"},
  	"video/h264": {"source":"iana","extensions":["h264"]},
  	"video/h264-rcdo": {"source":"iana"},
  	"video/h264-svc": {"source":"iana"},
  	"video/h265": {"source":"iana"},
  	"video/iso.segment": {"source":"iana"},
  	"video/jpeg": {"source":"iana","extensions":["jpgv"]},
  	"video/jpeg2000": {"source":"iana"},
  	"video/jpm": {"source":"apache","extensions":["jpm","jpgm"]},
  	"video/mj2": {"source":"iana","extensions":["mj2","mjp2"]},
  	"video/mp1s": {"source":"iana"},
  	"video/mp2p": {"source":"iana"},
  	"video/mp2t": {"source":"iana","extensions":["ts"]},
  	"video/mp4": {"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},
  	"video/mp4v-es": {"source":"iana"},
  	"video/mpeg": {"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},
  	"video/mpeg4-generic": {"source":"iana"},
  	"video/mpv": {"source":"iana"},
  	"video/nv": {"source":"iana"},
  	"video/ogg": {"source":"iana","compressible":false,"extensions":["ogv"]},
  	"video/parityfec": {"source":"iana"},
  	"video/pointer": {"source":"iana"},
  	"video/quicktime": {"source":"iana","compressible":false,"extensions":["qt","mov"]},
  	"video/raptorfec": {"source":"iana"},
  	"video/raw": {"source":"iana"},
  	"video/rtp-enc-aescm128": {"source":"iana"},
  	"video/rtploopback": {"source":"iana"},
  	"video/rtx": {"source":"iana"},
  	"video/smpte291": {"source":"iana"},
  	"video/smpte292m": {"source":"iana"},
  	"video/ulpfec": {"source":"iana"},
  	"video/vc1": {"source":"iana"},
  	"video/vnd.cctv": {"source":"iana"},
  	"video/vnd.dece.hd": {"source":"iana","extensions":["uvh","uvvh"]},
  	"video/vnd.dece.mobile": {"source":"iana","extensions":["uvm","uvvm"]},
  	"video/vnd.dece.mp4": {"source":"iana"},
  	"video/vnd.dece.pd": {"source":"iana","extensions":["uvp","uvvp"]},
  	"video/vnd.dece.sd": {"source":"iana","extensions":["uvs","uvvs"]},
  	"video/vnd.dece.video": {"source":"iana","extensions":["uvv","uvvv"]},
  	"video/vnd.directv.mpeg": {"source":"iana"},
  	"video/vnd.directv.mpeg-tts": {"source":"iana"},
  	"video/vnd.dlna.mpeg-tts": {"source":"iana"},
  	"video/vnd.dvb.file": {"source":"iana","extensions":["dvb"]},
  	"video/vnd.fvt": {"source":"iana","extensions":["fvt"]},
  	"video/vnd.hns.video": {"source":"iana"},
  	"video/vnd.iptvforum.1dparityfec-1010": {"source":"iana"},
  	"video/vnd.iptvforum.1dparityfec-2005": {"source":"iana"},
  	"video/vnd.iptvforum.2dparityfec-1010": {"source":"iana"},
  	"video/vnd.iptvforum.2dparityfec-2005": {"source":"iana"},
  	"video/vnd.iptvforum.ttsavc": {"source":"iana"},
  	"video/vnd.iptvforum.ttsmpeg2": {"source":"iana"},
  	"video/vnd.motorola.video": {"source":"iana"},
  	"video/vnd.motorola.videop": {"source":"iana"},
  	"video/vnd.mpegurl": {"source":"iana","extensions":["mxu","m4u"]},
  	"video/vnd.ms-playready.media.pyv": {"source":"iana","extensions":["pyv"]},
  	"video/vnd.nokia.interleaved-multimedia": {"source":"iana"},
  	"video/vnd.nokia.mp4vr": {"source":"iana"},
  	"video/vnd.nokia.videovoip": {"source":"iana"},
  	"video/vnd.objectvideo": {"source":"iana"},
  	"video/vnd.radgamettools.bink": {"source":"iana"},
  	"video/vnd.radgamettools.smacker": {"source":"iana"},
  	"video/vnd.sealed.mpeg1": {"source":"iana"},
  	"video/vnd.sealed.mpeg4": {"source":"iana"},
  	"video/vnd.sealed.swf": {"source":"iana"},
  	"video/vnd.sealedmedia.softseal.mov": {"source":"iana"},
  	"video/vnd.uvvu.mp4": {"source":"iana","extensions":["uvu","uvvu"]},
  	"video/vnd.vivo": {"source":"iana","extensions":["viv"]},
  	"video/vp8": {"source":"iana"},
  	"video/webm": {"source":"apache","compressible":false,"extensions":["webm"]},
  	"video/x-f4v": {"source":"apache","extensions":["f4v"]},
  	"video/x-fli": {"source":"apache","extensions":["fli"]},
  	"video/x-flv": {"source":"apache","compressible":false,"extensions":["flv"]},
  	"video/x-m4v": {"source":"apache","extensions":["m4v"]},
  	"video/x-matroska": {"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},
  	"video/x-mng": {"source":"apache","extensions":["mng"]},
  	"video/x-ms-asf": {"source":"apache","extensions":["asf","asx"]},
  	"video/x-ms-vob": {"source":"apache","extensions":["vob"]},
  	"video/x-ms-wm": {"source":"apache","extensions":["wm"]},
  	"video/x-ms-wmv": {"source":"apache","compressible":false,"extensions":["wmv"]},
  	"video/x-ms-wmx": {"source":"apache","extensions":["wmx"]},
  	"video/x-ms-wvx": {"source":"apache","extensions":["wvx"]},
  	"video/x-msvideo": {"source":"apache","extensions":["avi"]},
  	"video/x-sgi-movie": {"source":"apache","extensions":["movie"]},
  	"video/x-smv": {"source":"apache","extensions":["smv"]},
  	"x-conference/x-cooltalk": {"source":"apache","extensions":["ice"]},
  	"x-shader/x-fragment": {"compressible":true},
  	"x-shader/x-vertex": {"compressible":true}
  };

  var db$1 = /*#__PURE__*/Object.freeze({
    default: db
  });

  var require$$0$3 = ( db$1 && db ) || db$1;

  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */

  /**
   * Module exports.
   */

  var mimeDb = require$$0$3;

  var mimeTypes = createCommonjsModule(function (module, exports) {

  /**
   * Module dependencies.
   * @private
   */


  var extname = path.extname;

  /**
   * Module variables.
   * @private
   */

  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;

  /**
   * Module exports.
   * @public
   */

  exports.charset = charset;
  exports.charsets = { lookup: charset };
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);

  // Populate the extensions/types maps
  populateMaps(exports.extensions, exports.types);

  /**
   * Get the default charset for a MIME type.
   *
   * @param {string} type
   * @return {boolean|string}
   */

  function charset (type) {
    if (!type || typeof type !== 'string') {
      return false
    }

    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && mimeDb[match[1].toLowerCase()];

    if (mime && mime.charset) {
      return mime.charset
    }

    // default text/* to utf-8
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return 'UTF-8'
    }

    return false
  }

  /**
   * Create a full Content-Type header given a MIME type or extension.
   *
   * @param {string} str
   * @return {boolean|string}
   */

  function contentType (str) {
    // TODO: should this even be in this module?
    if (!str || typeof str !== 'string') {
      return false
    }

    var mime = str.indexOf('/') === -1
      ? exports.lookup(str)
      : str;

    if (!mime) {
      return false
    }

    // TODO: use content-type or other module
    if (mime.indexOf('charset') === -1) {
      var charset = exports.charset(mime);
      if (charset) mime += '; charset=' + charset.toLowerCase();
    }

    return mime
  }

  /**
   * Get the default extension for a MIME type.
   *
   * @param {string} type
   * @return {boolean|string}
   */

  function extension (type) {
    if (!type || typeof type !== 'string') {
      return false
    }

    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);

    // get extensions
    var exts = match && exports.extensions[match[1].toLowerCase()];

    if (!exts || !exts.length) {
      return false
    }

    return exts[0]
  }

  /**
   * Lookup the MIME type for a file path/extension.
   *
   * @param {string} path
   * @return {boolean|string}
   */

  function lookup (path$$1) {
    if (!path$$1 || typeof path$$1 !== 'string') {
      return false
    }

    // get the extension ("ext" or ".ext" or full path)
    var extension = extname('x.' + path$$1)
      .toLowerCase()
      .substr(1);

    if (!extension) {
      return false
    }

    return exports.types[extension] || false
  }

  /**
   * Populate the extensions and types maps.
   * @private
   */

  function populateMaps (extensions, types) {
    // source preference (least -> most)
    var preference = ['nginx', 'apache', undefined, 'iana'];

    Object.keys(mimeDb).forEach(function forEachMimeType (type) {
      var mime = mimeDb[type];
      var exts = mime.extensions;

      if (!exts || !exts.length) {
        return
      }

      // mime -> extensions
      extensions[type] = exts;

      // extension -> mime
      for (var i = 0; i < exts.length; i++) {
        var extension = exts[i];

        if (types[extension]) {
          var from = preference.indexOf(mimeDb[types[extension]].source);
          var to = preference.indexOf(mime.source);

          if (types[extension] !== 'application/octet-stream' &&
            (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
            // skip the remapping
            continue
          }
        }

        // set the extension -> mime
        types[extension] = type;
      }
    });
  }
  });
  var mimeTypes_1 = mimeTypes.charset;
  var mimeTypes_2 = mimeTypes.charsets;
  var mimeTypes_3 = mimeTypes.contentType;
  var mimeTypes_4 = mimeTypes.extension;
  var mimeTypes_5 = mimeTypes.extensions;
  var mimeTypes_6 = mimeTypes.lookup;
  var mimeTypes_7 = mimeTypes.types;

  var archives = {
  	"windows-amd64": {"archive":"swarm-windows-amd64-1.6.7.exe","binaryMD5":"c2d827dc4553d9b91a7d6c1d5a6140fd","archiveMD5":"059196d21548060a18a12e17cc0ee59a"},
  	"linux-amd64": {"archive":"swarm-linux-amd64-1.6.7","binaryMD5":"85002d79b8ebc2d2f2f10fb198636a81","archiveMD5":"3e8874299ab8c0e3043d70ebb6673879"},
  	"linux-386": {"archive":"swarm-linux-386-1.6.7","binaryMD5":"35bc2ab976f60f96a2cede117e0df19d","archiveMD5":"7868a86c9cbdf8ac7ac2e5682b4ce40f"},
  	"darwin-amd64": {"archive":"swarm-darwin-amd64-1.6.7","binaryMD5":"c499b186645229260dd6ab685dd58f07","archiveMD5":"0794d111e5018eac3b657bcb29851121"},
  	"linux-arm5": {"archive":"swarm-linux-arm5-1.6.7","binaryMD5":"516fcd85246c905529442cd9b689c12f","archiveMD5":"47312708d417cb196b07ba0af1d3abb4"},
  	"linux-arm6": {"archive":"swarm-linux-arm6-1.6.7","binaryMD5":"82ff7bdbe388b4a190f4101c5150d3b4","archiveMD5":"350276de7bb175a15c314cfc4cb7f8fd"},
  	"linux-mips": {"archive":"swarm-linux-mips-1.6.7","binaryMD5":"e1e95280441c0ca35633927792ef5317","archiveMD5":"8fb4b64e94cd73aa718db787b9d4c53e"},
  	"linux-arm7": {"archive":"swarm-linux-arm7-1.6.7","binaryMD5":"bfc0b4d1c86d8a975af052fc7854bdd3","archiveMD5":"4378641d8e1e1fbb947f941c8fca8613"},
  	"linux-arm64": {"archive":"swarm-linux-arm64-1.6.7","binaryMD5":"bbac21a6c6fa8208f67ca4123d3f948a","archiveMD5":"4e503160327c5fbcca0414f17c54e5ee"},
  	"linux-mipsle": {"archive":"swarm-linux-mipsle-1.6.7","binaryMD5":"a82f191b2f9d2c470d0273219c820657","archiveMD5":"3016bdb6d237ae654c0cdf36fe85dc7c"},
  	"windows-386": {"archive":"swarm-windows-386-1.6.7.exe","binaryMD5":"ce0b34640642e58068ae5a359faef102","archiveMD5":"640aede4da08a3a9d8a6ac0434ba7c0f"},
  	"linux-mips64": {"archive":"swarm-linux-mips64-1.6.7","binaryMD5":"9da967664f384817adb5083fd1ffe8f1","archiveMD5":"357a33be470f8f89ba2619957a08deff"},
  	"linux-mips64le": {"archive":"swarm-linux-mips64le-1.6.7","binaryMD5":"ec1abcf7b216e87645ec83954d8344cd","archiveMD5":"a81fd0158190d99813c738ffa4f87627"}
  };

  var archives$1 = /*#__PURE__*/Object.freeze({
    default: archives
  });

  var strictUriEncode = function (str) {
  	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
  		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  	});
  };

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (err) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (getOwnPropertySymbols) {
  			symbols = getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };

  var token = '%[a-f0-9]{2}';
  var singleMatcher = new RegExp(token, 'gi');
  var multiMatcher = new RegExp('(' + token + ')+', 'gi');

  function decodeComponents(components, split) {
  	try {
  		// Try to decode the entire string first
  		return decodeURIComponent(components.join(''));
  	} catch (err) {
  		// Do nothing
  	}

  	if (components.length === 1) {
  		return components;
  	}

  	split = split || 1;

  	// Split the array in 2 parts
  	var left = components.slice(0, split);
  	var right = components.slice(split);

  	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
  }

  function decode$2(input) {
  	try {
  		return decodeURIComponent(input);
  	} catch (err) {
  		var tokens = input.match(singleMatcher);

  		for (var i = 1; i < tokens.length; i++) {
  			input = decodeComponents(tokens, i).join('');

  			tokens = input.match(singleMatcher);
  		}

  		return input;
  	}
  }

  function customDecodeURIComponent(input) {
  	// Keep track of all the replacements and prefill the map with the `BOM`
  	var replaceMap = {
  		'%FE%FF': '\uFFFD\uFFFD',
  		'%FF%FE': '\uFFFD\uFFFD'
  	};

  	var match = multiMatcher.exec(input);
  	while (match) {
  		try {
  			// Decode as big chunks as possible
  			replaceMap[match[0]] = decodeURIComponent(match[0]);
  		} catch (err) {
  			var result = decode$2(match[0]);

  			if (result !== match[0]) {
  				replaceMap[match[0]] = result;
  			}
  		}

  		match = multiMatcher.exec(input);
  	}

  	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
  	replaceMap['%C2'] = '\uFFFD';

  	var entries = Object.keys(replaceMap);

  	for (var i = 0; i < entries.length; i++) {
  		// Replace all decoded components
  		var key = entries[i];
  		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
  	}

  	return input;
  }

  var decodeUriComponent = function (encodedURI) {
  	if (typeof encodedURI !== 'string') {
  		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
  	}

  	try {
  		encodedURI = encodedURI.replace(/\+/g, ' ');

  		// Try the built in decoder first
  		return decodeURIComponent(encodedURI);
  	} catch (err) {
  		// Fallback to a more advanced decoder
  		return customDecodeURIComponent(encodedURI);
  	}
  };

  function encoderForArrayFormat(opts) {
  	switch (opts.arrayFormat) {
  		case 'index':
  			return function (key, value, index) {
  				return value === null ? [
  					encode$2(key, opts),
  					'[',
  					index,
  					']'
  				].join('') : [
  					encode$2(key, opts),
  					'[',
  					encode$2(index, opts),
  					']=',
  					encode$2(value, opts)
  				].join('');
  			};

  		case 'bracket':
  			return function (key, value) {
  				return value === null ? encode$2(key, opts) : [
  					encode$2(key, opts),
  					'[]=',
  					encode$2(value, opts)
  				].join('');
  			};

  		default:
  			return function (key, value) {
  				return value === null ? encode$2(key, opts) : [
  					encode$2(key, opts),
  					'=',
  					encode$2(value, opts)
  				].join('');
  			};
  	}
  }

  function parserForArrayFormat(opts) {
  	var result;

  	switch (opts.arrayFormat) {
  		case 'index':
  			return function (key, value, accumulator) {
  				result = /\[(\d*)\]$/.exec(key);

  				key = key.replace(/\[\d*\]$/, '');

  				if (!result) {
  					accumulator[key] = value;
  					return;
  				}

  				if (accumulator[key] === undefined) {
  					accumulator[key] = {};
  				}

  				accumulator[key][result[1]] = value;
  			};

  		case 'bracket':
  			return function (key, value, accumulator) {
  				result = /(\[\])$/.exec(key);
  				key = key.replace(/\[\]$/, '');

  				if (!result) {
  					accumulator[key] = value;
  					return;
  				} else if (accumulator[key] === undefined) {
  					accumulator[key] = [value];
  					return;
  				}

  				accumulator[key] = [].concat(accumulator[key], value);
  			};

  		default:
  			return function (key, value, accumulator) {
  				if (accumulator[key] === undefined) {
  					accumulator[key] = value;
  					return;
  				}

  				accumulator[key] = [].concat(accumulator[key], value);
  			};
  	}
  }

  function encode$2(value, opts) {
  	if (opts.encode) {
  		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
  	}

  	return value;
  }

  function keysSorter(input) {
  	if (Array.isArray(input)) {
  		return input.sort();
  	} else if (typeof input === 'object') {
  		return keysSorter(Object.keys(input)).sort(function (a, b) {
  			return Number(a) - Number(b);
  		}).map(function (key) {
  			return input[key];
  		});
  	}

  	return input;
  }

  function extract$1(str) {
  	var queryStart = str.indexOf('?');
  	if (queryStart === -1) {
  		return '';
  	}
  	return str.slice(queryStart + 1);
  }

  function parse$3(str, opts) {
  	opts = objectAssign({arrayFormat: 'none'}, opts);

  	var formatter = parserForArrayFormat(opts);

  	// Create an object with no prototype
  	// https://github.com/sindresorhus/query-string/issues/47
  	var ret = Object.create(null);

  	if (typeof str !== 'string') {
  		return ret;
  	}

  	str = str.trim().replace(/^[?#&]/, '');

  	if (!str) {
  		return ret;
  	}

  	str.split('&').forEach(function (param) {
  		var parts = param.replace(/\+/g, ' ').split('=');
  		// Firefox (pre 40) decodes `%3D` to `=`
  		// https://github.com/sindresorhus/query-string/pull/37
  		var key = parts.shift();
  		var val = parts.length > 0 ? parts.join('=') : undefined;

  		// missing `=` should be `null`:
  		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
  		val = val === undefined ? null : decodeUriComponent(val);

  		formatter(decodeUriComponent(key), val, ret);
  	});

  	return Object.keys(ret).sort().reduce(function (result, key) {
  		var val = ret[key];
  		if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
  			// Sort object keys, not values
  			result[key] = keysSorter(val);
  		} else {
  			result[key] = val;
  		}

  		return result;
  	}, Object.create(null));
  }

  var extract_1 = extract$1;
  var parse_1$1 = parse$3;

  var stringify = function (obj, opts) {
  	var defaults = {
  		encode: true,
  		strict: true,
  		arrayFormat: 'none'
  	};

  	opts = objectAssign(defaults, opts);

  	if (opts.sort === false) {
  		opts.sort = function () {};
  	}

  	var formatter = encoderForArrayFormat(opts);

  	return obj ? Object.keys(obj).sort(opts.sort).map(function (key) {
  		var val = obj[key];

  		if (val === undefined) {
  			return '';
  		}

  		if (val === null) {
  			return encode$2(key, opts);
  		}

  		if (Array.isArray(val)) {
  			var result = [];

  			val.slice().forEach(function (val2) {
  				if (val2 === undefined) {
  					return;
  				}

  				result.push(formatter(key, val2, result.length));
  			});

  			return result.join('&');
  		}

  		return encode$2(key, opts) + '=' + encode$2(val, opts);
  	}).filter(function (x) {
  		return x.length > 0;
  	}).join('&') : '';
  };

  var parseUrl = function (str, opts) {
  	return {
  		url: str.split('?')[0] || '',
  		query: parse$3(extract$1(str), opts)
  	};
  };

  var queryString$1 = {
  	extract: extract_1,
  	parse: parse_1$1,
  	stringify: stringify,
  	parseUrl: parseUrl
  };

  var urlSetQuery_1 = urlSetQuery;
  function urlSetQuery (url$$1, query) {
    if (query) {
      // remove optional leading symbols
      query = query.trim().replace(/^(\?|#|&)/, '');

      // don't append empty query
      query = query ? ('?' + query) : query;

      var parts = url$$1.split(/[\?\#]/);
      var start = parts[0];
      if (query && /\:\/\/[^\/]*$/.test(start)) {
        // e.g. http://foo.com -> http://foo.com/
        start = start + '/';
      }
      var match = url$$1.match(/(\#.*)$/);
      url$$1 = start + query;
      if (match) { // add hash back in
        url$$1 = url$$1 + match[0];
      }
    }
    return url$$1
  }

  var ensureHeader_1 = ensureHeader;
  function ensureHeader (headers, key, value) {
    var lower = key.toLowerCase();
    if (!headers[key] && !headers[lower]) {
      headers[key] = value;
    }
  }

  var simpleConcat = function (stream, cb) {
    var chunks = [];
    stream.on('data', function (chunk) {
      chunks.push(chunk);
    });
    stream.once('end', function () {
      if (cb) cb(null, Buffer.concat(chunks));
      cb = null;
    });
    stream.once('error', function (err) {
      if (cb) cb(err);
      cb = null;
    });
  };

  // We define these manually to ensure they're always copied
  // even if they would move up the prototype chain
  // https://nodejs.org/api/http.html#http_class_http_incomingmessage
  const knownProps = [
  	'destroy',
  	'setTimeout',
  	'socket',
  	'headers',
  	'trailers',
  	'rawHeaders',
  	'statusCode',
  	'httpVersion',
  	'httpVersionMinor',
  	'httpVersionMajor',
  	'rawTrailers',
  	'statusMessage'
  ];

  var mimicResponse = (fromStream, toStream) => {
  	const toProps = Object.keys(toStream);
  	const fromProps = new Set(Object.keys(fromStream).concat(knownProps));

  	for (const prop of fromProps) {
  		// Don't overwrite existing properties
  		if (toProps.indexOf(prop) !== -1) {
  			continue;
  		}

  		toStream[prop] = typeof fromStream[prop] === 'function' ? fromStream[prop].bind(fromStream) : fromStream[prop];
  	}
  };

  const PassThrough = require$$0.PassThrough;



  var decompressResponse = response => {
  	// TODO: Use Array#includes when targeting Node.js 6
  	if (['gzip', 'deflate'].indexOf(response.headers['content-encoding']) === -1) {
  		return response;
  	}

  	const unzip = zlib.createUnzip();
  	const stream = new PassThrough();

  	mimicResponse(response, stream);

  	unzip.on('error', err => {
  		if (err.code === 'Z_BUF_ERROR') {
  			stream.end();
  			return;
  		}

  		stream.emit('error', err);
  	});

  	response.pipe(unzip).pipe(stream);

  	return stream;
  };

  var simpleGet_1 = simpleGet;






   // excluded from browser build


  function simpleGet (opts, cb) {
    opts = typeof opts === 'string' ? {url: opts} : Object.assign({}, opts);
    opts.headers = Object.assign({}, opts.headers);
    cb = once_1(cb);

    if (opts.url) parseOptsUrl(opts);
    if (opts.maxRedirects == null) opts.maxRedirects = 10;

    var body;
    if (opts.form) body = typeof opts.form === 'string' ? opts.form : querystring.stringify(opts.form);
    if (opts.body) body = opts.json && !isStream(opts.body) ? JSON.stringify(opts.body) : opts.body;

    if (opts.json) opts.headers.accept = 'application/json';
    if (opts.json && body) opts.headers['content-type'] = 'application/json';
    if (opts.form) opts.headers['content-type'] = 'application/x-www-form-urlencoded';
    if (body && !isStream(body)) opts.headers['content-length'] = Buffer.byteLength(body);
    delete opts.body;
    delete opts.form;

    if (body && !opts.method) opts.method = 'POST';
    if (opts.method) opts.method = opts.method.toUpperCase();

    // Request gzip/deflate
    var customAcceptEncoding = Object.keys(opts.headers).some(function (h) {
      return h.toLowerCase() === 'accept-encoding'
    });
    if (!customAcceptEncoding) opts.headers['accept-encoding'] = 'gzip, deflate';

    // Support http/https urls
    var protocol = opts.protocol === 'https:' ? https : http;
    var req = protocol.request(opts, function (res) {
      // Follow 3xx redirects
      if (res.statusCode >= 300 && res.statusCode < 400 && 'location' in res.headers) {
        opts.url = res.headers.location;
        res.resume(); // Discard response

        if (opts.maxRedirects > 0) {
          opts.maxRedirects -= 1;
          simpleGet(opts, cb);
        } else {
          cb(new Error('too many redirects'));
        }
        return
      }

      var tryUnzip = typeof decompressResponse === 'function' && opts.method !== 'HEAD';
      cb(null, tryUnzip ? decompressResponse(res) : res);
    });
    req.on('timeout', function () {
      req.abort();
      cb(new Error('Request timed out'));
    });
    req.on('error', cb);

    if (body && isStream(body)) body.on('error', cb).pipe(req);
    else req.end(body);

    return req
  }

  simpleGet.concat = function (opts, cb) {
    return simpleGet(opts, function (err, res) {
      if (err) return cb(err)
      simpleConcat(res, function (err, data) {
        if (err) return cb(err)
        if (opts.json) {
          try {
            data = JSON.parse(data.toString());
          } catch (err) {
            return cb(err, res, data)
          }
        }
        cb(null, res, data);
      });
    })
  }

  ;['get', 'post', 'put', 'patch', 'head', 'delete'].forEach(function (method) {
    simpleGet[method] = function (opts, cb) {
      if (typeof opts === 'string') opts = {url: opts};
      opts.method = method.toUpperCase();
      return simpleGet(opts, cb)
    };
  });

  function parseOptsUrl (opts) {
    var loc = url.parse(opts.url);
    if (loc.hostname) opts.hostname = loc.hostname;
    if (loc.port) opts.port = loc.port;
    if (loc.protocol) opts.protocol = loc.protocol;
    if (loc.auth) opts.auth = loc.auth;
    opts.path = loc.path;
    delete opts.url;
  }

  function isStream (obj) { return typeof obj.pipe === 'function' }

  var bufferToArraybuffer = createCommonjsModule(function (module, exports) {
  (function(root) {
    var isArrayBufferSupported = (new Buffer(0)).buffer instanceof ArrayBuffer;

    var bufferToArrayBuffer = isArrayBufferSupported ? bufferToArrayBufferSlice : bufferToArrayBufferCycle;

    function bufferToArrayBufferSlice(buffer$$1) {
      return buffer$$1.buffer.slice(buffer$$1.byteOffset, buffer$$1.byteOffset + buffer$$1.byteLength);
    }

    function bufferToArrayBufferCycle(buffer$$1) {
      var ab = new ArrayBuffer(buffer$$1.length);
      var view = new Uint8Array(ab);
      for (var i = 0; i < buffer$$1.length; ++i) {
        view[i] = buffer$$1[i];
      }
      return ab;
    }

    {
      if ('object' !== 'undefined' && module.exports) {
        exports = module.exports = bufferToArrayBuffer;
      }
      exports.bufferToArrayBuffer = bufferToArrayBuffer;
    }
  })(commonjsGlobal);
  });
  var bufferToArraybuffer_1 = bufferToArraybuffer.bufferToArrayBuffer;

  var normalizeResponse = getResponse;
  function getResponse (opt, resp) {
    if (!resp) return null
    return {
      statusCode: resp.statusCode,
      headers: resp.headers,
      method: opt.method,
      url: opt.url,
      // the XHR object in browser, http response in Node
      rawRequest: resp.rawRequest ? resp.rawRequest : resp
    }
  }

  var timedOut = function (req, time) {
  	if (req.timeoutTimer) {
  		return req;
  	}

  	var delays = isNaN(time) ? time : {socket: time, connect: time};
  	var host = req._headers ? (' to ' + req._headers.host) : '';

  	if (delays.connect !== undefined) {
  		req.timeoutTimer = setTimeout(function timeoutHandler() {
  			req.abort();
  			var e = new Error('Connection timed out on request' + host);
  			e.code = 'ETIMEDOUT';
  			req.emit('error', e);
  		}, delays.connect);
  	}

  	// Clear the connection timeout timer once a socket is assigned to the
  	// request and is connected.
  	req.on('socket', function assign(socket) {
  		// Socket may come from Agent pool and may be already connected.
  		if (!(socket.connecting || socket._connecting)) {
  			connect();
  			return;
  		}

  		socket.once('connect', connect);
  	});

  	function clear() {
  		if (req.timeoutTimer) {
  			clearTimeout(req.timeoutTimer);
  			req.timeoutTimer = null;
  		}
  	}

  	function connect() {
  		clear();

  		if (delays.socket !== undefined) {
  			// Abort the request if there is no activity on the socket for more
  			// than `delays.socket` milliseconds.
  			req.setTimeout(delays.socket, function socketTimeoutHandler() {
  				req.abort();
  				var e = new Error('Socket timed out on request' + host);
  				e.code = 'ESOCKETTIMEDOUT';
  				req.emit('error', e);
  			});
  		}
  	}

  	return req.on('error', clear);
  };

  // supported types
  var responseTypes = [ 'text', 'arraybuffer', 'json' ];

  var request_1 = xhrRequest;
  function xhrRequest (opt, cb) {
    var responseType = opt.responseType;
    if (responseType && responseTypes.indexOf(responseType) === -1) {
      throw new TypeError('invalid responseType for node: ' + responseType)
    }

    // set a default user agent for Node
    ensureHeader_1(opt.headers, 'User-Agent', 'https://github.com/Jam3/xhr-request');
    var req = simpleGet_1.concat(opt, function xhrRequestResult (err, resp, data) {
      if (!err) {
        if (responseType === 'arraybuffer') {
          data = bufferToArraybuffer(data);
        } else if (responseType === 'json') {
          try {
            data = JSON.parse(data.toString());
          } catch (e) {
            err = e;
          }
        } else { // 'text' response
          data = data.toString();
        }
      }

      resp = normalizeResponse(opt, resp);
      if (err) {
        cb(err, null, resp);
      } else {
        cb(null, data, resp);
      }
    });

    if (typeof opt.timeout === 'number' && opt.timeout !== 0) {
      timedOut(req, opt.timeout);
    }

    return req
  }

  // this is replaced in the browser


  var mimeTypeJson = 'application/json';
  var noop = function () {};

  var xhrRequest_1 = xhrRequest$1;
  function xhrRequest$1 (url$$1, opt, cb) {
    if (!url$$1 || typeof url$$1 !== 'string') {
      throw new TypeError('must specify a URL')
    }
    if (typeof opt === 'function') {
      cb = opt;
      opt = {};
    }
    if (cb && typeof cb !== 'function') {
      throw new TypeError('expected cb to be undefined or a function')
    }

    cb = cb || noop;
    opt = opt || {};

    var defaultResponse = opt.json ? 'json' : 'text';
    opt = objectAssign({ responseType: defaultResponse }, opt);

    var headers = opt.headers || {};
    var method = (opt.method || 'GET').toUpperCase();
    var query = opt.query;
    if (query) {
      if (typeof query !== 'string') {
        query = queryString$1.stringify(query);
      }
      url$$1 = urlSetQuery_1(url$$1, query);
    }

    // allow json response
    if (opt.responseType === 'json') {
      ensureHeader_1(headers, 'Accept', mimeTypeJson);
    }

    // if body content is json
    if (opt.json && method !== 'GET' && method !== 'HEAD') {
      ensureHeader_1(headers, 'Content-Type', mimeTypeJson);
      opt.body = JSON.stringify(opt.body);
    }

    opt.method = method;
    opt.url = url$$1;
    opt.headers = headers;
    delete opt.query;
    delete opt.json;

    return request_1(opt, cb)
  }

  var xhrRequestPromise = function (url$$1, options) {
    return new Promise(function (resolve, reject) {
      xhrRequest_1(url$$1, options, function (err, data) {
        if (err) reject(err);
        else resolve(data);
      });
    });
  };

  var at$1 = function at(bytes, index) {
    return parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);
  };

  var random$3 = function random(bytes) {
    var rnd = void 0;
    if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof commonjsRequire !== "undefined") rnd = commonjsRequire("c" + "rypto").randomBytes(bytes);else throw "Safe random numbers not available.";
    var hex = "0x";
    for (var i = 0; i < bytes; ++i) {
      hex += ("00" + rnd[i].toString(16)).slice(-2);
    }return hex;
  };

  var length$1 = function length(a) {
    return (a.length - 2) / 2;
  };

  var flatten$5 = function flatten(a) {
    return "0x" + a.reduce(function (r, s) {
      return r + s.slice(2);
    }, "");
  };

  var slice$3 = function slice(i, j, bs) {
    return "0x" + bs.slice(i * 2 + 2, j * 2 + 2);
  };

  var reverse$2 = function reverse(hex) {
    var rev = "0x";
    for (var i = 0, l = length$1(hex); i < l; ++i) {
      rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
    }
    return rev;
  };

  var pad$2 = function pad(l, hex) {
    return hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));
  };

  var padRight$1 = function padRight(l, hex) {
    return hex.length === l * 2 + 2 ? hex : padRight(l, hex + "0");
  };

  var toArray$3 = function toArray(hex) {
    var arr = [];
    for (var i = 2, l = hex.length; i < l; i += 2) {
      arr.push(parseInt(hex.slice(i, i + 2), 16));
    }return arr;
  };

  var fromArray$1 = function fromArray(arr) {
    var hex = "0x";
    for (var i = 0, l = arr.length; i < l; ++i) {
      var b = arr[i];
      hex += (b < 16 ? "0" : "") + b.toString(16);
    }
    return hex;
  };

  var toUint8Array$1 = function toUint8Array(hex) {
    return new Uint8Array(toArray$3(hex));
  };

  var fromUint8Array$1 = function fromUint8Array(arr) {
    return fromArray$1([].slice.call(arr, 0));
  };

  var fromNumber$2 = function fromNumber(num) {
    var hex = num.toString(16);
    return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
  };

  var toNumber$3 = function toNumber(hex) {
    return parseInt(hex.slice(2), 16);
  };

  var concat$3 = function concat(a, b) {
    return a.concat(b.slice(2));
  };

  var fromNat$1 = function fromNat(bn) {
    return bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);
  };

  var toNat$1 = function toNat(bn) {
    return bn[2] === "0" ? "0x" + bn.slice(3) : bn;
  };

  var fromAscii$1 = function fromAscii(ascii) {
    var hex = "0x";
    for (var i = 0; i < ascii.length; ++i) {
      hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
    }return hex;
  };

  var toAscii$1 = function toAscii(hex) {
    var ascii = "";
    for (var i = 2; i < hex.length; i += 2) {
      ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
    }return ascii;
  };

  // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
  var fromString$2 = function fromString(s) {
    var makeByte = function makeByte(uint8) {
      var b = uint8.toString(16);
      return b.length < 2 ? "0" + b : b;
    };
    var bytes = "0x";
    for (var ci = 0; ci != s.length; ci++) {
      var c = s.charCodeAt(ci);
      if (c < 128) {
        bytes += makeByte(c);
        continue;
      }
      if (c < 2048) {
        bytes += makeByte(c >> 6 | 192);
      } else {
        if (c > 0xd7ff && c < 0xdc00) {
          if (++ci == s.length) return null;
          var c2 = s.charCodeAt(ci);
          if (c2 < 0xdc00 || c2 > 0xdfff) return null;
          c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
          bytes += makeByte(c >> 18 | 240);
          bytes += makeByte(c >> 12 & 63 | 128);
        } else {
          // c <= 0xffff
          bytes += makeByte(c >> 12 | 224);
        }
        bytes += makeByte(c >> 6 & 63 | 128);
      }
      bytes += makeByte(c & 63 | 128);
    }
    return bytes;
  };

  var toString$3 = function toString(bytes) {
    var s = '';
    var i = 0;
    var l = length$1(bytes);
    while (i < l) {
      var c = at$1(bytes, i++);
      if (c > 127) {
        if (c > 191 && c < 224) {
          if (i >= l) return null;
          c = (c & 31) << 6 | at$1(bytes, i) & 63;
        } else if (c > 223 && c < 240) {
          if (i + 1 >= l) return null;
          c = (c & 15) << 12 | (at$1(bytes, i) & 63) << 6 | at$1(bytes, ++i) & 63;
        } else if (c > 239 && c < 248) {
          if (i + 2 >= l) return null;
          c = (c & 7) << 18 | (at$1(bytes, i) & 63) << 12 | (at$1(bytes, ++i) & 63) << 6 | at$1(bytes, ++i) & 63;
        } else return null;
        ++i;
      }
      if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {
        c -= 0x10000;
        s += String.fromCharCode(c >> 10 | 0xd800);
        s += String.fromCharCode(c & 0x3FF | 0xdc00);
      } else return null;
    }
    return s;
  };

  var bytes$2 = {
    random: random$3,
    length: length$1,
    concat: concat$3,
    flatten: flatten$5,
    slice: slice$3,
    reverse: reverse$2,
    pad: pad$2,
    padRight: padRight$1,
    fromAscii: fromAscii$1,
    toAscii: toAscii$1,
    fromString: fromString$2,
    toString: toString$3,
    fromNumber: fromNumber$2,
    toNumber: toNumber$3,
    fromNat: fromNat$1,
    toNat: toNat$1,
    fromArray: fromArray$1,
    toArray: toArray$3,
    fromUint8Array: fromUint8Array$1,
    toUint8Array: toUint8Array$1
  };

  // Thanks https://github.com/axic/swarmhash

  var keccak$2 = hash.keccak256;


  var swarmHashBlock = function swarmHashBlock(length, data) {
    var lengthEncoded = bytes$2.reverse(bytes$2.pad(6, bytes$2.fromNumber(length)));
    var bytes = bytes$2.flatten([lengthEncoded, "0x0000", data]);
    return keccak$2(bytes).slice(2);
  };

  // (Bytes | Uint8Array | String) -> String
  var swarmHash = function swarmHash(data) {
    if (typeof data === "string" && data.slice(0, 2) !== "0x") {
      data = bytes$2.fromString(data);
    } else if (typeof data !== "string" && data.length !== undefined) {
      data = bytes$2.fromUint8Array(data);
    }

    var length = bytes$2.length(data);

    if (length <= 4096) {
      return swarmHashBlock(length, data);
    }

    var maxSize = 4096;
    while (maxSize * (4096 / 32) < length) {
      maxSize *= 4096 / 32;
    }

    var innerNodes = [];
    for (var i = 0; i < length; i += maxSize) {
      var size = maxSize < length - i ? maxSize : length - i;
      innerNodes.push(swarmHash(bytes$2.slice(data, i, i + size)));
    }

    return swarmHashBlock(length, bytes$2.flatten(innerNodes));
  };

  var swarmHash_1 = swarmHash;

  var picker = function picker(type) {
    return function () {
      return new Promise(function (resolve, reject) {
        var fileLoader = function fileLoader(e) {
          var directory = {};
          var totalFiles = e.target.files.length;
          var loadedFiles = 0;
          [].map.call(e.target.files, function (file) {
            var reader = new FileReader();
            reader.onload = function (e) {
              var data = new Uint8Array(e.target.result);
              if (type === "directory") {
                var path$$1 = file.webkitRelativePath;
                directory[path$$1.slice(path$$1.indexOf("/") + 1)] = {
                  type: "text/plain",
                  data: data
                };
                if (++loadedFiles === totalFiles) resolve(directory);
              } else if (type === "file") {
                var _path = file.webkitRelativePath;
                resolve({ "type": mimetype.lookup(_path), "data": data });
              } else {
                resolve(data);
              }
            };
            reader.readAsArrayBuffer(file);
          });
        };

        var fileInput = void 0;
        if (type === "directory") {
          fileInput = document.createElement("input");
          fileInput.addEventListener("change", fileLoader);
          fileInput.type = "file";
          fileInput.webkitdirectory = true;
          fileInput.mozdirectory = true;
          fileInput.msdirectory = true;
          fileInput.odirectory = true;
          fileInput.directory = true;
        } else {
          fileInput = document.createElement("input");
          fileInput.addEventListener("change", fileLoader);
          fileInput.type = "file";
        }
        var mouseEvent = document.createEvent("MouseEvents");
        mouseEvent.initEvent("click", true, false);
        fileInput.dispatchEvent(mouseEvent);
      });
    };
  };

  var pick$2 = {
    data: picker("data"),
    file: picker("file"),
    directory: picker("directory")
  };

  // TODO: this is a temporary fix to hide those libraries from the browser. A
  // slightly better long-term solution would be to split this file into two,
  // separating the functions that are used on Node.js from the functions that
  // are used only on the browser.
  var swarm = function (_ref) {
    var fsp = _ref.fsp,
        files = _ref.files,
        os$$1 = _ref.os,
        path$$1 = _ref.path,
        child_process$$1 = _ref.child_process,
        mimetype = _ref.mimetype,
        defaultArchives = _ref.defaultArchives,
        request = _ref.request,
        downloadUrl = _ref.downloadUrl,
        bytes = _ref.bytes,
        hash = _ref.hash,
        pick = _ref.pick;


    // âˆ€ a . String -> JSON -> Map String a -o Map String a
    //   Inserts a key/val pair in an object impurely.
    var impureInsert = function impureInsert(key) {
      return function (val) {
        return function (map) {
          return map[key] = val, map;
        };
      };
    };

    // String -> JSON -> Map String JSON
    //   Merges an array of keys and an array of vals into an object.
    var toMap = function toMap(keys) {
      return function (vals) {
        var map = {};
        for (var i = 0, l = keys.length; i < l; ++i) {
          map[keys[i]] = vals[i];
        }return map;
      };
    };

    // âˆ€ a . Map String a -> Map String a -> Map String a
    //   Merges two maps into one.
    var merge = function merge(a) {
      return function (b) {
        var map = {};
        for (var key in a) {
          map[key] = a[key];
        }for (var _key in b) {
          map[_key] = b[_key];
        }return map;
      };
    };

    // âˆ€ a . [a] -> [a] -> Bool
    var equals = function equals(a) {
      return function (b) {
        if (a.length !== b.length) {
          return false;
        } else {
          for (var i = 0, l = a.length; i < a; ++i) {
            if (a[i] !== b[i]) return false;
          }
        }
        return true;
      };
    };

    // String -> String -> String
    var rawUrl = function rawUrl(swarmUrl) {
      return function (hash) {
        return swarmUrl + "/bzzr:/" + hash;
      };
    };

    // String -> String -> Promise Uint8Array
    //   Gets the raw contents of a Swarm hash address.
    var downloadData = function downloadData(swarmUrl) {
      return function (hash) {
        return request(rawUrl(swarmUrl)(hash), { responseType: "arraybuffer" }).then(function (arrayBuffer) {
          var uint8Array = new Uint8Array(arrayBuffer);
          var error404 = [52, 48, 52, 32, 112, 97, 103, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10];
          if (equals(uint8Array)(error404)) throw "Error 404.";
          return uint8Array;
        });
      };
    };

    // type Entry = {"type": String, "hash": String}
    // type File = {"type": String, "data": Uint8Array}

    // String -> String -> Promise (Map String Entry)
    //   Solves the manifest of a Swarm address recursively.
    //   Returns a map from full paths to entries.
    var downloadEntries = function downloadEntries(swarmUrl) {
      return function (hash) {
        var search = function search(hash) {
          return function (path$$1) {
            return function (routes) {
              // Formats an entry to the Swarm.js type.
              var format = function format(entry) {
                return {
                  type: entry.contentType,
                  hash: entry.hash };
              };

              // To download a single entry:
              //   if type is bzz-manifest, go deeper
              //   if not, add it to the routing table
              var downloadEntry = function downloadEntry(entry) {
                if (entry.path === undefined) {
                  return Promise.resolve();
                } else {
                  return entry.contentType === "application/bzz-manifest+json" ? search(entry.hash)(path$$1 + entry.path)(routes) : Promise.resolve(impureInsert(path$$1 + entry.path)(format(entry))(routes));
                }
              };

              // Downloads the initial manifest and then each entry.
              return downloadData(swarmUrl)(hash).then(function (text) {
                return JSON.parse(toString(text)).entries;
              }).then(function (entries) {
                return Promise.all(entries.map(downloadEntry));
              }).then(function () {
                return routes;
              });
            };
          };
        };

        return search(hash)("")({});
      };
    };

    // String -> String -> Promise (Map String String)
    //   Same as `downloadEntries`, but returns only hashes (no types).
    var downloadRoutes = function downloadRoutes(swarmUrl) {
      return function (hash) {
        return downloadEntries(swarmUrl)(hash).then(function (entries) {
          return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {
            return entries[route].hash;
          }));
        });
      };
    };

    // String -> String -> Promise (Map String File)
    //   Gets the entire directory tree in a Swarm address.
    //   Returns a promise mapping paths to file contents.
    var downloadDirectory = function downloadDirectory(swarmUrl) {
      return function (hash) {
        return downloadEntries(swarmUrl)(hash).then(function (entries) {
          var paths = Object.keys(entries);
          var hashs = paths.map(function (path$$1) {
            return entries[path$$1].hash;
          });
          var types = paths.map(function (path$$1) {
            return entries[path$$1].type;
          });
          var datas = hashs.map(downloadData(swarmUrl));
          var files = function files(datas) {
            return datas.map(function (data, i) {
              return { type: types[i], data: data };
            });
          };
          return Promise.all(datas).then(function (datas) {
            return toMap(paths)(files(datas));
          });
        });
      };
    };

    // String -> String -> String -> Promise String
    //   Gets the raw contents of a Swarm hash address.
    //   Returns a promise with the downloaded file path.
    var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {
      return function (hash) {
        return function (filePath) {
          return files.download(rawUrl(swarmUrl)(hash))(filePath);
        };
      };
    };

    // String -> String -> String -> Promise (Map String String)
    //   Gets the entire directory tree in a Swarm address.
    //   Returns a promise mapping paths to file contents.
    var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {
      return function (hash) {
        return function (dirPath) {
          return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {
            var downloads = [];
            for (var route in routingTable) {
              if (route.length > 0) {
                var filePath = path$$1.join(dirPath, route);
                downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));
              }          }          return Promise.all(downloads).then(function () {
              return dirPath;
            });
          });
        };
      };
    };

    // String -> Uint8Array -> Promise String
    //   Uploads raw data to Swarm.
    //   Returns a promise with the uploaded hash.
    var uploadData = function uploadData(swarmUrl) {
      return function (data) {
        return request(swarmUrl + "/bzzr:/", {
          body: typeof data === "string" ? fromString(data) : data,
          method: "POST" });
      };
    };

    // String -> String -> String -> File -> Promise String
    //   Uploads a file to the Swarm manifest at a given hash, under a specific
    //   route. Returns a promise containing the uploaded hash.
    //   FIXME: for some reasons Swarm-Gateways is sometimes returning
    //   error 404Â (bad request), so we retry up to 3 times. Why?
    var uploadToManifest = function uploadToManifest(swarmUrl) {
      return function (hash) {
        return function (route) {
          return function (file) {
            var attempt = function attempt(n) {
              var slashRoute = route[0] === "/" ? route : "/" + route;
              var url$$1 = swarmUrl + "/bzz:/" + hash + slashRoute;
              var opt = {
                method: "PUT",
                headers: { "Content-Type": file.type },
                body: file.data };
              return request(url$$1, opt).then(function (response) {
                if (response.indexOf("error") !== -1) {
                  throw response;
                }
                return response;
              }).catch(function (e) {
                return n > 0 && attempt(n - 1);
              });
            };
            return attempt(3);
          };
        };
      };
    };

    // String -> {type: String, data: Uint8Array} -> Promise String
    var uploadFile = function uploadFile(swarmUrl) {
      return function (file) {
        return uploadDirectory(swarmUrl)({ "": file });
      };
    };

    // String -> String -> Promise String
    var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {
      return function (filePath) {
        return fsp.readFile(filePath).then(function (data) {
          return uploadFile(swarmUrl)({ type: mimetype.lookup(filePath), data: data });
        });
      };
    };

    // String -> Map String File -> Promise String
    //   Uploads a directory to Swarm. The directory is
    //   represented as a map of routes and files.
    //   A default path is encoded by having a "" route.
    var uploadDirectory = function uploadDirectory(swarmUrl) {
      return function (directory) {
        return uploadData(swarmUrl)("{}").then(function (hash) {
          var uploadRoute = function uploadRoute(route) {
            return function (hash) {
              return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);
            };
          };
          var uploadToHash = function uploadToHash(hash, route) {
            return hash.then(uploadRoute(route));
          };
          return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));
        });
      };
    };

    // String -> Promise String
    var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {
      return function (filePath) {
        return fsp.readFile(filePath).then(uploadData(swarmUrl));
      };
    };

    // String -> Nullable String -> String -> Promise String
    var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {
      return function (defaultPath) {
        return function (dirPath) {
          return files.directoryTree(dirPath).then(function (fullPaths) {
            return Promise.all(fullPaths.map(function (path$$1) {
              return fsp.readFile(path$$1);
            })).then(function (datas) {
              var paths = fullPaths.map(function (path$$1) {
                return path$$1.slice(dirPath.length);
              });
              var types = fullPaths.map(function (path$$1) {
                return mimetype.lookup(path$$1) || "text/plain";
              });
              return toMap(paths)(datas.map(function (data, i) {
                return { type: types[i], data: data };
              }));
            });
          }).then(function (directory) {
            return merge(defaultPath ? { "": directory[defaultPath] } : {})(directory);
          }).then(uploadDirectory(swarmUrl));
        };
      };
    };

    // String -> UploadInfo -> Promise String
    //   Simplified multi-type upload which calls the correct
    //   one based on the type of the argument given.
    var _upload = function _upload(swarmUrl) {
      return function (arg) {
        // Upload raw data from browser
        if (arg.pick === "data") {
          return pick.data().then(uploadData(swarmUrl));

          // Upload a file from browser
        } else if (arg.pick === "file") {
          return pick.file().then(uploadFile(swarmUrl));

          // Upload a directory from browser
        } else if (arg.pick === "directory") {
          return pick.directory().then(uploadDirectory(swarmUrl));

          // Upload directory/file from disk
        } else if (arg.path) {
          switch (arg.kind) {
            case "data":
              return uploadDataFromDisk(swarmUrl)(arg.path);
            case "file":
              return uploadFileFromDisk(swarmUrl)(arg.path);
            case "directory":
              return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);
          }
          // Upload UTF-8 string or raw data (buffer)
        } else if (arg.length || typeof arg === "string") {
          return uploadData(swarmUrl)(arg);

          // Upload directory with JSON
        } else if (arg instanceof Object) {
          return uploadDirectory(swarmUrl)(arg);
        }

        return Promise.reject(new Error("Bad arguments"));
      };
    };

    // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)
    //   Simplified multi-type download which calls the correct function based on
    //   the type of the argument given, and on whether the Swwarm address has a
    //   directory or a file.
    var _download = function _download(swarmUrl) {
      return function (hash) {
        return function (path$$1) {
          return isDirectory(swarmUrl)(hash).then(function (isDir) {
            if (isDir) {
              return path$$1 ? downloadDirectoryToDisk(swarmUrl)(hash)(path$$1) : downloadDirectory(swarmUrl)(hash);
            } else {
              return path$$1 ? downloadDataToDisk(swarmUrl)(hash)(path$$1) : downloadData(swarmUrl)(hash);
            }
          });
        };
      };
    };

    // String -> Promise String
    //   Downloads the Swarm binaries into a path. Returns a promise that only
    //   resolves when the exact Swarm file is there, and verified to be correct.
    //   If it was already there to begin with, skips the download.
    var downloadBinary = function downloadBinary(path$$1, archives) {
      var system = os$$1.platform().replace("win32", "windows") + "-" + (os$$1.arch() === "x64" ? "amd64" : "386");
      var archive = (archives || defaultArchives)[system];
      var archiveUrl = downloadUrl + archive.archive + ".tar.gz";
      var archiveMD5 = archive.archiveMD5;
      var binaryMD5 = archive.binaryMD5;
      return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path$$1);
    };

    // type SwarmSetup = {
    //   account : String,
    //   password : String,
    //   dataDir : String,
    //   binPath : String,
    //   ensApi : String,
    //   onDownloadProgress : Number ~> (),
    //   archives : [{
    //     archive: String,
    //     binaryMD5: String,
    //     archiveMD5: String
    //   }]
    // }

    // SwarmSetup ~> Promise Process
    //   Starts the Swarm process.
    var startProcess = function startProcess(swarmSetup) {
      return new Promise(function (resolve, reject) {
        var spawn = child_process$$1.spawn;


        var hasString = function hasString(str) {
          return function (buffer$$1) {
            return ('' + buffer$$1).indexOf(str) !== -1;
          };
        };
        var account = swarmSetup.account,
            password = swarmSetup.password,
            dataDir = swarmSetup.dataDir,
            ensApi = swarmSetup.ensApi,
            privateKey = swarmSetup.privateKey;
        var WAITING_PASSWORD = 0;
        var STARTING = 1;
        var LISTENING = 2;
        var PASSWORD_PROMPT_HOOK = "Passphrase";
        var LISTENING_HOOK = "Swarm http proxy started";

        var state = WAITING_PASSWORD;

        var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);

        var handleProcessOutput = function handleProcessOutput(data) {
          if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {
            setTimeout(function () {
              state = STARTING;
              swarmProcess.stdin.write(password + '\n');
            }, 500);
          } else if (hasString(LISTENING_HOOK)(data)) {
            state = LISTENING;
            clearTimeout(timeout);
            resolve(swarmProcess);
          }
        };

        swarmProcess.stdout.on('data', handleProcessOutput);
        swarmProcess.stderr.on('data', handleProcessOutput);
        var error = function error() {
          return reject(new Error("Couldn't start swarm process."));
        };
        var timeout = setTimeout(error, 20000);
      });
    };

    // Process ~> Promise ()
    //   Stops the Swarm process.
    var stopProcess = function stopProcess(process) {
      return new Promise(function (resolve, reject) {
        process.stderr.removeAllListeners('data');
        process.stdout.removeAllListeners('data');
        process.stdin.removeAllListeners('error');
        process.removeAllListeners('error');
        process.removeAllListeners('exit');
        process.kill('SIGINT');

        var killTimeout = setTimeout(function () {
          return process.kill('SIGKILL');
        }, 8000);

        process.once('close', function () {
          clearTimeout(killTimeout);
          resolve();
        });
      });
    };

    // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()
    //   Receives a Swarm configuration object and a callback function. It then
    //   checks if a local Swarm node is running. If no local Swarm is found, it
    //   downloads the Swarm binaries to the dataDir (if not there), checksums,
    //   starts the Swarm process and calls the callback function with an API
    //   object using the local node. That callback must return a promise which
    //   will resolve when it is done using the API, so that this function can
    //   close the Swarm process properly. Returns a promise that resolves when the
    //   user is done with the API and the Swarm process is closed.
    //   TODO: check if Swarm process is already running (improve `isAvailable`)
    var local = function local(swarmSetup) {
      return function (useAPI) {
        return _isAvailable("http://localhost:8500").then(function (isAvailable) {
          return isAvailable ? useAPI(at("http://localhost:8500")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {
            return (swarmSetup.onProgress || function () {})(data.length);
          }).then(function () {
            return startProcess(swarmSetup);
          }).then(function (process) {
            return useAPI(at("http://localhost:8500")).then(function () {
              return process;
            });
          }).then(stopProcess);
        });
      };
    };

    // String ~> Promise Bool
    //   Returns true if Swarm is available on `url`.
    //   Perfoms a test upload to determine that.
    //   TODO: improve this?
    var _isAvailable = function _isAvailable(swarmUrl) {
      var testFile = "test";
      var testHash = "c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7";
      return uploadData(swarmUrl)(testFile).then(function (hash) {
        return hash === testHash;
      }).catch(function () {
        return false;
      });
    };

    // String -> String ~> Promise Bool
    //   Returns a Promise which is true if that Swarm address is a directory.
    //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.
    //   TODO: improve this?
    var isDirectory = function isDirectory(swarmUrl) {
      return function (hash) {
        return downloadData(swarmUrl)(hash).then(function (data) {
          try {
            return !!JSON.parse(toString(data)).entries;
          } catch (e) {
            return false;
          }
        });
      };
    };

    // Uncurries a function; used to allow the f(x,y,z) style on exports.
    var uncurry = function uncurry(f) {
      return function (a, b, c, d, e) {
        var p;
        // Hardcoded because efficiency (`arguments` is very slow).
        if (typeof a !== "undefined") p = f(a);
        if (typeof b !== "undefined") p = f(b);
        if (typeof c !== "undefined") p = f(c);
        if (typeof d !== "undefined") p = f(d);
        if (typeof e !== "undefined") p = f(e);
        return p;
      };
    };

    // Uint8Array -> String
    var toString = function toString(uint8Array) {
      return bytes.toString(bytes.fromUint8Array(uint8Array));
    };

    // String -> Uint8Array
    var fromString = function fromString(string) {
      return bytes.toUint8Array(bytes.fromString(string));
    };

    // String -> SwarmAPI
    //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.
    var at = function at(swarmUrl) {
      return {
        download: function download(hash, path$$1) {
          return _download(swarmUrl)(hash)(path$$1);
        },
        downloadData: uncurry(downloadData(swarmUrl)),
        downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),
        downloadDirectory: uncurry(downloadDirectory(swarmUrl)),
        downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),
        downloadEntries: uncurry(downloadEntries(swarmUrl)),
        downloadRoutes: uncurry(downloadRoutes(swarmUrl)),
        isAvailable: function isAvailable() {
          return _isAvailable(swarmUrl);
        },
        upload: function upload(arg) {
          return _upload(swarmUrl)(arg);
        },
        uploadData: uncurry(uploadData(swarmUrl)),
        uploadFile: uncurry(uploadFile(swarmUrl)),
        uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),
        uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),
        uploadDirectory: uncurry(uploadDirectory(swarmUrl)),
        uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),
        uploadToManifest: uncurry(uploadToManifest(swarmUrl)),
        pick: pick,
        hash: hash,
        fromString: fromString,
        toString: toString
      };
    };

    return {
      at: at,
      local: local,
      download: _download,
      downloadBinary: downloadBinary,
      downloadData: downloadData,
      downloadDataToDisk: downloadDataToDisk,
      downloadDirectory: downloadDirectory,
      downloadDirectoryToDisk: downloadDirectoryToDisk,
      downloadEntries: downloadEntries,
      downloadRoutes: downloadRoutes,
      isAvailable: _isAvailable,
      startProcess: startProcess,
      stopProcess: stopProcess,
      upload: _upload,
      uploadData: uploadData,
      uploadDataFromDisk: uploadDataFromDisk,
      uploadFile: uploadFile,
      uploadFileFromDisk: uploadFileFromDisk,
      uploadDirectory: uploadDirectory,
      uploadDirectoryFromDisk: uploadDirectoryFromDisk,
      uploadToManifest: uploadToManifest,
      pick: pick,
      hash: hash,
      fromString: fromString,
      toString: toString
    };
  };

  var defaultArchives = ( archives$1 && archives ) || archives$1;

  var downloadUrl = "http://ethereum-mist.s3.amazonaws.com/swarm/";





  // Fixes issue that causes xhr-request-promise on Node.js to only accept Buffer
  var request = function request(url$$1, params) {
    var newParams = {};
    for (var key in params) {
      newParams[key] = params[key];
    }
    if (typeof newParams.body !== "undefined") {
      newParams.body = newParams.body instanceof Buffer ? newParams.body : new Buffer(newParams.body);
    }
    return xhrRequestPromise(url$$1, newParams);
  };

  var apiNode = swarm({
    fsp: fsPromise,
    files: files$1,
    os: os,
    path: path,
    child_process: child_process,
    defaultArchives: defaultArchives,
    mimetype: mimeTypes,
    request: request,
    downloadUrl: downloadUrl,
    bytes: bytes$2,
    hash: swarmHash_1,
    pick: pick$2
  });

  var Bzz = function Bzz(provider) {

      this.givenProvider = Bzz.givenProvider;

      if (provider && provider._requestManager) {
          provider = provider.currentProvider;
      }

      // only allow file picker when in browser
      if(typeof document !== 'undefined') {
          this.pick = apiNode.pick;
      }

      this.setProvider(provider);
  };

  // set default ethereum provider
  /* jshint ignore:start */
  Bzz.givenProvider = null;
  if(typeof ethereumProvider !== 'undefined' && ethereumProvider.bzz) {
      Bzz.givenProvider = ethereumProvider.bzz;
  }
  /* jshint ignore:end */

  Bzz.prototype.setProvider = function(provider) {
      // is ethereum provider
      if(underscore.isObject(provider) && underscore.isString(provider.bzz)) {
          provider = provider.bzz;
      // is no string, set default
      }
      // else if(!_.isString(provider)) {
      //      provider = 'http://swarm-gateways.net'; // default to gateway
      // }


      if(underscore.isString(provider)) {
          this.currentProvider = provider;
      } else {
          this.currentProvider = null;

          var noProviderError = new Error('No provider set, please set one using bzz.setProvider().');

          this.download = this.upload = this.isAvailable = function(){
              throw noProviderError;
          };

          return false;
      }

      // add functions
      this.download = apiNode.at(provider).download;
      this.upload = apiNode.at(provider).upload;
      this.isAvailable = apiNode.at(provider).isAvailable;

      return true;
  };


  var src$22 = Bzz;

  var require$$0$4 = ( _package$1 && _package ) || _package$1;

  var version$3 = require$$0$4.version;








  var Web3 = function Web3() {
      var _this = this;

      // sets _requestmanager etc
      src$14.packageInit(this, arguments);

      this.version = version$3;
      this.utils = src$4;

      this.eth = new src$20(this);
      this.shh = new src$21(this);
      this.bzz = new src$22(this);

      // overwrite package setProvider
      var setProvider = this.setProvider;
      this.setProvider = function (provider, net) {
          setProvider.apply(_this, arguments);

          this.eth.setProvider(provider, net);
          this.shh.setProvider(provider, net);
          this.bzz.setProvider(provider);

          return true;
      };
  };

  Web3.version = version$3;
  Web3.utils = src$4;
  Web3.modules = {
      Eth: src$20,
      Net: src$15,
      Personal: src$16,
      Shh: src$21,
      Bzz: src$22
  };

  src$14.addProviders(Web3);

  var src$23 = Web3;

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  /**
   * Settings for configuring Bitski.
   */
  var BitskiProviderSettings = /** @class */ (function () {
      /**
       * Create new instance of BitskiProviderSettings
       * @param authority Bitski OAuth URL
       * @param client_id Your application's Bitski client ID
       * @param redirect_uri URL to redirect to after log in
       * @param post_logout_redirect_uri URL to redirect to after log out
       */
      /* tslint:disable:variable-name */
      function BitskiProviderSettings(authority, client_id, redirect_uri, post_logout_redirect_uri) {
          /**
           * The type of response desired from the provider.
           */
          this.response_type = 'token id_token';
          /**
           * The OAuth scope being requested from Bitski.
           */
          this.scope = 'openid';
          /**
           * The URL for the page containing the call to `signinPopupCallback` to
           * handle the callback from Bitski.
           */
          /* tslint:disable:variable-name */
          this.popup_redirect_uri = this.redirect_uri;
          /**
           * The post-logout redirect URI for the popup method.
           */
          this.popup_post_logout_redirect_uri = this.popup_post_logout_redirect_uri;
          /**
           * The URL for the page containing the code handling the silent renew.
           */
          this.silent_redirect_uri = this.silent_redirect_uri;
          /**
           * Flag to indicate if there should be an automatic attempt to renew the
           * access token prior to its expiration. The attempt is made as a result
           * of the `accessTokenExpiring` event being raised.
           */
          this.automaticSilentRenew = true;
          /**
           * Number of milliseconds to wait for the silent renew to return before
           * assuming it has failed or timed out.
           */
          this.silentRequestTimeout = 10000;
          /**
           * Should OIDC protocol claims be removed from profile.
           */
          this.filterProtocolClaims = true;
          /**
           * Flag to control if additional identity data is loaded from the user
           * info endpoint in order to populate the user's profile.
           */
          this.loadUserInfo = true;
          /**
           * Features used to style and configure the popup window
           */
          this.popupWindowFeatures = 'location=no,toolbar=no,width=360,height=340,left=100,top=100;';
          this.authority = authority;
          this.client_id = client_id;
          this.redirect_uri = redirect_uri || window.location.href;
          this.popup_redirect_uri = redirect_uri || window.location.href;
          this.silent_redirect_uri = redirect_uri || window.location.href;
          this.post_logout_redirect_uri = post_logout_redirect_uri || window.location.href;
          this.popup_post_logout_redirect_uri = post_logout_redirect_uri || window.location.href;
      }
      return BitskiProviderSettings;
  }());

  var Dialog = /** @class */ (function () {
      function Dialog(content) {
          // check for an element passed as content or a selector corresponding to an element
          this.content = content.tagName ? content : document.querySelector(content);
          if (!this.content) {
              // otherwise content is text to be appended to the dialog body
              this.content = document.createElement('div');
              this.content.innerText = content;
          }
          this.create();
          this.body.appendChild(this.content);
          if (document.body) {
              this.render();
          }
          else {
              document.body.addEventListener('load', this.render.bind(this));
          }
      }
      Dialog.prototype.dismiss = function () {
          this.container.remove();
      };
      Dialog.prototype.create = function () {
          this.closeButton = this.createCloseButton();
          this.body = this.createBody();
          this.body.appendChild(this.content);
          this.dialog = this.createDialog();
          this.dialog.appendChild(this.closeButton);
          this.dialog.appendChild(this.body);
          this.container = this.createContainer();
          this.container.appendChild(this.dialog);
          return this.container;
      };
      Dialog.prototype.createCloseButton = function () {
          var closeButton = document.createElement('button');
          closeButton.innerHTML = closeSVG;
          closeButton.title = 'Close';
          closeButton.setAttribute('type', 'button');
          closeButton.style.position = 'absolute';
          closeButton.style.right = '12px';
          closeButton.style.top = '12px';
          closeButton.style.background = 'none';
          closeButton.style.border = 'none';
          closeButton.style.padding = '8px';
          closeButton.style.margin = '0';
          closeButton.style.cursor = 'pointer';
          closeButton.style.borderRadius = '16px';
          closeButton.style.outline = 'none';
          closeButton.addEventListener('click', this.dismiss.bind(this));
          return closeButton;
      };
      Dialog.prototype.createDialog = function () {
          var dialog = document.createElement('div');
          dialog.className = 'dialog';
          dialog.style.width = '490px';
          dialog.style.height = '1px';
          dialog.style.margin = '0 auto';
          dialog.style.position = 'relative';
          dialog.style.top = '50%';
          dialog.style.marginTop = '-170px';
          return dialog;
      };
      Dialog.prototype.createContainer = function () {
          var container = document.createElement('div');
          container.className = 'dialog-container';
          container.style.position = 'fixed';
          container.style.left = '0';
          container.style.right = '0';
          container.style.top = '0';
          container.style.bottom = '0';
          container.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
          container.style.zIndex = '1000';
          return container;
      };
      Dialog.prototype.createBody = function () {
          var body = document.createElement('div');
          body.className = 'dialog-body';
          body.style.backgroundColor = '#fff';
          body.style.maxHeight = '380px';
          body.style.overflow = 'hidden';
          body.style.borderRadius = '16px';
          body.style.boxShadow = '0px 0px 0px 1px rgba(0,0,0,0.1), 0px 10px 50px rgba(0,0,0,0.4)';
          return body;
      };
      Dialog.prototype.render = function () {
          document.body.appendChild(this.container);
          return this.dialog;
      };
      return Dialog;
  }());

  var OAuthProviderIntegrationType;
  (function (OAuthProviderIntegrationType) {
      OAuthProviderIntegrationType[OAuthProviderIntegrationType["IFRAME"] = 0] = "IFRAME";
      OAuthProviderIntegrationType[OAuthProviderIntegrationType["REDIRECT"] = 1] = "REDIRECT";
      OAuthProviderIntegrationType[OAuthProviderIntegrationType["POPUP"] = 2] = "POPUP";
      OAuthProviderIntegrationType[OAuthProviderIntegrationType["SILENT"] = 3] = "SILENT";
  })(OAuthProviderIntegrationType || (OAuthProviderIntegrationType = {}));
  window.web3 = window.web3 || null;
  /**
   * A class that extends Web3's HTTPProvider by adding OAuth to JSON-RPC calls
   */
  var OAuthHttpProvider = /** @class */ (function (_super) {
      __extends(OAuthHttpProvider, _super);
      /**
       * @param host JSON-RPC endpoint
       * @param timeout Timeout in seconds
       * @param settings settings object for configuring OAuth, see {@link BitskiProviderSettings}
       */
      function OAuthHttpProvider(host, timeout, settings) {
          var _this = _super.call(this, host, timeout, []) || this;
          /**
           * The current logged in `User`
           */
          _this.currentUser = null;
          /**
           * Determines how the authentication modals show up.
           */
          _this.authenticationIntegrationType = OAuthProviderIntegrationType.REDIRECT;
          /**
           * Cached sign in promise.
           */
          _this.currentSignInPromise = null;
          _this.userManager = new oidcClient.UserManager(settings);
          _this.host = host;
          _this.settings = settings;
          window.addEventListener('message', _this.receiveMessage.bind(_this), false);
          return _this;
      }
      OAuthHttpProvider.prototype.receiveMessage = function (event) {
          var originURL = new URL(event.origin);
          var redirectURL = new URL(this.settings.redirect_uri);
          if (originURL.hostname === redirectURL.hostname && this.currentUser === null) {
              this.didSignIn(event.data);
          }
      };
      /**
       * Sign in using the current settings.
       * @returns A promise for a user.
       */
      OAuthHttpProvider.prototype.signIn = function () {
          var _this = this;
          if (this.currentSignInPromise) {
              return this.currentSignInPromise;
          }
          this.currentSignInPromise = this.userManager.getUser().then(function (user) {
              if (typeof (user) === 'undefined' || user === null) {
                  throw Error('Not signed in');
              }
              if (user.expired) {
                  return _this.userManager.signinSilent();
              }
              return user;
          }).catch(function (err) {
              if (err.toString() !== 'Error: Not signed in') {
                  throw err;
              }
              if (window.opener) {
                  return _this.userManager.signinPopupCallback();
              }
              return _this.userManager.signinRedirectCallback();
          }).catch(function (err) {
              var noResponseState = 'Error: No state in response';
              var noStorageState = 'Error: No matching state found in storage';
              if (err.toString() !== noResponseState && err.toString() !== noStorageState) {
                  throw err;
              }
              switch (_this.authenticationIntegrationType) {
                  case OAuthProviderIntegrationType.REDIRECT:
                      return _this.userManager.signinRedirect({ state: 'some data' });
                  case OAuthProviderIntegrationType.IFRAME:
                      return _this.userManager.createSigninRequest().then(function (signInRequest) {
                          var iframe = document.createElement('iframe');
                          iframe.width = '400px';
                          iframe.height = '380px';
                          iframe.src = signInRequest.url;
                          iframe.frameBorder = '0';
                          _this.authenticationDialog = new Dialog(iframe);
                      });
                  case OAuthProviderIntegrationType.POPUP:
                      return _this.userManager.signinPopup({ state: 'some data' });
                  case OAuthProviderIntegrationType.SILENT:
                      return _this.userManager.signinSilent();
              }
          }).then(function (user) {
              if (user) {
                  _this.didSignIn(user);
              }
              return user;
          });
          return this.currentSignInPromise;
      };
      OAuthHttpProvider.prototype.didSignIn = function (user) {
          this.currentUser = user;
          if (window.parent !== window) {
              // We are in an IFRAME
              parent.postMessage(user, '*');
          }
          if (window.web3) {
              window.web3.eth.getAccounts().then(function (accounts) {
                  if (!window.web3.eth.defaultAccount)
                      window.web3.eth.defaultAccount = accounts[0];
              });
          }
          if (this.authenticationDialog) {
              this.authenticationDialog.dismiss();
          }
      };
      /**
       * Prepares a new XMLHttpRequest with the proper headers
       * @returns Request object that is ready for a payload.
       */
      OAuthHttpProvider.prototype._prepareRequest = function () {
          var request = new XMLHttpRequest();
          request.open('POST', this.host, true);
          request.setRequestHeader('Content-Type', 'application/json');
          if (typeof (this.currentUser) !== 'undefined' && this.currentUser !== null) {
              request.setRequestHeader('Authorization', "Bearer " + this.currentUser.access_token);
          }
          return request;
      };
      /**
       * Send a web3 / JSON-RPC request asynchronously.
       * @param payload The JSON-RPC request object to send
       * @param callback Handler function invoked when the request has completed.
       */
      OAuthHttpProvider.prototype.sendAsync = function (payload, callback) {
          return this.send(payload, callback);
      };
      return OAuthHttpProvider;
  }(src$8));

  var BITSKI_API_V1_HOST = 'https://api.bitski.com/v1';
  var BITSKI_OAUTH_HOST = 'https://account.bitski.com';
  var BITSKI_WEB_HOST = 'https://www.bitski.com';
  /**
   * A Web3 provider that connects to the Bitski service
   * @example
   * ```javascript
   * var provider = new BitskiProvider('MY_CLIENT_ID');
   * ```
   */
  var BitskiProvider = /** @class */ (function (_super) {
      __extends(BitskiProvider, _super);
      /**
       * @param clientId OAuth Client ID
       * @param networkName Network name
       * @param redirectUri Redirect URL, defaults to window.location.href
       * @param postLogoutRedirectUri Post logout redirect URL, defaults to window.location.href
       */
      function BitskiProvider(clientId, networkName, redirectUri, postLogoutRedirectUri) {
          if (networkName === void 0) { networkName = 'kovan'; }
          var _this = _super.call(this, BITSKI_API_V1_HOST + "/web3/" + networkName, 0, new BitskiProviderSettings(BITSKI_OAUTH_HOST, clientId, redirectUri, postLogoutRedirectUri)) || this;
          /**
           * Determines how the authorization modals show up for eth_call and eth_sendTransaction.
           */
          _this.authorizationIntegrationType = OAuthProviderIntegrationType.IFRAME;
          /**
           * Acts like metamask, won't try to auto sign in.
           */
          _this.locked = false;
          /**
           * Queued requests to be sent upon logging in.
           */
          _this.queuedSends = [];
          _this.pendingTransactions = [];
          _this.currentTransactionDialog = null;
          _this.currentTransactionWindow = null;
          _this.networkName = networkName;
          return _this;
      }
      /**
       * After sign in functionality
       * @param user User authentication object to flush send queue.
       */
      BitskiProvider.prototype.didSignIn = function (user) {
          _super.prototype.didSignIn.call(this, user);
          this.flushQueuedSends(user);
      };
      /**
       * Returns a boolean value that indicates whether the Web3 method
       * can be executed without being logged in.
       * @param method A web3 method name (ex: 'eth_sign')
       * @returns boolean for if the method can be executed without being logged in.
       */
      BitskiProvider.prototype.receiveMessage = function (event) {
          var _this = this;
          _super.prototype.receiveMessage.call(this, event);
          if (event.origin !== BITSKI_WEB_HOST) {
              return;
          }
          var response = event.data;
          this.pendingTransactions
              .filter(function (pendingTransaction) { return pendingTransaction.payload.id === response.id; })
              .forEach(function (transaction, index) {
              _this.pendingTransactions.splice(index, 1);
              transaction.callback(null, response);
              if (_this.currentTransactionDialog) {
                  _this.currentTransactionDialog.dismiss();
                  _this.currentTransactionDialog = null;
              }
          });
      };
      /**
       * Sends a Web3 request.
       * @param payload JSON-RPC request object to send.
       * @param callback Handler for send request. `function (e: Error, val: JSONRPCResponse) => void`
       */
      BitskiProvider.prototype.send = function (payload, callback) {
          if (this.currentUser) {
              this.sendAuthenticated(payload, this.currentUser, callback);
          }
          else if (this.requiresAuthentication(payload.method)) {
              this.queuedSends.push({ payload: payload, callback: callback });
              if (this.locked === false) {
                  this.signIn();
              }
          }
          else {
              _super.prototype.send.call(this, payload, callback);
          }
      };
      /**
       * Flush all queued requests
       * @param user User authentication object to send the requests through.
       */
      BitskiProvider.prototype.flushQueuedSends = function (user) {
          while (this.queuedSends.length > 0) {
              var queuedSend = this.queuedSends.pop();
              this.sendAuthenticated(queuedSend.payload, user, queuedSend.callback);
          }
      };
      /**
       * Determines if web3 method requires authentication
       * @param method a web3 method name (ex: 'eth_sign')
       */
      BitskiProvider.prototype.requiresAuthentication = function (method) {
          switch (method) {
              case 'eth_coinbase':
              case 'eth_accounts':
              case 'eth_accounts':
              case 'eth_sign':
              case 'eth_sendTransaction':
                  return true;
              default:
                  return true; // Temp, should eventually be false
          }
      };
      /**
       * Returns a boolean value that indicates whether the Web3 method
       * can be executed without the user's explicit authorization.
       * @param method a web3 method name (ex: 'eth_sign')
       */
      BitskiProvider.prototype.requiresAuthorization = function (method) {
          switch (method) {
              case 'eth_sign':
              case 'eth_sendTransaction':
                  return true;
              default:
                  return false;
          }
      };
      /**
       * Sends a request with authentication headers.
       * @param payload JSON-RPC request object to send.
       * @param user User authentication object to send the requests through.
       * @param callback Handler for send request. `function (e: Error, val: JSONRPCResponse) => void`
       */
      BitskiProvider.prototype.sendAuthenticated = function (payload, user, callback) {
          if (this.requiresAuthorization(payload.method)) {
              this.showAuthorization(payload, user, callback);
          }
          else {
              _super.prototype.send.call(this, payload, callback);
          }
      };
      /**
       * Presents an authorization request to the user.
       * @param payload JSON-RPC request object to send.
       * @param callback Handler for send request. `function (e: Error, val: JSONRPCResponse) => void`
       */
      BitskiProvider.prototype.showAuthorization = function (payload, user, callback) {
          if (this.currentTransactionDialog) {
              this.currentTransactionDialog.dismiss();
          }
          if (this.currentTransactionWindow) {
              this.currentTransactionWindow.close();
          }
          var ethSendTransactionUrl = BITSKI_WEB_HOST + "/eth-send-transaction";
          var encodedPayload = btoa(JSON.stringify(payload));
          var txnParams = "network=" + this.networkName + "&payload=" + encodedPayload + "&accessToken=" + user.access_token;
          switch (this.authorizationIntegrationType) {
              case OAuthProviderIntegrationType.IFRAME:
                  this.pendingTransactions.push({ payload: payload, callback: callback });
                  var iframe = document.createElement('iframe');
                  iframe.width = '490px';
                  iframe.height = '380px';
                  iframe.frameBorder = '0';
                  iframe.src = ethSendTransactionUrl + "?" + txnParams;
                  this.currentTransactionDialog = new Dialog(iframe);
                  break;
              case OAuthProviderIntegrationType.REDIRECT:
                  window.location.href = ethSendTransactionUrl + "?" + txnParams;
                  break;
              case OAuthProviderIntegrationType.POPUP:
                  var options = 'width=490,height=380,toolbar=0,menubar=0,location=0';
                  var newWindow = window.open(ethSendTransactionUrl + "?" + txnParams, 'Bitski Authorization', options);
                  if (window.focus) {
                      newWindow.focus();
                  }
                  this.currentTransactionWindow = newWindow;
                  break;
              case OAuthProviderIntegrationType.SILENT:
                  throw new Error('Silent authorization requests are not allowed');
          }
      };
      /**
       * Check whether we are connected to the server.
       * @returns boolean if we are connected.
       */
      BitskiProvider.prototype.isConnected = function () {
          return true;
      };
      return BitskiProvider;
  }(OAuthHttpProvider));

  /**
   * A buton used to connect to Bitski
   */
  var ConnectButton = /** @class */ (function () {
      /**
       * @param provider The BitskiProvider that will be used to sign in
       * @param existingDiv An existing div to turn into a connect button
       */
      function ConnectButton(provider, existingDiv) {
          if (existingDiv) {
              this.element = existingDiv;
          }
          else {
              this.element = document.createElement('button');
              this.setDefaultStyle();
          }
          this.provider = provider;
          this.element.addEventListener('click', this.signin.bind(this));
      }
      ConnectButton.prototype.signin = function () {
          var _this = this;
          this.provider.signIn().then(function (user) {
              if (_this.callback) {
                  _this.callback(null, user);
              }
          }).catch(function (error) {
              if (_this.callback) {
                  _this.callback(error, null);
              }
          });
      };
      ConnectButton.prototype.setDefaultStyle = function () {
          this.element.style.width = '256px';
          this.element.style.height = '44px';
          this.element.title = 'Continue with Bitski';
          this.element.innerText = 'Continue with Bitski';
      };
      return ConnectButton;
  }());

  /**
   * Deprecated, use new Bitski(...) instead
   */
  function InitializeWeb3(clientId, networkName, redirectUri, postLogoutRedirectUri) {
      if (networkName === void 0) { networkName = 'kovan'; }
      var provider = new BitskiProvider(clientId, networkName, redirectUri, postLogoutRedirectUri);
      var web3Client = new src$23(provider);
      return web3Client;
  }
  /**
   * Bitski SDK
   */
  var Bitski = /** @class */ (function () {
      /**
       * @param clientId OAuth Client ID
       * @param networkName Web3 network name, defaults to 'kovan'
       * @param redirectUri Redirect URL, defaults to window.URL
       * @param postLogoutRedirectUri Post logout redirect URL, defaults to window.URL
       */
      function Bitski(clientId, networkName, redirectUri, postLogoutRedirectUri) {
          if (networkName === void 0) { networkName = 'kovan'; }
          this.provider = new BitskiProvider(clientId, networkName, redirectUri, postLogoutRedirectUri);
          if (window.opener) {
              this.provider.userManager.signinPopupCallback();
          }
      }
      /**
       * Returns an initialized web3 API
       */
      Bitski.prototype.getWeb3 = function () {
          return new src$23(this.provider);
      };
      /**
       * @param existingDiv Existing element to turn into a Bitski connect button
       */
      Bitski.prototype.getConnectButton = function (existingDiv) {
          this.provider.authenticationIntegrationType = OAuthProviderIntegrationType.POPUP;
          this.provider.locked = true;
          return new ConnectButton(this.provider, existingDiv);
      };
      return Bitski;
  }());

  exports.InitializeWeb3 = InitializeWeb3;
  exports.Bitski = Bitski;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bitski.js.map
